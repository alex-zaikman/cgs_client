
/*! jQuery v1.10.1 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license
//@ sourceMappingURL=jquery-1.10.1.min.map
*/
(function(e,t){var n,r,i=typeof t,o=e.location,a=e.document,s=a.documentElement,l=e.jQuery,u=e.$,c={},p=[],f="1.10.1",d=p.concat,h=p.push,g=p.slice,m=p.indexOf,y=c.toString,v=c.hasOwnProperty,b=f.trim,x=function(e,t){return new x.fn.init(e,t,r)},w=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=/\S+/g,C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,k=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,E=/^[\],:{}\s]*$/,S=/(?:^|:|,)(?:\s*\[)+/g,A=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,j=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,D=/^-ms-/,L=/-([\da-z])/gi,H=function(e,t){return t.toUpperCase()},q=function(e){(a.addEventListener||"load"===e.type||"complete"===a.readyState)&&(_(),x.ready())},_=function(){a.addEventListener?(a.removeEventListener("DOMContentLoaded",q,!1),e.removeEventListener("load",q,!1)):(a.detachEvent("onreadystatechange",q),e.detachEvent("onload",q))};x.fn=x.prototype={jquery:f,constructor:x,init:function(e,n,r){var i,o;if(!e)return this;if("string"==typeof e){if(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof x?n[0]:n,x.merge(this,x.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:a,!0)),k.test(i[1])&&x.isPlainObject(n))for(i in n)x.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(o=a.getElementById(i[2]),o&&o.parentNode){if(o.id!==i[2])return r.find(e);this.length=1,this[0]=o}return this.context=a,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:"",length:0,toArray:function(){return g.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(g.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[1]||{},l=2),"object"==typeof s||x.isFunction(s)||(s={}),u===l&&(s=this,--l);u>l;l++)if(null!=(o=arguments[l]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(x.isPlainObject(r)||(n=x.isArray(r)))?(n?(n=!1,a=e&&x.isArray(e)?e:[]):a=e&&x.isPlainObject(e)?e:{},s[i]=x.extend(c,a,r)):r!==t&&(s[i]=r));return s},x.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=l),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){if(e===!0?!--x.readyWait:!x.isReady){if(!a.body)return setTimeout(x.ready);x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(a,[x]),x.fn.trigger&&x(a).trigger("ready").off("ready"))}},isFunction:function(e){return"function"===x.type(e)},isArray:Array.isArray||function(e){return"array"===x.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[y.call(e)]||"object":typeof e},isPlainObject:function(e){var n;if(!e||"object"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!v.call(e,"constructor")&&!v.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(r){return!1}if(x.support.ownLast)for(n in e)return v.call(e,n);for(n in e);return n===t||v.call(e,n)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||a;var r=k.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:"string"==typeof n&&(n=x.trim(n),n&&E.test(n.replace(A,"@").replace(j,"]").replace(S,"")))?Function("return "+n)():(x.error("Invalid JSON: "+n),t)},parseXML:function(n){var r,i;if(!n||"string"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&x.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(D,"ms-").replace(L,H)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:b&&!b.call("\ufeff\u00a0")?function(e){return null==e?"":b.call(e)}:function(e){return null==e?"":(e+"").replace(C,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?x.merge(n,"string"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(m)return m.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if("number"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return d.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return"string"==typeof n&&(o=e[n],n=e,e=o),x.isFunction(e)?(r=g.call(arguments,2),i=function(){return e.apply(n||this,r.concat(g.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):t},access:function(e,n,r,i,o,a,s){var l=0,u=e.length,c=null==r;if("object"===x.type(r)){o=!0;for(l in r)x.access(e,n,l,r[l],!0,a,s)}else if(i!==t&&(o=!0,x.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(x(e),n)})),n))for(;u>l;l++)n(e[l],r,s?i:i.call(e[l],l,n(e[l],r)));return o?e:c?n.call(e):u?n(e[0],r):a},now:function(){return(new Date).getTime()},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),x.ready.promise=function(t){if(!n)if(n=x.Deferred(),"complete"===a.readyState)setTimeout(x.ready);else if(a.addEventListener)a.addEventListener("DOMContentLoaded",q,!1),e.addEventListener("load",q,!1);else{a.attachEvent("onreadystatechange",q),e.attachEvent("onload",q);var r=!1;try{r=null==e.frameElement&&a.documentElement}catch(i){}r&&r.doScroll&&function o(){if(!x.isReady){try{r.doScroll("left")}catch(e){return setTimeout(o,50)}_(),x.ready()}}()}return n.promise(t)},x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){c["[object "+t+"]"]=t.toLowerCase()});function M(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}r=x(a),function(e,t){var n,r,i,o,a,s,l,u,c,p,f,d,h,g,m,y,v,b="sizzle"+-new Date,w=e.document,T=0,C=0,N=lt(),k=lt(),E=lt(),S=!1,A=function(){return 0},j=typeof t,D=1<<31,L={}.hasOwnProperty,H=[],q=H.pop,_=H.push,M=H.push,O=H.slice,F=H.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",W=R.replace("w","w#"),$="\\["+P+"*("+R+")"+P+"*(?:([*^$|!~]?=)"+P+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+W+")|)|)"+P+"*\\]",I=":("+R+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+$.replace(3,8)+")*)|.*)\\)|)",z=RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),X=RegExp("^"+P+"*,"+P+"*"),U=RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),V=RegExp(P+"*[+~]"),Y=RegExp("="+P+"*([^\\]'\"]*)"+P+"*\\]","g"),J=RegExp(I),G=RegExp("^"+W+"$"),Q={ID:RegExp("^#("+R+")"),CLASS:RegExp("^\\.("+R+")"),TAG:RegExp("^("+R.replace("w","w*")+")"),ATTR:RegExp("^"+$),PSEUDO:RegExp("^"+I),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:RegExp("^(?:"+B+")$","i"),needsContext:RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,et=/^(?:input|select|textarea|button)$/i,tt=/^h\d$/i,nt=/'|\\/g,rt=RegExp("\\\\([\\da-f]{1,6}"+P+"?|("+P+")|.)","ig"),it=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{M.apply(H=O.call(w.childNodes),w.childNodes),H[w.childNodes.length].nodeType}catch(ot){M={apply:H.length?function(e,t){_.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function at(e,t,n,i){var o,a,s,l,u,c,d,m,y,x;if((t?t.ownerDocument||t:w)!==f&&p(t),t=t||f,n=n||[],!e||"string"!=typeof e)return n;if(1!==(l=t.nodeType)&&9!==l)return[];if(h&&!i){if(o=Z.exec(e))if(s=o[1]){if(9===l){if(a=t.getElementById(s),!a||!a.parentNode)return n;if(a.id===s)return n.push(a),n}else if(t.ownerDocument&&(a=t.ownerDocument.getElementById(s))&&v(t,a)&&a.id===s)return n.push(a),n}else{if(o[2])return M.apply(n,t.getElementsByTagName(e)),n;if((s=o[3])&&r.getElementsByClassName&&t.getElementsByClassName)return M.apply(n,t.getElementsByClassName(s)),n}if(r.qsa&&(!g||!g.test(e))){if(m=d=b,y=t,x=9===l&&e,1===l&&"object"!==t.nodeName.toLowerCase()){c=bt(e),(d=t.getAttribute("id"))?m=d.replace(nt,"\\$&"):t.setAttribute("id",m),m="[id='"+m+"'] ",u=c.length;while(u--)c[u]=m+xt(c[u]);y=V.test(e)&&t.parentNode||t,x=c.join(",")}if(x)try{return M.apply(n,y.querySelectorAll(x)),n}catch(T){}finally{d||t.removeAttribute("id")}}}return At(e.replace(z,"$1"),t,n,i)}function st(e){return K.test(e+"")}function lt(){var e=[];function t(n,r){return e.push(n+=" ")>o.cacheLength&&delete t[e.shift()],t[n]=r}return t}function ut(e){return e[b]=!0,e}function ct(e){var t=f.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function pt(e,t,n){e=e.split("|");var r,i=e.length,a=n?null:t;while(i--)(r=o.attrHandle[e[i]])&&r!==t||(o.attrHandle[e[i]]=a)}function ft(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:e[t]===!0?t.toLowerCase():null}function dt(e,t){return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}function ht(e){return"input"===e.nodeName.toLowerCase()?e.defaultValue:t}function gt(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function mt(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function yt(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function vt(e){return ut(function(t){return t=+t,ut(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}s=at.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},r=at.support={},p=at.setDocument=function(e){var n=e?e.ownerDocument||e:w,i=n.parentWindow;return n!==f&&9===n.nodeType&&n.documentElement?(f=n,d=n.documentElement,h=!s(n),i&&i.frameElement&&i.attachEvent("onbeforeunload",function(){p()}),r.attributes=ct(function(e){return e.innerHTML="<a href='#'></a>",pt("type|href|height|width",dt,"#"===e.firstChild.getAttribute("href")),pt(B,ft,null==e.getAttribute("disabled")),e.className="i",!e.getAttribute("className")}),r.input=ct(function(e){return e.innerHTML="<input>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}),pt("value",ht,r.attributes&&r.input),r.getElementsByTagName=ct(function(e){return e.appendChild(n.createComment("")),!e.getElementsByTagName("*").length}),r.getElementsByClassName=ct(function(e){return e.innerHTML="<div class='a'></div><div class='a i'></div>",e.firstChild.className="i",2===e.getElementsByClassName("i").length}),r.getById=ct(function(e){return d.appendChild(e).id=b,!n.getElementsByName||!n.getElementsByName(b).length}),r.getById?(o.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},o.filter.ID=function(e){var t=e.replace(rt,it);return function(e){return e.getAttribute("id")===t}}):(delete o.find.ID,o.filter.ID=function(e){var t=e.replace(rt,it);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode("id");return n&&n.value===t}}),o.find.TAG=r.getElementsByTagName?function(e,n){return typeof n.getElementsByTagName!==j?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},o.find.CLASS=r.getElementsByClassName&&function(e,n){return typeof n.getElementsByClassName!==j&&h?n.getElementsByClassName(e):t},m=[],g=[],(r.qsa=st(n.querySelectorAll))&&(ct(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||g.push("\\["+P+"*(?:value|"+B+")"),e.querySelectorAll(":checked").length||g.push(":checked")}),ct(function(e){var t=n.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("t",""),e.querySelectorAll("[t^='']").length&&g.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll(":enabled").length||g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(r.matchesSelector=st(y=d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ct(function(e){r.disconnectedMatch=y.call(e,"div"),y.call(e,"[s!='']:x"),m.push("!=",I)}),g=g.length&&RegExp(g.join("|")),m=m.length&&RegExp(m.join("|")),v=st(d.contains)||d.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},r.sortDetached=ct(function(e){return 1&e.compareDocumentPosition(n.createElement("div"))}),A=d.compareDocumentPosition?function(e,t){if(e===t)return S=!0,0;var i=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t);return i?1&i||!r.sortDetached&&t.compareDocumentPosition(e)===i?e===n||v(w,e)?-1:t===n||v(w,t)?1:c?F.call(c,e)-F.call(c,t):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return S=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:c?F.call(c,e)-F.call(c,t):0;if(o===a)return gt(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?gt(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},n):f},at.matches=function(e,t){return at(e,null,null,t)},at.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&p(e),t=t.replace(Y,"='$1']"),!(!r.matchesSelector||!h||m&&m.test(t)||g&&g.test(t)))try{var n=y.call(e,t);if(n||r.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(i){}return at(t,f,null,[e]).length>0},at.contains=function(e,t){return(e.ownerDocument||e)!==f&&p(e),v(e,t)},at.attr=function(e,n){(e.ownerDocument||e)!==f&&p(e);var i=o.attrHandle[n.toLowerCase()],a=i&&L.call(o.attrHandle,n.toLowerCase())?i(e,n,!h):t;return a===t?r.attributes||!h?e.getAttribute(n):(a=e.getAttributeNode(n))&&a.specified?a.value:null:a},at.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},at.uniqueSort=function(e){var t,n=[],i=0,o=0;if(S=!r.detectDuplicates,c=!r.sortStable&&e.slice(0),e.sort(A),S){while(t=e[o++])t===e[o]&&(i=n.push(o));while(i--)e.splice(n[i],1)}return e},a=at.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=a(t);return n},o=at.selectors={cacheLength:50,createPseudo:ut,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(rt,it),e[3]=(e[4]||e[5]||"").replace(rt,it),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||at.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&at.error(e[0]),e},PSEUDO:function(e){var n,r=!e[5]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]&&e[4]!==t?e[2]=e[4]:r&&J.test(r)&&(n=bt(r,!0))&&(n=r.indexOf(")",r.length-n)-r.length)&&(e[0]=e[0].slice(0,n),e[2]=r.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(rt,it).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=N[e+" "];return t||(t=RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&N(e,function(e){return t.test("string"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=at.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,p,f,d,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[b]||(m[b]={}),u=c[e]||[],d=u[0]===T&&u[1],f=u[0]===T&&u[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[T,d,f];break}}else if(v&&(u=(t[b]||(t[b]={}))[e])&&u[0]===T)f=u[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[b]||(p[b]={}))[e]=[T,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=o.pseudos[e]||o.setFilters[e.toLowerCase()]||at.error("unsupported pseudo: "+e);return r[b]?r(t):r.length>1?(n=[e,e,"",t],o.setFilters.hasOwnProperty(e.toLowerCase())?ut(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=F.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ut(function(e){var t=[],n=[],r=l(e.replace(z,"$1"));return r[b]?ut(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ut(function(e){return function(t){return at(e,t).length>0}}),contains:ut(function(e){return function(t){return(t.textContent||t.innerText||a(t)).indexOf(e)>-1}}),lang:ut(function(e){return G.test(e||"")||at.error("unsupported lang: "+e),e=e.replace(rt,it).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===d},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!o.pseudos.empty(e)},header:function(e){return tt.test(e.nodeName)},input:function(e){return et.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:vt(function(){return[0]}),last:vt(function(e,t){return[t-1]}),eq:vt(function(e,t,n){return[0>n?n+t:n]}),even:vt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:vt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:vt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:vt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[n]=mt(n);for(n in{submit:!0,reset:!0})o.pseudos[n]=yt(n);function bt(e,t){var n,r,i,a,s,l,u,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,l=[],u=o.preFilter;while(s){(!n||(r=X.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),l.push(i=[])),n=!1,(r=U.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(z," ")}),s=s.slice(n.length));for(a in o.filter)!(r=Q[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),i.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?at.error(e):k(e,l).slice(0)}function xt(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function wt(e,t,n){var r=t.dir,o=n&&"parentNode"===r,a=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||o)return e(t,n,i)}:function(t,n,s){var l,u,c,p=T+" "+a;if(s){while(t=t[r])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[r])if(1===t.nodeType||o)if(c=t[b]||(t[b]={}),(u=c[r])&&u[0]===p){if((l=u[1])===!0||l===i)return l===!0}else if(u=c[r]=[p],u[1]=e(t,n,s)||i,u[1]===!0)return!0}}function Tt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ct(e,t,n,r,i){var o,a=[],s=0,l=e.length,u=null!=t;for(;l>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),u&&t.push(s));return a}function Nt(e,t,n,r,i,o){return r&&!r[b]&&(r=Nt(r)),i&&!i[b]&&(i=Nt(i,o)),ut(function(o,a,s,l){var u,c,p,f=[],d=[],h=a.length,g=o||St(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:Ct(g,f,e,s,l),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,l),r){u=Ct(y,d),r(u,[],s,l),c=u.length;while(c--)(p=u[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){u=[],c=y.length;while(c--)(p=y[c])&&u.push(m[c]=p);i(null,y=[],u,l)}c=y.length;while(c--)(p=y[c])&&(u=i?F.call(o,p):f[c])>-1&&(o[u]=!(a[u]=p))}}else y=Ct(y===a?y.splice(h,y.length):y),i?i(null,a,y,l):M.apply(a,y)})}function kt(e){var t,n,r,i=e.length,a=o.relative[e[0].type],s=a||o.relative[" "],l=a?1:0,c=wt(function(e){return e===t},s,!0),p=wt(function(e){return F.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;i>l;l++)if(n=o.relative[e[l].type])f=[wt(Tt(f),n)];else{if(n=o.filter[e[l].type].apply(null,e[l].matches),n[b]){for(r=++l;i>r;r++)if(o.relative[e[r].type])break;return Nt(l>1&&Tt(f),l>1&&xt(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(z,"$1"),n,r>l&&kt(e.slice(l,r)),i>r&&kt(e=e.slice(r)),i>r&&xt(e))}f.push(n)}return Tt(f)}function Et(e,t){var n=0,r=t.length>0,a=e.length>0,s=function(s,l,c,p,d){var h,g,m,y=[],v=0,b="0",x=s&&[],w=null!=d,C=u,N=s||a&&o.find.TAG("*",d&&l.parentNode||l),k=T+=null==C?1:Math.random()||.1;for(w&&(u=l!==f&&l,i=n);null!=(h=N[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,l,c)){p.push(h);break}w&&(T=k,i=++n)}r&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,r&&b!==v){g=0;while(m=t[g++])m(x,y,l,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=q.call(p));y=Ct(y)}M.apply(p,y),w&&!s&&y.length>0&&v+t.length>1&&at.uniqueSort(p)}return w&&(T=k,u=C),x};return r?ut(s):s}l=at.compile=function(e,t){var n,r=[],i=[],o=E[e+" "];if(!o){t||(t=bt(e)),n=t.length;while(n--)o=kt(t[n]),o[b]?r.push(o):i.push(o);o=E(e,Et(i,r))}return o};function St(e,t,n){var r=0,i=t.length;for(;i>r;r++)at(e,t[r],n);return n}function At(e,t,n,i){var a,s,u,c,p,f=bt(e);if(!i&&1===f.length){if(s=f[0]=f[0].slice(0),s.length>2&&"ID"===(u=s[0]).type&&r.getById&&9===t.nodeType&&h&&o.relative[s[1].type]){if(t=(o.find.ID(u.matches[0].replace(rt,it),t)||[])[0],!t)return n;e=e.slice(s.shift().value.length)}a=Q.needsContext.test(e)?0:s.length;while(a--){if(u=s[a],o.relative[c=u.type])break;if((p=o.find[c])&&(i=p(u.matches[0].replace(rt,it),V.test(s[0].type)&&t.parentNode||t))){if(s.splice(a,1),e=i.length&&xt(s),!e)return M.apply(n,i),n;break}}}return l(e,f)(i,t,!h,n,V.test(e)),n}o.pseudos.nth=o.pseudos.eq;function jt(){}jt.prototype=o.filters=o.pseudos,o.setFilters=new jt,r.sortStable=b.split("").sort(A).join("")===b,p(),[0,0].sort(A),r.detectDuplicates=S,x.find=at,x.expr=at.selectors,x.expr[":"]=x.expr.pseudos,x.unique=at.uniqueSort,x.text=at.getText,x.isXMLDoc=at.isXML,x.contains=at.contains}(e);var O={};function F(e){var t=O[e]={};return x.each(e.match(T)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e="string"==typeof e?O[e]||F(e):x.extend({},e);var n,r,i,o,a,s,l=[],u=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=l.length,n=!0;l&&o>a;a++)if(l[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,l&&(u?u.length&&c(u.shift()):r?l=[]:p.disable())},p={add:function(){if(l){var t=l.length;(function i(t){x.each(t,function(t,n){var r=x.type(n);"function"===r?e.unique&&p.has(n)||l.push(n):n&&n.length&&"string"!==r&&i(n)})})(arguments),n?o=l.length:r&&(s=t,c(r))}return this},remove:function(){return l&&x.each(arguments,function(e,t){var r;while((r=x.inArray(t,l,r))>-1)l.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?x.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],o=0,this},disable:function(){return l=u=r=t,this},disabled:function(){return!l},lock:function(){return u=t,r||p.disable(),this},locked:function(){return!u},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!l||i&&!u||(n?u.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},x.extend({Deferred:function(e){var t=[["resolve","done",x.Callbacks("once memory"),"resolved"],["reject","fail",x.Callbacks("once memory"),"rejected"],["notify","progress",x.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var a=o[0],s=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=g.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?g.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,l,u;if(r>1)for(s=Array(r),l=Array(r),u=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(a(t,u,n)).fail(o.reject).progress(a(t,l,s)):--i;return i||o.resolveWith(u,n),o.promise()}}),x.support=function(t){var n,r,o,s,l,u,c,p,f,d=a.createElement("div");if(d.setAttribute("className","t"),d.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=d.getElementsByTagName("*")||[],r=d.getElementsByTagName("a")[0],!r||!r.style||!n.length)return t;s=a.createElement("select"),u=s.appendChild(a.createElement("option")),o=d.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t.getSetAttribute="t"!==d.className,t.leadingWhitespace=3===d.firstChild.nodeType,t.tbody=!d.getElementsByTagName("tbody").length,t.htmlSerialize=!!d.getElementsByTagName("link").length,t.style=/top/.test(r.getAttribute("style")),t.hrefNormalized="/a"===r.getAttribute("href"),t.opacity=/^0.5/.test(r.style.opacity),t.cssFloat=!!r.style.cssFloat,t.checkOn=!!o.value,t.optSelected=u.selected,t.enctype=!!a.createElement("form").enctype,t.html5Clone="<:nav></:nav>"!==a.createElement("nav").cloneNode(!0).outerHTML,t.inlineBlockNeedsLayout=!1,t.shrinkWrapBlocks=!1,t.pixelPosition=!1,t.deleteExpando=!0,t.noCloneEvent=!0,t.reliableMarginRight=!0,t.boxSizingReliable=!0,o.checked=!0,t.noCloneChecked=o.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!u.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}o=a.createElement("input"),o.setAttribute("value",""),t.input=""===o.getAttribute("value"),o.value="t",o.setAttribute("type","radio"),t.radioValue="t"===o.value,o.setAttribute("checked","t"),o.setAttribute("name","t"),l=a.createDocumentFragment(),l.appendChild(o),t.appendChecked=o.checked,t.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent("onclick",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c="on"+f,"t"),t[f+"Bubbles"]=c in e||d.attributes[c].expando===!1;d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===d.style.backgroundClip;for(f in x(t))break;return t.ownLast="0"!==f,x(function(){var n,r,o,s="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",l=a.getElementsByTagName("body")[0];l&&(n=a.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",l.appendChild(n).appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",o=d.getElementsByTagName("td"),o[0].style.cssText="padding:0;margin:0;border:0;display:none",p=0===o[0].offsetHeight,o[0].style.display="",o[1].style.display="none",t.reliableHiddenOffsets=p&&0===o[0].offsetHeight,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",x.swap(l,null!=l.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===d.offsetWidth}),e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(d,null)||{width:"4px"}).width,r=d.appendChild(a.createElement("div")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width="0",d.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML="",d.style.cssText=s+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display="block",d.innerHTML="<div></div>",d.firstChild.style.width="5px",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(l.style.zoom=1)),l.removeChild(n),n=d=o=r=null)
}),n=s=l=u=r=o=null,t}({});var B=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,P=/([A-Z])/g;function R(e,n,r,i){if(x.acceptData(e)){var o,a,s=x.expando,l=e.nodeType,u=l?x.cache:e,c=l?e[s]:e[s]&&s;if(c&&u[c]&&(i||u[c].data)||r!==t||"string"!=typeof n)return c||(c=l?e[s]=p.pop()||x.guid++:s),u[c]||(u[c]=l?{}:{toJSON:x.noop}),("object"==typeof n||"function"==typeof n)&&(i?u[c]=x.extend(u[c],n):u[c].data=x.extend(u[c].data,n)),a=u[c],i||(a.data||(a.data={}),a=a.data),r!==t&&(a[x.camelCase(n)]=r),"string"==typeof n?(o=a[n],null==o&&(o=a[x.camelCase(n)])):o=a,o}}function W(e,t,n){if(x.acceptData(e)){var r,i,o=e.nodeType,a=o?x.cache:e,s=o?e[x.expando]:x.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){x.isArray(t)?t=t.concat(x.map(t,x.camelCase)):t in r?t=[t]:(t=x.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;while(i--)delete r[t[i]];if(n?!I(r):!x.isEmptyObject(r))return}(n||(delete a[s].data,I(a[s])))&&(o?x.cleanData([e],!0):x.support.deleteExpando||a!=a.window?delete a[s]:a[s]=null)}}}x.extend({cache:{},noData:{applet:!0,embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?x.cache[e[x.expando]]:e[x.expando],!!e&&!I(e)},data:function(e,t,n){return R(e,t,n)},removeData:function(e,t){return W(e,t)},_data:function(e,t,n){return R(e,t,n,!0)},_removeData:function(e,t){return W(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&x.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),x.fn.extend({data:function(e,n){var r,i,o=null,a=0,s=this[0];if(e===t){if(this.length&&(o=x.data(s),1===s.nodeType&&!x._data(s,"parsedAttrs"))){for(r=s.attributes;r.length>a;a++)i=r[a].name,0===i.indexOf("data-")&&(i=x.camelCase(i.slice(5)),$(s,i,o[i]));x._data(s,"parsedAttrs",!0)}return o}return"object"==typeof e?this.each(function(){x.data(this,e)}):arguments.length>1?this.each(function(){x.data(this,e,n)}):s?$(s,e,x.data(s,e)):null},removeData:function(e){return this.each(function(){x.removeData(this,e)})}});function $(e,n,r){if(r===t&&1===e.nodeType){var i="data-"+n.replace(P,"-$1").toLowerCase();if(r=e.getAttribute(i),"string"==typeof r){try{r="true"===r?!0:"false"===r?!1:"null"===r?null:+r+""===r?+r:B.test(r)?x.parseJSON(r):r}catch(o){}x.data(e,n,r)}else r=t}return r}function I(e){var t;for(t in e)if(("data"!==t||!x.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}x.extend({queue:function(e,n,r){var i;return e?(n=(n||"fx")+"queue",i=x._data(e,n),r&&(!i||x.isArray(r)?i=x._data(e,n,x.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t),a=function(){x.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return x._data(e,n)||x._data(e,n,{empty:x.Callbacks("once memory").add(function(){x._removeData(e,t+"queue"),x._removeData(e,n)})})}}),x.fn.extend({queue:function(e,n){var r=2;return"string"!=typeof e&&(n=e,e="fx",r--),r>arguments.length?x.queue(this[0],e):n===t?this:this.each(function(){var t=x.queue(this,e,n);x._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},delay:function(e,t){return e=x.fx?x.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,o=x.Deferred(),a=this,s=this.length,l=function(){--i||o.resolveWith(a,[a])};"string"!=typeof e&&(n=e,e=t),e=e||"fx";while(s--)r=x._data(a[s],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(l));return l(),o.promise(n)}});var z,X,U=/[\t\r\n\f]/g,V=/\r/g,Y=/^(?:input|select|textarea|button|object)$/i,J=/^(?:a|area)$/i,G=/^(?:checked|selected)$/i,Q=x.support.getSetAttribute,K=x.support.input;x.fn.extend({attr:function(e,t){return x.access(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})},prop:function(e,t){return x.access(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return e=x.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,l="string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(T)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(U," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=x.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,l=0===arguments.length||"string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(T)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(U," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?x.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e,r="boolean"==typeof t;return x.isFunction(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var o,a=0,s=x(this),l=t,u=e.match(T)||[];while(o=u[a++])l=r?l:!s.hasClass(o),s[l?"addClass":"removeClass"](o)}else(n===i||"boolean"===n)&&(this.className&&x._data(this,"__className__",this.className),this.className=this.className||e===!1?"":x._data(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(U," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=x.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(o=i?e.call(this,n,x(this).val()):e,null==o?o="":"number"==typeof o?o+="":x.isArray(o)&&(o=x.map(o,function(e){return null==e?"":e+""})),r=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()],r&&"set"in r&&r.set(this,o,"value")!==t||(this.value=o))});if(o)return r=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()],r&&"get"in r&&(n=r.get(o,"value"))!==t?n:(n=o.value,"string"==typeof n?n.replace(V,""):null==n?"":n)}}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,l=0>i?s:o?i:0;for(;s>l;l++)if(n=r[l],!(!n.selected&&l!==i||(x.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&x.nodeName(n.parentNode,"optgroup"))){if(t=x(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n,r,i=e.options,o=x.makeArray(t),a=i.length;while(a--)r=i[a],(r.selected=x.inArray(x(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,n,r){var o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===i?x.prop(e,n,r):(1===s&&x.isXMLDoc(e)||(n=n.toLowerCase(),o=x.attrHooks[n]||(x.expr.match.bool.test(n)?X:z)),r===t?o&&"get"in o&&null!==(a=o.get(e,n))?a:(a=x.find.attr(e,n),null==a?t:a):null!==r?o&&"set"in o&&(a=o.set(e,r,n))!==t?a:(e.setAttribute(n,r+""),r):(x.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(T);if(o&&1===e.nodeType)while(n=o[i++])r=x.propFix[n]||n,x.expr.match.bool.test(n)?K&&Q||!G.test(n)?e[r]=!1:e[x.camelCase("default-"+n)]=e[r]=!1:x.attr(e,n,""),e.removeAttribute(Q?n:r)},attrHooks:{type:{set:function(e,t){if(!x.support.radioValue&&"radio"===t&&x.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!x.isXMLDoc(e),a&&(n=x.propFix[n]||n,o=x.propHooks[n]),r!==t?o&&"set"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&"get"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):Y.test(e.nodeName)||J.test(e.nodeName)&&e.href?0:-1}}}}),X={set:function(e,t,n){return t===!1?x.removeAttr(e,n):K&&Q||!G.test(n)?e.setAttribute(!Q&&x.propFix[n]||n,n):e[x.camelCase("default-"+n)]=e[n]=!0,n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,n){var r=x.expr.attrHandle[n]||x.find.attr;x.expr.attrHandle[n]=K&&Q||!G.test(n)?function(e,n,i){var o=x.expr.attrHandle[n],a=i?t:(x.expr.attrHandle[n]=t)!=r(e,n,i)?n.toLowerCase():null;return x.expr.attrHandle[n]=o,a}:function(e,n,r){return r?t:e[x.camelCase("default-"+n)]?n.toLowerCase():null}}),K&&Q||(x.attrHooks.value={set:function(e,n,r){return x.nodeName(e,"input")?(e.defaultValue=n,t):z&&z.set(e,n,r)}}),Q||(z={set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+="","value"===r||n===e.getAttribute(r)?n:t}},x.expr.attrHandle.id=x.expr.attrHandle.name=x.expr.attrHandle.coords=function(e,n,r){var i;return r?t:(i=e.getAttributeNode(n))&&""!==i.value?i.value:null},x.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&r.specified?r.value:t},set:z.set},x.attrHooks.contenteditable={set:function(e,t,n){z.set(e,""===t?!1:t,n)}},x.each(["width","height"],function(e,n){x.attrHooks[n]={set:function(e,r){return""===r?(e.setAttribute(n,"auto"),r):t}}})),x.support.hrefNormalized||x.each(["href","src"],function(e,t){x.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),x.support.style||(x.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+""}}),x.support.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.support.enctype||(x.propFix.enctype="encoding"),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,n){return x.isArray(n)?e.checked=x.inArray(x(e).val(),n)>=0:t}},x.support.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\.(.+)|)$/;function it(){return!0}function ot(){return!1}function at(){try{return a.activeElement}catch(e){}}x.event={global:{},add:function(e,n,r,o,a){var s,l,u,c,p,f,d,h,g,m,y,v=x._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=x.guid++),(l=v.events)||(l=v.events={}),(f=v.handle)||(f=v.handle=function(e){return typeof x===i||e&&x.event.triggered===e.type?t:x.event.dispatch.apply(f.elem,arguments)},f.elem=e),n=(n||"").match(T)||[""],u=n.length;while(u--)s=rt.exec(n[u])||[],g=y=s[1],m=(s[2]||"").split(".").sort(),g&&(p=x.event.special[g]||{},g=(a?p.delegateType:p.bindType)||g,p=x.event.special[g]||{},d=x.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&x.expr.match.needsContext.test(a),namespace:m.join(".")},c),(h=l[g])||(h=l[g]=[],h.delegateCount=0,p.setup&&p.setup.call(e,o,m,f)!==!1||(e.addEventListener?e.addEventListener(g,f,!1):e.attachEvent&&e.attachEvent("on"+g,f))),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,d):h.push(d),x.event.global[g]=!0);e=null}},remove:function(e,t,n,r,i){var o,a,s,l,u,c,p,f,d,h,g,m=x.hasData(e)&&x._data(e);if(m&&(c=m.events)){t=(t||"").match(T)||[""],u=t.length;while(u--)if(s=rt.exec(t[u])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){p=x.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=c[d]||[],s=s[2]&&RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=f.length;while(o--)a=f[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,p.remove&&p.remove.call(e,a));l&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||x.removeEvent(e,d,m.handle),delete c[d])}else for(d in c)x.event.remove(e,d+t[u],n,r,!0);x.isEmptyObject(c)&&(delete m.handle,x._removeData(e,"events"))}},trigger:function(n,r,i,o){var s,l,u,c,p,f,d,h=[i||a],g=v.call(n,"type")?n.type:n,m=v.call(n,"namespace")?n.namespace.split("."):[];if(u=f=i=i||a,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+x.event.triggered)&&(g.indexOf(".")>=0&&(m=g.split("."),g=m.shift(),m.sort()),l=0>g.indexOf(":")&&"on"+g,n=n[x.expando]?n:new x.Event(g,"object"==typeof n&&n),n.isTrigger=o?2:3,n.namespace=m.join("."),n.namespace_re=n.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:x.makeArray(r,[n]),p=x.event.special[g]||{},o||!p.trigger||p.trigger.apply(i,r)!==!1)){if(!o&&!p.noBubble&&!x.isWindow(i)){for(c=p.delegateType||g,nt.test(c+g)||(u=u.parentNode);u;u=u.parentNode)h.push(u),f=u;f===(i.ownerDocument||a)&&h.push(f.defaultView||f.parentWindow||e)}d=0;while((u=h[d++])&&!n.isPropagationStopped())n.type=d>1?c:p.bindType||g,s=(x._data(u,"events")||{})[n.type]&&x._data(u,"handle"),s&&s.apply(u,r),s=l&&u[l],s&&x.acceptData(u)&&s.apply&&s.apply(u,r)===!1&&n.preventDefault();if(n.type=g,!o&&!n.isDefaultPrevented()&&(!p._default||p._default.apply(h.pop(),r)===!1)&&x.acceptData(i)&&l&&i[g]&&!x.isWindow(i)){f=i[l],f&&(i[l]=null),x.event.triggered=g;try{i[g]()}catch(y){}x.event.triggered=t,f&&(i[l]=f)}return n.result}},dispatch:function(e){e=x.event.fix(e);var n,r,i,o,a,s=[],l=g.call(arguments),u=(x._data(this,"events")||{})[e.type]||[],c=x.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=x.event.handlers.call(this,e,u),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((x.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],l=n.delegateCount,u=e.target;if(l&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(o=[],a=0;l>a;a++)i=n[a],r=i.selector+" ",o[r]===t&&(o[r]=i.needsContext?x(r,this).index(u)>=0:x.find(r,this,null,[u]).length),o[r]&&o.push(i);o.length&&s.push({elem:u,handlers:o})}return n.length>l&&s.push({elem:this,handlers:n.slice(l)}),s},fix:function(e){if(e[x.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new x.Event(o),t=r.length;while(t--)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||a),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,i,o,s=n.button,l=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||a,o=i.documentElement,r=i.body,e.pageX=n.clientX+(o&&o.scrollLeft||r&&r.scrollLeft||0)-(o&&o.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(o&&o.scrollTop||r&&r.scrollTop||0)-(o&&o.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&l&&(e.relatedTarget=l===e.target?n.toElement:l),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==at()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===at()&&this.blur?(this.blur(),!1):t},delegateType:"focusout"},click:{trigger:function(){return x.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):t},_default:function(e){return x.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?x.event.trigger(i,null,t):x.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},x.removeEvent=a.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},x.Event=function(e,n){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&x.extend(this,n),this.timeStamp=e&&e.timeStamp||x.now(),this[x.expando]=!0,t):new x.Event(e,n)},x.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},x.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!x.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),x.support.submitBubbles||(x.event.special.submit={setup:function(){return x.nodeName(this,"form")?!1:(x.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=x.nodeName(n,"input")||x.nodeName(n,"button")?n.form:t;r&&!x._data(r,"submitBubbles")&&(x.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),x._data(r,"submitBubbles",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&x.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return x.nodeName(this,"form")?!1:(x.event.remove(this,"._submit"),t)}}),x.support.changeBubbles||(x.event.special.change={setup:function(){return Z.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(x.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),x.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),x.event.simulate("change",this,e,!0)})),!1):(x.event.add(this,"beforeactivate._change",function(e){var t=e.target;Z.test(t.nodeName)&&!x._data(t,"changeBubbles")&&(x.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||x.event.simulate("change",this.parentNode,e,!0)}),x._data(t,"changeBubbles",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||"radio"!==n.type&&"checkbox"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return x.event.remove(this,"._change"),!Z.test(this.nodeName)}}),x.support.focusinBubbles||x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){x.event.simulate(t,e.target,x.event.fix(e),!0)};x.event.special[t]={setup:function(){0===n++&&a.addEventListener(e,r,!0)},teardown:function(){0===--n&&a.removeEventListener(e,r,!0)}}}),x.fn.extend({on:function(e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&("string"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return x().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=x.guid++)),this.each(function(){x.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,x(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||"function"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){x.event.remove(this,e,r,n)})},trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?x.event.trigger(e,n,r,!0):t}});var st=/^.[^:#\[\.,]*$/,lt=/^(?:parents|prev(?:Until|All))/,ut=x.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};x.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;i>t;t++)if(x.contains(r[t],this))return!0}));for(t=0;i>t;t++)x.find(e,r[t],n);return n=this.pushStack(i>1?x.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},has:function(e){var t,n=x(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(x.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e||[],!0))},filter:function(e){return this.pushStack(ft(this,e||[],!1))},is:function(e){return!!ft(this,"string"==typeof e&&ut.test(e)?x(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],a=ut.test(e)||"string"!=typeof e?x(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(a?a.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?x.unique(o):o)},index:function(e){return e?"string"==typeof e?x.inArray(this[0],x(e)):x.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?x(e,t):x.makeArray(e&&e.nodeType?[e]:e),r=x.merge(this.get(),n);return this.pushStack(x.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function pt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x.dir(e,"parentNode")},parentsUntil:function(e,t,n){return x.dir(e,"parentNode",n)},next:function(e){return pt(e,"nextSibling")},prev:function(e){return pt(e,"previousSibling")},nextAll:function(e){return x.dir(e,"nextSibling")},prevAll:function(e){return x.dir(e,"previousSibling")},nextUntil:function(e,t,n){return x.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return x.dir(e,"previousSibling",n)},siblings:function(e){return x.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return x.sibling(e.firstChild)},contents:function(e){return x.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=x.filter(r,i)),this.length>1&&(ct[e]||(i=x.unique(i)),lt.test(e)&&(i=i.reverse())),this.pushStack(i)}}),x.extend({filter:function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!x(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function ft(e,t,n){if(x.isFunction(t))return x.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return x.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(st.test(t))return x.filter(t,e,n);t=x.filter(t,e)}return x.grep(e,function(e){return x.inArray(e,t)>=0!==n})}function dt(e){var t=ht.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gt=/ jQuery\d+="(?:null|\d+)"/g,mt=RegExp("<(?:"+ht+")[\\s/>]","i"),yt=/^\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bt=/<([\w:]+)/,xt=/<tbody/i,wt=/<|&#?\w+;/,Tt=/<(?:script|style|link)/i,Ct=/^(?:checkbox|radio)$/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^$|\/(?:java|ecma)script/i,Et=/^true\/(.*)/,St=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,At={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:x.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},jt=dt(a),Dt=jt.appendChild(a.createElement("div"));At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td,x.fn.extend({text:function(e){return x.access(this,function(e){return e===t?x.text(this):this.empty().append((this[0]&&this[0].ownerDocument||a).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Lt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Lt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?x.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||x.cleanData(Ft(n)),n.parentNode&&(t&&x.contains(n.ownerDocument,n)&&_t(Ft(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&x.cleanData(Ft(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&x.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return x.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,""):t;if(!("string"!=typeof e||Tt.test(e)||!x.support.htmlSerialize&&mt.test(e)||!x.support.leadingWhitespace&&yt.test(e)||At[(bt.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(vt,"<$1></$2>");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(x.cleanData(Ft(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=x.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),x(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=d.apply([],e);var r,i,o,a,s,l,u=0,c=this.length,p=this,f=c-1,h=e[0],g=x.isFunction(h);if(g||!(1>=c||"string"!=typeof h||x.support.checkClone)&&Nt.test(h))return this.each(function(r){var i=p.eq(r);g&&(e[0]=h.call(this,r,i.html())),i.domManip(e,t,n)});if(c&&(l=x.buildFragment(e,this[0].ownerDocument,!1,!n&&this),r=l.firstChild,1===l.childNodes.length&&(l=r),r)){for(a=x.map(Ft(l,"script"),Ht),o=a.length;c>u;u++)i=l,u!==f&&(i=x.clone(i,!0,!0),o&&x.merge(a,Ft(i,"script"))),t.call(this[u],i,u);if(o)for(s=a[a.length-1].ownerDocument,x.map(a,qt),u=0;o>u;u++)i=a[u],kt.test(i.type||"")&&!x._data(i,"globalEval")&&x.contains(s,i)&&(i.src?x._evalUrl(i.src):x.globalEval((i.text||i.textContent||i.innerHTML||"").replace(St,"")));l=r=null}return this}});function Lt(e,t){return x.nodeName(e,"table")&&x.nodeName(1===t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function Ht(e){return e.type=(null!==x.find.attr(e,"type"))+"/"+e.type,e}function qt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function _t(e,t){var n,r=0;for(;null!=(n=e[r]);r++)x._data(n,"globalEval",!t||x._data(t[r],"globalEval"))}function Mt(e,t){if(1===t.nodeType&&x.hasData(e)){var n,r,i,o=x._data(e),a=x._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)x.event.add(t,n,s[n][r])}a.data&&(a.data=x.extend({},a.data))}}function Ot(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!x.support.noCloneEvent&&t[x.expando]){i=x._data(t);for(r in i.events)x.removeEvent(t,r,i.handle);t.removeAttribute(x.expando)}"script"===n&&t.text!==e.text?(Ht(t).text=e.text,qt(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),x.support.html5Clone&&e.innerHTML&&!x.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Ct.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){var n,r=0,i=[],o=x(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),x(o[r])[t](n),h.apply(i,n.get());return this.pushStack(i)}});function Ft(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||"*"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||"*"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||x.nodeName(o,n)?s.push(o):x.merge(s,Ft(o,n));return n===t||n&&x.nodeName(e,n)?x.merge([e],s):s}function Bt(e){Ct.test(e.type)&&(e.defaultChecked=e.checked)}x.extend({clone:function(e,t,n){var r,i,o,a,s,l=x.contains(e.ownerDocument,e);if(x.support.html5Clone||x.isXMLDoc(e)||!mt.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Dt.innerHTML=e.outerHTML,Dt.removeChild(o=Dt.firstChild)),!(x.support.noCloneEvent&&x.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(r=Ft(o),s=Ft(e),a=0;null!=(i=s[a]);++a)r[a]&&Ot(i,r[a]);if(t)if(n)for(s=s||Ft(e),r=r||Ft(o),a=0;null!=(i=s[a]);a++)Mt(i,r[a]);else Mt(e,o);return r=Ft(o,"script"),r.length>0&&_t(r,!l&&Ft(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,l,u,c,p=e.length,f=dt(t),d=[],h=0;for(;p>h;h++)if(o=e[h],o||0===o)if("object"===x.type(o))x.merge(d,o.nodeType?[o]:o);else if(wt.test(o)){s=s||f.appendChild(t.createElement("div")),l=(bt.exec(o)||["",""])[1].toLowerCase(),c=At[l]||At._default,s.innerHTML=c[1]+o.replace(vt,"<$1></$2>")+c[2],i=c[0];while(i--)s=s.lastChild;if(!x.support.leadingWhitespace&&yt.test(o)&&d.push(t.createTextNode(yt.exec(o)[0])),!x.support.tbody){o="table"!==l||xt.test(o)?"<table>"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)x.nodeName(u=o.childNodes[i],"tbody")&&!u.childNodes.length&&o.removeChild(u)}x.merge(d,s.childNodes),s.textContent="";while(s.firstChild)s.removeChild(s.firstChild);s=f.lastChild}else d.push(t.createTextNode(o));s&&f.removeChild(s),x.support.appendChecked||x.grep(Ft(d,"input"),Bt),h=0;while(o=d[h++])if((!r||-1===x.inArray(o,r))&&(a=x.contains(o.ownerDocument,o),s=Ft(f.appendChild(o),"script"),a&&_t(s),n)){i=0;while(o=s[i++])kt.test(o.type||"")&&n.push(o)}return s=null,f},cleanData:function(e,t){var n,r,o,a,s=0,l=x.expando,u=x.cache,c=x.support.deleteExpando,f=x.event.special;for(;null!=(n=e[s]);s++)if((t||x.acceptData(n))&&(o=n[l],a=o&&u[o])){if(a.events)for(r in a.events)f[r]?x.event.remove(n,r):x.removeEvent(n,r,a.handle);
u[o]&&(delete u[o],c?delete n[l]:typeof n.removeAttribute!==i?n.removeAttribute(l):n[l]=null,p.push(o))}},_evalUrl:function(e){return x.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})}}),x.fn.extend({wrapAll:function(e){if(x.isFunction(e))return this.each(function(t){x(this).wrapAll(e.call(this,t))});if(this[0]){var t=x(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return x.isFunction(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=x.isFunction(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){x.nodeName(this,"body")||x(this).replaceWith(this.childNodes)}).end()}});var Pt,Rt,Wt,$t=/alpha\([^)]*\)/i,It=/opacity\s*=\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp("^("+w+")(.*)$","i"),Yt=RegExp("^("+w+")(?!px)[a-z%]+$","i"),Jt=RegExp("^([+-])=("+w+")","i"),Gt={BODY:"block"},Qt={position:"absolute",visibility:"hidden",display:"block"},Kt={letterSpacing:0,fontWeight:400},Zt=["Top","Right","Bottom","Left"],en=["Webkit","O","Moz","ms"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,"none"===x.css(e,"display")||!x.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=x._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&nn(r)&&(o[a]=x._data(r,"olddisplay",ln(r.nodeName)))):o[a]||(i=nn(r),(n&&"none"!==n||!i)&&x._data(r,"olddisplay",i?n:x.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}x.fn.extend({css:function(e,n){return x.access(this,function(e,n,r){var i,o,a={},s=0;if(x.isArray(n)){for(o=Rt(e),i=n.length;i>s;s++)a[n[s]]=x.css(e,n[s],!1,o);return a}return r!==t?x.style(e,n,r):x.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){var t="boolean"==typeof e;return this.each(function(){(t?e:nn(this))?x(this).show():x(this).hide()})}}),x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Wt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":x.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,l=x.camelCase(n),u=e.style;if(n=x.cssProps[l]||(x.cssProps[l]=tn(u,l)),s=x.cssHooks[n]||x.cssHooks[l],r===t)return s&&"get"in s&&(o=s.get(e,!1,i))!==t?o:u[n];if(a=typeof r,"string"===a&&(o=Jt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(x.css(e,n)),a="number"),!(null==r||"number"===a&&isNaN(r)||("number"!==a||x.cssNumber[l]||(r+="px"),x.support.clearCloneStyle||""!==r||0!==n.indexOf("background")||(u[n]="inherit"),s&&"set"in s&&(r=s.set(e,r,i))===t)))try{u[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,l=x.camelCase(n);return n=x.cssProps[l]||(x.cssProps[l]=tn(e.style,l)),s=x.cssHooks[n]||x.cssHooks[l],s&&"get"in s&&(a=s.get(e,!0,r)),a===t&&(a=Wt(e,n,i)),"normal"===a&&n in Kt&&(a=Kt[n]),""===r||r?(o=parseFloat(a),r===!0||x.isNumeric(o)?o||0:a):a}}),e.getComputedStyle?(Rt=function(t){return e.getComputedStyle(t,null)},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),l=s?s.getPropertyValue(n)||s[n]:t,u=e.style;return s&&(""!==l||x.contains(e.ownerDocument,e)||(l=x.style(e,n)),Yt.test(l)&&Ut.test(n)&&(i=u.width,o=u.minWidth,a=u.maxWidth,u.minWidth=u.maxWidth=u.width=l,l=s.width,u.width=i,u.minWidth=o,u.maxWidth=a)),l}):a.documentElement.currentStyle&&(Rt=function(e){return e.currentStyle},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),l=s?s[n]:t,u=e.style;return null==l&&u&&u[n]&&(l=u[n]),Yt.test(l)&&!zt.test(n)&&(i=u.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),u.left="fontSize"===n?"1em":l,l=u.pixelLeft+"px",u.left=i,a&&(o.left=a)),""===l?"auto":l});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function an(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;for(;4>o;o+=2)"margin"===n&&(a+=x.css(e,n+Zt[o],!0,i)),r?("content"===n&&(a-=x.css(e,"padding"+Zt[o],!0,i)),"margin"!==n&&(a-=x.css(e,"border"+Zt[o]+"Width",!0,i))):(a+=x.css(e,"padding"+Zt[o],!0,i),"padding"!==n&&(a+=x.css(e,"border"+Zt[o]+"Width",!0,i)));return a}function sn(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Rt(e),a=x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=Wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Yt.test(i))return i;r=a&&(x.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?"border":"content"),r,o)+"px"}function ln(e){var t=a,n=Gt[e];return n||(n=un(e,t),"none"!==n&&n||(Pt=(Pt||x("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=(Pt[0].contentWindow||Pt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=un(e,t),Pt.detach()),Gt[e]=n),n}function un(e,t){var n=x(t.createElement(e)).appendTo(t.body),r=x.css(n[0],"display");return n.remove(),r}x.each(["height","width"],function(e,n){x.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(x.css(e,"display"))?x.swap(e,Qt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Rt(e);return on(e,t,r?an(e,n,r,x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,i),i):0)}}}),x.support.opacity||(x.cssHooks.opacity={get:function(e,t){return It.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=x.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===x.trim(o.replace($t,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=$t.test(o)?o.replace($t,i):o+" "+i)}}),x(function(){x.support.reliableMarginRight||(x.cssHooks.marginRight={get:function(e,n){return n?x.swap(e,{display:"inline-block"},Wt,[e,"marginRight"]):t}}),!x.support.pixelPosition&&x.fn.position&&x.each(["top","left"],function(e,n){x.cssHooks[n]={get:function(e,r){return r?(r=Wt(e,n),Yt.test(r)?x(e).position()[n]+"px":r):t}}})}),x.expr&&x.expr.filters&&(x.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!x.support.reliableHiddenOffsets&&"none"===(e.style&&e.style.display||x.css(e,"display"))},x.expr.filters.visible=function(e){return!x.expr.filters.hidden(e)}),x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(x.cssHooks[e+t].set=on)});var cn=/%20/g,pn=/\[\]$/,fn=/\r?\n/g,dn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&hn.test(this.nodeName)&&!dn.test(e)&&(this.checked||!Ct.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:x.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(fn,"\r\n")}}):{name:t.name,value:n.replace(fn,"\r\n")}}).get()}}),x.param=function(e,n){var r,i=[],o=function(e,t){t=x.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(n===t&&(n=x.ajaxSettings&&x.ajaxSettings.traditional),x.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join("&").replace(cn,"+")};function gn(e,t,n,r){var i;if(x.isArray(t))x.each(t,function(t,i){n||pn.test(e)?r(e,i):gn(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==x.type(t))r(e,t);else for(i in t)gn(e+"["+i+"]",t[i],n,r)}x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var mn,yn,vn=x.now(),bn=/\?/,xn=/#.*$/,wn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Cn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nn=/^(?:GET|HEAD)$/,kn=/^\/\//,En=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,Sn=x.fn.load,An={},jn={},Dn="*/".concat("*");try{yn=o.href}catch(Ln){yn=a.createElement("a"),yn.href="",yn=yn.href}mn=En.exec(yn.toLowerCase())||[];function Hn(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(T)||[];if(x.isFunction(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qn(e,n,r,i){var o={},a=e===jn;function s(l){var u;return o[l]=!0,x.each(e[l]||[],function(e,l){var c=l(n,r,i);return"string"!=typeof c||a||o[c]?a?!(u=c):t:(n.dataTypes.unshift(c),s(c),!1)}),u}return s(n.dataTypes[0])||!o["*"]&&s("*")}function _n(e,n){var r,i,o=x.ajaxSettings.flatOptions||{};for(i in n)n[i]!==t&&((o[i]?e:r||(r={}))[i]=n[i]);return r&&x.extend(!0,e,r),e}x.fn.load=function(e,n,r){if("string"!=typeof e&&Sn)return Sn.apply(this,arguments);var i,o,a,s=this,l=e.indexOf(" ");return l>=0&&(i=e.slice(l,e.length),e=e.slice(0,l)),x.isFunction(n)?(r=n,n=t):n&&"object"==typeof n&&(a="POST"),s.length>0&&x.ajax({url:e,type:a,dataType:"html",data:n}).done(function(e){o=arguments,s.html(i?x("<div>").append(x.parseHTML(e)).find(i):e)}).complete(r&&function(e,t){s.each(r,o||[e.responseText,t,e])}),this},x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yn,type:"GET",isLocal:Cn.test(mn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Dn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":x.parseJSON,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?_n(_n(e,x.ajaxSettings),t):_n(x.ajaxSettings,e)},ajaxPrefilter:Hn(An),ajaxTransport:Hn(jn),ajax:function(e,n){"object"==typeof e&&(n=e,e=t),n=n||{};var r,i,o,a,s,l,u,c,p=x.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?x(f):x.event,h=x.Deferred(),g=x.Callbacks("once memory"),m=p.statusCode||{},y={},v={},b=0,w="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!c){c={};while(t=Tn.exec(a))c[t[1].toLowerCase()]=t[2]}t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=v[n]=v[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)m[t]=[m[t],e[t]];else C.always(e[C.status]);return this},abort:function(e){var t=e||w;return u&&u.abort(t),k(0,t),this}};if(h.promise(C).complete=g.add,C.success=C.done,C.error=C.fail,p.url=((e||p.url||yn)+"").replace(xn,"").replace(kn,mn[1]+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=x.trim(p.dataType||"*").toLowerCase().match(T)||[""],null==p.crossDomain&&(r=En.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===mn[1]&&r[2]===mn[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(mn[3]||("http:"===mn[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=x.param(p.data,p.traditional)),qn(An,p,n,C),2===b)return C;l=p.global,l&&0===x.active++&&x.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Nn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(bn.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=wn.test(o)?o.replace(wn,"$1_="+vn++):o+(bn.test(o)?"&":"?")+"_="+vn++)),p.ifModified&&(x.lastModified[o]&&C.setRequestHeader("If-Modified-Since",x.lastModified[o]),x.etag[o]&&C.setRequestHeader("If-None-Match",x.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Dn+"; q=0.01":""):p.accepts["*"]);for(i in p.headers)C.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(f,C,p)===!1||2===b))return C.abort();w="abort";for(i in{success:1,error:1,complete:1})C[i](p[i]);if(u=qn(jn,p,n,C)){C.readyState=1,l&&d.trigger("ajaxSend",[C,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){C.abort("timeout")},p.timeout));try{b=1,u.send(y,k)}catch(N){if(!(2>b))throw N;k(-1,N)}}else k(-1,"No Transport");function k(e,n,r,i){var c,y,v,w,T,N=n;2!==b&&(b=2,s&&clearTimeout(s),u=t,a=i||"",C.readyState=e>0?4:0,c=e>=200&&300>e||304===e,r&&(w=Mn(p,C,r)),w=On(p,w,C,c),c?(p.ifModified&&(T=C.getResponseHeader("Last-Modified"),T&&(x.lastModified[o]=T),T=C.getResponseHeader("etag"),T&&(x.etag[o]=T)),204===e||"HEAD"===p.type?N="nocontent":304===e?N="notmodified":(N=w.state,y=w.data,v=w.error,c=!v)):(v=N,(e||!N)&&(N="error",0>e&&(e=0))),C.status=e,C.statusText=(n||N)+"",c?h.resolveWith(f,[y,N,C]):h.rejectWith(f,[C,N,v]),C.statusCode(m),m=t,l&&d.trigger(c?"ajaxSuccess":"ajaxError",[C,p,c?y:v]),g.fireWith(f,[C,N]),l&&(d.trigger("ajaxComplete",[C,p]),--x.active||x.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,n){return x.get(e,t,n,"script")}}),x.each(["get","post"],function(e,n){x[n]=function(e,r,i,o){return x.isFunction(r)&&(o=o||i,i=r,r=t),x.ajax({url:e,type:n,dataType:o,data:r,success:i})}});function Mn(e,n,r){var i,o,a,s,l=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),o===t&&(o=e.mimeType||n.getResponseHeader("Content-Type"));if(o)for(s in l)if(l[s]&&l[s].test(o)){u.unshift(s);break}if(u[0]in r)a=u[0];else{for(s in r){if(!u[0]||e.converters[s+" "+u[0]]){a=s;break}i||(i=s)}a=a||i}return a?(a!==u[0]&&u.unshift(a),r[a]):t}function On(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=u[l+" "+o]||u["* "+o],!a)for(i in u)if(s=i.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){a===!0?a=u[i]:u[i]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(p){return{state:"parsererror",error:a?p:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),x.ajaxTransport("script",function(e){if(e.crossDomain){var n,r=a.head||x("head")[0]||a.documentElement;return{send:function(t,i){n=a.createElement("script"),n.async=!0,e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,t){(t||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,t||i(200,"success"))},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(t,!0)}}}});var Fn=[],Bn=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Fn.pop()||x.expando+"_"+vn++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",function(n,r,i){var o,a,s,l=n.jsonp!==!1&&(Bn.test(n.url)?"url":"string"==typeof n.data&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Bn.test(n.data)&&"data");return l||"jsonp"===n.dataTypes[0]?(o=n.jsonpCallback=x.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,l?n[l]=n[l].replace(Bn,"$1"+o):n.jsonp!==!1&&(n.url+=(bn.test(n.url)?"&":"?")+n.jsonp+"="+o),n.converters["script json"]=function(){return s||x.error(o+" was not called"),s[0]},n.dataTypes[0]="json",a=e[o],e[o]=function(){s=arguments},i.always(function(){e[o]=a,n[o]&&(n.jsonpCallback=r.jsonpCallback,Fn.push(o)),s&&x.isFunction(a)&&a(s[0]),s=a=t}),"script"):t});var Pn,Rn,Wn=0,$n=e.ActiveXObject&&function(){var e;for(e in Pn)Pn[e](t,!0)};function In(){try{return new e.XMLHttpRequest}catch(t){}}function zn(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}x.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&In()||zn()}:In,Rn=x.ajaxSettings.xhr(),x.support.cors=!!Rn&&"withCredentials"in Rn,Rn=x.support.ajax=!!Rn,Rn&&x.ajaxTransport(function(n){if(!n.crossDomain||x.support.cors){var r;return{send:function(i,o){var a,s,l=n.xhr();if(n.username?l.open(n.type,n.url,n.async,n.username,n.password):l.open(n.type,n.url,n.async),n.xhrFields)for(s in n.xhrFields)l[s]=n.xhrFields[s];n.mimeType&&l.overrideMimeType&&l.overrideMimeType(n.mimeType),n.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");try{for(s in i)l.setRequestHeader(s,i[s])}catch(u){}l.send(n.hasContent&&n.data||null),r=function(e,i){var s,u,c,p;try{if(r&&(i||4===l.readyState))if(r=t,a&&(l.onreadystatechange=x.noop,$n&&delete Pn[a]),i)4!==l.readyState&&l.abort();else{p={},s=l.status,u=l.getAllResponseHeaders(),"string"==typeof l.responseText&&(p.text=l.responseText);try{c=l.statusText}catch(f){c=""}s||!n.isLocal||n.crossDomain?1223===s&&(s=204):s=p.text?200:404}}catch(d){i||o(-1,d)}p&&o(s,c,p,u)},n.async?4===l.readyState?setTimeout(r):(a=++Wn,$n&&(Pn||(Pn={},x(e).unload($n)),Pn[a]=r),l.onreadystatechange=r):r()},abort:function(){r&&r(t,!0)}}}});var Xn,Un,Vn=/^(?:toggle|show|hide)$/,Yn=RegExp("^(?:([+-])=|)("+w+")([a-z%]*)$","i"),Jn=/queueHooks$/,Gn=[nr],Qn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Yn.exec(t),o=i&&i[3]||(x.cssNumber[e]?"":"px"),a=(x.cssNumber[e]||"px"!==o&&+r)&&Yn.exec(x.css(n.elem,e)),s=1,l=20;if(a&&a[3]!==o){o=o||a[3],i=i||[],a=+r||1;do s=s||".5",a/=s,x.style(n.elem,e,a+o);while(s!==(s=n.cur()/r)&&1!==s&&--l)}return i&&(a=n.start=+a||+r||0,n.unit=o,n.end=i[1]?a+(i[1]+1)*i[2]:+i[2]),n}]};function Kn(){return setTimeout(function(){Xn=t}),Xn=x.now()}function Zn(e,t,n){var r,i=(Qn[t]||[]).concat(Qn["*"]),o=0,a=i.length;for(;a>o;o++)if(r=i[o].call(n,t,e))return r}function er(e,t,n){var r,i,o=0,a=Gn.length,s=x.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;var t=Xn||Kn(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;for(;l>a;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),1>o&&l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xn||Kn(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?s.resolveWith(e,[u,t]):s.rejectWith(e,[u,t]),this}}),c=u.props;for(tr(c,u.opts.specialEasing);a>o;o++)if(r=Gn[o].call(u,e,c,u.opts))return r;return x.map(c,Zn,u),x.isFunction(u.opts.start)&&u.opts.start.call(e,u),x.fx.timer(x.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function tr(e,t){var n,r,i,o,a;for(n in e)if(r=x.camelCase(n),i=t[r],o=e[n],x.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=x.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}x.Animation=x.extend(er,{tweener:function(e,t){x.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Qn[n]=Qn[n]||[],Qn[n].unshift(t)},prefilter:function(e,t){t?Gn.unshift(e):Gn.push(e)}});function nr(e,t,n){var r,i,o,a,s,l,u=this,c={},p=e.style,f=e.nodeType&&nn(e),d=x._data(e,"fxshow");n.queue||(s=x._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,u.always(function(){u.always(function(){s.unqueued--,x.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===x.css(e,"display")&&"none"===x.css(e,"float")&&(x.support.inlineBlockNeedsLayout&&"inline"!==ln(e.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",x.support.shrinkWrapBlocks||u.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Vn.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(f?"hide":"show"))continue;c[r]=d&&d[r]||x.style(e,r)}if(!x.isEmptyObject(c)){d?"hidden"in d&&(f=d.hidden):d=x._data(e,"fxshow",{}),o&&(d.hidden=!f),f?x(e).show():u.done(function(){x(e).hide()}),u.done(function(){var t;x._removeData(e,"fxshow");for(t in c)x.style(e,t,c[t])});for(r in c)a=Zn(f?d[r]:0,r,u),r in d||(d[r]=a.start,f&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function rr(e,t,n,r,i){return new rr.prototype.init(e,t,n,r,i)}x.Tween=rr,rr.prototype={constructor:rr,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=rr.propHooks[this.prop];return e&&e.get?e.get(this):rr.propHooks._default.get(this)},run:function(e){var t,n=rr.propHooks[this.prop];return this.pos=t=this.options.duration?x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rr.propHooks._default.set(this),this}},rr.prototype.init.prototype=rr.prototype,rr.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=x.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[x.cssProps[e.prop]]||x.cssHooks[e.prop])?x.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},rr.propHooks.scrollTop=rr.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.each(["toggle","show","hide"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ir(t,!0),e,r,i)}}),x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(nn).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),o=x.speed(t,n,r),a=function(){var t=er(this,x.extend({},e),o);(i||x._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=null!=e&&e+"queueHooks",o=x.timers,a=x._data(this);if(n)a[n]&&a[n].stop&&i(a[n]);else for(n in a)a[n]&&a[n].stop&&Jn.test(n)&&i(a[n]);for(n=o.length;n--;)o[n].elem!==this||null!=e&&o[n].queue!==e||(o[n].anim.stop(r),t=!1,o.splice(n,1));(t||!r)&&x.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=x._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=x.timers,a=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function ir(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Zt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}x.each({slideDown:ir("show"),slideUp:ir("hide"),slideToggle:ir("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||x.isFunction(e)&&e,duration:e,easing:n&&t||t&&!x.isFunction(t)&&t};return r.duration=x.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in x.fx.speeds?x.fx.speeds[r.duration]:x.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){x.isFunction(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},x.timers=[],x.fx=rr.prototype.init,x.fx.tick=function(){var e,n=x.timers,r=0;for(Xn=x.now();n.length>r;r++)e=n[r],e()||n[r]!==e||n.splice(r--,1);n.length||x.fx.stop(),Xn=t},x.fx.timer=function(e){e()&&x.timers.push(e)&&x.fx.start()},x.fx.interval=13,x.fx.start=function(){Un||(Un=setInterval(x.fx.tick,x.fx.interval))},x.fx.stop=function(){clearInterval(Un),Un=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fx.step={},x.expr&&x.expr.filters&&(x.expr.filters.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length}),x.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){x.offset.setOffset(this,e,t)});var n,r,o={top:0,left:0},a=this[0],s=a&&a.ownerDocument;if(s)return n=s.documentElement,x.contains(n,a)?(typeof a.getBoundingClientRect!==i&&(o=a.getBoundingClientRect()),r=or(s),{top:o.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:o.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):o},x.offset={setOffset:function(e,t,n){var r=x.css(e,"position");"static"===r&&(e.style.position="relative");var i=x(e),o=i.offset(),a=x.css(e,"top"),s=x.css(e,"left"),l=("absolute"===r||"fixed"===r)&&x.inArray("auto",[a,s])>-1,u={},c={},p,f;l?(c=i.position(),p=c.top,f=c.left):(p=parseFloat(a)||0,f=parseFloat(s)||0),x.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(u.top=t.top-o.top+p),null!=t.left&&(u.left=t.left-o.left+f),"using"in t?t.using.call(e,u):i.css(u)}},x.fn.extend({position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===x.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),x.nodeName(e[0],"html")||(n=e.offset()),n.top+=x.css(e[0],"borderTopWidth",!0),n.left+=x.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-x.css(r,"marginTop",!0),left:t.left-n.left-x.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||s;while(e&&!x.nodeName(e,"html")&&"static"===x.css(e,"position"))e=e.offsetParent;return e||s})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r=/Y/.test(n);x.fn[e]=function(i){return x.access(this,function(e,i,o){var a=or(e);return o===t?a?n in a?a[n]:a.document.documentElement[i]:e[i]:(a?a.scrollTo(r?x(a).scrollLeft():o,r?o:x(a).scrollTop()):e[i]=o,t)},e,i,arguments.length,null)}});function or(e){return x.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}x.each({Height:"height",Width:"width"},function(e,n){x.each({padding:"inner"+e,content:n,"":"outer"+e},function(r,i){x.fn[i]=function(i,o){var a=arguments.length&&(r||"boolean"!=typeof i),s=r||(i===!0||o===!0?"margin":"border");return x.access(this,function(n,r,i){var o;return x.isWindow(n)?n.document.documentElement["client"+e]:9===n.nodeType?(o=n.documentElement,Math.max(n.body["scroll"+e],o["scroll"+e],n.body["offset"+e],o["offset"+e],o["client"+e])):i===t?x.css(n,r,s):x.style(n,r,i,s)},n,a?i:t,a,null)}})}),x.fn.size=function(){return this.length},x.fn.andSelf=x.fn.addBack,"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=x:(e.jQuery=e.$=x,"function"==typeof define&&define.amd&&define("jquery",[],function(){return x}))})(window);

/*!
 * Lo-Dash v0.6.1 <http://lodash.com>
 * Copyright 2012 John-David Dalton <http://allyoucanleet.com/>
 * Based on Underscore.js 1.3.3, copyright 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
 * <http://documentcloud.github.com/underscore>
 * Available under MIT license <http://lodash.com/license>
 */
;(function(window, undefined) {
  

  /**
   * Used to cache the last `_.templateSettings.evaluate` delimiter to avoid
   * unnecessarily assigning `reEvaluateDelimiter` a new generated regexp.
   * Assigned in `_.template`.
   */
  var lastEvaluateDelimiter;

  /**
   * Used to cache the last template `options.variable` to avoid unnecessarily
   * assigning `reDoubleVariable` a new generated regexp. Assigned in `_.template`.
   */
  var lastVariable;

  /**
   * Used to match potentially incorrect data object references, like `obj.obj`,
   * in compiled templates. Assigned in `_.template`.
   */
  var reDoubleVariable;

  /**
   * Used to match "evaluate" delimiters, including internal delimiters,
   * in template text. Assigned in `_.template`.
   */
  var reEvaluateDelimiter;

  /** Detect free variable `exports` */
  var freeExports = typeof exports == 'object' && exports &&
    (typeof global == 'object' && global && global == global.global && (window = global), exports);

  /** Native prototype shortcuts */
  var ArrayProto = Array.prototype,
      BoolProto = Boolean.prototype,
      ObjectProto = Object.prototype,
      NumberProto = Number.prototype,
      StringProto = String.prototype;

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used by `cachedContains` as the default size when optimizations are enabled for large arrays */
  var largeArraySize = 30;

  /** Used to restore the original `_` reference in `noConflict` */
  var oldDash = window._;

  /** Used to detect delimiter values that should be processed by `tokenizeEvaluate` */
  var reComplexDelimiter = /[-+=!~*%&^<>|{(\/]|\[\D|\b(?:delete|in|instanceof|new|typeof|void)\b/;

  /** Used to match HTML entities */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#x27);/g;

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to insert the data object variable into compiled template source */
  var reInsertVariable = /(?:__e|__t = )\(\s*(?![\d\s"']|this\.)/g;

  /** Used to detect if a method is native */
  var reNative = RegExp('^' +
    (ObjectProto.valueOf + '')
      .replace(/[.*+?^=!:${}()|[\]\/\\]/g, '\\$&')
      .replace(/valueOf|for [^\]]+/g, '.+?') + '$'
  );

  /** Used to match internally used tokens in template text */
  var reToken = /__token__(\d+)/g;

  /** Used to match HTML characters */
  var reUnescapedHtml = /[&<>"']/g;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to fix the JScript [[DontEnum]] bug */
  var shadowed = [
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
    'toLocaleString', 'toString', 'valueOf'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** Used to replace template delimiters */
  var token = '__token__';

  /** Used to store tokenized template text snippets */
  var tokenized = [];

  /** Native method shortcuts */
  var concat = ArrayProto.concat,
      hasOwnProperty = ObjectProto.hasOwnProperty,
      push = ArrayProto.push,
      propertyIsEnumerable = ObjectProto.propertyIsEnumerable,
      slice = ArrayProto.slice,
      toString = ObjectProto.toString;

  /* Native method shortcuts for methods with the same name as other `lodash` methods */
  var nativeBind = reNative.test(nativeBind = slice.bind) && nativeBind,
      nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray,
      nativeIsFinite = window.isFinite,
      nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Timer shortcuts */
  var clearTimeout = window.clearTimeout,
      setTimeout = window.setTimeout;

  /**
   * Detect the JScript [[DontEnum]] bug:
   *
   * In IE < 9 an objects own properties, shadowing non-enumerable ones, are
   * made non-enumerable as well.
   */
  var hasDontEnumBug;

  /**
   * Detect if `Array#shift` and `Array#splice` augment array-like objects
   * incorrectly:
   *
   * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`
   * and `splice()` functions that fail to remove the last element, `value[0]`,
   * of array-like objects even though the `length` property is set to `0`.
   * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`
   * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.
   */
  var hasObjectSpliceBug;

  /** Detect if own properties are iterated after inherited properties (IE < 9) */
  var iteratesOwnLast;

  /** Detect if an `arguments` object's indexes are non-enumerable (IE < 9) */
  var noArgsEnum = true;

  (function() {
    var object = { '0': 1, 'length': 1 },
        props = [];

    function ctor() { this.x = 1; }
    ctor.prototype = { 'valueOf': 1, 'y': 1 };
    for (var prop in new ctor) { props.push(prop); }
    for (prop in arguments) { noArgsEnum = !prop; }

    hasDontEnumBug = (props + '').length < 4;
    iteratesOwnLast = props[0] != 'x';
    hasObjectSpliceBug = (props.splice.call(object, 0, 1), object[0]);
  }(1));

  /** Detect if an `arguments` object's [[Class]] is unresolvable (Firefox < 4, IE < 9) */
  var noArgsClass = !isArguments(arguments);

  /** Detect if `Array#slice` cannot be used to convert strings to arrays (Opera < 10.52) */
  var noArraySliceOnStrings = slice.call('x')[0] != 'x';

  /**
   * Detect lack of support for accessing string characters by index:
   *
   * IE < 8 can't access characters by index and IE 8 can only access
   * characters by index on string literals.
   */
  var noCharByIndex = ('x'[0] + Object('x')[0]) != 'xx';

  /**
   * Detect if a node's [[Class]] is unresolvable (IE < 9)
   * and that the JS engine won't error when attempting to coerce an object to
   * a string without a `toString` property value of `typeof` "function".
   */
  try {
    var noNodeClass = ({ 'toString': 0 } + '', toString.call(window.document || 0) == objectClass);
  } catch(e) { }

  /* Detect if `Function#bind` exists and is inferred to be fast (all but V8) */
  var isBindFast = nativeBind && /\n|Opera/.test(nativeBind + toString.call(window.opera));

  /* Detect if `Object.keys` exists and is inferred to be fast (IE, Opera, V8) */
  var isKeysFast = nativeKeys && /^.+$|true/.test(nativeKeys + !!window.attachEvent);

  /* Detect if strict mode, "use strict", is inferred to be fast (V8) */
  var isStrictFast = !isBindFast;

  /**
   * Detect if sourceURL syntax is usable without erroring:
   *
   * The JS engine in Adobe products, like InDesign, will throw a syntax error
   * when it encounters a single line comment beginning with the `@` symbol.
   *
   * The JS engine in Narwhal will generate the function `function anonymous(){//}`
   * and throw a syntax error.
   *
   * Avoid comments beginning `@` symbols in IE because they are part of its
   * non-standard conditional compilation support.
   * http://msdn.microsoft.com/en-us/library/121hztk3(v=vs.94).aspx
   */
  try {
    var useSourceURL = (Function('//@')(), !window.attachEvent);
  } catch(e){ }

  /** Used to identify object classifications that are array-like */
  var arrayLikeClasses = {};
  arrayLikeClasses[boolClass] = arrayLikeClasses[dateClass] = arrayLikeClasses[funcClass] =
  arrayLikeClasses[numberClass] = arrayLikeClasses[objectClass] = arrayLikeClasses[regexpClass] = false;
  arrayLikeClasses[argsClass] = arrayLikeClasses[arrayClass] = arrayLikeClasses[stringClass] = true;

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[argsClass] = cloneableClasses[funcClass] = false;
  cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] =
  cloneableClasses[stringClass] = true;

  /**
   * Used to convert characters to HTML entities:
   *
   * Though the `>` character is escaped for symmetry, characters like `>` and `/`
   * don't require escaping in HTML and have no special meaning unless they're part
   * of a tag or an unquoted attribute value.
   * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
   */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;'
  };

  /** Used to convert HTML entities to characters */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#x27;': "'"
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false,
    'unknown': true
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /*--------------------------------------------------------------------------*/

  /**
   * The `lodash` function.
   *
   * @name _
   * @constructor
   * @param {Mixed} value The value to wrap in a `LoDash` instance.
   * @returns {Object} Returns a `LoDash` instance.
   */
  function lodash(value) {
    // allow invoking `lodash` without the `new` operator
    return new LoDash(value);
  }

  /**
   * Creates a `LoDash` instance that wraps a value to allow chaining.
   *
   * @private
   * @constructor
   * @param {Mixed} value The value to wrap.
   */
  function LoDash(value) {
    // exit early if already wrapped
    if (value && value._wrapped) {
      return value;
    }
    this._wrapped = value;
  }

  /**
   * By default, the template delimiters used by Lo-Dash are similar to those in
   * embedded Ruby (ERB). Change the following template settings to use alternative
   * delimiters.
   *
   * @static
   * @memberOf _
   * @type Object
   */
  lodash.templateSettings = {

    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @static
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'escape': /<%-([\s\S]+?)%>/g,

    /**
     * Used to detect code to be evaluated.
     *
     * @static
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'evaluate': /<%([\s\S]+?)%>/g,

    /**
     * Used to detect `data` property values to inject.
     *
     * @static
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'interpolate': /<%=([\s\S]+?)%>/g,

    /**
     * Used to reference the data object in the template text.
     *
     * @static
     * @memberOf _.templateSettings
     * @type String
     */
    'variable': ''
  };

  /*--------------------------------------------------------------------------*/

  /**
   * The template used to create iterator functions.
   *
   * @private
   * @param {Obect} data The data object used to populate the text.
   * @returns {String} Returns the interpolated text.
   */
  var iteratorTemplate = template(
    // conditional strict mode
    '<% if (useStrict) { %>\'use strict\';\n<% } %>' +

    // the `iteratee` may be reassigned by the `top` snippet
    'var index, value, iteratee = <%= firstArg %>, ' +
    // assign the `result` variable an initial value
    'result<% if (init) { %> = <%= init %><% } %>;\n' +
    // add code to exit early or do so if the first argument is falsey
    '<%= exit %>;\n' +
    // add code after the exit snippet but before the iteration branches
    '<%= top %>;\n' +

    // the following branch is for iterating arrays and array-like objects
    '<% if (arrayBranch) { %>' +
    'var length = iteratee.length; index = -1;' +
    '  <% if (objectBranch) { %>\nif (length > -1 && length === length >>> 0) {<% } %>' +

    // add support for accessing string characters by index if needed
    '  <% if (noCharByIndex) { %>\n' +
    '  if (toString.call(iteratee) == stringClass) {\n' +
    '    iteratee = iteratee.split(\'\')\n' +
    '  }' +
    '  <% } %>\n' +

    '  <%= arrayBranch.beforeLoop %>;\n' +
    '  while (++index < length) {\n' +
    '    value = iteratee[index];\n' +
    '    <%= arrayBranch.inLoop %>\n' +
    '  }' +
    '  <% if (objectBranch) { %>\n}<% } %>' +
    '<% } %>' +

    // the following branch is for iterating an object's own/inherited properties
    '<% if (objectBranch) { %>' +
    '  <% if (arrayBranch) { %>\nelse {' +

    // add support for iterating over `arguments` objects if needed
    '  <%  } else if (noArgsEnum) { %>\n' +
    '  var length = iteratee.length; index = -1;\n' +
    '  if (length && isArguments(iteratee)) {\n' +
    '    while (++index < length) {\n' +
    '      value = iteratee[index += \'\'];\n' +
    '      <%= objectBranch.inLoop %>\n' +
    '    }\n' +
    '  } else {' +
    '  <% } %>' +

    // Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
    // (if the prototype or a property on the prototype has been set)
    // incorrectly sets a function's `prototype` property [[Enumerable]]
    // value to `true`. Because of this Lo-Dash standardizes on skipping
    // the the `prototype` property of functions regardless of its
    // [[Enumerable]] value.
    '  <% if (!hasDontEnumBug) { %>\n' +
    '  var skipProto = typeof iteratee == \'function\' && \n' +
    '    propertyIsEnumerable.call(iteratee, \'prototype\');\n' +
    '  <% } %>' +

    // iterate own properties using `Object.keys` if it's fast
    '  <% if (isKeysFast && useHas) { %>\n' +
    '  var ownIndex = -1,\n' +
    '      ownProps = objectTypes[typeof iteratee] ? nativeKeys(iteratee) : [],\n' +
    '      length = ownProps.length;\n\n' +
    '  <%= objectBranch.beforeLoop %>;\n' +
    '  while (++ownIndex < length) {\n' +
    '    index = ownProps[ownIndex];\n' +
    '    <% if (!hasDontEnumBug) { %>if (!(skipProto && index == \'prototype\')) {\n  <% } %>' +
    '    value = iteratee[index];\n' +
    '    <%= objectBranch.inLoop %>\n' +
    '    <% if (!hasDontEnumBug) { %>}\n<% } %>' +
    '  }' +

    // else using a for-in loop
    '  <% } else { %>\n' +
    '  <%= objectBranch.beforeLoop %>;\n' +
    '  for (index in iteratee) {' +
    '    <% if (!hasDontEnumBug || useHas) { %>\n    if (<%' +
    '      if (!hasDontEnumBug) { %>!(skipProto && index == \'prototype\')<% }' +
    '      if (!hasDontEnumBug && useHas) { %> && <% }' +
    '      if (useHas) { %>hasOwnProperty.call(iteratee, index)<% }' +
    '    %>) {' +
    '    <% } %>\n' +
    '    value = iteratee[index];\n' +
    '    <%= objectBranch.inLoop %>;\n' +
    '    <% if (!hasDontEnumBug || useHas) { %>}\n<% } %>' +
    '  }' +
    '  <% } %>' +

    // Because IE < 9 can't set the `[[Enumerable]]` attribute of an
    // existing property and the `constructor` property of a prototype
    // defaults to non-enumerable, Lo-Dash skips the `constructor`
    // property when it infers it's iterating over a `prototype` object.
    '  <% if (hasDontEnumBug) { %>\n\n' +
    '  var ctor = iteratee.constructor;\n' +
    '    <% for (var k = 0; k < 7; k++) { %>\n' +
    '  index = \'<%= shadowed[k] %>\';\n' +
    '  if (<%' +
    '      if (shadowed[k] == \'constructor\') {' +
    '        %>!(ctor && ctor.prototype === iteratee) && <%' +
    '      } %>hasOwnProperty.call(iteratee, index)) {\n' +
    '    value = iteratee[index];\n' +
    '    <%= objectBranch.inLoop %>\n' +
    '  }' +
    '    <% } %>' +
    '  <% } %>' +
    '  <% if (arrayBranch || noArgsEnum) { %>\n}<% } %>' +
    '<% } %>\n' +

    // add code to the bottom of the iteration function
    '<%= bottom %>;\n' +
    // finally, return the `result`
    'return result'
  );

  /**
   * Reusable iterator options shared by
   * `every`, `filter`, `find`, `forEach`, `forIn`, `forOwn`, `groupBy`, `map`,
   * `reject`, `some`, and `sortBy`.
   */
  var baseIteratorOptions = {
    'args': 'collection, callback, thisArg',
    'init': 'collection',
    'top':
      'if (!callback) {\n' +
      '  callback = identity\n' +
      '}\n' +
      'else if (thisArg) {\n' +
      '  callback = iteratorBind(callback, thisArg)\n' +
      '}',
    'inLoop': 'if (callback(value, index, collection) === false) return result'
  };

  /** Reusable iterator options for `countBy`, `groupBy`, and `sortBy` */
  var countByIteratorOptions = {
    'init': '{}',
    'top':
      'var prop;\n' +
      'if (typeof callback != \'function\') {\n' +
      '  var valueProp = callback;\n' +
      '  callback = function(value) { return value[valueProp] }\n' +
      '}\n' +
      'else if (thisArg) {\n' +
      '  callback = iteratorBind(callback, thisArg)\n' +
      '}',
    'inLoop':
      'prop = callback(value, index, collection);\n' +
      '(hasOwnProperty.call(result, prop) ? result[prop]++ : result[prop] = 1)'
  };

  /** Reusable iterator options for `drop` and `pick` */
  var dropIteratorOptions = {
    'useHas': false,
    'args': 'object, callback, thisArg',
    'init': '{}',
    'top':
      'var isFunc = typeof callback == \'function\';\n' +
      'if (!isFunc) {\n' +
      '  var props = concat.apply(ArrayProto, arguments)\n' +
      '} else if (thisArg) {\n' +
      '  callback = iteratorBind(callback, thisArg)\n' +
      '}',
    'inLoop':
      'if (isFunc\n' +
      '  ? !callback(value, index, object)\n' +
      '  : indexOf(props, index) < 0\n' +
      ') result[index] = value'
  };

  /** Reusable iterator options for `every` and `some` */
  var everyIteratorOptions = {
    'init': 'true',
    'inLoop': 'if (!callback(value, index, collection)) return !result'
  };

  /** Reusable iterator options for `defaults` and `extend` */
  var extendIteratorOptions = {
    'useHas': false,
    'useStrict': false,
    'args': 'object',
    'init': 'object',
    'top':
      'for (var argsIndex = 1, argsLength = arguments.length; argsIndex < argsLength; argsIndex++) {\n' +
      '  if (iteratee = arguments[argsIndex]) {',
    'inLoop': 'result[index] = value',
    'bottom': '  }\n}'
  };

  /** Reusable iterator options for `filter`, `reject`, and `where` */
  var filterIteratorOptions = {
    'init': '[]',
    'inLoop': 'callback(value, index, collection) && result.push(value)'
  };

  /** Reusable iterator options for `find`, `forEach`, `forIn`, and `forOwn` */
  var forEachIteratorOptions = {
    'top': 'if (thisArg) callback = iteratorBind(callback, thisArg)'
  };

  /** Reusable iterator options for `forIn` and `forOwn` */
  var forOwnIteratorOptions = {
    'inLoop': {
      'object': baseIteratorOptions.inLoop
    }
  };

  /** Reusable iterator options for `invoke`, `map`, `pluck`, and `sortBy` */
  var mapIteratorOptions = {
    'init': '',
    'exit': 'if (!collection) return []',
    'beforeLoop': {
      'array':  'result = Array(length)',
      'object': 'result = ' + (isKeysFast ? 'Array(length)' : '[]')
    },
    'inLoop': {
      'array':  'result[index] = callback(value, index, collection)',
      'object': 'result' + (isKeysFast ? '[ownIndex] = ' : '.push') + '(callback(value, index, collection))'
    }
  };

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a new function optimized for searching large arrays for a given `value`,
   * starting at `fromIndex`, using strict equality for comparisons, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Mixed} value The value to search for.
   * @param {Number} [fromIndex=0] The index to start searching from.
   * @param {Number} [largeSize=30] The length at which an array is considered large.
   * @returns {Boolean} Returns `true` if `value` is found, else `false`.
   */
  function cachedContains(array, fromIndex, largeSize) {
    fromIndex || (fromIndex = 0);

    var length = array.length,
        isLarge = (length - fromIndex) >= (largeSize || largeArraySize),
        cache = isLarge ? {} : array;

    if (isLarge) {
      // init value cache
      var key,
          index = fromIndex - 1;

      while (++index < length) {
        // manually coerce `value` to string because `hasOwnProperty`, in some
        // older versions of Firefox, coerces objects incorrectly
        key = array[index] + '';
        (hasOwnProperty.call(cache, key) ? cache[key] : (cache[key] = [])).push(array[index]);
      }
    }
    return function(value) {
      if (isLarge) {
        var key = value + '';
        return hasOwnProperty.call(cache, key) && indexOf(cache[key], value) > -1;
      }
      return indexOf(cache, value, fromIndex) > -1;
    }
  }

  /**
   * Creates compiled iteration functions. The iteration function will be created
   * to iterate over only objects if the first argument of `options.args` is
   * "object" or `options.inLoop.array` is falsey.
   *
   * @private
   * @param {Object} [options1, options2, ...] The compile options objects.
   *
   *  useHas - A boolean to specify whether or not to use `hasOwnProperty` checks
   *   in the object loop.
   *
   *  useStrict - A boolean to specify whether or not to include the ES5
   *   "use strict" directive.
   *
   *  args - A string of comma separated arguments the iteration function will
   *   accept.
   *
   *  init - A string to specify the initial value of the `result` variable.
   *
   *  exit - A string of code to use in place of the default exit-early check
   *   of `if (!arguments[0]) return result`.
   *
   *  top - A string of code to execute after the exit-early check but before
   *   the iteration branches.
   *
   *  beforeLoop - A string or object containing an "array" or "object" property
   *   of code to execute before the array or object loops.
   *
   *  inLoop - A string or object containing an "array" or "object" property
   *   of code to execute in the array or object loops.
   *
   *  bottom - A string of code to execute after the iteration branches but
   *   before the `result` is returned.
   *
   * @returns {Function} Returns the compiled function.
   */
  function createIterator() {
    var object,
        prop,
        value,
        index = -1,
        length = arguments.length;

    // merge options into a template data object
    var data = {
      'bottom': '',
      'exit': '',
      'init': '',
      'top': '',
      'arrayBranch': { 'beforeLoop': '' },
      'objectBranch': { 'beforeLoop': '' }
    };

    while (++index < length) {
      object = arguments[index];
      for (prop in object) {
        value = (value = object[prop]) == null ? '' : value;
        // keep this regexp explicit for the build pre-process
        if (/beforeLoop|inLoop/.test(prop)) {
          if (typeof value == 'string') {
            value = { 'array': value, 'object': value };
          }
          data.arrayBranch[prop] = value.array || '';
          data.objectBranch[prop] = value.object || '';
        } else {
          data[prop] = value;
        }
      }
    }
    // set additional template `data` values
    var args = data.args,
        firstArg = /^[^,]+/.exec(args)[0],
        useStrict = data.useStrict;

    data.firstArg = firstArg;
    data.hasDontEnumBug = hasDontEnumBug;
    data.isKeysFast = isKeysFast;
    data.noArgsEnum = noArgsEnum;
    data.shadowed = shadowed;
    data.useHas = data.useHas !== false;
    data.useStrict = useStrict == null ? isStrictFast : useStrict;

    if (data.noCharByIndex == null) {
      data.noCharByIndex = noCharByIndex;
    }
    if (!data.exit) {
      data.exit = 'if (!' + firstArg + ') return result';
    }
    if (firstArg != 'collection' || !data.arrayBranch.inLoop) {
      data.arrayBranch = null;
    }
    // create the function factory
    var factory = Function(
        'arrayLikeClasses, ArrayProto, bind, compareAscending, concat, forIn, ' +
        'hasOwnProperty, identity, indexOf, isArguments, isArray, isFunction, ' +
        'isPlainObject, iteratorBind, objectClass, objectTypes, nativeKeys, ' +
        'propertyIsEnumerable, slice, stringClass, toString',
      'var callee = function(' + args + ') {\n' + iteratorTemplate(data) + '\n};\n' +
      'return callee'
    );
    // return the compiled function
    return factory(
      arrayLikeClasses, ArrayProto, bind, compareAscending, concat, forIn,
      hasOwnProperty, identity, indexOf, isArguments, isArray, isFunction,
      isPlainObject, iteratorBind, objectClass, objectTypes, nativeKeys,
      propertyIsEnumerable, slice, stringClass, toString
    );
  }

  /**
   * Used by `sortBy` to compare transformed `collection` values, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {Number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ai = a.index,
        bi = b.index;

    a = a.criteria;
    b = b.criteria;

    if (a === undefined) {
      return 1;
    }
    if (b === undefined) {
      return -1;
    }
    // ensure a stable sort in V8 and other engines
    // http://code.google.com/p/v8/issues/detail?id=90
    return a < b ? -1 : a > b ? 1 : ai < bi ? -1 : 1;
  }

  /**
   * Used by `template` to replace tokens with their corresponding code snippets.
   *
   * @private
   * @param {String} match The matched token.
   * @param {String} index The `tokenized` index of the code snippet.
   * @returns {String} Returns the code snippet.
   */
  function detokenize(match, index) {
    return tokenized[index];
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {String} match The matched character to escape.
   * @returns {String} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Used by `escape` to convert characters to HTML entities.
   *
   * @private
   * @param {String} match The matched character to escape.
   * @returns {String} Returns the escaped character.
   */
  function escapeHtmlChar(match) {
    return htmlEscapes[match];
  }

  /**
   * Creates a new function that, when called, invokes `func` with the `this`
   * binding of `thisArg` and the arguments (value, index, object).
   *
   * @private
   * @param {Function} func The function to bind.
   * @param {Mixed} [thisArg] The `this` binding of `func`.
   * @returns {Function} Returns the new bound function.
   */
  function iteratorBind(func, thisArg) {
    return function(value, index, object) {
      return func.call(thisArg, value, index, object);
    };
  }

  /**
   * A no-operation function.
   *
   * @private
   */
  function noop() {
    // no operation performed
  }

  /**
   * Used by `template` to replace "escape" template delimiters with tokens.
   *
   * @private
   * @param {String} match The matched template delimiter.
   * @param {String} value The delimiter value.
   * @returns {String} Returns a token.
   */
  function tokenizeEscape(match, value) {
    if (match && reComplexDelimiter.test(value)) {
      return '<e%-' + value + '%>';
    }
    var index = tokenized.length;
    tokenized[index] = "' +\n__e(" + value + ") +\n'";
    return token + index;
  }

  /**
   * Used by `template` to replace "evaluate" template delimiters, or complex
   * "escape" and "interpolate" delimiters, with tokens.
   *
   * @private
   * @param {String} match The matched template delimiter.
   * @param {String} escapeValue The complex "escape" delimiter value.
   * @param {String} interpolateValue The complex "interpolate" delimiter value.
   * @param {String} [evaluateValue] The "evaluate" delimiter value.
   * @returns {String} Returns a token.
   */
  function tokenizeEvaluate(match, escapeValue, interpolateValue, evaluateValue) {
    if (evaluateValue) {
      var index = tokenized.length;
      tokenized[index] = "';\n" + evaluateValue + ";\n__p += '";
      return token + index;
    }
    return escapeValue
      ? tokenizeEscape(null, escapeValue)
      : tokenizeInterpolate(null, interpolateValue);
  }

  /**
   * Used by `template` to replace "interpolate" template delimiters with tokens.
   *
   * @private
   * @param {String} match The matched template delimiter.
   * @param {String} value The delimiter value.
   * @returns {String} Returns a token.
   */
  function tokenizeInterpolate(match, value) {
    if (match && reComplexDelimiter.test(value)) {
      return '<e%=' + value + '%>';
    }
    var index = tokenized.length;
    tokenized[index] = "' +\n((__t = (" + value + ")) == null ? '' : __t) +\n'";
    return token + index;
  }

  /**
   * Used by `unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {String} match The matched character to unescape.
   * @returns {String} Returns the unescaped character.
   */
  function unescapeHtmlChar(match) {
    return htmlUnescapes[match];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Checks if `value` is an `arguments` object.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
   * @example
   *
   * (function() { return _.isArguments(arguments); })(1, 2, 3);
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    return toString.call(value) == argsClass;
  }
  // fallback for browsers that can't detect `arguments` objects by [[Class]]
  if (noArgsClass) {
    isArguments = function(value) {
      return !!(value && hasOwnProperty.call(value, 'callee'));
    };
  }

  /**
   * Checks if `value` is an array.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is an array, else `false`.
   * @example
   *
   * (function() { return _.isArray(arguments); })();
   * // => false
   *
   * _.isArray([1, 2, 3]);
   * // => true
   */
  var isArray = nativeIsArray || function(value) {
    return toString.call(value) == arrayClass;
  };

  /**
   * Checks if `value` is a function.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(''.concat);
   * // => true
   */
  function isFunction(value) {
    return typeof value == 'function';
  }
  // fallback for older versions of Chrome and Safari
  if (isFunction(/x/)) {
    isFunction = function(value) {
      return toString.call(value) == funcClass;
    };
  }

  /**
   * Checks if a given `value` is an object created by the `Object` constructor
   * assuming objects created by the `Object` constructor have no inherited
   * enumerable properties and that there are no `Object.prototype` extensions.
   *
   * @private
   * @param {Mixed} value The value to check.
   * @param {Boolean} [skipArgsCheck=false] Internally used to skip checks for
   *  `arguments` objects.
   * @returns {Boolean} Returns `true` if the `value` is a plain `Object` object,
   *  else `false`.
   */
  function isPlainObject(value, skipArgsCheck) {
    return value
      ? value == ObjectProto || (value.__proto__ == ObjectProto && (skipArgsCheck || !isArguments(value)))
      : false;
  }
  // fallback for IE
  if (!isPlainObject(objectTypes)) {
    isPlainObject = function(value, skipArgsCheck) {
      // avoid non-objects and false positives for `arguments` objects
      var result = false;
      if (!(value && typeof value == 'object') || (!skipArgsCheck && isArguments(value))) {
        return result;
      }
      // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
      // methods that are `typeof` "string" and still can coerce nodes to strings.
      // Also check that the constructor is `Object` (i.e. `Object instanceof Object`)
      var ctor = value.constructor;
      if ((!noNodeClass || !(typeof value.toString != 'function' && typeof (value + '') == 'string')) &&
          (!isFunction(ctor) || ctor instanceof ctor)) {
        // IE < 9 iterates inherited properties before own properties. If the first
        // iterated property is an object's own property then there are no inherited
        // enumerable properties.
        if (iteratesOwnLast) {
          forIn(value, function(objValue, objKey) {
            result = !hasOwnProperty.call(value, objKey);
            return false;
          });
          return result === false;
        }
        // In most environments an object's own properties are iterated before
        // its inherited properties. If the last iterated property is an object's
        // own property then there are no inherited enumerable properties.
        forIn(value, function(objValue, objKey) {
          result = objKey;
        });
        return result === false || hasOwnProperty.call(value, result);
      }
      return result;
    };
  }

  /**
   * A shim implementation of `Object.keys` that produces an array of the given
   * object's own enumerable property names.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns a new array of property names.
   */
  var shimKeys = createIterator({
    'args': 'object',
    'init': '[]',
    'inLoop': 'result.push(index)'
  });

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a clone of `value`. If `deep` is `true`, all nested objects will
   * also be cloned otherwise they will be assigned by reference. If a value has
   * a `clone` method it will be used to perform the clone. Functions, DOM nodes,
   * `arguments` objects, and objects created by constructors other than `Object`
   * are **not** cloned unless they have a custom `clone` method.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to clone.
   * @param {Boolean} deep A flag to indicate a deep clone.
   * @param {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `deep`.
   * @param {Array} [stack=[]] Internally used to keep track of traversed objects
   *  to avoid circular references.
   * @param {Object} thorough Internally used to indicate whether or not to perform
   *  a more thorough clone of non-object values.
   * @returns {Mixed} Returns the cloned `value`.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * _.clone({ 'name': 'moe' });
   * // => { 'name': 'moe' }
   *
   * var shallow = _.clone(stooges);
   * shallow[0] === stooges[0];
   * // => true
   *
   * var deep = _.clone(stooges, true);
   * shallow[0] === stooges[0];
   * // => false
   */
  function clone(value, deep, guard, stack, thorough) {
    if (value == null) {
      return value;
    }
    if (guard) {
      deep = false;
    }
    // avoid slower checks on primitives
    thorough || (thorough = { 'value': null });
    if (thorough.value == null) {
      // primitives passed from iframes use the primary document's native prototypes
      thorough.value = !!(BoolProto.clone || NumberProto.clone || StringProto.clone);
    }
    // use custom `clone` method if available
    var isObj = objectTypes[typeof value];
    if ((isObj || thorough.value) && value.clone && isFunction(value.clone)) {
      thorough.value = null;
      return value.clone(deep);
    }
    // inspect [[Class]]
    if (isObj) {
      // don't clone `arguments` objects, functions, or non-object Objects
      var className = toString.call(value);
      if (!cloneableClasses[className] || (noArgsClass && isArguments(value))) {
        return value;
      }
      var isArr = className == arrayClass;
      isObj = isArr || (className == objectClass ? isPlainObject(value, true) : isObj);
    }
    // shallow clone
    if (!isObj || !deep) {
      // don't clone functions
      return isObj
        ? (isArr ? slice.call(value) : extend({}, value))
        : value;
    }

    var ctor = value.constructor;
    switch (className) {
      case boolClass:
        return new ctor(value == true);

      case dateClass:
        return new ctor(+value);

      case numberClass:
      case stringClass:
        return new ctor(value);

      case regexpClass:
        return ctor(value.source, reFlags.exec(value));
    }

    // check for circular references and return corresponding clone
    stack || (stack = []);
    var length = stack.length;
    while (length--) {
      if (stack[length].source == value) {
        return stack[length].value;
      }
    }

    // init cloned object
    length = value.length;
    var result = isArr ? ctor(length) : {};

    // add current clone and original source value to the stack of traversed objects
    stack.push({ 'value': result, 'source': value });

    // recursively populate clone (susceptible to call stack limits)
    if (isArr) {
      var index = -1;
      while (++index < length) {
        result[index] = clone(value[index], deep, null, stack, thorough);
      }
    } else {
      forOwn(value, function(objValue, key) {
        result[key] = clone(objValue, deep, null, stack, thorough);
      });
    }
    return result;
  }

  /**
   * Assigns enumerable properties of the default object(s) to the `destination`
   * object for all `destination` properties that resolve to `null`/`undefined`.
   * Once a property is set, additional defaults of the same property will be
   * ignored.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The destination object.
   * @param {Object} [default1, default2, ...] The default objects.
   * @returns {Object} Returns the destination object.
   * @example
   *
   * var iceCream = { 'flavor': 'chocolate' };
   * _.defaults(iceCream, { 'flavor': 'vanilla', 'sprinkles': 'rainbow' });
   * // => { 'flavor': 'chocolate', 'sprinkles': 'rainbow' }
   */
  var defaults = createIterator(extendIteratorOptions, {
    'inLoop': 'if (result[index] == null) ' + extendIteratorOptions.inLoop
  });

  /**
   * Creates a shallow clone of `object` excluding the specified properties.
   * Property names may be specified as individual arguments or as arrays of
   * property names. If `callback` is passed, it will be executed for each property
   * in the `object`, dropping the properties `callback` returns truthy for. The
   * `callback` is bound to `thisArg` and invoked with 3 arguments; (value, key, object).
   *
   * @static
   * @memberOf _
   * @alias omit
   * @category Objects
   * @param {Object} object The source object.
   * @param {Function|String} callback|[prop1, prop2, ...] The properties to drop
   *  or the function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Object} Returns an object without the dropped properties.
   * @example
   *
   * _.drop({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'userid');
   * // => { 'name': 'moe', 'age': 40 }
   *
   * _.drop({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {
   *   return key.charAt(0) == '_';
   * });
   * // => { 'name': 'moe' }
   */
  var drop = createIterator(dropIteratorOptions);

  /**
   * Assigns enumerable properties of the source object(s) to the `destination`
   * object. Subsequent sources will overwrite propery assignments of previous
   * sources.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The destination object.
   * @param {Object} [source1, source2, ...] The source objects.
   * @returns {Object} Returns the destination object.
   * @example
   *
   * _.extend({ 'name': 'moe' }, { 'age': 40 });
   * // => { 'name': 'moe', 'age': 40 }
   */
  var extend = createIterator(extendIteratorOptions);

  /**
   * Iterates over `object`'s own and inherited enumerable properties, executing
   * the `callback` for each property. The `callback` is bound to `thisArg` and
   * invoked with 3 arguments; (value, key, object). Callbacks may exit iteration
   * early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function Dog(name) {
   *   this.name = name;
   * }
   *
   * Dog.prototype.bark = function() {
   *   alert('Woof, woof!');
   * };
   *
   * _.forIn(new Dog('Dagny'), function(value, key) {
   *   alert(key);
   * });
   * // => alerts 'name' and 'bark' (order is not guaranteed)
   */
  var forIn = createIterator(baseIteratorOptions, forEachIteratorOptions, forOwnIteratorOptions, {
    'useHas': false
  });

  /**
   * Iterates over `object`'s own enumerable properties, executing the `callback`
   * for each property. The `callback` is bound to `thisArg` and invoked with 3
   * arguments; (value, key, object). Callbacks may exit iteration early by
   * explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Object} Returns `object`.
   * @example
   *
   * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
   *   alert(key);
   * });
   * // => alerts '0', '1', and 'length' (order is not guaranteed)
   */
  var forOwn = createIterator(baseIteratorOptions, forEachIteratorOptions, forOwnIteratorOptions);

  /**
   * Creates a sorted array of all enumerable properties, own and inherited,
   * of `object` that have function values.
   *
   * @static
   * @memberOf _
   * @alias methods
   * @category Objects
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns a new array of property names that have function values.
   * @example
   *
   * _.functions(_);
   * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
   */
  var functions = createIterator({
    'useHas': false,
    'args': 'object',
    'init': '[]',
    'inLoop': 'if (isFunction(value)) result.push(index)',
    'bottom': 'result.sort()'
  });

  /**
   * Checks if the specified object `property` exists and is a direct property,
   * instead of an inherited property.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to check.
   * @param {String} property The property to check for.
   * @returns {Boolean} Returns `true` if key is a direct property, else `false`.
   * @example
   *
   * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
   * // => true
   */
  function has(object, property) {
    return object ? hasOwnProperty.call(object, property) : false;
  }

  /**
   * Checks if `value` is a boolean (`true` or `false`) value.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a boolean value, else `false`.
   * @example
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false || toString.call(value) == boolClass;
  }

  /**
   * Checks if `value` is a date.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a date, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   */
  function isDate(value) {
    return toString.call(value) == dateClass;
  }

  /**
   * Checks if `value` is a DOM element.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a DOM element, else `false`.
   * @example
   *
   * _.isElement(document.body);
   * // => true
   */
  function isElement(value) {
    return value ? value.nodeType === 1 : false;
  }

  /**
   * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
   * length of `0` and objects with no own enumerable properties are considered
   * "empty".
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Array|Object|String} value The value to inspect.
   * @returns {Boolean} Returns `true` if the `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({});
   * // => true
   *
   * _.isEmpty('');
   * // => true
   */
  var isEmpty = createIterator({
    'args': 'value',
    'init': 'true',
    'top':
      'var className = toString.call(value),\n' +
      '    length = value.length;\n' +
      'if (arrayLikeClasses[className]' +
      (noArgsClass ? ' || isArguments(value)' : '') + ' ||\n' +
      '  (className == objectClass && length > -1 && length === length >>> 0 &&\n' +
      '  isFunction(value.splice))' +
      ') return !length',
    'inLoop': {
      'object': 'return false'
    }
  });

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent to each other. If a value has an `isEqual` method it will be
   * used to perform the comparison.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} a The value to compare.
   * @param {Mixed} b The other value to compare.
   * @param {Array} [stack=[]] Internally used to keep track of traversed objects
   *  to avoid circular references.
   * @param {Object} thorough Internally used to indicate whether or not to perform
   *  a more thorough comparison of non-object values.
   * @returns {Boolean} Returns `true` if the values are equvalent, else `false`.
   * @example
   *
   * var moe = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };
   * var clone = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };
   *
   * moe == clone;
   * // => false
   *
   * _.isEqual(moe, clone);
   * // => true
   */
  function isEqual(a, b, stack, thorough) {
    // a strict comparison is necessary because `null == undefined`
    if (a == null || b == null) {
      return a === b;
    }
    // avoid slower checks on non-objects
    thorough || (thorough = { 'value': null });
    if (thorough.value == null) {
      // primitives passed from iframes use the primary document's native prototypes
      thorough.value = !!(BoolProto.isEqual || NumberProto.isEqual || StringProto.isEqual);
    }
    if (objectTypes[typeof a] || objectTypes[typeof b] || thorough.value) {
      // unwrap any LoDash wrapped values
      if (a._chain) {
        a = a._wrapped;
      }
      if (b._chain) {
        b = b._wrapped;
      }
      // use custom `isEqual` method if available
      if (a.isEqual && isFunction(a.isEqual)) {
        thorough.value = null;
        return a.isEqual(b);
      }
      if (b.isEqual && isFunction(b.isEqual)) {
        thorough.value = null;
        return b.isEqual(a);
      }
    }
    // exit early for identical values
    if (a === b) {
      // treat `+0` vs. `-0` as not equal
      return a !== 0 || (1 / a == 1 / b);
    }
    // compare [[Class]] names
    var className = toString.call(a);
    if (className != toString.call(b)) {
      return false;
    }
    switch (className) {
      case boolClass:
      case dateClass:
        // coerce dates and booleans to numbers, dates to milliseconds and booleans
        // to `1` or `0`, treating invalid dates coerced to `NaN` as not equal
        return +a == +b;

      case numberClass:
        // treat `NaN` vs. `NaN` as equal
        return a != +a
          ? b != +b
          // but treat `+0` vs. `-0` as not equal
          : (a == 0 ? (1 / a == 1 / b) : a == +b);

      case regexpClass:
      case stringClass:
        // coerce regexes to strings (http://es5.github.com/#x15.10.6.4)
        // treat string primitives and their corresponding object instances as equal
        return a == b + '';
    }
    // exit early, in older browsers, if `a` is array-like but not `b`
    var isArr = arrayLikeClasses[className];
    if (noArgsClass && !isArr && (isArr = isArguments(a)) && !isArguments(b)) {
      return false;
    }
    // exit for functions and DOM nodes
    if (!isArr && (className != objectClass || (noNodeClass && (
        (typeof a.toString != 'function' && typeof (a + '') == 'string') ||
        (typeof b.toString != 'function' && typeof (b + '') == 'string'))))) {
      return false;
    }

    // assume cyclic structures are equal
    // the algorithm for detecting cyclic structures is adapted from ES 5.1
    // section 15.12.3, abstract operation `JO` (http://es5.github.com/#x15.12.3)
    stack || (stack = []);
    var length = stack.length;
    while (length--) {
      if (stack[length] == a) {
        return true;
      }
    }

    var index = -1,
        result = true,
        size = 0;

    // add `a` to the stack of traversed objects
    stack.push(a);

    // recursively compare objects and arrays (susceptible to call stack limits)
    if (isArr) {
      // compare lengths to determine if a deep comparison is necessary
      size = a.length;
      result = size == b.length;

      if (result) {
        // deep compare the contents, ignoring non-numeric properties
        while (size--) {
          if (!(result = isEqual(a[size], b[size], stack, thorough))) {
            break;
          }
        }
      }
      return result;
    }

    var ctorA = a.constructor,
        ctorB = b.constructor;

    // non `Object` object instances with different constructors are not equal
    if (ctorA != ctorB && !(
          isFunction(ctorA) && ctorA instanceof ctorA &&
          isFunction(ctorB) && ctorB instanceof ctorB
        )) {
      return false;
    }
    // deep compare objects
    for (var prop in a) {
      if (hasOwnProperty.call(a, prop)) {
        // count the number of properties.
        size++;
        // deep compare each property value.
        if (!(hasOwnProperty.call(b, prop) && isEqual(a[prop], b[prop], stack, thorough))) {
          return false;
        }
      }
    }
    // ensure both objects have the same number of properties
    for (prop in b) {
      // The JS engine in Adobe products, like InDesign, has a bug that causes
      // `!size--` to throw an error so it must be wrapped in parentheses.
      // https://github.com/documentcloud/underscore/issues/355
      if (hasOwnProperty.call(b, prop) && !(size--)) {
        // `size` will be `-1` if `b` has more properties than `a`
        return false;
      }
    }
    // handle JScript [[DontEnum]] bug
    if (hasDontEnumBug) {
      while (++index < 7) {
        prop = shadowed[index];
        if (hasOwnProperty.call(a, prop) &&
            !(hasOwnProperty.call(b, prop) && isEqual(a[prop], b[prop], stack, thorough))) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * Checks if `value` is a finite number.
   *
   * Note: This is not the same as native `isFinite`, which will return true for
   * booleans and other values. See http://es5.github.com/#x15.1.2.5.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a finite number, else `false`.
   * @example
   *
   * _.isFinite(-101);
   * // => true
   *
   * _.isFinite('10');
   * // => false
   *
   * _.isFinite(Infinity);
   * // => false
   */
  function isFinite(value) {
    return nativeIsFinite(value) && toString.call(value) == numberClass;
  }

  /**
   * Checks if `value` is the language type of Object.
   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject(1);
   * // => false
   */
  function isObject(value) {
    // check if the value is the ECMAScript language type of Object
    // http://es5.github.com/#x8
    // and avoid a V8 bug
    // http://code.google.com/p/v8/issues/detail?id=2291
    return value ? objectTypes[typeof value] : false;
  }

  /**
   * Checks if `value` is `NaN`.
   *
   * Note: This is not the same as native `isNaN`, which will return true for
   * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN(value) {
    // `NaN` as a primitive is the only value that is not equal to itself
    // (perform the [[Class]] check first to avoid errors with some host objects in IE)
    return toString.call(value) == numberClass && value != +value
  }

  /**
   * Checks if `value` is `null`.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(undefined);
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /**
   * Checks if `value` is a number.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(8.4 * 5;
   * // => true
   */
  function isNumber(value) {
    return toString.call(value) == numberClass;
  }

  /**
   * Checks if `value` is a regular expression.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a regular expression, else `false`.
   * @example
   *
   * _.isRegExp(/moe/);
   * // => true
   */
  function isRegExp(value) {
    return toString.call(value) == regexpClass;
  }

  /**
   * Checks if `value` is a string.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is a string, else `false`.
   * @example
   *
   * _.isString('moe');
   * // => true
   */
  function isString(value) {
    return toString.call(value) == stringClass;
  }

  /**
   * Checks if `value` is `undefined`.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Objects
   * @param {Mixed} value The value to check.
   * @returns {Boolean} Returns `true` if the `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /**
   * Creates an array composed of the own enumerable property names of `object`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns a new array of property names.
   * @example
   *
   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
   * // => ['one', 'two', 'three'] (order is not guaranteed)
   */
  var keys = !nativeKeys ? shimKeys : function(object) {
    var type = typeof object;

    // avoid iterating over the `prototype` property
    if (type == 'function' && propertyIsEnumerable.call(object, 'prototype')) {
      return shimKeys(object);
    }
    return object && objectTypes[type]
      ? nativeKeys(object)
      : [];
  };

  /**
   * Merges enumerable properties of the source object(s) into the `destination`
   * object. Subsequent sources will overwrite propery assignments of previous
   * sources.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The destination object.
   * @param {Object} [source1, source2, ...] The source objects.
   * @param {Object} [indicator] Internally used to indicate that the `stack`
   *  argument is an array of traversed objects instead of another source object.
   * @param {Array} [stack=[]] Internally used to keep track of traversed objects
   *  to avoid circular references.
   * @returns {Object} Returns the destination object.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe' },
   *   { 'name': 'larry' }
   * ];
   *
   * var ages = [
   *   { 'age': 40 },
   *   { 'age': 50 }
   * ];
   *
   * _.merge(stooges, ages);
   * // => [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }]
   */
  var merge = createIterator(extendIteratorOptions, {
    'args': 'object, source, indicator, stack',
    'top':
      'var destValue, found, isArr, stackLength, recursive = indicator == isPlainObject;\n' +
      'if (!recursive) stack = [];\n' +
      'for (var argsIndex = 1, argsLength = recursive ? 2 : arguments.length; argsIndex < argsLength; argsIndex++) {\n' +
      '  if (iteratee = arguments[argsIndex]) {',
    'inLoop':
      'if (value && ((isArr = isArray(value)) || isPlainObject(value))) {\n' +
      '  found = false; stackLength = stack.length;\n' +
      '  while (stackLength--) {\n' +
      '    if (found = stack[stackLength].source == value) break\n' +
      '  }\n' +
      '  if (found) {\n' +
      '    result[index] = stack[stackLength].value\n' +
      '  } else {\n' +
      '    destValue = (destValue = result[index]) && isArr\n' +
      '      ? (isArray(destValue) ? destValue : [])\n' +
      '      : (isPlainObject(destValue) ? destValue : {});\n' +
      '    stack.push({ value: destValue, source: value });\n' +
      '    result[index] = callee(destValue, value, isPlainObject, stack)\n' +
      '  }\n' +
      '} else if (value != null) {\n' +
      '  result[index] = value\n' +
      '}'
  });

  /**
   * Creates a shallow clone of `object` composed of the specified properties.
   * Property names may be specified as individual arguments or as arrays of
   * property names. If `callback` is passed, it will be executed for each property
   * in the `object`, picking the properties `callback` returns truthy for. The
   * `callback` is bound to `thisArg` and invoked with 3 arguments; (value, key, object).
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The source object.
   * @param {Function|String} callback|[prop1, prop2, ...] The properties to pick
   *  or the function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Object} Returns an object composed of the picked properties.
   * @example
   *
   * _.pick({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'name', 'age');
   * // => { 'name': 'moe', 'age': 40 }
   *
   * _.pick({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {
   *   return key.charAt(0) != '_';
   * });
   * // => { 'name': 'moe' }
   */
  var pick = createIterator(dropIteratorOptions, {
    'top':
      'if (typeof callback != \'function\') {\n' +
      '  var prop,\n' +
      '      props = concat.apply(ArrayProto, arguments),\n' +
      '      length = props.length;\n' +
      '  for (index = 1; index < length; index++) {\n' +
      '    prop = props[index];\n' +
      '    if (prop in object) result[prop] = object[prop]\n' +
      '  }\n' +
      '} else {\n' +
      '  if (thisArg) callback = iteratorBind(callback, thisArg)',
    'inLoop':
      'if (callback(value, index, object)) result[index] = value',
    'bottom': '}'
  });

  /**
   * Gets the size of `value` by returning `value.length` if `value` is an
   * array, string, or `arguments` object. If `value` is an object, size is
   * determined by returning the number of own enumerable properties it has.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Array|Object|String} value The value to inspect.
   * @returns {Number} Returns `value.length` or number of own enumerable properties.
   * @example
   *
   * _.size([1, 2]);
   * // => 2
   *
   * _.size({ 'one': 1, 'two': 2, 'three': 3 });
   * // => 3
   *
   * _.size('curly');
   * // => 5
   */
  function size(value) {
    if (!value) {
      return 0;
    }
    var className = toString.call(value),
        length = value.length;

    // return `value.length` for `arguments` objects, arrays, strings, and DOM
    // query collections of libraries like jQuery and MooTools
    // http://code.google.com/p/fbug/source/browse/branches/firebug1.9/content/firebug/chrome/reps.js?r=12614#653
    // http://trac.webkit.org/browser/trunk/Source/WebCore/inspector/InjectedScriptSource.js?rev=125186#L609
    if (arrayLikeClasses[className] || (noArgsClass && isArguments(value)) ||
        (className == objectClass && length > -1 && length === length >>> 0 && isFunction(value.splice))) {
      return length;
    }
    return keys(value).length;
  }

  /**
   * Creates an array composed of the own enumerable property values of `object`.
   *
   * @static
   * @memberOf _
   * @category Objects
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns a new array of property values.
   * @example
   *
   * _.values({ 'one': 1, 'two': 2, 'three': 3 });
   * // => [1, 2, 3]
   */
  var values = createIterator({
    'args': 'object',
    'init': '[]',
    'inLoop': 'result.push(value)'
  });

  /*--------------------------------------------------------------------------*/

  /**
   * Checks if a given `target` element is present in a `collection` using strict
   * equality for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @alias include
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Mixed} target The value to check for.
   * @returns {Boolean} Returns `true` if the `target` element is found, else `false`.
   * @example
   *
   * _.contains([1, 2, 3], 3);
   * // => true
   *
   * _.contains({ 'name': 'moe', 'age': 40 }, 'moe');
   * // => true
   *
   * _.contains('curly', 'ur');
   * // => true
   */
  var contains = createIterator({
    'args': 'collection, target',
    'init': 'false',
    'noCharByIndex': false,
    'beforeLoop': {
      'array': 'if (toString.call(collection) == stringClass) return collection.indexOf(target) > -1'
    },
    'inLoop': 'if (value === target) return true'
  });

  /**
   * Creates an object composed of keys returned from running each element of
   * `collection` through a `callback`. The corresponding value of each key is
   * the number of times the key was returned by `callback`. The `callback` is
   * bound to `thisArg` and invoked with 3 arguments; (value, index|key, collection).
   * The `callback` argument may also be the name of a property to count by (e.g. 'length').
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function|String} callback|property The function called per iteration
   *  or property name to count by.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
   * // => { '4': 1, '6': 2 }
   *
   * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
   * // => { '4': 1, '6': 2 }
   *
   * _.countBy(['one', 'two', 'three'], 'length');
   * // => { '3': 2, '5': 1 }
   */
  var countBy = createIterator(baseIteratorOptions, countByIteratorOptions);

  /**
   * Checks if the `callback` returns a truthy value for **all** elements of a
   * `collection`. The `callback` is bound to `thisArg` and invoked with 3
   * arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias all
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Boolean} Returns `true` if all elements pass the callback check, else `false`.
   * @example
   *
   * _.every([true, 1, null, 'yes'], Boolean);
   * // => false
   */
  var every = createIterator(baseIteratorOptions, everyIteratorOptions);

  /**
   * Examines each element in a `collection`, returning an array of all elements
   * the `callback` returns truthy for. The `callback` is bound to `thisArg` and
   * invoked with 3 arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias select
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Array} Returns a new array of elements that passed callback check.
   * @example
   *
   * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
   * // => [2, 4, 6]
   */
  var filter = createIterator(baseIteratorOptions, filterIteratorOptions);

  /**
   * Examines each element in a `collection`, returning the first one the `callback`
   * returns truthy for. The function returns as soon as it finds an acceptable
   * element, and does not iterate over the entire `collection`. The `callback` is
   * bound to `thisArg` and invoked with 3 arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias detect
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Mixed} Returns the element that passed the callback check, else `undefined`.
   * @example
   *
   * var even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
   * // => 2
   */
  var find = createIterator(baseIteratorOptions, forEachIteratorOptions, {
    'init': '',
    'inLoop': 'if (callback(value, index, collection)) return value'
  });

  /**
   * Iterates over a `collection`, executing the `callback` for each element in
   * the `collection`. The `callback` is bound to `thisArg` and invoked with 3
   * arguments; (value, index|key, collection). Callbacks may exit iteration
   * early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @alias each
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Array|Object} Returns `collection`.
   * @example
   *
   * _([1, 2, 3]).forEach(alert).join(',');
   * // => alerts each number and returns '1,2,3'
   *
   * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);
   * // => alerts each number (order is not guaranteed)
   */
  var forEach = createIterator(baseIteratorOptions, forEachIteratorOptions);

  /**
   * Creates an object composed of keys returned from running each element of
   * `collection` through a `callback`. The corresponding value of each key is an
   * array of elements passed to `callback` that returned the key. The `callback`
   * is bound to `thisArg` and invoked with 3 arguments; (value, index|key, collection).
   * The `callback` argument may also be the name of a property to count by (e.g. 'length').
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function|String} callback|property The function called per iteration
   *  or property name to group by.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
   * // => { '4': [4.2], '6': [6.1, 6.4] }
   *
   * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
   * // => { '4': [4.2], '6': [6.1, 6.4] }
   *
   * _.groupBy(['one', 'two', 'three'], 'length');
   * // => { '3': ['one', 'two'], '5': ['three'] }
   */
  var groupBy = createIterator(baseIteratorOptions, countByIteratorOptions, {
    'inLoop':
      'prop = callback(value, index, collection);\n' +
      '(hasOwnProperty.call(result, prop) ? result[prop] : result[prop] = []).push(value)'
  });

  /**
   * Invokes the method named by `methodName` on each element in the `collection`.
   * Additional arguments will be passed to each invoked method. If `methodName`
   * is a function it will be invoked for, and `this` bound to, each element
   * in the `collection`.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function|String} methodName The name of the method to invoke or
   *  the function invoked per iteration.
   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.
   * @returns {Array} Returns a new array of values returned from each invoked method.
   * @example
   *
   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
   * // => [[1, 5, 7], [1, 2, 3]]
   *
   * _.invoke([123, 456], String.prototype.split, '');
   * // => [['1', '2', '3'], ['4', '5', '6']]
   */
  var invoke = createIterator(mapIteratorOptions, {
    'args': 'collection, methodName',
    'top':
      'var args = slice.call(arguments, 2),\n' +
      '    isFunc = typeof methodName == \'function\'',
    'inLoop': {
      'array':
        'result[index] = (isFunc ? methodName : value[methodName]).apply(value, args)',
      'object':
        'result' + (isKeysFast ? '[ownIndex] = ' : '.push') +
        '((isFunc ? methodName : value[methodName]).apply(value, args))'
    }
  });

  /**
   * Creates a new array of values by running each element in the `collection`
   * through a `callback`. The `callback` is bound to `thisArg` and invoked with
   * 3 arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias collect
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Array} Returns a new array of elements returned by the callback.
   * @example
   *
   * _.map([1, 2, 3], function(num) { return num * 3; });
   * // => [3, 6, 9]
   *
   * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
   * // => [3, 6, 9] (order is not guaranteed)
   */
  var map = createIterator(baseIteratorOptions, mapIteratorOptions);

  /**
   * Retrieves the value of a specified property from all elements in
   * the `collection`.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {String} property The property to pluck.
   * @returns {Array} Returns a new array of property values.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * _.pluck(stooges, 'name');
   * // => ['moe', 'larry', 'curly']
   */
  var pluck = createIterator(mapIteratorOptions, {
    'args': 'collection, property',
    'inLoop': {
      'array':  'result[index] = value[property]',
      'object': 'result' + (isKeysFast ? '[ownIndex] = ' : '.push') + '(value[property])'
    }
  });

  /**
   * Boils down a `collection` to a single value. The initial state of the
   * reduction is `accumulator` and each successive step of it should be returned
   * by the `callback`. The `callback` is bound to `thisArg` and invoked with 4
   * arguments; for arrays they are (accumulator, value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias foldl, inject
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [accumulator] Initial value of the accumulator.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Mixed} Returns the accumulated value.
   * @example
   *
   * var sum = _.reduce([1, 2, 3], function(memo, num) { return memo + num; });
   * // => 6
   */
  var reduce = createIterator({
    'args': 'collection, callback, accumulator, thisArg',
    'init': 'accumulator',
    'top':
      'var noaccum = arguments.length < 3;\n' +
      'if (thisArg) callback = iteratorBind(callback, thisArg)',
    'beforeLoop': {
      'array': 'if (noaccum) result = iteratee[++index]'
    },
    'inLoop': {
      'array':
        'result = callback(result, value, index, collection)',
      'object':
        'result = noaccum\n' +
        '  ? (noaccum = false, value)\n' +
        '  : callback(result, value, index, collection)'
    }
  });

  /**
   * The right-associative version of `_.reduce`.
   *
   * @static
   * @memberOf _
   * @alias foldr
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [accumulator] Initial value of the accumulator.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Mixed} Returns the accumulated value.
   * @example
   *
   * var list = [[0, 1], [2, 3], [4, 5]];
   * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
   * // => [4, 5, 2, 3, 0, 1]
   */
  function reduceRight(collection, callback, accumulator, thisArg) {
    if (!collection) {
      return accumulator;
    }

    var length = collection.length,
        noaccum = arguments.length < 3;

    if(thisArg) {
      callback = iteratorBind(callback, thisArg);
    }
    // Opera 10.53-10.60 JITted `length >>> 0` returns the wrong value for negative numbers
    if (length > -1 && length === length >>> 0) {
      var iteratee = noCharByIndex && toString.call(collection) == stringClass
        ? collection.split('')
        : collection;

      if (length && noaccum) {
        accumulator = iteratee[--length];
      }
      while (length--) {
        accumulator = callback(accumulator, iteratee[length], length, collection);
      }
      return accumulator;
    }

    var prop,
        props = keys(collection);

    length = props.length;
    if (length && noaccum) {
      accumulator = collection[props[--length]];
    }
    while (length--) {
      prop = props[length];
      accumulator = callback(accumulator, collection[prop], prop, collection);
    }
    return accumulator;
  }

  /**
   * The opposite of `_.filter`, this method returns the values of a
   * `collection` that `callback` does **not** return truthy for.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Array} Returns a new array of elements that did **not** pass the callback check.
   * @example
   *
   * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
   * // => [1, 3, 5]
   */
  var reject = createIterator(baseIteratorOptions, filterIteratorOptions, {
    'inLoop': '!' + filterIteratorOptions.inLoop
  });

  /**
   * Checks if the `callback` returns a truthy value for **any** element of a
   * `collection`. The function returns as soon as it finds passing value, and
   * does not iterate over the entire `collection`. The `callback` is bound to
   * `thisArg` and invoked with 3 arguments; (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @alias any
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Boolean} Returns `true` if any element passes the callback check, else `false`.
   * @example
   *
   * _.some([null, 0, 'yes', false]);
   * // => true
   */
  var some = createIterator(baseIteratorOptions, everyIteratorOptions, {
    'init': 'false',
    'inLoop': everyIteratorOptions.inLoop.replace('!', '')
  });

  /**
   * Creates a new array, stable sorted in ascending order by the results of
   * running each element of `collection` through a `callback`. The `callback`
   * is bound to `thisArg` and invoked with 3 arguments; (value, index|key, collection).
   * The `callback` argument may also be the name of a property to sort by (e.g. 'length').
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Function|String} callback|property The function called per iteration
   *  or property name to sort by.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Array} Returns a new array of sorted elements.
   * @example
   *
   * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
   * // => [3, 1, 2]
   *
   * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
   * // => [3, 1, 2]
   *
   * _.sortBy(['larry', 'brendan', 'moe'], 'length');
   * // => ['moe', 'larry', 'brendan']
   */
  var sortBy = createIterator(baseIteratorOptions, countByIteratorOptions, mapIteratorOptions, {
    'inLoop': {
      'array':
        'result[index] = {\n' +
        '  criteria: callback(value, index, collection),\n' +
        '  index: index,\n' +
        '  value: value\n' +
        '}',
      'object':
        'result' + (isKeysFast ? '[ownIndex] = ' : '.push') + '({\n' +
        '  criteria: callback(value, index, collection),\n' +
        '  index: index,\n' +
        '  value: value\n' +
        '})'
    },
    'bottom':
      'result.sort(compareAscending);\n' +
      'length = result.length;\n' +
      'while (length--) {\n' +
      '  result[length] = result[length].value\n' +
      '}'
  });

  /**
   * Converts the `collection`, to an array. Useful for converting the
   * `arguments` object.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to convert.
   * @returns {Array} Returns the new converted array.
   * @example
   *
   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
   * // => [2, 3, 4]
   */
  function toArray(collection) {
    if (!collection) {
      return [];
    }
    if (collection.toArray && isFunction(collection.toArray)) {
      return collection.toArray();
    }
    var length = collection.length;
    if (length > -1 && length === length >>> 0) {
      return (noArraySliceOnStrings ? toString.call(collection) == stringClass : typeof collection == 'string')
        ? collection.split('')
        : slice.call(collection);
    }
    return values(collection);
  }

  /**
   * Examines each element in a `collection`, returning an array of all elements
   * that contain the given `properties`.
   *
   * @static
   * @memberOf _
   * @category Collections
   * @param {Array|Object|String} collection The collection to iterate over.
   * @param {Object} properties The object of properties/values to filter by.
   * @returns {Array} Returns a new array of elements that contain the given `properties`.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * _.where(stooges, { 'age': 40 });
   * // => [{ 'name': 'moe', 'age': 40 }]
   */
  var where = createIterator(filterIteratorOptions, {
    'args': 'collection, properties',
    'top':
      'var props = [];\n' +
      'forIn(properties, function(value, prop) { props.push(prop) });\n' +
      'var propsLength = props.length',
    'inLoop':
      'for (var prop, pass = true, propIndex = 0; propIndex < propsLength; propIndex++) {\n' +
      '  prop = props[propIndex];\n' +
      '  if (!(pass = value[prop] === properties[prop])) break\n' +
      '}\n' +
      'pass && result.push(value)'
  });

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a new array with all falsey values of `array` removed. The values
   * `false`, `null`, `0`, `""`, `undefined` and `NaN` are all falsey.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to compact.
   * @returns {Array} Returns a new filtered array.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    var result = [];
    if (!array) {
      return result;
    }
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (array[index]) {
        result.push(array[index]);
      }
    }
    return result;
  }

  /**
   * Creates a new array of `array` elements not present in the other arrays
   * using strict equality for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to process.
   * @param {Array} [array1, array2, ...] Arrays to check.
   * @returns {Array} Returns a new array of `array` elements not present in the
   *  other arrays.
   * @example
   *
   * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
   * // => [1, 3, 4]
   */
  function difference(array) {
    var result = [];
    if (!array) {
      return result;
    }
    var index = -1,
        length = array.length,
        flattened = concat.apply(result, arguments),
        contains = cachedContains(flattened, length);

    while (++index < length) {
      if (!contains(array[index])) {
        result.push(array[index]);
      }
    }
    return result;
  }

  /**
   * Gets the first element of the `array`. Pass `n` to return the first `n`
   * elements of the `array`.
   *
   * @static
   * @memberOf _
   * @alias head, take
   * @category Arrays
   * @param {Array} array The array to query.
   * @param {Number} [n] The number of elements to return.
   * @param {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `n`.
   * @returns {Mixed} Returns the first element or an array of the first `n`
   *  elements of `array`.
   * @example
   *
   * _.first([5, 4, 3, 2, 1]);
   * // => 5
   */
  function first(array, n, guard) {
    if (array) {
      return (n == null || guard) ? array[0] : slice.call(array, 0, n);
    }
  }

  /**
   * Flattens a nested array (the nesting can be to any depth). If `shallow` is
   * truthy, `array` will only be flattened a single level.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to compact.
   * @param {Boolean} shallow A flag to indicate only flattening a single level.
   * @returns {Array} Returns a new flattened array.
   * @example
   *
   * _.flatten([1, [2], [3, [[4]]]]);
   * // => [1, 2, 3, 4];
   *
   * _.flatten([1, [2], [3, [[4]]]], true);
   * // => [1, 2, 3, [[4]]];
   */
  function flatten(array, shallow) {
    var result = [];
    if (!array) {
      return result;
    }
    var value,
        index = -1,
        length = array.length;

    while (++index < length) {
      value = array[index];
      if (isArray(value)) {
        push.apply(result, shallow ? value : flatten(value));
      } else {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Gets the index at which the first occurrence of `value` is found using
   * strict equality for comparisons, i.e. `===`. If the `array` is already
   * sorted, passing `true` for `isSorted` will run a faster binary search.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to search.
   * @param {Mixed} value The value to search for.
   * @param {Boolean|Number} [fromIndex=0] The index to start searching from or
   *  `true` to perform a binary search on a sorted `array`.
   * @returns {Number} Returns the index of the matched value or `-1`.
   * @example
   *
   * _.indexOf([1, 2, 3, 1, 2, 3], 2);
   * // => 1
   *
   * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
   * // => 4
   *
   * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
   * // => 2
   */
  function indexOf(array, value, fromIndex) {
    if (!array) {
      return -1;
    }
    var index = -1,
        length = array.length;

    if (fromIndex) {
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? Math.max(0, length + fromIndex) : fromIndex) - 1;
      } else {
        index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
    }
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Gets all but the last element of `array`. Pass `n` to exclude the last `n`
   * elements from the result.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to query.
   * @param {Number} [n] The number of elements to return.
   * @param {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `n`.
   * @returns {Array} Returns all but the last element or `n` elements of `array`.
   * @example
   *
   * _.initial([3, 2, 1]);
   * // => [3, 2]
   */
  function initial(array, n, guard) {
    if (!array) {
      return [];
    }
    return slice.call(array, 0, -((n == null || guard) ? 1 : n));
  }

  /**
   * Computes the intersection of all the passed-in arrays using strict equality
   * for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} [array1, array2, ...] Arrays to process.
   * @returns {Array} Returns a new array of unique elements, in order, that are
   *  present in **all** of the arrays.
   * @example
   *
   * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
   * // => [1, 2]
   */
  function intersection(array) {
    var result = [];
    if (!array) {
      return result;
    }
    var value,
        argsLength = arguments.length,
        cache = [],
        index = -1,
        length = array.length;

    array: while (++index < length) {
      value = array[index];
      if (indexOf(result, value) < 0) {
        for (var argsIndex = 1; argsIndex < argsLength; argsIndex++) {
          if (!(cache[argsIndex] || (cache[argsIndex] = cachedContains(arguments[argsIndex])))(value)) {
            continue array;
          }
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Gets the last element of the `array`. Pass `n` to return the lasy `n`
   * elementsvof the `array`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to query.
   * @param {Number} [n] The number of elements to return.
   * @param {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `n`.
   * @returns {Mixed} Returns the last element or an array of the last `n`
   *  elements of `array`.
   * @example
   *
   * _.last([3, 2, 1]);
   * // => 1
   */
  function last(array, n, guard) {
    if (array) {
      var length = array.length;
      return (n == null || guard) ? array[length - 1] : slice.call(array, -n || length);
    }
  }

  /**
   * Gets the index at which the last occurrence of `value` is found using
   * strict equality for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to search.
   * @param {Mixed} value The value to search for.
   * @param {Number} [fromIndex=array.length-1] The index to start searching from.
   * @returns {Number} Returns the index of the matched value or `-1`.
   * @example
   *
   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
   * // => 4
   *
   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
   * // => 1
   */
  function lastIndexOf(array, value, fromIndex) {
    if (!array) {
      return -1;
    }
    var index = array.length;
    if (fromIndex && typeof fromIndex == 'number') {
      index = (fromIndex < 0 ? Math.max(0, index + fromIndex) : Math.min(fromIndex, index - 1)) + 1;
    }
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Retrieves the maximum value of an `array`. If `callback` is passed,
   * it will be executed for each value in the `array` to generate the
   * criterion by which the value is ranked. The `callback` is bound to
   * `thisArg` and invoked with 3 arguments; (value, index, array).
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to iterate over.
   * @param {Function} [callback] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Mixed} Returns the maximum value.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * _.max(stooges, function(stooge) { return stooge.age; });
   * // => { 'name': 'curly', 'age': 60 };
   */
  function max(array, callback, thisArg) {
    var computed = -Infinity,
        result = computed;

    if (!array) {
      return result;
    }
    var current,
        index = -1,
        length = array.length;

    if (!callback) {
      while (++index < length) {
        if (array[index] > result) {
          result = array[index];
        }
      }
      return result;
    }
    if (thisArg) {
      callback = iteratorBind(callback, thisArg);
    }
    while (++index < length) {
      current = callback(array[index], index, array);
      if (current > computed) {
        computed = current;
        result = array[index];
      }
    }
    return result;
  }

  /**
   * Retrieves the minimum value of an `array`. If `callback` is passed,
   * it will be executed for each value in the `array` to generate the
   * criterion by which the value is ranked. The `callback` is bound to `thisArg`
   * and invoked with 3 arguments; (value, index, array).
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to iterate over.
   * @param {Function} [callback] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Mixed} Returns the minimum value.
   * @example
   *
   * _.min([10, 5, 100, 2, 1000]);
   * // => 2
   */
  function min(array, callback, thisArg) {
    var computed = Infinity,
        result = computed;

    if (!array) {
      return result;
    }
    var current,
        index = -1,
        length = array.length;

    if (!callback) {
      while (++index < length) {
        if (array[index] < result) {
          result = array[index];
        }
      }
      return result;
    }
    if (thisArg) {
      callback = iteratorBind(callback, thisArg);
    }
    while (++index < length) {
      current = callback(array[index], index, array);
      if (current < computed) {
        computed = current;
        result = array[index];
      }
    }
    return result;
  }

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to but not including `stop`. This method is a port of Python's
   * `range()` function. See http://docs.python.org/library/functions.html#range.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Number} [start=0] The start of the range.
   * @param {Number} end The end of the range.
   * @param {Number} [step=1] The value to increment or descrement by.
   * @returns {Array} Returns a new range array.
   * @example
   *
   * _.range(10);
   * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
   *
   * _.range(1, 11);
   * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
   *
   * _.range(0, 30, 5);
   * // => [0, 5, 10, 15, 20, 25]
   *
   * _.range(0, -10, -1);
   * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
   *
   * _.range(0);
   * // => []
   */
  function range(start, end, step) {
    start = +start || 0;
    step = +step || 1;

    if (end == null) {
      end = start;
      start = 0;
    }
    // use `Array(length)` so V8 will avoid the slower "dictionary" mode
    // http://www.youtube.com/watch?v=XAqIpGU8ZZk#t=16m27s
    var index = -1,
        length = Math.max(0, Math.ceil((end - start) / step)),
        result = Array(length);

    while (++index < length) {
      result[index] = start;
      start += step;
    }
    return result;
  }

  /**
   * The opposite of `_.initial`, this method gets all but the first value of
   * `array`. Pass `n` to exclude the first `n` values from the result.
   *
   * @static
   * @memberOf _
   * @alias tail
   * @category Arrays
   * @param {Array} array The array to query.
   * @param {Number} [n] The number of elements to return.
   * @param {Object} [guard] Internally used to allow this method to work with
   *  others like `_.map` without using their callback `index` argument for `n`.
   * @returns {Array} Returns all but the first value or `n` values of `array`.
   * @example
   *
   * _.rest([3, 2, 1]);
   * // => [2, 1]
   */
  function rest(array, n, guard) {
    if (!array) {
      return [];
    }
    return slice.call(array, (n == null || guard) ? 1 : n);
  }

  /**
   * Creates a new array of shuffled `array` values, using a version of the
   * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to shuffle.
   * @returns {Array} Returns a new shuffled array.
   * @example
   *
   * _.shuffle([1, 2, 3, 4, 5, 6]);
   * // => [4, 1, 6, 3, 5, 2]
   */
  function shuffle(array) {
    if (!array) {
      return [];
    }
    var rand,
        index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      rand = Math.floor(Math.random() * (index + 1));
      result[index] = result[rand];
      result[rand] = array[index];
    }
    return result;
  }

  /**
   * Uses a binary search to determine the smallest index at which the `value`
   * should be inserted into `array` in order to maintain the sort order of the
   * sorted `array`. If `callback` is passed, it will be executed for `value` and
   * each element in `array` to compute their sort ranking. The `callback` is
   * bound to `thisArg` and invoked with 1 argument; (value).
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to iterate over.
   * @param {Mixed} value The value to evaluate.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Number} Returns the index at which the value should be inserted
   *  into `array`.
   * @example
   *
   * _.sortedIndex([20, 30, 40], 35);
   * // => 2
   *
   * var dict = {
   *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'thirty-five': 35, 'fourty': 40 }
   * };
   *
   * _.sortedIndex(['twenty', 'thirty', 'fourty'], 'thirty-five', function(word) {
   *   return dict.wordToNumber[word];
   * });
   * // => 2
   *
   * _.sortedIndex(['twenty', 'thirty', 'fourty'], 'thirty-five', function(word) {
   *   return this.wordToNumber[word];
   * }, dict);
   * // => 2
   */
  function sortedIndex(array, value, callback, thisArg) {
    if (!array) {
      return 0;
    }
    var mid,
        low = 0,
        high = array.length;

    if (callback) {
      if (thisArg) {
        callback = bind(callback, thisArg);
      }
      value = callback(value);
      while (low < high) {
        mid = (low + high) >>> 1;
        callback(array[mid]) < value ? low = mid + 1 : high = mid;
      }
    } else {
      while (low < high) {
        mid = (low + high) >>> 1;
        array[mid] < value ? low = mid + 1 : high = mid;
      }
    }
    return low;
  }

  /**
   * Computes the union of the passed-in arrays using strict equality for
   * comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} [array1, array2, ...] Arrays to process.
   * @returns {Array} Returns a new array of unique values, in order, that are
   *  present in one or more of the arrays.
   * @example
   *
   * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
   * // => [1, 2, 3, 101, 10]
   */
  function union() {
    var index = -1,
        result = [],
        flattened = concat.apply(result, arguments),
        length = flattened.length;

    while (++index < length) {
      if (indexOf(result, flattened[index]) < 0) {
        result.push(flattened[index]);
      }
    }
    return result;
  }

  /**
   * Creates a duplicate-value-free version of the `array` using strict equality
   * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`
   * for `isSorted` will run a faster algorithm. If `callback` is passed, each
   * element of `array` is passed through a callback` before uniqueness is computed.
   * The `callback` is bound to `thisArg` and invoked with 3 arguments; (value, index, array).
   *
   * @static
   * @memberOf _
   * @alias unique
   * @category Arrays
   * @param {Array} array The array to process.
   * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.
   * @param {Function} [callback=identity] The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @returns {Array} Returns a duplicate-value-free array.
   * @example
   *
   * _.uniq([1, 2, 1, 3, 1]);
   * // => [1, 2, 3]
   *
   * _.uniq([1, 1, 2, 2, 3], true);
   * // => [1, 2, 3]
   *
   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });
   * // => [1, 2, 3]
   *
   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);
   * // => [1, 2, 3]
   */
  function uniq(array, isSorted, callback, thisArg) {
    var result = [];
    if (!array) {
      return result;
    }
    var computed,
        index = -1,
        length = array.length,
        seen = [];

    // juggle arguments
    if (typeof isSorted == 'function') {
      thisArg = callback;
      callback = isSorted;
      isSorted = false;
    }
    if (!callback) {
      callback = identity;
    } else if (thisArg) {
      callback = iteratorBind(callback, thisArg);
    }
    while (++index < length) {
      computed = callback(array[index], index, array);
      if (isSorted
            ? !index || seen[seen.length - 1] !== computed
            : indexOf(seen, computed) < 0
          ) {
        seen.push(computed);
        result.push(array[index]);
      }
    }
    return result;
  }

  /**
   * Creates a new array with all occurrences of the passed values removed using
   * strict equality for comparisons, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} array The array to filter.
   * @param {Mixed} [value1, value2, ...] Values to remove.
   * @returns {Array} Returns a new filtered array.
   * @example
   *
   * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
   * // => [2, 3, 4]
   */
  function without(array) {
    var result = [];
    if (!array) {
      return result;
    }
    var index = -1,
        length = array.length,
        contains = cachedContains(arguments, 1, 20);

    while (++index < length) {
      if (!contains(array[index])) {
        result.push(array[index]);
      }
    }
    return result;
  }

  /**
   * Groups the elements of each array at their corresponding indexes. Useful for
   * separate data sources that are coordinated through matching array indexes.
   * For a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix
   * in a similar fashion.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} [array1, array2, ...] Arrays to process.
   * @returns {Array} Returns a new array of grouped elements.
   * @example
   *
   * _.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
   * // => [['moe', 30, true], ['larry', 40, false], ['curly', 50, false]]
   */
  function zip(array) {
    if (!array) {
      return [];
    }
    var index = -1,
        length = max(pluck(arguments, 'length')),
        result = Array(length);

    while (++index < length) {
      result[index] = pluck(arguments, index);
    }
    return result;
  }

  /**
   * Creates an object composed from an array of `keys` and an array of `values`.
   *
   * @static
   * @memberOf _
   * @category Arrays
   * @param {Array} keys The array of keys.
   * @param {Array} [values=[]] The array of values.
   * @returns {Object} Returns an object composed of the given keys and
   *  corresponding values.
   * @example
   *
   * _.zipObject(['moe', 'larry', 'curly'], [30, 40, 50]);
   * // => { 'moe': 30, 'larry': 40, 'curly': 50 }
   */
  function zipObject(keys, values) {
    if (!keys) {
      return {};
    }
    var index = -1,
        length = keys.length,
        result = {};

    values || (values = []);
    while (++index < length) {
      result[keys[index]] = values[index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a new function that is restricted to executing only after it is
   * called `n` times.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Number} n The number of times the function must be called before
   * it is executed.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var renderNotes = _.after(notes.length, render);
   * _.forEach(notes, function(note) {
   *   note.asyncSave({ 'success': renderNotes });
   * });
   * // `renderNotes` is run once, after all notes have saved
   */
  function after(n, func) {
    if (n < 1) {
      return func();
    }
    return function() {
      if (--n < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  /**
   * Creates a new function that, when called, invokes `func` with the `this`
   * binding of `thisArg` and prepends any additional `bind` arguments to those
   * passed to the bound function. Lazy defined methods may be bound by passing
   * the object they are bound to as `func` and the method name as `thisArg`.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function|Object} func The function to bind or the object the method belongs to.
   * @param {Mixed} [thisArg] The `this` binding of `func` or the method name.
   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * // basic bind
   * var func = function(greeting) {
   *   return greeting + ' ' + this.name;
   * };
   *
   * func = _.bind(func, { 'name': 'moe' }, 'hi');
   * func();
   * // => 'hi moe'
   *
   * // lazy bind
   * var object = {
   *   'name': 'moe',
   *   'greet': function(greeting) {
   *     return greeting + ' ' + this.name;
   *   }
   * };
   *
   * var func = _.bind(object, 'greet', 'hi');
   * func();
   * // => 'hi moe'
   *
   * object.greet = function(greeting) {
   *   return greeting + ', ' + this.name + '!';
   * };
   *
   * func();
   * // => 'hi, moe!'
   */
  function bind(func, thisArg) {
    var methodName,
        isFunc = isFunction(func);

    // juggle arguments
    if (!isFunc) {
      methodName = thisArg;
      thisArg = func;
    }
    // use `Function#bind` if it exists and is fast
    // (in V8 `Function#bind` is slower except when partially applied)
    else if (isBindFast || (nativeBind && arguments.length > 2)) {
      return nativeBind.call.apply(nativeBind, arguments);
    }

    var partialArgs = slice.call(arguments, 2);

    function bound() {
      // `Function#bind` spec
      // http://es5.github.com/#x15.3.4.5
      var args = arguments,
          thisBinding = thisArg;

      if (!isFunc) {
        func = thisArg[methodName];
      }
      if (partialArgs.length) {
        args = args.length
          ? partialArgs.concat(slice.call(args))
          : partialArgs;
      }
      if (this instanceof bound) {
        // get `func` instance if `bound` is invoked in a `new` expression
        noop.prototype = func.prototype;
        thisBinding = new noop;

        // mimic the constructor's `return` behavior
        // http://es5.github.com/#x13.2.2
        var result = func.apply(thisBinding, args);
        return result && objectTypes[typeof result]
          ? result
          : thisBinding
      }
      return func.apply(thisBinding, args);
    }
    return bound;
  }

  /**
   * Binds methods on `object` to `object`, overwriting the existing method.
   * If no method names are provided, all the function properties of `object`
   * will be bound.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Object} object The object to bind and assign the bound methods to.
   * @param {String} [methodName1, methodName2, ...] Method names on the object to bind.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var buttonView = {
   *  'label': 'lodash',
   *  'onClick': function() { alert('clicked: ' + this.label); }
   * };
   *
   * _.bindAll(buttonView);
   * jQuery('#lodash_button').on('click', buttonView.onClick);
   * // => When the button is clicked, `this.label` will have the correct value
   */
  var bindAll = createIterator({
    'useHas': false,
    'useStrict': false,
    'args': 'object',
    'init': 'object',
    'top':
      'var funcs = arguments,\n' +
      '    length = funcs.length;\n' +
      'if (length > 1) {\n' +
      '  for (var index = 1; index < length; index++) {\n' +
      '    result[funcs[index]] = bind(result[funcs[index]], result)\n' +
      '  }\n' +
      '  return result\n' +
      '}',
    'inLoop':
      'if (isFunction(result[index])) {\n' +
      '  result[index] = bind(result[index], result)\n' +
      '}'
  });

  /**
   * Creates a new function that is the composition of the passed functions,
   * where each function consumes the return value of the function that follows.
   * In math terms, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} [func1, func2, ...] Functions to compose.
   * @returns {Function} Returns the new composed function.
   * @example
   *
   * var greet = function(name) { return 'hi: ' + name; };
   * var exclaim = function(statement) { return statement + '!'; };
   * var welcome = _.compose(exclaim, greet);
   * welcome('moe');
   * // => 'hi: moe!'
   */
  function compose() {
    var funcs = arguments;
    return function() {
      var args = arguments,
          length = funcs.length;

      while (length--) {
        args = [funcs[length].apply(this, args)];
      }
      return args[0];
    };
  }

  /**
   * Creates a new function that will delay the execution of `func` until after
   * `wait` milliseconds have elapsed since the last time it was invoked. Pass
   * `true` for `immediate` to cause debounce to invoke `func` on the leading,
   * instead of the trailing, edge of the `wait` timeout. Subsequent calls to
   * the debounced function will return the result of the last `func` call.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to debounce.
   * @param {Number} wait The number of milliseconds to delay.
   * @param {Boolean} immediate A flag to indicate execution is on the leading
   *  edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * var lazyLayout = _.debounce(calculateLayout, 300);
   * jQuery(window).on('resize', lazyLayout);
   */
  function debounce(func, wait, immediate) {
    var args,
        result,
        thisArg,
        timeoutId;

    function delayed() {
      timeoutId = null;
      if (!immediate) {
        func.apply(thisArg, args);
      }
    }

    return function() {
      var isImmediate = immediate && !timeoutId;
      args = arguments;
      thisArg = this;

      clearTimeout(timeoutId);
      timeoutId = setTimeout(delayed, wait);

      if (isImmediate) {
        result = func.apply(thisArg, args);
      }
      return result;
    };
  }

  /**
   * Executes the `func` function after `wait` milliseconds. Additional arguments
   * will be passed to `func` when it is invoked.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to delay.
   * @param {Number} wait The number of milliseconds to delay execution.
   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.
   * @returns {Number} Returns the `setTimeout` timeout id.
   * @example
   *
   * var log = _.bind(console.log, console);
   * _.delay(log, 1000, 'logged later');
   * // => 'logged later' (Appears after one second.)
   */
  function delay(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function() { return func.apply(undefined, args); }, wait);
  }

  /**
   * Defers executing the `func` function until the current call stack has cleared.
   * Additional arguments will be passed to `func` when it is invoked.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to defer.
   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.
   * @returns {Number} Returns the `setTimeout` timeout id.
   * @example
   *
   * _.defer(function() { alert('deferred'); });
   * // returns from the function before `alert` is called
   */
  function defer(func) {
    var args = slice.call(arguments, 1);
    return setTimeout(function() { return func.apply(undefined, args); }, 1);
  }

  /**
   * Creates a new function that memoizes the result of `func`. If `resolver` is
   * passed, it will be used to determine the cache key for storing the result
   * based on the arguments passed to the memoized function. By default, the first
   * argument passed to the memoized function is used as the cache key.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] A function used to resolve the cache key.
   * @returns {Function} Returns the new memoizing function.
   * @example
   *
   * var fibonacci = _.memoize(function(n) {
   *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
   * });
   */
  function memoize(func, resolver) {
    var cache = {};
    return function() {
      var prop = resolver ? resolver.apply(this, arguments) : arguments[0];
      return hasOwnProperty.call(cache, prop)
        ? cache[prop]
        : (cache[prop] = func.apply(this, arguments));
    };
  }

  /**
   * Creates a new function that is restricted to one execution. Repeat calls to
   * the function will return the value of the first call.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var initialize = _.once(createApplication);
   * initialize();
   * initialize();
   * // Application is only created once.
   */
  function once(func) {
    var result,
        ran = false;

    return function() {
      if (ran) {
        return result;
      }
      ran = true;
      result = func.apply(this, arguments);

      // clear the `func` variable so the function may be garbage collected
      func = null;
      return result;
    };
  }

  /**
   * Creates a new function that, when called, invokes `func` with any additional
   * `partial` arguments prepended to those passed to the new function. This method
   * is similar `bind`, except it does **not** alter the `this` binding.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to partially apply arguments to.
   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.
   * @returns {Function} Returns the new partially applied function.
   * @example
   *
   * var greet = function(greeting, name) { return greeting + ': ' + name; };
   * var hi = _.partial(greet, 'hi');
   * hi('moe');
   * // => 'hi: moe'
   */
  function partial(func) {
    var args = slice.call(arguments, 1),
        argsLength = args.length;

    return function() {
      var result,
          others = arguments;

      if (others.length) {
        args.length = argsLength;
        push.apply(args, others);
      }
      result = args.length == 1 ? func.call(this, args[0]) : func.apply(this, args);
      args.length = argsLength;
      return result;
    };
  }

  /**
   * Creates a new function that, when executed, will only call the `func`
   * function at most once per every `wait` milliseconds. If the throttled
   * function is invoked more than once during the `wait` timeout, `func` will
   * also be called on the trailing edge of the timeout. Subsequent calls to the
   * throttled function will return the result of the last `func` call.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Function} func The function to throttle.
   * @param {Number} wait The number of milliseconds to throttle executions to.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * var throttled = _.throttle(updatePosition, 100);
   * jQuery(window).on('scroll', throttled);
   */
  function throttle(func, wait) {
    var args,
        result,
        thisArg,
        timeoutId,
        lastCalled = 0;

    function trailingCall() {
      lastCalled = new Date;
      timeoutId = null;
      func.apply(thisArg, args);
    }

    return function() {
      var now = new Date,
          remain = wait - (now - lastCalled);

      args = arguments;
      thisArg = this;

      if (remain <= 0) {
        lastCalled = now;
        result = func.apply(thisArg, args);
      }
      else if (!timeoutId) {
        timeoutId = setTimeout(trailingCall, remain);
      }
      return result;
    };
  }

  /**
   * Creates a new function that passes `value` to the `wrapper` function as its
   * first argument. Additional arguments passed to the new function are appended
   * to those passed to the `wrapper` function.
   *
   * @static
   * @memberOf _
   * @category Functions
   * @param {Mixed} value The value to wrap.
   * @param {Function} wrapper The wrapper function.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var hello = function(name) { return 'hello: ' + name; };
   * hello = _.wrap(hello, function(func) {
   *   return 'before, ' + func('moe') + ', after';
   * });
   * hello();
   * // => 'before, hello: moe, after'
   */
  function wrap(value, wrapper) {
    return function() {
      var args = [value];
      if (arguments.length) {
        push.apply(args, arguments);
      }
      return wrapper.apply(this, args);
    };
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
   * corresponding HTML entities.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {String} string The string to escape.
   * @returns {String} Returns the escaped string.
   * @example
   *
   * _.escape('Moe, Larry & Curly');
   * // => "Moe, Larry &amp; Curly"
   */
  function escape(string) {
    return string == null ? '' : (string + '').replace(reUnescapedHtml, escapeHtmlChar);
  }

  /**
   * This function returns the first argument passed to it.
   *
   * Note: It is used throughout Lo-Dash as a default callback.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Mixed} value Any value.
   * @returns {Mixed} Returns `value`.
   * @example
   *
   * var moe = { 'name': 'moe' };
   * moe === _.identity(moe);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /**
   * Adds functions properties of `object` to the `lodash` function and chainable
   * wrapper.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} object The object of function properties to add to `lodash`.
   * @example
   *
   * _.mixin({
   *   'capitalize': function(string) {
   *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
   *   }
   * });
   *
   * _.capitalize('larry');
   * // => 'Larry'
   *
   * _('curly').capitalize();
   * // => 'Curly'
   */
  function mixin(object) {
    forEach(functions(object), function(methodName) {
      var func = lodash[methodName] = object[methodName];

      LoDash.prototype[methodName] = function() {
        var args = [this._wrapped];
        if (arguments.length) {
          push.apply(args, arguments);
        }
        var result = func.apply(lodash, args);
        if (this._chain) {
          result = new LoDash(result);
          result._chain = true;
        }
        return result;
      };
    });
  }

  /**
   * Reverts the '_' variable to its previous value and returns a reference to
   * the `lodash` function.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @returns {Function} Returns the `lodash` function.
   * @example
   *
   * var lodash = _.noConflict();
   */
  function noConflict() {
    window._ = oldDash;
    return this;
  }

  /**
   * Resolves the value of `property` on `object`. If `property` is a function
   * it will be invoked and its result returned, else the property value is
   * returned. If `object` is falsey, then `null` is returned.
   *
   * @deprecated
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} object The object to inspect.
   * @param {String} property The property to get the result of.
   * @returns {Mixed} Returns the resolved value.
   * @example
   *
   * var object = {
   *   'cheese': 'crumpets',
   *   'stuff': function() {
   *     return 'nonsense';
   *   }
   * };
   *
   * _.result(object, 'cheese');
   * // => 'crumpets'
   *
   * _.result(object, 'stuff');
   * // => 'nonsense'
   */
  function result(object, property) {
    // based on Backbone's private `getValue` function
    // https://github.com/documentcloud/backbone/blob/0.9.2/backbone.js#L1419-1424
    if (!object) {
      return null;
    }
    var value = object[property];
    return isFunction(value) ? object[property]() : value;
  }

  /**
   * A micro-templating method that handles arbitrary delimiters, preserves
   * whitespace, and correctly escapes quotes within interpolated code.
   *
   * Note: In the development build `_.template` utilizes sourceURLs for easier
   * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
   *
   * Note: Lo-Dash may be used in Chrome extensions by either creating a `lodash csp`
   * build and avoiding `_.template` use, or loading Lo-Dash in a sandboxed page.
   * See http://developer.chrome.com/trunk/extensions/sandboxingEval.html
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {String} text The template text.
   * @param {Obect} data The data object used to populate the text.
   * @param {Object} options The options object.
   * @returns {Function|String} Returns a compiled function when no `data` object
   *  is given, else it returns the interpolated text.
   * @example
   *
   * // using a compiled template
   * var compiled = _.template('hello: <%= name %>');
   * compiled({ 'name': 'moe' });
   * // => 'hello: moe'
   *
   * var list = '<% _.forEach(people, function(name) { %> <li><%= name %></li> <% }); %>';
   * _.template(list, { 'people': ['moe', 'larry', 'curly'] });
   * // => '<li>moe</li><li>larry</li><li>curly</li>'
   *
   * // using the "escape" delimiter to escape HTML in data property values
   * _.template('<b><%- value %></b>', { 'value': '<script>' });
   * // => '<b>&lt;script></b>'
   *
   * // using the internal `print` function in "evaluate" delimiters
   * _.template('<% print("Hello " + epithet); %>', { 'epithet': 'stooge' });
   * // => 'Hello stooge.'
   *
   * // using custom template delimiter settings
   * _.templateSettings = {
   *   'interpolate': /\{\{(.+?)\}\}/g
   * };
   *
   * _.template('Hello {{ name }}!', { 'name': 'Mustache' });
   * // => 'Hello Mustache!'
   *
   * // using the `variable` option to ensure a with-statement isn't used in the compiled template
   * var compiled = _.template('hello: <%= data.name %>', null, { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   *   var __t, __p = '', __e = _.escape;
   *   __p += 'hello: ' + ((__t = ( data.name )) == null ? '' : __t);
   *   return __p;
   * }
   *
   * // using the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and a stack trace
   * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */
  function template(text, data, options) {
    // based on John Resig's `tmpl` implementation
    // http://ejohn.org/blog/javascript-micro-templating/
    // and Laura Doktorova's doT.js
    // https://github.com/olado/doT
    options || (options = {});
    text += '';

    var isEvaluating,
        result,
        escapeDelimiter = options.escape,
        evaluateDelimiter = options.evaluate,
        interpolateDelimiter = options.interpolate,
        settings = lodash.templateSettings,
        variable = options.variable || settings.variable,
        hasVariable = variable;

    // use default settings if no options object is provided
    if (escapeDelimiter == null) {
      escapeDelimiter = settings.escape;
    }
    if (evaluateDelimiter == null) {
      // use `false` as the fallback value, instead of leaving it `undefined`,
      // so the initial assignment of `reEvaluateDelimiter` will still occur
      evaluateDelimiter = settings.evaluate || false;
    }
    if (interpolateDelimiter == null) {
      interpolateDelimiter = settings.interpolate;
    }

    // tokenize delimiters to avoid escaping them
    if (escapeDelimiter) {
      text = text.replace(escapeDelimiter, tokenizeEscape);
    }
    if (interpolateDelimiter) {
      text = text.replace(interpolateDelimiter, tokenizeInterpolate);
    }
    if (evaluateDelimiter != lastEvaluateDelimiter) {
      // generate `reEvaluateDelimiter` to match `_.templateSettings.evaluate`
      // and internal `<e%- %>`, `<e%= %>` delimiters
      lastEvaluateDelimiter = evaluateDelimiter;
      reEvaluateDelimiter = RegExp(
        '<e%-([\\s\\S]+?)%>|<e%=([\\s\\S]+?)%>' +
        (evaluateDelimiter ? '|' + evaluateDelimiter.source : '')
      , 'g');
    }
    isEvaluating = tokenized.length;
    text = text.replace(reEvaluateDelimiter, tokenizeEvaluate);
    isEvaluating = isEvaluating != tokenized.length;

    // escape characters that cannot be included in string literals and
    // detokenize delimiter code snippets
    text = "__p += '" + text
      .replace(reUnescapedString, escapeStringChar)
      .replace(reToken, detokenize) + "';\n";

    // clear stored code snippets
    tokenized.length = 0;

    // if `variable` is not specified and the template contains "evaluate"
    // delimiters, wrap a with-statement around the generated code to add the
    // data object to the top of the scope chain
    if (!hasVariable) {
      variable = lastVariable || 'obj';

      if (isEvaluating) {
        text = 'with (' + variable + ') {\n' + text + '\n}\n';
      }
      else {
        if (variable != lastVariable) {
          // generate `reDoubleVariable` to match references like `obj.obj` inside
          // transformed "escape" and "interpolate" delimiters
          lastVariable = variable;
          reDoubleVariable = RegExp('(\\(\\s*)' + variable + '\\.' + variable + '\\b', 'g');
        }
        // avoid a with-statement by prepending data object references to property names
        text = text
          .replace(reInsertVariable, '$&' + variable + '.')
          .replace(reDoubleVariable, '$1__d');
      }
    }

    // cleanup code by stripping empty strings
    text = ( isEvaluating ? text.replace(reEmptyStringLeading, '') : text)
      .replace(reEmptyStringMiddle, '$1')
      .replace(reEmptyStringTrailing, '$1;');

    // frame code as the function body
    text = 'function(' + variable + ') {\n' +
      (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
      'var __t, __p = \'\', __e = _.escape' +
      (isEvaluating
        ? ', __j = Array.prototype.join;\n' +
          'function print() { __p += __j.call(arguments, \'\') }\n'
        : (hasVariable ? '' : ', __d = ' + variable + '.' + variable + ' || ' + variable) + ';\n'
      ) +
      text +
      'return __p\n}';

    // add a sourceURL for easier debugging
    // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
    if (useSourceURL) {
      text += '\n//@ sourceURL=/lodash/template/source[' + (templateCounter++) + ']';
    }

    try {
      result = Function('_', 'return ' + text)(lodash);
    } catch(e) {
      // defer syntax errors until the compiled template is executed to allow
      // examining the `source` property beforehand and for consistency,
      // because other template related errors occur at execution
      result = function() { throw e; };
    }

    if (data) {
      return result(data);
    }
    // provide the compiled function's source via its `toString` method, in
    // supported environments, or the `source` property as a convenience for
    // inlining compiled templates during the build process
    result.source = text;
    return result;
  }

  /**
   * Executes the `callback` function `n` times. The `callback` is bound to
   * `thisArg` and invoked with 1 argument; (index).
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Number} n The number of times to execute the callback.
   * @param {Function} callback The function called per iteration.
   * @param {Mixed} [thisArg] The `this` binding for the callback.
   * @example
   *
   * _.times(3, function() { genie.grantWish(); });
   * // => calls `genie.grantWish()` 3 times
   *
   * _.times(3, function() { this.grantWish(); }, genie);
   * // => also calls `genie.grantWish()` 3 times
   */
  function times(n, callback, thisArg) {
    var index = -1;
    if (thisArg) {
      while (++index < n) {
        callback.call(thisArg, index);
      }
    } else {
      while (++index < n) {
        callback(index);
      }
    }
  }

  /**
   * Converts the HTML entities `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#x27;`
   * in `string` to their corresponding characters.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {String} string The string to unescape.
   * @returns {String} Returns the unescaped string.
   * @example
   *
   * _.unescape('Moe, Larry &amp; Curly');
   * // => "Moe, Larry & Curly"
   */
  function unescape(string) {
    return string == null ? '' : (string + '').replace(reEscapedHtml, unescapeHtmlChar);
  }

  /**
   * Generates a unique id. If `prefix` is passed, the id will be appended to it.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {String} [prefix] The value to prefix the id with.
   * @returns {Number|String} Returns a numeric id if no prefix is passed, else
   *  a string id may be returned.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   */
  function uniqueId(prefix) {
    var id = idCounter++;
    return prefix ? prefix + id : id;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Wraps the value in a `lodash` wrapper object.
   *
   * @static
   * @memberOf _
   * @category Chaining
   * @param {Mixed} value The value to wrap.
   * @returns {Object} Returns the wrapper object.
   * @example
   *
   * var stooges = [
   *   { 'name': 'moe', 'age': 40 },
   *   { 'name': 'larry', 'age': 50 },
   *   { 'name': 'curly', 'age': 60 }
   * ];
   *
   * var youngest = _.chain(stooges)
   *     .sortBy(function(stooge) { return stooge.age; })
   *     .map(function(stooge) { return stooge.name + ' is ' + stooge.age; })
   *     .first()
   *     .value();
   * // => 'moe is 40'
   */
  function chain(value) {
    value = new LoDash(value);
    value._chain = true;
    return value;
  }

  /**
   * Invokes `interceptor` with the `value` as the first argument, and then
   * returns `value`. The purpose of this method is to "tap into" a method chain,
   * in order to perform operations on intermediate results within the chain.
   *
   * @static
   * @memberOf _
   * @category Chaining
   * @param {Mixed} value The value to pass to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {Mixed} Returns `value`.
   * @example
   *
   * _.chain([1,2,3,200])
   *  .filter(function(num) { return num % 2 == 0; })
   *  .tap(alert)
   *  .map(function(num) { return num * num })
   *  .value();
   * // => // [2, 200] (alerted)
   * // => [4, 40000]
   */
  function tap(value, interceptor) {
    interceptor(value);
    return value;
  }

  /**
   * Enables method chaining on the wrapper object.
   *
   * @name chain
   * @deprecated
   * @memberOf _
   * @category Chaining
   * @returns {Mixed} Returns the wrapper object.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperChain() {
    this._chain = true;
    return this;
  }

  /**
   * Extracts the wrapped value.
   *
   * @name value
   * @memberOf _
   * @category Chaining
   * @returns {Mixed} Returns the wrapped value.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperValue() {
    return this._wrapped;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The semantic version number.
   *
   * @static
   * @memberOf _
   * @type String
   */
  lodash.VERSION = '0.6.1';

  // assign static methods
  lodash.after = after;
  lodash.bind = bind;
  lodash.bindAll = bindAll;
  lodash.chain = chain;
  lodash.clone = clone;
  lodash.compact = compact;
  lodash.compose = compose;
  lodash.contains = contains;
  lodash.countBy = countBy;
  lodash.debounce = debounce;
  lodash.defaults = defaults;
  lodash.defer = defer;
  lodash.delay = delay;
  lodash.difference = difference;
  lodash.drop = drop;
  lodash.escape = escape;
  lodash.every = every;
  lodash.extend = extend;
  lodash.filter = filter;
  lodash.find = find;
  lodash.first = first;
  lodash.flatten = flatten;
  lodash.forEach = forEach;
  lodash.forIn = forIn;
  lodash.forOwn = forOwn;
  lodash.functions = functions;
  lodash.groupBy = groupBy;
  lodash.has = has;
  lodash.identity = identity;
  lodash.indexOf = indexOf;
  lodash.initial = initial;
  lodash.intersection = intersection;
  lodash.invoke = invoke;
  lodash.isArguments = isArguments;
  lodash.isArray = isArray;
  lodash.isBoolean = isBoolean;
  lodash.isDate = isDate;
  lodash.isElement = isElement;
  lodash.isEmpty = isEmpty;
  lodash.isEqual = isEqual;
  lodash.isFinite = isFinite;
  lodash.isFunction = isFunction;
  lodash.isNaN = isNaN;
  lodash.isNull = isNull;
  lodash.isNumber = isNumber;
  lodash.isObject = isObject;
  lodash.isRegExp = isRegExp;
  lodash.isString = isString;
  lodash.isUndefined = isUndefined;
  lodash.keys = keys;
  lodash.last = last;
  lodash.lastIndexOf = lastIndexOf;
  lodash.map = map;
  lodash.max = max;
  lodash.memoize = memoize;
  lodash.merge = merge;
  lodash.min = min;
  lodash.mixin = mixin;
  lodash.noConflict = noConflict;
  lodash.once = once;
  lodash.partial = partial;
  lodash.pick = pick;
  lodash.pluck = pluck;
  lodash.range = range;
  lodash.reduce = reduce;
  lodash.reduceRight = reduceRight;
  lodash.reject = reject;
  lodash.rest = rest;
  lodash.result = result;
  lodash.shuffle = shuffle;
  lodash.size = size;
  lodash.some = some;
  lodash.sortBy = sortBy;
  lodash.sortedIndex = sortedIndex;
  lodash.tap = tap;
  lodash.template = template;
  lodash.throttle = throttle;
  lodash.times = times;
  lodash.toArray = toArray;
  lodash.unescape = unescape;
  lodash.union = union;
  lodash.uniq = uniq;
  lodash.uniqueId = uniqueId;
  lodash.values = values;
  lodash.where = where;
  lodash.without = without;
  lodash.wrap = wrap;
  lodash.zip = zip;
  lodash.zipObject = zipObject;

  // assign aliases
  lodash.all = every;
  lodash.any = some;
  lodash.collect = map;
  lodash.detect = find;
  lodash.each = forEach;
  lodash.foldl = reduce;
  lodash.foldr = reduceRight;
  lodash.head = first;
  lodash.include = contains;
  lodash.inject = reduce;
  lodash.methods = functions;
  lodash.omit = drop;
  lodash.select = filter;
  lodash.tail = rest;
  lodash.take = first;
  lodash.unique = uniq;

  // add pseudo private properties used and removed during the build process
  lodash._iteratorTemplate = iteratorTemplate;
  lodash._shimKeys = shimKeys;

  /*--------------------------------------------------------------------------*/

  // assign private `LoDash` constructor's prototype
  LoDash.prototype = lodash.prototype;

  // add all static functions to `LoDash.prototype`
  mixin(lodash);

  // add `LoDash.prototype.chain` after calling `mixin()` to avoid overwriting
  // it with the wrapped `lodash.chain`
  LoDash.prototype.chain = wrapperChain;
  LoDash.prototype.value = wrapperValue;

  // add all mutator Array functions to the wrapper.
  forEach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    var func = ArrayProto[methodName];

    LoDash.prototype[methodName] = function() {
      var value = this._wrapped;
      func.apply(value, arguments);

      // avoid array-like object bugs with `Array#shift` and `Array#splice` in
      // Firefox < 10 and IE < 9
      if (hasObjectSpliceBug && value.length === 0) {
        delete value[0];
      }
      if (this._chain) {
        value = new LoDash(value);
        value._chain = true;
      }
      return value;
    };
  });

  // add all accessor Array functions to the wrapper.
  forEach(['concat', 'join', 'slice'], function(methodName) {
    var func = ArrayProto[methodName];

    LoDash.prototype[methodName] = function() {
      var value = this._wrapped,
          result = func.apply(value, arguments);

      if (this._chain) {
        result = new LoDash(result);
        result._chain = true;
      }
      return result;
    };
  });

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash was injected by a third-party script and not intended to be
    // loaded as a module. The global assignment can be reverted in the Lo-Dash
    // module via its `noConflict()` method.
    window._ = lodash;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define('lodash',[],function() {
      return lodash;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports) {
    // in Node.js or RingoJS v0.8.0+
    if (typeof module == 'object' && module && module.exports == freeExports) {
      (module.exports = lodash)._ = lodash;
    }
    // in Narwhal or RingoJS v0.7.0-
    else {
      freeExports._ = lodash;
    }
  }
  else {
    // in a browser or Rhino
    window._ = lodash;
  }
}(this));

/*
 * PostMessageManager
 * 
 * class for handling post messages between windows
 * use at each listening side
 * 
 * use with or without require.js
 * 
 * version : 1.0.7
 * written by : Liron Zadkovsky
 * 
 * PLEASE consult before changing!
 * 
 */
( function( window, undefined ) {
	
    /**
     * @author liron.zadkovsky
     * 
     * @constructor PostMessageManager
     * @param listenerWindow listen to receive messages
     * @param targetWindow post messages to
     * @param handlerObject contains handler functions
     * @param context call handler functions in context
     * 
     * @returns {PostMessageManager}
     */
    function PostMessageManager( listenerWindow, targetWindow, handlerObject, context ) {
    	
    	// save args to class members
    	this.listenerWindow = listenerWindow ;
    	this.targetWindow = targetWindow ;
    	this.handlerObject = handlerObject ;
    	this.context = context ;

    	// get window names for logging
    	this.listenerName = this.listenerWindow.name ;
		this.targetName = this.targetWindow.name ;
    	
		this.detectBrowserFeatures() ;
		
		// bind events
		this.bindEvents() ;
		
    }

    PostMessageManager.prototype = {
	    	
	    	////////////////////////////////////////////
	    	// class members
			////////////////////////////////////////////
	    	
	    	// collection for callbacks and  timeouts
	    	callbacks: {},
	    	
	    	// get values on construction
	    	listenerWindow: null,
	    	targetWindow: null,
	    	handlerObject: null,
	    	context: null,
	    	
	    	////////////////////////////////////////////
	    	// class member functions
	    	////////////////////////////////////////////
	    	
	    	bindEvents: function() {
	    		
	    		// save listener callback, keep context = this
	    		var thi$ = this ;
	    		this.listenerCallback = function( message ){
	    			thi$.receive( message ) ;
	    		} ;
	    		
	    		// bind callback to message
	    		this.listenerWindow.addEventListener( "message", this.listenerCallback, false ) ;
	    		
	    	},
	    	
	    	/////////////////////////////////////////////////////////////
	    	// messageData structure:
	    	/////////////////////////////////////////////////////////////
			//	{
			//		method: "String",
			//		config: {} || "any...",
			//		callback: function
			//	}
	    	/////////////////////////////////////////////////////////////
	    	
	    	// handle received messages
	        receive: function( message ) {
	        	
	        	// filter messages to target window
	        	if( message.source == this.targetWindow ) {
	        		
	        		// extract message data
	        		var messageData = this.browserPostJSON ?
		    				message.data : JSON.parse( message.data ) ;
	        		
	        		// get handler function name
	        		var handlerName = messageData.method ;
	        		
	        		// get config
	        		var config = messageData.config ;
	        		
	        		// log message source/target/data
		    		this.logMessage( "Message RECEIVED", "FROM", messageData ) ;
		    		
	        		// try to get callback entry
	        		var callbackObject = this.callbacks[ handlerName ] ;
	        		
	        		// try to get method handler
	        		var methodHandler = this.handlerObject[ handlerName ] ;
	        		
	        		// try to get callback function
	        		var callbackHandler = callbackObject ? callbackObject.callback : null ;
	        		
	        		// decide on handler
	        		var handler = methodHandler || callbackHandler ;
	        		
	        		if( handler ) {
	        			
	        			// when entry exists
	        			if( callbackObject ) {
	        				
	        				this.clearCallbackTimeout( handlerName ) ;
	        				
	        			}
	        			
	        			// decide on context, from constructor or default
	        			var context = this.context || this.handlerObject ;
	        			
	        			// empty default callback function
	        			var callbackWrapper = function(){} ;
	        			
	        			// handle received callback
	        			if( messageData.callback ) {
	        				
	        				var thi$ = this ;
	        				
	        				// wrap API call in real callback function
	        				callbackWrapper = function( data ) {
	        					
	        					// call callback through message API
	        					thi$.send( messageData.callback, data ) ;
	        					
	        				} ;
	        				
	        			}
	        			
	        			// call handler in context with config & callback as arguments
	            		handler.call( context, messageData.config, callbackWrapper ) ;
	        			
	        		} else {
	        			
	        			// warning on missing handler or unknown API call
	        			console.warn( "unknown API method, or to late callback call --> " + handlerName ) ;
	        			
	        		}
	        		
	        	}
	        },
	        
	        // handle sending messages
	        send: function( method, config, callback, options ) {
	        	
	        	if( this.targetWindow && this.targetWindow.postMessage ) {
	        		
		        	// declare vars
		        	var callbackKey = null ;
		        	var timeout = null ;
		        	
		        	if( callback ) {
		        		
		        		var thi$ = this ;
		        		
		        		// generate callback key
		            	callbackKey = method + "_callback_" + ( new Date() ).getTime() * Math.random() ;
		            	
		            	// set and save timeout for callback
		            	var time = ( options && options.timeout ) || 5000 ;
		            	timeout = this.listenerWindow.setTimeout( function(){
		            		
		            		// warn when callback timed out
		            		console.warn( "Timeout for api method callback --> " + callbackKey + "sent by --> " + this.listenerName );
		            		console.warn( "Timeout - will return null to callback." );
		            		
		            		thi$.clearCallbackTimeout( callbackKey ) ;
		            		
		            		callback( null ) ;
		            		
		            	}, time ) ;
		        		
		            	// add callback entry to collection
		        		this.callbacks[ callbackKey ] = {
		        			callback: callback,
		        			timeout: timeout
		        		} ;
		        		
		        	}
		        	
		        	// create message data object
		        	var messageData = {
		        			
		        		method: method,
		        		config: config,
		        		callback: callbackKey
		        		
		        	} ;
		        	
	        		// log message source/target/data
		    		this.logMessage( "Message SENT", "TO", messageData ) ;
		    		
		    		var postData = this.browserPostJSON ?
		    				messageData : JSON.stringify( messageData ) ;
		    		
		    		// post message to target
		        	this.targetWindow.postMessage( postData, "*" ) ;
		        } else {
		        	
		        	console.warn( "[PMM - "+ this.listenerName +" ] --> sending to target: "+ this.targetName +", frame does not exist!" ) ;
		        	
		        }
	        },
	        
	        clearCallbackTimeout: function( callbackKey ) {
	        	
	        	callbackObject = this.callbacks[ callbackKey ]
	        	
	        	if( callbackObject ) {
	        		
	        		// get time out
	        		var timeout = callbackObject.timeout ;
	        		
	        		// clear timeout
	        		this.listenerWindow.clearTimeout( timeout ) ;
	        		
	        		// remove entry from collection
	        		delete this.callbacks[ callbackKey ] ;
	        		
	        	} else {
	        		console.warn( "Trying to clear callback - Callback already called" );
	        	}
	        },
	        
	        logMessage: function( text, rel, data ) {
	    		
	    		console.log( '\n' );
	    		
	    		console.log( text + " by " +  this.listenerName + " " + rel + " " + this.targetName + " --> " + data.method ) ;
	    		
	    		console.log( JSON.stringify( data.config, null, '\t' ) ) ;
	    		
	        },
	        
	        detectBrowserFeatures: function() {
	        	
	        	var appstr = window.navigator.appVersion.toLowerCase() ;
	        	
	        	this.browserPostJSON = appstr.indexOf( 'msie 9' ) == -1 ;
	        	
	        },
	        
	        destroy: function() {
	        	
	        	// remove listener
	        	this.listenerWindow.removeEventListener( "message", this.listenerCallback, false ) ;
	        	
	        	// detach members for garbage 
	        	this.listenerCallback = null ;
	        	
	        	this.listenerWindow = null ;
	        	this.targetWindow = null ;
	        	this.handlerObject = null ;
	        	this.context = null ;
	        	
	    		this.listenerName = null ;
	    		this.targetName = null ;
	        	
	        }
	   
    } ;
    
    // non require.js use support
    window.PostMessageManager = PostMessageManager ;
    
    // require.js use support
	if ( typeof define === "function" ) {
		define( 'messageManager',[], function () { return PostMessageManager ; } ) ;
	}
	
} )( window ) ;

define('i18n',['jquery','lodash'], function ($, _){
		
		var i18n = function (){};
		
	   _.extend(i18n.prototype,{
        
            set : function(lang){

                this.lang = lang.toLowerCase();
                var that=this;

                $.ajax({
                    async: false,
                    dataType: "json",
                    url: "js/locale/"+lang+".json",
                    success: function(data){
                        that._data = data;
                    }
                });

                _.bindAll(this,'replacer');

            },

            translate : function(template){
                if (!this.lang) {
                    throw ('i18n error - no lang');
                }
                return this.proccess(template);
            },

            proccess  : function  (text){
                return text.replace(/\(\((.*?)\)\)/g,this.replacer);
            },

            replacer : function  (match, p1){
                return this.tran(p1);
            },

            tran : function (str, params) {
                //console.log('i18n tran',this._data);
                var result = str;
                
                if (typeof(this._data) != "undefined" && typeof(this._data[str]) != "undefined") {
                    result = this._data[str];
                }
                
                // Substitute any params.
                return this.printf(result, params);
            },

             printf : function (str, args) {
                if (!args) return str;

                var result = '';
                var search = /%(\d+)\$s/g;

                // Replace %n1$ where n is a number.
                var matches = search.exec(str);
                while (matches) {
                    var index = parseInt(matches[1], 10) - 1;
                    str       = str.replace('%' + matches[1] + '\$s', (args[index]));
                    matches   = search.exec(str);
                }
                var parts = str.split('%s');

                if (parts.length > 1) {
                    for(var i = 0; i < args.length; i++) {
                        // If the part ends with a '%' chatacter, we've encountered a literal
                        // '%%s', which we should output as a '%s'. To achieve this, add an
                        // 's' on the end and merge it with the next part.
                        if (parts[i].length > 0 && parts[i].lastIndexOf('%') == (parts[i].length - 1)) {
                            parts[i] += 's' + parts.splice(i + 1, 1)[0];
                        }

                        // Append the part and the substitution to the result.
                        result += parts[i] + args[i];
                    }
                }

                return result + parts[parts.length - 1];
            
            }
       });
		
	   return  new i18n();
    
});

/*!
 * Globalize
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */

(function( window, undefined ) {

var Globalize,
	// private variables
	regexHex,
	regexInfinity,
	regexParseFloat,
	regexTrim,
	// private JavaScript utility functions
	arrayIndexOf,
	endsWith,
	extend,
	isArray,
	isFunction,
	isObject,
	startsWith,
	trim,
	truncate,
	zeroPad,
	// private Globalization utility functions
	appendPreOrPostMatch,
	expandFormat,
	formatDate,
	formatNumber,
	getTokenRegExp,
	getEra,
	getEraYear,
	parseExact,
	parseNegativePattern;

// Global variable (Globalize) or CommonJS module (globalize)
Globalize = function( cultureSelector ) {
	return new Globalize.prototype.init( cultureSelector );
};

if ( typeof require !== "undefined" &&
	typeof exports !== "undefined" &&
	typeof module !== "undefined" ) {
	// Assume CommonJS
	module.exports = Globalize;
} else {
	// Export as global variable
	window.Globalize = Globalize;
}

Globalize.cultures = {};

Globalize.prototype = {
	constructor: Globalize,
	init: function( cultureSelector ) {
		this.cultures = Globalize.cultures;
		this.cultureSelector = cultureSelector;

		return this;
	}
};
Globalize.prototype.init.prototype = Globalize.prototype;

// 1. When defining a culture, all fields are required except the ones stated as optional.
// 2. Each culture should have a ".calendars" object with at least one calendar named "standard"
//    which serves as the default calendar in use by that culture.
// 3. Each culture should have a ".calendar" object which is the current calendar being used,
//    it may be dynamically changed at any time to one of the calendars in ".calendars".
Globalize.cultures[ "default" ] = {
	// A unique name for the culture in the form <language code>-<country/region code>
	name: "en",
	// the name of the culture in the english language
	englishName: "English",
	// the name of the culture in its own language
	nativeName: "English",
	// whether the culture uses right-to-left text
	isRTL: false,
	// "language" is used for so-called "specific" cultures.
	// For example, the culture "es-CL" means "Spanish, in Chili".
	// It represents the Spanish-speaking culture as it is in Chili,
	// which might have different formatting rules or even translations
	// than Spanish in Spain. A "neutral" culture is one that is not
	// specific to a region. For example, the culture "es" is the generic
	// Spanish culture, which may be a more generalized version of the language
	// that may or may not be what a specific culture expects.
	// For a specific culture like "es-CL", the "language" field refers to the
	// neutral, generic culture information for the language it is using.
	// This is not always a simple matter of the string before the dash.
	// For example, the "zh-Hans" culture is netural (Simplified Chinese).
	// And the "zh-SG" culture is Simplified Chinese in Singapore, whose lanugage
	// field is "zh-CHS", not "zh".
	// This field should be used to navigate from a specific culture to it's
	// more general, neutral culture. If a culture is already as general as it
	// can get, the language may refer to itself.
	language: "en",
	// numberFormat defines general number formatting rules, like the digits in
	// each grouping, the group separator, and how negative numbers are displayed.
	numberFormat: {
		// [negativePattern]
		// Note, numberFormat.pattern has no "positivePattern" unlike percent and currency,
		// but is still defined as an array for consistency with them.
		//   negativePattern: one of "(n)|-n|- n|n-|n -"
		pattern: [ "-n" ],
		// number of decimal places normally shown
		decimals: 2,
		// string that separates number groups, as in 1,000,000
		",": ",",
		// string that separates a number from the fractional portion, as in 1.99
		".": ".",
		// array of numbers indicating the size of each number group.
		// TODO: more detailed description and example
		groupSizes: [ 3 ],
		// symbol used for positive numbers
		"+": "+",
		// symbol used for negative numbers
		"-": "-",
		// symbol used for NaN (Not-A-Number)
		"NaN": "NaN",
		// symbol used for Negative Infinity
		negativeInfinity: "-Infinity",
		// symbol used for Positive Infinity
		positiveInfinity: "Infinity",
		percent: {
			// [negativePattern, positivePattern]
			//   negativePattern: one of "-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %"
			//   positivePattern: one of "n %|n%|%n|% n"
			pattern: [ "-n %", "n %" ],
			// number of decimal places normally shown
			decimals: 2,
			// array of numbers indicating the size of each number group.
			// TODO: more detailed description and example
			groupSizes: [ 3 ],
			// string that separates number groups, as in 1,000,000
			",": ",",
			// string that separates a number from the fractional portion, as in 1.99
			".": ".",
			// symbol used to represent a percentage
			symbol: "%"
		},
		currency: {
			// [negativePattern, positivePattern]
			//   negativePattern: one of "($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)"
			//   positivePattern: one of "$n|n$|$ n|n $"
			pattern: [ "($n)", "$n" ],
			// number of decimal places normally shown
			decimals: 2,
			// array of numbers indicating the size of each number group.
			// TODO: more detailed description and example
			groupSizes: [ 3 ],
			// string that separates number groups, as in 1,000,000
			",": ",",
			// string that separates a number from the fractional portion, as in 1.99
			".": ".",
			// symbol used to represent currency
			symbol: "$"
		}
	},
	// calendars defines all the possible calendars used by this culture.
	// There should be at least one defined with name "standard", and is the default
	// calendar used by the culture.
	// A calendar contains information about how dates are formatted, information about
	// the calendar's eras, a standard set of the date formats,
	// translations for day and month names, and if the calendar is not based on the Gregorian
	// calendar, conversion functions to and from the Gregorian calendar.
	calendars: {
		standard: {
			// name that identifies the type of calendar this is
			name: "Gregorian_USEnglish",
			// separator of parts of a date (e.g. "/" in 11/05/1955)
			"/": "/",
			// separator of parts of a time (e.g. ":" in 05:44 PM)
			":": ":",
			// the first day of the week (0 = Sunday, 1 = Monday, etc)
			firstDay: 0,
			days: {
				// full day names
				names: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
				// abbreviated day names
				namesAbbr: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
				// shortest day names
				namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
			},
			months: {
				// full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
				names: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "" ],
				// abbreviated month names
				namesAbbr: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "" ]
			},
			// AM and PM designators in one of these forms:
			// The usual view, and the upper and lower case versions
			//   [ standard, lowercase, uppercase ]
			// The culture does not use AM or PM (likely all standard date formats use 24 hour time)
			//   null
			AM: [ "AM", "am", "AM" ],
			PM: [ "PM", "pm", "PM" ],
			eras: [
				// eras in reverse chronological order.
				// name: the name of the era in this culture (e.g. A.D., C.E.)
				// start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
				// offset: offset in years from gregorian calendar
				{
					"name": "A.D.",
					"start": null,
					"offset": 0
				}
			],
			// when a two digit year is given, it will never be parsed as a four digit
			// year greater than this year (in the appropriate era for the culture)
			// Set it as a full year (e.g. 2029) or use an offset format starting from
			// the current year: "+19" would correspond to 2029 if the current year 2010.
			twoDigitYearMax: 2029,
			// set of predefined date and time patterns used by the culture
			// these represent the format someone in this culture would expect
			// to see given the portions of the date that are shown.
			patterns: {
				// short date pattern
				d: "M/d/yyyy",
				// long date pattern
				D: "dddd, MMMM dd, yyyy",
				// short time pattern
				t: "h:mm tt",
				// long time pattern
				T: "h:mm:ss tt",
				// long date, short time pattern
				f: "dddd, MMMM dd, yyyy h:mm tt",
				// long date, long time pattern
				F: "dddd, MMMM dd, yyyy h:mm:ss tt",
				// month/day pattern
				M: "MMMM dd",
				// month/year pattern
				Y: "yyyy MMMM",
				// S is a sortable format that does not vary by culture
				S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
			}
			// optional fields for each calendar:
			/*
			monthsGenitive:
				Same as months but used when the day preceeds the month.
				Omit if the culture has no genitive distinction in month names.
				For an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx
			convert:
				Allows for the support of non-gregorian based calendars. This convert object is used to
				to convert a date to and from a gregorian calendar date to handle parsing and formatting.
				The two functions:
					fromGregorian( date )
						Given the date as a parameter, return an array with parts [ year, month, day ]
						corresponding to the non-gregorian based year, month, and day for the calendar.
					toGregorian( year, month, day )
						Given the non-gregorian year, month, and day, return a new Date() object
						set to the corresponding date in the gregorian calendar.
			*/
		}
	},
	// For localized strings
	messages: {}
};

Globalize.cultures[ "default" ].calendar = Globalize.cultures[ "default" ].calendars.standard;

Globalize.cultures.en = Globalize.cultures[ "default" ];

Globalize.cultureSelector = "en";

//
// private variables
//

regexHex = /^0x[a-f0-9]+$/i;
regexInfinity = /^[+\-]?infinity$/i;
regexParseFloat = /^[+\-]?\d*\.?\d*(e[+\-]?\d+)?$/;
regexTrim = /^\s+|\s+$/g;

//
// private JavaScript utility functions
//

arrayIndexOf = function( array, item ) {
	if ( array.indexOf ) {
		return array.indexOf( item );
	}
	for ( var i = 0, length = array.length; i < length; i++ ) {
		if ( array[i] === item ) {
			return i;
		}
	}
	return -1;
};

endsWith = function( value, pattern ) {
	return value.substr( value.length - pattern.length ) === pattern;
};

extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction(target) ) {
		target = {};
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( isObject(copy) || (copyIsArray = isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && isArray(src) ? src : [];

					} else {
						clone = src && isObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

isArray = Array.isArray || function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Array]";
};

isFunction = function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Function]";
};

isObject = function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Object]";
};

startsWith = function( value, pattern ) {
	return value.indexOf( pattern ) === 0;
};

trim = function( value ) {
	return ( value + "" ).replace( regexTrim, "" );
};

truncate = function( value ) {
	if ( isNaN( value ) ) {
		return NaN;
	}
	return Math[ value < 0 ? "ceil" : "floor" ]( value );
};

zeroPad = function( str, count, left ) {
	var l;
	for ( l = str.length; l < count; l += 1 ) {
		str = ( left ? ("0" + str) : (str + "0") );
	}
	return str;
};

//
// private Globalization utility functions
//

appendPreOrPostMatch = function( preMatch, strings ) {
	// appends pre- and post- token match strings while removing escaped characters.
	// Returns a single quote count which is used to determine if the token occurs
	// in a string literal.
	var quoteCount = 0,
		escaped = false;
	for ( var i = 0, il = preMatch.length; i < il; i++ ) {
		var c = preMatch.charAt( i );
		switch ( c ) {
			case "\'":
				if ( escaped ) {
					strings.push( "\'" );
				}
				else {
					quoteCount++;
				}
				escaped = false;
				break;
			case "\\":
				if ( escaped ) {
					strings.push( "\\" );
				}
				escaped = !escaped;
				break;
			default:
				strings.push( c );
				escaped = false;
				break;
		}
	}
	return quoteCount;
};

expandFormat = function( cal, format ) {
	// expands unspecified or single character date formats into the full pattern.
	format = format || "F";
	var pattern,
		patterns = cal.patterns,
		len = format.length;
	if ( len === 1 ) {
		pattern = patterns[ format ];
		if ( !pattern ) {
			throw "Invalid date format string \'" + format + "\'.";
		}
		format = pattern;
	}
	else if ( len === 2 && format.charAt(0) === "%" ) {
		// %X escape format -- intended as a custom format string that is only one character, not a built-in format.
		format = format.charAt( 1 );
	}
	return format;
};

formatDate = function( value, format, culture ) {
	var cal = culture.calendar,
		convert = cal.convert,
		ret;

	if ( !format || !format.length || format === "i" ) {
		if ( culture && culture.name.length ) {
			if ( convert ) {
				// non-gregorian calendar, so we cannot use built-in toLocaleString()
				ret = formatDate( value, cal.patterns.F, culture );
			}
			else {
				var eraDate = new Date( value.getTime() ),
					era = getEra( value, cal.eras );
				eraDate.setFullYear( getEraYear(value, cal, era) );
				ret = eraDate.toLocaleString();
			}
		}
		else {
			ret = value.toString();
		}
		return ret;
	}

	var eras = cal.eras,
		sortable = format === "s";
	format = expandFormat( cal, format );

	// Start with an empty string
	ret = [];
	var hour,
		zeros = [ "0", "00", "000" ],
		foundDay,
		checkedDay,
		dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
		quoteCount = 0,
		tokenRegExp = getTokenRegExp(),
		converted;

	function padZeros( num, c ) {
		var r, s = num + "";
		if ( c > 1 && s.length < c ) {
			r = ( zeros[c - 2] + s);
			return r.substr( r.length - c, c );
		}
		else {
			r = s;
		}
		return r;
	}

	function hasDay() {
		if ( foundDay || checkedDay ) {
			return foundDay;
		}
		foundDay = dayPartRegExp.test( format );
		checkedDay = true;
		return foundDay;
	}

	function getPart( date, part ) {
		if ( converted ) {
			return converted[ part ];
		}
		switch ( part ) {
			case 0:
				return date.getFullYear();
			case 1:
				return date.getMonth();
			case 2:
				return date.getDate();
			default:
				throw "Invalid part value " + part;
		}
	}

	if ( !sortable && convert ) {
		converted = convert.fromGregorian( value );
	}

	for ( ; ; ) {
		// Save the current index
		var index = tokenRegExp.lastIndex,
			// Look for the next pattern
			ar = tokenRegExp.exec( format );

		// Append the text before the pattern (or the end of the string if not found)
		var preMatch = format.slice( index, ar ? ar.index : format.length );
		quoteCount += appendPreOrPostMatch( preMatch, ret );

		if ( !ar ) {
			break;
		}

		// do not replace any matches that occur inside a string literal.
		if ( quoteCount % 2 ) {
			ret.push( ar[0] );
			continue;
		}

		var current = ar[ 0 ],
			clength = current.length;

		switch ( current ) {
			case "ddd":
				//Day of the week, as a three-letter abbreviation
			case "dddd":
				// Day of the week, using the full name
				var names = ( clength === 3 ) ? cal.days.namesAbbr : cal.days.names;
				ret.push( names[value.getDay()] );
				break;
			case "d":
				// Day of month, without leading zero for single-digit days
			case "dd":
				// Day of month, with leading zero for single-digit days
				foundDay = true;
				ret.push(
					padZeros( getPart(value, 2), clength )
				);
				break;
			case "MMM":
				// Month, as a three-letter abbreviation
			case "MMMM":
				// Month, using the full name
				var part = getPart( value, 1 );
				ret.push(
					( cal.monthsGenitive && hasDay() ) ?
					( cal.monthsGenitive[ clength === 3 ? "namesAbbr" : "names" ][ part ] ) :
					( cal.months[ clength === 3 ? "namesAbbr" : "names" ][ part ] )
				);
				break;
			case "M":
				// Month, as digits, with no leading zero for single-digit months
			case "MM":
				// Month, as digits, with leading zero for single-digit months
				ret.push(
					padZeros( getPart(value, 1) + 1, clength )
				);
				break;
			case "y":
				// Year, as two digits, but with no leading zero for years less than 10
			case "yy":
				// Year, as two digits, with leading zero for years less than 10
			case "yyyy":
				// Year represented by four full digits
				part = converted ? converted[ 0 ] : getEraYear( value, cal, getEra(value, eras), sortable );
				if ( clength < 4 ) {
					part = part % 100;
				}
				ret.push(
					padZeros( part, clength )
				);
				break;
			case "h":
				// Hours with no leading zero for single-digit hours, using 12-hour clock
			case "hh":
				// Hours with leading zero for single-digit hours, using 12-hour clock
				hour = value.getHours() % 12;
				if ( hour === 0 ) hour = 12;
				ret.push(
					padZeros( hour, clength )
				);
				break;
			case "H":
				// Hours with no leading zero for single-digit hours, using 24-hour clock
			case "HH":
				// Hours with leading zero for single-digit hours, using 24-hour clock
				ret.push(
					padZeros( value.getHours(), clength )
				);
				break;
			case "m":
				// Minutes with no leading zero for single-digit minutes
			case "mm":
				// Minutes with leading zero for single-digit minutes
				ret.push(
					padZeros( value.getMinutes(), clength )
				);
				break;
			case "s":
				// Seconds with no leading zero for single-digit seconds
			case "ss":
				// Seconds with leading zero for single-digit seconds
				ret.push(
					padZeros( value.getSeconds(), clength )
				);
				break;
			case "t":
				// One character am/pm indicator ("a" or "p")
			case "tt":
				// Multicharacter am/pm indicator
				part = value.getHours() < 12 ? ( cal.AM ? cal.AM[0] : " " ) : ( cal.PM ? cal.PM[0] : " " );
				ret.push( clength === 1 ? part.charAt(0) : part );
				break;
			case "f":
				// Deciseconds
			case "ff":
				// Centiseconds
			case "fff":
				// Milliseconds
				ret.push(
					padZeros( value.getMilliseconds(), 3 ).substr( 0, clength )
				);
				break;
			case "z":
				// Time zone offset, no leading zero
			case "zz":
				// Time zone offset with leading zero
				hour = value.getTimezoneOffset() / 60;
				ret.push(
					( hour <= 0 ? "+" : "-" ) + padZeros( Math.floor(Math.abs(hour)), clength )
				);
				break;
			case "zzz":
				// Time zone offset with leading zero
				hour = value.getTimezoneOffset() / 60;
				ret.push(
					( hour <= 0 ? "+" : "-" ) + padZeros( Math.floor(Math.abs(hour)), 2 ) +
					// Hard coded ":" separator, rather than using cal.TimeSeparator
					// Repeated here for consistency, plus ":" was already assumed in date parsing.
					":" + padZeros( Math.abs(value.getTimezoneOffset() % 60), 2 )
				);
				break;
			case "g":
			case "gg":
				if ( cal.eras ) {
					ret.push(
						cal.eras[ getEra(value, eras) ].name
					);
				}
				break;
		case "/":
			ret.push( cal["/"] );
			break;
		default:
			throw "Invalid date format pattern \'" + current + "\'.";
		}
	}
	return ret.join( "" );
};

// formatNumber
(function() {
	var expandNumber;

	expandNumber = function( number, precision, formatInfo ) {
		var groupSizes = formatInfo.groupSizes,
			curSize = groupSizes[ 0 ],
			curGroupIndex = 1,
			factor = Math.pow( 10, precision ),
			rounded = Math.round( number * factor ) / factor;

		if ( !isFinite(rounded) ) {
			rounded = number;
		}
		number = rounded;

		var numberString = number+"",
			right = "",
			split = numberString.split( /e/i ),
			exponent = split.length > 1 ? parseInt( split[1], 10 ) : 0;
		numberString = split[ 0 ];
		split = numberString.split( "." );
		numberString = split[ 0 ];
		right = split.length > 1 ? split[ 1 ] : "";

		if ( exponent > 0 ) {
			right = zeroPad( right, exponent, false );
			numberString += right.slice( 0, exponent );
			right = right.substr( exponent );
		}
		else if ( exponent < 0 ) {
			exponent = -exponent;
			numberString = zeroPad( numberString, exponent + 1, true );
			right = numberString.slice( -exponent, numberString.length ) + right;
			numberString = numberString.slice( 0, -exponent );
		}

		if ( precision > 0 ) {
			right = formatInfo[ "." ] +
				( (right.length > precision) ? right.slice(0, precision) : zeroPad(right, precision) );
		}
		else {
			right = "";
		}

		var stringIndex = numberString.length - 1,
			sep = formatInfo[ "," ],
			ret = "";

		while ( stringIndex >= 0 ) {
			if ( curSize === 0 || curSize > stringIndex ) {
				return numberString.slice( 0, stringIndex + 1 ) + ( ret.length ? (sep + ret + right) : right );
			}
			ret = numberString.slice( stringIndex - curSize + 1, stringIndex + 1 ) + ( ret.length ? (sep + ret) : "" );

			stringIndex -= curSize;

			if ( curGroupIndex < groupSizes.length ) {
				curSize = groupSizes[ curGroupIndex ];
				curGroupIndex++;
			}
		}

		return numberString.slice( 0, stringIndex + 1 ) + sep + ret + right;
	};

	formatNumber = function( value, format, culture ) {
		if ( !isFinite(value) ) {
			if ( value === Infinity ) {
				return culture.numberFormat.positiveInfinity;
			}
			if ( value === -Infinity ) {
				return culture.numberFormat.negativeInfinity;
			}
			return culture.numberFormat.NaN;
		}
		if ( !format || format === "i" ) {
			return culture.name.length ? value.toLocaleString() : value.toString();
		}
		format = format || "D";

		var nf = culture.numberFormat,
			number = Math.abs( value ),
			precision = -1,
			pattern;
		if ( format.length > 1 ) precision = parseInt( format.slice(1), 10 );

		var current = format.charAt( 0 ).toUpperCase(),
			formatInfo;

		switch ( current ) {
			case "D":
				pattern = "n";
				number = truncate( number );
				if ( precision !== -1 ) {
					number = zeroPad( "" + number, precision, true );
				}
				if ( value < 0 ) number = "-" + number;
				break;
			case "N":
				formatInfo = nf;
				/* falls through */
			case "C":
				formatInfo = formatInfo || nf.currency;
				/* falls through */
			case "P":
				formatInfo = formatInfo || nf.percent;
				pattern = value < 0 ? formatInfo.pattern[ 0 ] : ( formatInfo.pattern[1] || "n" );
				if ( precision === -1 ) precision = formatInfo.decimals;
				number = expandNumber( number * (current === "P" ? 100 : 1), precision, formatInfo );
				break;
			default:
				throw "Bad number format specifier: " + current;
		}

		var patternParts = /n|\$|-|%/g,
			ret = "";
		for ( ; ; ) {
			var index = patternParts.lastIndex,
				ar = patternParts.exec( pattern );

			ret += pattern.slice( index, ar ? ar.index : pattern.length );

			if ( !ar ) {
				break;
			}

			switch ( ar[0] ) {
				case "n":
					ret += number;
					break;
				case "$":
					ret += nf.currency.symbol;
					break;
				case "-":
					// don't make 0 negative
					if ( /[1-9]/.test(number) ) {
						ret += nf[ "-" ];
					}
					break;
				case "%":
					ret += nf.percent.symbol;
					break;
			}
		}

		return ret;
	};

}());

getTokenRegExp = function() {
	// regular expression for matching date and time tokens in format strings.
	return (/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g);
};

getEra = function( date, eras ) {
	if ( !eras ) return 0;
	var start, ticks = date.getTime();
	for ( var i = 0, l = eras.length; i < l; i++ ) {
		start = eras[ i ].start;
		if ( start === null || ticks >= start ) {
			return i;
		}
	}
	return 0;
};

getEraYear = function( date, cal, era, sortable ) {
	var year = date.getFullYear();
	if ( !sortable && cal.eras ) {
		// convert normal gregorian year to era-shifted gregorian
		// year by subtracting the era offset
		year -= cal.eras[ era ].offset;
	}
	return year;
};

// parseExact
(function() {
	var expandYear,
		getDayIndex,
		getMonthIndex,
		getParseRegExp,
		outOfRange,
		toUpper,
		toUpperArray;

	expandYear = function( cal, year ) {
		// expands 2-digit year into 4 digits.
		if ( year < 100 ) {
			var now = new Date(),
				era = getEra( now ),
				curr = getEraYear( now, cal, era ),
				twoDigitYearMax = cal.twoDigitYearMax;
			twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt( twoDigitYearMax, 10 ) : twoDigitYearMax;
			year += curr - ( curr % 100 );
			if ( year > twoDigitYearMax ) {
				year -= 100;
			}
		}
		return year;
	};

	getDayIndex = function	( cal, value, abbr ) {
		var ret,
			days = cal.days,
			upperDays = cal._upperDays;
		if ( !upperDays ) {
			cal._upperDays = upperDays = [
				toUpperArray( days.names ),
				toUpperArray( days.namesAbbr ),
				toUpperArray( days.namesShort )
			];
		}
		value = toUpper( value );
		if ( abbr ) {
			ret = arrayIndexOf( upperDays[1], value );
			if ( ret === -1 ) {
				ret = arrayIndexOf( upperDays[2], value );
			}
		}
		else {
			ret = arrayIndexOf( upperDays[0], value );
		}
		return ret;
	};

	getMonthIndex = function( cal, value, abbr ) {
		var months = cal.months,
			monthsGen = cal.monthsGenitive || cal.months,
			upperMonths = cal._upperMonths,
			upperMonthsGen = cal._upperMonthsGen;
		if ( !upperMonths ) {
			cal._upperMonths = upperMonths = [
				toUpperArray( months.names ),
				toUpperArray( months.namesAbbr )
			];
			cal._upperMonthsGen = upperMonthsGen = [
				toUpperArray( monthsGen.names ),
				toUpperArray( monthsGen.namesAbbr )
			];
		}
		value = toUpper( value );
		var i = arrayIndexOf( abbr ? upperMonths[1] : upperMonths[0], value );
		if ( i < 0 ) {
			i = arrayIndexOf( abbr ? upperMonthsGen[1] : upperMonthsGen[0], value );
		}
		return i;
	};

	getParseRegExp = function( cal, format ) {
		// converts a format string into a regular expression with groups that
		// can be used to extract date fields from a date string.
		// check for a cached parse regex.
		var re = cal._parseRegExp;
		if ( !re ) {
			cal._parseRegExp = re = {};
		}
		else {
			var reFormat = re[ format ];
			if ( reFormat ) {
				return reFormat;
			}
		}

		// expand single digit formats, then escape regular expression characters.
		var expFormat = expandFormat( cal, format ).replace( /([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1" ),
			regexp = [ "^" ],
			groups = [],
			index = 0,
			quoteCount = 0,
			tokenRegExp = getTokenRegExp(),
			match;

		// iterate through each date token found.
		while ( (match = tokenRegExp.exec(expFormat)) !== null ) {
			var preMatch = expFormat.slice( index, match.index );
			index = tokenRegExp.lastIndex;

			// don't replace any matches that occur inside a string literal.
			quoteCount += appendPreOrPostMatch( preMatch, regexp );
			if ( quoteCount % 2 ) {
				regexp.push( match[0] );
				continue;
			}

			// add a regex group for the token.
			var m = match[ 0 ],
				len = m.length,
				add;
			switch ( m ) {
				case "dddd": case "ddd":
				case "MMMM": case "MMM":
				case "gg": case "g":
					add = "(\\D+)";
					break;
				case "tt": case "t":
					add = "(\\D*)";
					break;
				case "yyyy":
				case "fff":
				case "ff":
				case "f":
					add = "(\\d{" + len + "})";
					break;
				case "dd": case "d":
				case "MM": case "M":
				case "yy": case "y":
				case "HH": case "H":
				case "hh": case "h":
				case "mm": case "m":
				case "ss": case "s":
					add = "(\\d\\d?)";
					break;
				case "zzz":
					add = "([+-]?\\d\\d?:\\d{2})";
					break;
				case "zz": case "z":
					add = "([+-]?\\d\\d?)";
					break;
				case "/":
					add = "(\\/)";
					break;
				default:
					throw "Invalid date format pattern \'" + m + "\'.";
			}
			if ( add ) {
				regexp.push( add );
			}
			groups.push( match[0] );
		}
		appendPreOrPostMatch( expFormat.slice(index), regexp );
		regexp.push( "$" );

		// allow whitespace to differ when matching formats.
		var regexpStr = regexp.join( "" ).replace( /\s+/g, "\\s+" ),
			parseRegExp = { "regExp": regexpStr, "groups": groups };

		// cache the regex for this format.
		return re[ format ] = parseRegExp;
	};

	outOfRange = function( value, low, high ) {
		return value < low || value > high;
	};

	toUpper = function( value ) {
		// "he-IL" has non-breaking space in weekday names.
		return value.split( "\u00A0" ).join( " " ).toUpperCase();
	};

	toUpperArray = function( arr ) {
		var results = [];
		for ( var i = 0, l = arr.length; i < l; i++ ) {
			results[ i ] = toUpper( arr[i] );
		}
		return results;
	};

	parseExact = function( value, format, culture ) {
		// try to parse the date string by matching against the format string
		// while using the specified culture for date field names.
		value = trim( value );
		var cal = culture.calendar,
			// convert date formats into regular expressions with groupings.
			// use the regexp to determine the input format and extract the date fields.
			parseInfo = getParseRegExp( cal, format ),
			match = new RegExp( parseInfo.regExp ).exec( value );
		if ( match === null ) {
			return null;
		}
		// found a date format that matches the input.
		var groups = parseInfo.groups,
			era = null, year = null, month = null, date = null, weekDay = null,
			hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
			pmHour = false;
		// iterate the format groups to extract and set the date fields.
		for ( var j = 0, jl = groups.length; j < jl; j++ ) {
			var matchGroup = match[ j + 1 ];
			if ( matchGroup ) {
				var current = groups[ j ],
					clength = current.length,
					matchInt = parseInt( matchGroup, 10 );
				switch ( current ) {
					case "dd": case "d":
						// Day of month.
						date = matchInt;
						// check that date is generally in valid range, also checking overflow below.
						if ( outOfRange(date, 1, 31) ) return null;
						break;
					case "MMM": case "MMMM":
						month = getMonthIndex( cal, matchGroup, clength === 3 );
						if ( outOfRange(month, 0, 11) ) return null;
						break;
					case "M": case "MM":
						// Month.
						month = matchInt - 1;
						if ( outOfRange(month, 0, 11) ) return null;
						break;
					case "y": case "yy":
					case "yyyy":
						year = clength < 4 ? expandYear( cal, matchInt ) : matchInt;
						if ( outOfRange(year, 0, 9999) ) return null;
						break;
					case "h": case "hh":
						// Hours (12-hour clock).
						hour = matchInt;
						if ( hour === 12 ) hour = 0;
						if ( outOfRange(hour, 0, 11) ) return null;
						break;
					case "H": case "HH":
						// Hours (24-hour clock).
						hour = matchInt;
						if ( outOfRange(hour, 0, 23) ) return null;
						break;
					case "m": case "mm":
						// Minutes.
						min = matchInt;
						if ( outOfRange(min, 0, 59) ) return null;
						break;
					case "s": case "ss":
						// Seconds.
						sec = matchInt;
						if ( outOfRange(sec, 0, 59) ) return null;
						break;
					case "tt": case "t":
						// AM/PM designator.
						// see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
						// the AM tokens. If not, fail the parse for this format.
						pmHour = cal.PM && ( matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2] );
						if (
							!pmHour && (
								!cal.AM || ( matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2] )
							)
						) return null;
						break;
					case "f":
						// Deciseconds.
					case "ff":
						// Centiseconds.
					case "fff":
						// Milliseconds.
						msec = matchInt * Math.pow( 10, 3 - clength );
						if ( outOfRange(msec, 0, 999) ) return null;
						break;
					case "ddd":
						// Day of week.
					case "dddd":
						// Day of week.
						weekDay = getDayIndex( cal, matchGroup, clength === 3 );
						if ( outOfRange(weekDay, 0, 6) ) return null;
						break;
					case "zzz":
						// Time zone offset in +/- hours:min.
						var offsets = matchGroup.split( /:/ );
						if ( offsets.length !== 2 ) return null;
						hourOffset = parseInt( offsets[0], 10 );
						if ( outOfRange(hourOffset, -12, 13) ) return null;
						var minOffset = parseInt( offsets[1], 10 );
						if ( outOfRange(minOffset, 0, 59) ) return null;
						tzMinOffset = ( hourOffset * 60 ) + ( startsWith(matchGroup, "-") ? -minOffset : minOffset );
						break;
					case "z": case "zz":
						// Time zone offset in +/- hours.
						hourOffset = matchInt;
						if ( outOfRange(hourOffset, -12, 13) ) return null;
						tzMinOffset = hourOffset * 60;
						break;
					case "g": case "gg":
						var eraName = matchGroup;
						if ( !eraName || !cal.eras ) return null;
						eraName = trim( eraName.toLowerCase() );
						for ( var i = 0, l = cal.eras.length; i < l; i++ ) {
							if ( eraName === cal.eras[i].name.toLowerCase() ) {
								era = i;
								break;
							}
						}
						// could not find an era with that name
						if ( era === null ) return null;
						break;
				}
			}
		}
		var result = new Date(), defaultYear, convert = cal.convert;
		defaultYear = convert ? convert.fromGregorian( result )[ 0 ] : result.getFullYear();
		if ( year === null ) {
			year = defaultYear;
		}
		else if ( cal.eras ) {
			// year must be shifted to normal gregorian year
			// but not if year was not specified, its already normal gregorian
			// per the main if clause above.
			year += cal.eras[( era || 0 )].offset;
		}
		// set default day and month to 1 and January, so if unspecified, these are the defaults
		// instead of the current day/month.
		if ( month === null ) {
			month = 0;
		}
		if ( date === null ) {
			date = 1;
		}
		// now have year, month, and date, but in the culture's calendar.
		// convert to gregorian if necessary
		if ( convert ) {
			result = convert.toGregorian( year, month, date );
			// conversion failed, must be an invalid match
			if ( result === null ) return null;
		}
		else {
			// have to set year, month and date together to avoid overflow based on current date.
			result.setFullYear( year, month, date );
			// check to see if date overflowed for specified month (only checked 1-31 above).
			if ( result.getDate() !== date ) return null;
			// invalid day of week.
			if ( weekDay !== null && result.getDay() !== weekDay ) {
				return null;
			}
		}
		// if pm designator token was found make sure the hours fit the 24-hour clock.
		if ( pmHour && hour < 12 ) {
			hour += 12;
		}
		result.setHours( hour, min, sec, msec );
		if ( tzMinOffset !== null ) {
			// adjust timezone to utc before applying local offset.
			var adjustedMin = result.getMinutes() - ( tzMinOffset + result.getTimezoneOffset() );
			// Safari limits hours and minutes to the range of -127 to 127.  We need to use setHours
			// to ensure both these fields will not exceed this range.	adjustedMin will range
			// somewhere between -1440 and 1500, so we only need to split this into hours.
			result.setHours( result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60 );
		}
		return result;
	};
}());

parseNegativePattern = function( value, nf, negativePattern ) {
	var neg = nf[ "-" ],
		pos = nf[ "+" ],
		ret;
	switch ( negativePattern ) {
		case "n -":
			neg = " " + neg;
			pos = " " + pos;
			/* falls through */
		case "n-":
			if ( endsWith(value, neg) ) {
				ret = [ "-", value.substr(0, value.length - neg.length) ];
			}
			else if ( endsWith(value, pos) ) {
				ret = [ "+", value.substr(0, value.length - pos.length) ];
			}
			break;
		case "- n":
			neg += " ";
			pos += " ";
			/* falls through */
		case "-n":
			if ( startsWith(value, neg) ) {
				ret = [ "-", value.substr(neg.length) ];
			}
			else if ( startsWith(value, pos) ) {
				ret = [ "+", value.substr(pos.length) ];
			}
			break;
		case "(n)":
			if ( startsWith(value, "(") && endsWith(value, ")") ) {
				ret = [ "-", value.substr(1, value.length - 2) ];
			}
			break;
	}
	return ret || [ "", value ];
};

//
// public instance functions
//

Globalize.prototype.findClosestCulture = function( cultureSelector ) {
	return Globalize.findClosestCulture.call( this, cultureSelector );
};

Globalize.prototype.format = function( value, format, cultureSelector ) {
	return Globalize.format.call( this, value, format, cultureSelector );
};

Globalize.prototype.localize = function( key, cultureSelector ) {
	return Globalize.localize.call( this, key, cultureSelector );
};

Globalize.prototype.parseInt = function( value, radix, cultureSelector ) {
	return Globalize.parseInt.call( this, value, radix, cultureSelector );
};

Globalize.prototype.parseFloat = function( value, radix, cultureSelector ) {
	return Globalize.parseFloat.call( this, value, radix, cultureSelector );
};

Globalize.prototype.culture = function( cultureSelector ) {
	return Globalize.culture.call( this, cultureSelector );
};

//
// public singleton functions
//

Globalize.addCultureInfo = function( cultureName, baseCultureName, info ) {

	var base = {},
		isNew = false;

	if ( typeof cultureName !== "string" ) {
		// cultureName argument is optional string. If not specified, assume info is first
		// and only argument. Specified info deep-extends current culture.
		info = cultureName;
		cultureName = this.culture().name;
		base = this.cultures[ cultureName ];
	} else if ( typeof baseCultureName !== "string" ) {
		// baseCultureName argument is optional string. If not specified, assume info is second
		// argument. Specified info deep-extends specified culture.
		// If specified culture does not exist, create by deep-extending default
		info = baseCultureName;
		isNew = ( this.cultures[ cultureName ] == null );
		base = this.cultures[ cultureName ] || this.cultures[ "default" ];
	} else {
		// cultureName and baseCultureName specified. Assume a new culture is being created
		// by deep-extending an specified base culture
		isNew = true;
		base = this.cultures[ baseCultureName ];
	}

	this.cultures[ cultureName ] = extend(true, {},
		base,
		info
	);
	// Make the standard calendar the current culture if it's a new culture
	if ( isNew ) {
		this.cultures[ cultureName ].calendar = this.cultures[ cultureName ].calendars.standard;
	}
};

Globalize.findClosestCulture = function( name ) {
	var match;
	if ( !name ) {
		return this.findClosestCulture( this.cultureSelector ) || this.cultures[ "default" ];
	}
	if ( typeof name === "string" ) {
		name = name.split( "," );
	}
	if ( isArray(name) ) {
		var lang,
			cultures = this.cultures,
			list = name,
			i, l = list.length,
			prioritized = [];
		for ( i = 0; i < l; i++ ) {
			name = trim( list[i] );
			var pri, parts = name.split( ";" );
			lang = trim( parts[0] );
			if ( parts.length === 1 ) {
				pri = 1;
			}
			else {
				name = trim( parts[1] );
				if ( name.indexOf("q=") === 0 ) {
					name = name.substr( 2 );
					pri = parseFloat( name );
					pri = isNaN( pri ) ? 0 : pri;
				}
				else {
					pri = 1;
				}
			}
			prioritized.push({ lang: lang, pri: pri });
		}
		prioritized.sort(function( a, b ) {
			if ( a.pri < b.pri ) {
				return 1;
			} else if ( a.pri > b.pri ) {
				return -1;
			}
			return 0;
		});
		// exact match
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			match = cultures[ lang ];
			if ( match ) {
				return match;
			}
		}

		// neutral language match
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			do {
				var index = lang.lastIndexOf( "-" );
				if ( index === -1 ) {
					break;
				}
				// strip off the last part. e.g. en-US => en
				lang = lang.substr( 0, index );
				match = cultures[ lang ];
				if ( match ) {
					return match;
				}
			}
			while ( 1 );
		}

		// last resort: match first culture using that language
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			for ( var cultureKey in cultures ) {
				var culture = cultures[ cultureKey ];
				if ( culture.language === lang ) {
					return culture;
				}
			}
		}
	}
	else if ( typeof name === "object" ) {
		return name;
	}
	return match || null;
};

Globalize.format = function( value, format, cultureSelector ) {
	var culture = this.findClosestCulture( cultureSelector );
	if ( value instanceof Date ) {
		value = formatDate( value, format, culture );
	}
	else if ( typeof value === "number" ) {
		value = formatNumber( value, format, culture );
	}
	return value;
};

Globalize.localize = function( key, cultureSelector ) {
	return this.findClosestCulture( cultureSelector ).messages[ key ] ||
		this.cultures[ "default" ].messages[ key ];
};

Globalize.parseDate = function( value, formats, culture ) {
	culture = this.findClosestCulture( culture );

	var date, prop, patterns;
	if ( formats ) {
		if ( typeof formats === "string" ) {
			formats = [ formats ];
		}
		if ( formats.length ) {
			for ( var i = 0, l = formats.length; i < l; i++ ) {
				var format = formats[ i ];
				if ( format ) {
					date = parseExact( value, format, culture );
					if ( date ) {
						break;
					}
				}
			}
		}
	} else {
		patterns = culture.calendar.patterns;
		for ( prop in patterns ) {
			date = parseExact( value, patterns[prop], culture );
			if ( date ) {
				break;
			}
		}
	}

	return date || null;
};

Globalize.parseInt = function( value, radix, cultureSelector ) {
	return truncate( Globalize.parseFloat(value, radix, cultureSelector) );
};

Globalize.parseFloat = function( value, radix, cultureSelector ) {
	// radix argument is optional
	if ( typeof radix !== "number" ) {
		cultureSelector = radix;
		radix = 10;
	}

	var culture = this.findClosestCulture( cultureSelector );
	var ret = NaN,
		nf = culture.numberFormat;

	if ( value.indexOf(culture.numberFormat.currency.symbol) > -1 ) {
		// remove currency symbol
		value = value.replace( culture.numberFormat.currency.symbol, "" );
		// replace decimal seperator
		value = value.replace( culture.numberFormat.currency["."], culture.numberFormat["."] );
	}

	//Remove percentage character from number string before parsing
	if ( value.indexOf(culture.numberFormat.percent.symbol) > -1){
		value = value.replace( culture.numberFormat.percent.symbol, "" );
	}

	// remove spaces: leading, trailing and between - and number. Used for negative currency pt-BR
	value = value.replace( / /g, "" );

	// allow infinity or hexidecimal
	if ( regexInfinity.test(value) ) {
		ret = parseFloat( value );
	}
	else if ( !radix && regexHex.test(value) ) {
		ret = parseInt( value, 16 );
	}
	else {

		// determine sign and number
		var signInfo = parseNegativePattern( value, nf, nf.pattern[0] ),
			sign = signInfo[ 0 ],
			num = signInfo[ 1 ];

		// #44 - try parsing as "(n)"
		if ( sign === "" && nf.pattern[0] !== "(n)" ) {
			signInfo = parseNegativePattern( value, nf, "(n)" );
			sign = signInfo[ 0 ];
			num = signInfo[ 1 ];
		}

		// try parsing as "-n"
		if ( sign === "" && nf.pattern[0] !== "-n" ) {
			signInfo = parseNegativePattern( value, nf, "-n" );
			sign = signInfo[ 0 ];
			num = signInfo[ 1 ];
		}

		sign = sign || "+";

		// determine exponent and number
		var exponent,
			intAndFraction,
			exponentPos = num.indexOf( "e" );
		if ( exponentPos < 0 ) exponentPos = num.indexOf( "E" );
		if ( exponentPos < 0 ) {
			intAndFraction = num;
			exponent = null;
		}
		else {
			intAndFraction = num.substr( 0, exponentPos );
			exponent = num.substr( exponentPos + 1 );
		}
		// determine decimal position
		var integer,
			fraction,
			decSep = nf[ "." ],
			decimalPos = intAndFraction.indexOf( decSep );
		if ( decimalPos < 0 ) {
			integer = intAndFraction;
			fraction = null;
		}
		else {
			integer = intAndFraction.substr( 0, decimalPos );
			fraction = intAndFraction.substr( decimalPos + decSep.length );
		}
		// handle groups (e.g. 1,000,000)
		var groupSep = nf[ "," ];
		integer = integer.split( groupSep ).join( "" );
		var altGroupSep = groupSep.replace( /\u00A0/g, " " );
		if ( groupSep !== altGroupSep ) {
			integer = integer.split( altGroupSep ).join( "" );
		}
		// build a natively parsable number string
		var p = sign + integer;
		if ( fraction !== null ) {
			p += "." + fraction;
		}
		if ( exponent !== null ) {
			// exponent itself may have a number patternd
			var expSignInfo = parseNegativePattern( exponent, nf, "-n" );
			p += "e" + ( expSignInfo[0] || "+" ) + expSignInfo[ 1 ];
		}
		if ( regexParseFloat.test(p) ) {
			ret = parseFloat( p );
		}
	}
	return ret;
};

Globalize.culture = function( cultureSelector ) {
	// setter
	if ( typeof cultureSelector !== "undefined" ) {
		this.cultureSelector = cultureSelector;
	}
	// getter
	return this.findClosestCulture( cultureSelector ) || this.cultures[ "default" ];
};

}( this ));

define("globalize", function(){});

/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */

/*global define: false*/

var Mustache;

(function (exports) {
  if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
    module.exports = exports; // CommonJS
  } else if (typeof define === "function") {
    define('mustache_lib',exports); // AMD
  } else {
    Mustache = exports; // <script>
  }
}((function () {
  var exports = {};

  exports.name = "mustache.js";
  exports.version = "0.6.0";
  exports.tags = ["{{", "}}"];

  exports.parse = parse;
  exports.clearCache = clearCache;
  exports.compile = compile;
  exports.compilePartial = compilePartial;
  exports.render = render;

  exports.Scanner = Scanner;
  exports.Context = Context;
  exports.Renderer = Renderer;

  // This is here for backwards compatibility with 0.4.x.
  exports.to_html = function (template, view, partials, send) {
    var result = render(template, view, partials);

    if (typeof send === "function") {
      send(result);
    } else {
      return result;
    }
  };

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var nonSpaceRe = /\S/;
  var eqRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  function testRe(re, string) {
    return RegExp.prototype.test.call(re, string);
  }

  function isWhitespace(string) {
    return !testRe(nonSpaceRe, string);
  }

  var isArray = Array.isArray || function (obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
  };

  // OSWASP Guidelines: Escape all non alphanumeric characters in ASCII space.
  var jsCharsRe = /[\x00-\x2F\x3A-\x40\x5B-\x60\x7B-\xFF\u2028\u2029]/gm;

  function quote(text) {
    var escaped = text.replace(jsCharsRe, function (c) {
      return "\\u" + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
    });

    return '"' + escaped + '"';
  }

  function escapeRe(string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }

  var entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

  function escapeHtml(string) {
    return String(string).replace(/[&<>"'\/]/g, function (s) {
      return entityMap[s];
    });
  }

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  exports.escape = escapeHtml;

  function Scanner(string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function () {
    return this.tail === "";
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function (re) {
    var match = this.tail.match(re);

    if (match && match.index === 0) {
      this.tail = this.tail.substring(match[0].length);
      this.pos += match[0].length;
      return match[0];
    }

    return "";
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function (re) {
    var match, pos = this.tail.search(re);

    switch (pos) {
    case -1:
      match = this.tail;
      this.pos += this.tail.length;
      this.tail = "";
      break;
    case 0:
      match = "";
      break;
    default:
      match = this.tail.substring(0, pos);
      this.tail = this.tail.substring(pos);
      this.pos += pos;
    }

    return match;
  };

  function Context(view, parent) {
    this.view = view;
    this.parent = parent;
    this.clearCache();
  }

  Context.make = function (view) {
    return (view instanceof Context) ? view : new Context(view);
  };

  Context.prototype.clearCache = function () {
    this._cache = {};
  };

  Context.prototype.push = function (view) {
    return new Context(view, this);
  };

  Context.prototype.lookup = function (name) {
    var value = this._cache[name];

    if (!value) {
      if (name === ".") {
        value = this.view;
      } else {
        var context = this;

        while (context) {
          if (name.indexOf(".") > 0) {
            var names = name.split("."), i = 0;

            value = context.view;

            while (value && i < names.length) {
              value = value[names[i++]];
            }
          } else {
            value = context.view[name];
          }

          if (value != null) {
            break;
          }

          context = context.parent;
        }
      }

      this._cache[name] = value;
    }

    if (typeof value === "function") {
      value = value.call(this.view);
    }

    return value;
  };

  function Renderer() {
    this.clearCache();
  }

  Renderer.prototype.clearCache = function () {
    this._cache = {};
    this._partialCache = {};
  };

  Renderer.prototype.compile = function (tokens, tags) {
    if (typeof tokens === "string") {
      tokens = parse(tokens, tags);
    }

    var fn = compileTokens(tokens),
        self = this;

    return function (view) {
      return fn(Context.make(view), self);
    };
  };

  Renderer.prototype.compilePartial = function (name, tokens, tags) {
    this._partialCache[name] = this.compile(tokens, tags);
    return this._partialCache[name];
  };

  Renderer.prototype.render = function (template, view) {
    var fn = this._cache[template];

    if (!fn) {
      fn = this.compile(template);
      this._cache[template] = fn;
    }

    return fn(view);
  };

  Renderer.prototype._section = function (name, context, callback) {
    var value = context.lookup(name);

    switch (typeof value) {
    case "object":
      if (isArray(value)) {
        var buffer = "";

        for (var i = 0, len = value.length; i < len; ++i) {
          buffer += callback(context.push(value[i]), this);
        }

        return buffer;
      }

      return value ? callback(context.push(value), this) : "";
    case "function":
      // TODO: The text should be passed to the callback plain, not rendered.
      var sectionText = callback(context, this),
          self = this;

      var scopedRender = function (template) {
        return self.render(template, context);
      };

      return value.call(context.view, sectionText, scopedRender) || "";
    default:
      if (value) {
        return callback(context, this);
      }
    }

    return "";
  };

  Renderer.prototype._inverted = function (name, context, callback) {
    var value = context.lookup(name);

    // Use JavaScript's definition of falsy. Include empty arrays.
    // See https://github.com/janl/mustache.js/issues/186
    if (!value || (isArray(value) && value.length === 0)) {
      return callback(context, this);
    }

    return "";
  };

  Renderer.prototype._partial = function (name, context) {
    var fn = this._partialCache[name];

    if (fn) {
      return fn(context);
    }

    return "";
  };

  Renderer.prototype._name = function (name, context, escape) {
    var value = context.lookup(name);

    if (typeof value === "function") {
      value = value.call(context.view);
    }

    var string = (value == null) ? "" : String(value);

    if (escape) {
      return exports.escape(string);
    }

    return string;
  };

  /**
   * Low-level function that compiles the given `tokens` into a
   * function that accepts two arguments: a Context and a
   * Renderer. Returns the body of the function as a string if
   * `returnBody` is true.
   */
  function compileTokens(tokens, returnBody) {
    var body = ['""'];
    var token, method, escape;

    for (var i = 0, len = tokens.length; i < len; ++i) {
      token = tokens[i];

      switch (token.type) {
      case "#":
      case "^":
        method = (token.type === "#") ? "_section" : "_inverted";
        body.push("r." + method + "(" + quote(token.value) + ", c, function (c, r) {\n" +
          "  " + compileTokens(token.tokens, true) + "\n" +
          "})");
        break;
      case "{":
      case "&":
      case "name":
        escape = token.type === "name" ? "true" : "false";
        body.push("r._name(" + quote(token.value) + ", c, " + escape + ")");
        break;
      case ">":
        body.push("r._partial(" + quote(token.value) + ", c)");
        break;
      case "text":
        body.push(quote(token.value));
        break;
      }
    }

    // Convert to a string body.
    body = "return " + body.join(" + ") + ";";

    // Good for debugging.
    // console.log(body);

    if (returnBody) {
      return body;
    }

    // For great evil!
    return new Function("c, r", body);
  }

  function escapeTags(tags) {
    if (tags.length !== 2) {
      throw new Error("Invalid tags: " + tags.join(" "));
    }

    return [
      new RegExp(escapeRe(tags[0]) + "\\s*"),
      new RegExp("\\s*" + escapeRe(tags[1]))
    ];
  }

  /**
   * Forms the given linear array of `tokens` into a nested tree structure
   * where tokens that represent a section have a "tokens" array property
   * that contains all tokens that are in that section.
   */
  function nestTokens(tokens) {
    var tree = [];
    var collector = tree;
    var sections = [];
    var token, section;

    for (var i = 0; i < tokens.length; ++i) {
      token = tokens[i];

      switch (token.type) {
      case "#":
      case "^":
        token.tokens = [];
        sections.push(token);
        collector.push(token);
        collector = token.tokens;
        break;
      case "/":
        if (sections.length === 0) {
          throw new Error("Unopened section: " + token.value);
        }

        section = sections.pop();

        if (section.value !== token.value) {
          throw new Error("Unclosed section: " + section.value);
        }

        if (sections.length > 0) {
          collector = sections[sections.length - 1].tokens;
        } else {
          collector = tree;
        }
        break;
      default:
        collector.push(token);
      }
    }

    // Make sure there were no open sections when we're done.
    section = sections.pop();

    if (section) {
      throw new Error("Unclosed section: " + section.value);
    }

    return tree;
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens(tokens) {
    var lastToken;

    for (var i = 0; i < tokens.length; ++i) {
      var token = tokens[i];

      if (lastToken && lastToken.type === "text" && token.type === "text") {
        lastToken.value += token.value;
        tokens.splice(i--, 1); // Remove this token from the array.
      } else {
        lastToken = token;
      }
    }
  }

  /**
   * Breaks up the given `template` string into a tree of token objects. If
   * `tags` is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. ["<%", "%>"]). Of
   * course, the default is to use mustaches (i.e. Mustache.tags).
   */
  function parse(template, tags) {
    tags = tags || exports.tags;

    var tagRes = escapeTags(tags);
    var scanner = new Scanner(template);

    var tokens = [],      // Buffer to hold the tokens
        spaces = [],      // Indices of whitespace tokens on the current line
        hasTag = false,   // Is there a {{tag}} on the current line?
        nonSpace = false; // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    var stripSpace = function () {
      if (hasTag && !nonSpace) {
        while (spaces.length) {
          tokens.splice(spaces.pop(), 1);
        }
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    };

    var type, value, chr;

    while (!scanner.eos()) {
      value = scanner.scanUntil(tagRes[0]);

      if (value) {
        for (var i = 0, len = value.length; i < len; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push({type: "text", value: chr});

          if (chr === "\n") {
            stripSpace(); // Check for whitespace on the current line.
          }
        }
      }

      // Match the opening tag.
      if (!scanner.scan(tagRes[0])) {
        break;
      }

      hasTag = true;
      type = scanner.scan(tagRe) || "name";

      // Skip any whitespace between tag and value.
      scanner.scan(whiteRe);

      // Extract the tag value.
      if (type === "=") {
        value = scanner.scanUntil(eqRe);
        scanner.scan(eqRe);
        scanner.scanUntil(tagRes[1]);
      } else if (type === "{") {
        var closeRe = new RegExp("\\s*" + escapeRe("}" + tags[1]));
        value = scanner.scanUntil(closeRe);
        scanner.scan(curlyRe);
        scanner.scanUntil(tagRes[1]);
      } else {
        value = scanner.scanUntil(tagRes[1]);
      }

      // Match the closing tag.
      if (!scanner.scan(tagRes[1])) {
        throw new Error("Unclosed tag at " + scanner.pos);
      }

      tokens.push({type: type, value: value});

      if (type === "name" || type === "{" || type === "&") {
        nonSpace = true;
      }

      // Set the tags for the next time around.
      if (type === "=") {
        tags = value.split(spaceRe);
        tagRes = escapeTags(tags);
      }
    }

    squashTokens(tokens);

    return nestTokens(tokens);
  }

  // The high-level clearCache, compile, compilePartial, and render functions
  // use this default renderer.
  var _renderer = new Renderer();

  /**
   * Clears all cached templates and partials.
   */
  function clearCache() {
    _renderer.clearCache();
  }

  /**
   * High-level API for compiling the given `tokens` down to a reusable
   * function. If `tokens` is a string it will be parsed using the given `tags`
   * before it is compiled.
   */
  function compile(tokens, tags) {
    return _renderer.compile(tokens, tags);
  }

  /**
   * High-level API for compiling the `tokens` for the partial with the given
   * `name` down to a reusable function. If `tokens` is a string it will be
   * parsed using the given `tags` before it is compiled.
   */
  function compilePartial(name, tokens, tags) {
    return _renderer.compilePartial(name, tokens, tags);
  }

  /**
   * High-level API for rendering the `template` using the given `view`. The
   * optional `partials` object may be given here for convenience, but note that
   * it will cause all partials to be re-compiled, thus hurting performance. Of
   * course, this only matters if you're going to render the same template more
   * than once. If so, it is best to call `compilePartial` before calling this
   * function and to leave the `partials` argument blank.
   */
  function render(template, view, partials) {
    if (partials) {
      for (var name in partials) {
        compilePartial(name, partials[name]);
      }
    }

    return _renderer.render(template, view);
  }

  return exports;
}())));

define('mustache',['mustache_lib', 'i18n'], function (Mustache, i18n, config){
	
	var _render = Mustache.render;
	
	Mustache.render = function (template, view, partials) {
        var render_temp =  _render(template, view, partials);
        return i18n.translate(render_temp);
    };
	
	return Mustache;

});

/**
 * @license RequireJS text 2.0.3 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require: false, XMLHttpRequest: false, ActiveXObject: false,
  define: false, window: false, process: false, Packages: false,
  java: false, location: false */

define('text',['module'], function (module) {
    

    var text, fs,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = [],
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.3',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var strip = false, index = name.indexOf("."),
                modName = name.substring(0, index),
                ext = name.substring(index + 1, name.length);

            index = ext.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = ext.substring(index + 1, ext.length);
                strip = strip === "strip";
                ext = ext.substring(0, index);
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + '.' +
                                     parsed.ext) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node)) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback) {
            var file = fs.readFileSync(url, 'utf8');
            //Remove BOM (Byte Mark Order) from utf8 files if it is there.
            if (file.indexOf('\uFEFF') === 0) {
                file = file.substring(1);
            }
            callback(file);
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback) {
            var xhr = text.createXhr();
            xhr.open('GET', url, true);

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                stringBuffer.append(line);

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    }

    return text;
});

define('text!js/libs/t2k/ActionMenu/ActionMenuTemplate.html',[],function () { return '<div id="actionMenuList">\r\n\t{{#main}}\r\n\r\n\t<ul class="menu-strip {{colorScheme}}">\r\n\t\t<!-- <div class="overlay">\r\n\t\t</div> -->\r\n\t\t\r\n\t\t{{#items}}\r\n\r\n\t\t<li id="{{id}}" type="{{type}}" \r\n\t\t{{#tooltip}}title="{{tooltip}}"{{/tooltip}} \r\n\t\t{{#alterClass}}alterClass="{{alterClass}}"{{/alterClass}}\r\n\t\t{{#toggleGroup}}toggleGroup="{{toggleGroup}}"{{/toggleGroup}}{{^toggleGroup}}toggleGroup="0"{{/toggleGroup}}\r\n\t\tclass="action-item {{disabled}} {{#initiallyPressed}}pressed{{/initiallyPressed}} " >\r\n\r\n\t\t<span class="{{class}}"></span>\r\n\t</li>\r\n\r\n\t\t{{/items}}\r\n\r\n\r\n</ul>\r\n{{/main}}\r\n\r\n<div id="subMenuHolder">\r\n\t{{#subMenus}}\r\n\r\n\t{{> subMenuPartial}}\r\n\r\n\t{{/subMenus}}\r\n\r\n\t{{#numericSteppers}}\r\n\r\n\t{{> numericStepperPartial}}\r\n\r\n\t{{/numericSteppers}}\r\n\r\n\t{{#dropDowns}}\r\n\r\n\t{{>dropDownPartial}}\r\n\t\r\n\t{{/dropDowns}}\r\n\r\n\t{{#colorPickers}}\r\n\r\n\t{{>colorPickerPartial}}\r\n\t\r\n\t{{/colorPickers}}\r\n\r\n</div>\r\n\r\n\r\n</div>';});

define('text!js/libs/t2k/ActionMenu/SubMenuTemplate.html',[],function () { return '<ul id="{{id}}" type="{{type}}" class="sub-menu-strip hidden {{colorScheme}} ">\r\n\t{{#items}}\r\n\t<li id="{{id}}" type="{{type}}" class="action-item {{class}}">\r\n\t</li>\r\n\t{{/items}}\r\n</ul>';});

define('text!js/libs/t2k/ActionMenu/NumericStepperTemplate.html',[],function () { return '<div id="{{id}}" class="numericStepper hidden">\r\n\t<div class="add-btn">\r\n\t\t<span class="General-up"> </span>\r\n\t</div>\r\n\t<div class="stepper-display"> 1 </div>\r\n\t<div class="subtract-btn">\r\n\t\t<span class="General-down"> </span>\r\n\t</div>\r\n</div>';});

define('text!js/libs/t2k/ActionMenu/DropDownTemplate.html',[],function () { return '<div id="{{id}}" class="dropDown hidden {{colorScheme}}">\r\n\r\n\t{{#items}}\r\n\t\t<div id="{{id}}" class="action-item">\r\n\t\t\t{{text}}\r\n\t\t</div>\r\n\t{{/items}}\r\n\r\n</div>';});

define('text!js/libs/t2k/ActionMenu/ColorPickerTemplate.html',[],function () { return '<div id="{{id}}" class="colorPicker hidden flipOutX animated {{colorScheme}}">\r\n\r\n\t{{#colors}}\r\n\t<div class="colorBoxWrapper">\r\n\t\t<div class="colorBox" data-bgc="{{.}}"  style="background:{{.}}">\r\n\t\t</div>\r\n\t</div>\r\n\t{{/colors}}\r\n\t\r\n</div>';});

define( 'actionMenu',[ 'jquery', 'lodash','mustache', 
	'text!js/libs/t2k/ActionMenu/ActionMenuTemplate.html',
	'text!js/libs/t2k/ActionMenu/SubMenuTemplate.html',
	'text!js/libs/t2k/ActionMenu/NumericStepperTemplate.html',
	'text!js/libs/t2k/ActionMenu/DropDownTemplate.html',
	'text!js/libs/t2k/ActionMenu/ColorPickerTemplate.html'],
	function ( $, _, Mustache, template, SubMenuTemplate, NumericStepperTemplate, DropDownTemplate, ColorPickerTemplate) {

		function ActionMenu(container, structure, isEditMode, isTouch, actionHandler){
			this.container = container;
			this.structure = structure;
			this.isEditMode = isEditMode;
			this.isTouch = isTouch;
			this.actionHandler = actionHandler;

		}

		ActionMenu.prototype = {
			render:function(){

				var partials = {subMenuPartial : SubMenuTemplate, 
					numericStepperPartial : NumericStepperTemplate,
					dropDownPartial : DropDownTemplate,
					colorPickerPartial: ColorPickerTemplate};

					var actionMenuView = Mustache.to_html(template, this.getProperMenu(), partials);
					$(this.container).html(actionMenuView);


					this.registerElements();
					this.registerEvents();

					return this;

				},

				registerElements:function(){
					this.$subMenuHolder = $("#actionMenuContainer #subMenuHolder");
					this.$numericStepper = $("#actionMenuContainer .numericStepper");
					this.$numericStepperDisplay = $(".stepper-display", this.$numericStepper);
					this.$pointsColorPicker = $("#pointsColorPicker");
				},

				registerEvents:function(){

					_.bindAll(this);

					if(!this.isTouch){
						$(".action-item:not(.disabled)").click(_.bind(this.handleAction, this));
						$(".numericStepper .add-btn").on("click", _.bind(this.addNumericStepper, this));
						$(".numericStepper .subtract-btn").on("click", _.bind(this.subtractNumericStepper, this));
						$(document).on("click",_.bind(this.closeDropDowns, this));
						$(".colorPicker .colorBoxWrapper").on("click", this.pickColor);

					}else{

						$(".action-item:not(.disabled)").on("touchend", this.handleAction);
						$(".numericStepper #add").on("touchend", this.addNumericStepper);
						$(".numericStepper #subtract").on("touchend", this.subtractNumericStepper);
						$(document).on("touchend", this.closeDropDowns);
						$(".colorPicker .colorBoxWrapper").on("touchend", this.pickColor);
					}
				},

				closeDropDowns:function(e){
					if ($(e.target).closest(".action-item").attr("type") != "dropDown") {
						$(".dropDown", this.$subMenuHolder).addClass("hidden");
						$(".action-item[type='dropDown']").not($(e.target).closest(".action-item")).removeClass("pressed");
					}
					//close color picker
					if (!($(e.target).closest("#pointsColorPicker").length || $(e.target).closest("#selectColor").length)) {
						this.$pointsColorPicker.addClass("hidden flipOutX").removeClass("flipInX");
						this.toggleActionItemPress("selectColor", false);
					}					
				},

				handleAction:function(e)
				{
					var item = $(e.target).closest(".action-item");
					if (item.hasClass("disabled")) {
						return false;
					};

					var itemData = this.getActionItemData(item.attr("id"));

						if (!itemData.subMenuId) {

							switch (item.attr("type"))
							{
								case "toggle":

									// if the action-item is in a togglegroup
									if (itemData.toggleGroup) {
										// never toggle off
										item.addClass("pressed");							
									}else{
										// now toggle the press action
										item.toggleClass("pressed");							
									}
								
								break;
									case "changing":
									var icon = item.children(":first");
									var alterClass = item.attr("alterClass");
									item.attr("alterClass", icon.attr("class"));
									icon.attr("class", alterClass);							
								break;
							}

							// only if we pressed on one of the main action items
							if (!item.parents(this.$subMenuHolder.selector).length) {
								// hide any submenu in case it's open while we wanted different action
								this.$subMenuHolder.children().addClass("hidden");
							}

							// if this is a dropdown item
							if (item.parents(".dropDown").length) {
								// close dropdown after selecting a child
								item.parents(".dropDown").addClass("hidden");
							}

							// toggle off all other pressed actionItems on the same menu
							$(".action-item[toggleGroup=" + (itemData.toggleGroup || 0) + "]", item.parent()).not(item).removeClass('pressed');

							itemData["pressed"] = item.hasClass("pressed");
							this.actionHandler(itemData);
						}
					// in case the action open another kind of menu
					else{

						switch (item.attr("type"))
						{
							case "numericStepper":

								var menuData = this.getSubMenuData(itemData.subMenuId);
								this.$numericStepper.filter("#"+menuData.id)
								.css("left", item.position().left)
								.toggleClass("hidden");

								this.numericStepperMinStep = menuData.minStep;
								this.numericStepperMaxStep = menuData.maxStep;
								break;

							case "subMenu":

								var subMenu = $('#'+item.attr("subMenuId"));
								subMenu.toggleClass("hidden");	// show/hide sub menu
								// reset all sub menu items to be unpressed
								//$(".action-item",subMenu).removeClass("pressed"); 
								$(".action-item").not(item).removeClass('pressed');

								break;

							case "dropDown":
								var dropDown = $('#'+itemData.subMenuId);
								dropDown.toggleClass("hidden");
								dropDown.css("left", item.position().left - dropDown.width() + item.width());
								break;

							case "colorPicker":
								var colorPicker = $('#'+itemData.subMenuId);
								colorPicker.removeClass("hidden");
								colorPicker.toggleClass("flipInX").toggleClass("flipOutX");
								colorPicker.css("left", item.position().left + 2);
								break;
						}

						if (itemData.callback) {
							this.actionHandler(itemData);
						};
						// close other open menus 
						this.$subMenuHolder.children().not($("#"+itemData.subMenuId)).addClass("hidden");
						// and toggle their pressed off
						//$(".action-item", item.parent()).not(item).removeClass('pressed');
						$(".action-item[toggleGroup=" + (itemData.toggleGroup || 0) + "]", item.parent()).not(item).removeClass('pressed');
						item.toggleClass("pressed");
					}
				},

			// Get the proper menu incase we're in edit mode
			getProperMenu: function(){
				var properMenu = this.structure;
				if(!this.isEditMode){
					var newitems = _(properMenu.main.items).filter( function(value) {
						return !value.editOnly;
					});
					properMenu.main.items = newitems;
				}
				return properMenu;
			},

			getActionItemData:function(itemId){
				var itemData = _.find(this.structure["main"]["items"], function(item){
					return item.id == itemId;
				});

				if (!itemData) {
					for (var i = 0; i < this.structure["subMenus"].length; i++) {
						itemData = _.find(this.structure["subMenus"][i]["items"], function(item){
							return item.id == itemId;
						});
						if (!!itemData) {
							break;
						}
					}			
				}

				if (!itemData) {
					for (var i = 0; i < this.structure["dropDowns"].length; i++) {
						itemData = _.find(this.structure["dropDowns"][i]["items"], function(item){
							return item.id == itemId;
						});
						if (!!itemData) {
							break;
						}
					}			
				}

				return itemData;
			},

			// get all kinds of sub menus (numeric stepper, picker and more..)
			getSubMenuData:function(subMenuId){

				var menuData = _.find(this.structure["subMenus"], function(menu){
					return menu.id == subMenuId;
				});
				// search in NumericSteppers
				if (!menuData) {
					menuData = _.find(this.structure["numericSteppers"], function(menu){
						return menu.id == subMenuId;
					});
				};
				// search in ColorPickers
				if (!menuData) {
					menuData = _.find(this.structure["colorPickers"], function(menu){
						return menu.id == subMenuId;
					});
				};

				return menuData;
			},

			resetAll:function(){
				$("#actionMenuList .action-item").removeClass('pressed disabled');
			},

			toggleActionItemPress:function(actionItemId, togglePressed){
				var actionItem = $("#"+actionItemId);
				if (togglePressed) {
					actionItem.addClass("pressed");
				}
				else
				{
					actionItem.removeClass("pressed");
				}
			}, 

			enableActionItem:function(itemId){

				$("#"+itemId+".action-item").removeClass("disabled");
			},
			
			disableActionItem:function(itemId){
				$("#"+itemId+".action-item").addClass("disabled");	
			},

			disableAll:function(){
				$(".action-item").addClass("disabled");	
			},

			addNumericStepper:function(e){
				var value = Number(this.$numericStepperDisplay.text());
				if (value < this.numericStepperMaxStep) {
					this.$numericStepperDisplay.text(value + 1);
					this.activateNumericStepperCallback(e);					
				}
			},

			subtractNumericStepper:function(e){
				var value = Number(this.$numericStepperDisplay.text());
				if (value > this.numericStepperMinStep) {
					this.$numericStepperDisplay.text(value - 1);
					this.activateNumericStepperCallback(e);					
				}
			},

			activateNumericStepperCallback:function(e){
				// first get the numericStepper Id
				var numericStepper = $(e.target).parents(".numericStepper");
				var numericStepperData = this.getSubMenuData(numericStepper.attr("id"));
				// add the current step to the data
				numericStepperData["currentStep"] = this.$numericStepperDisplay.text();
				
				// call action handler
				this.actionHandler(numericStepperData);
			},

			pickColor:function(e, bColor){
				
				// get the new color and set the box as selected
				var color = bColor ? bColor : $(e.target).closest(".colorBoxWrapper").children(".colorBox").css("backgroundColor");
					
				// remove the previous selected color
				$(".colorPicker .colorBoxWrapper.selected").removeClass("selected"); 
				$(".NumberLine-SelectColor").css({"backgroundImage":"-webkit-linear-gradient(top, " + color + "  13px, transparent 0), -webkit-linear-gradient(left, " + color + " 14px, transparent 0)"});
				$(".colorBox").filter(function(){return $(this).css("backgroundColor")== color || $(this).attr('data-bgc') == color}).parent().addClass("selected");

				// add the selected color data
				if(e){
					var colorPickerId = $(e.target).parents(".colorPicker").attr("id"),
						colorPickerData = this.getSubMenuData(colorPickerId);
					colorPickerData.selectedColor = color;
					this.actionHandler(colorPickerData);
				}
			}

		};
		
		return ActionMenu;

	});

(function(){var t=this;var e=t.Backbone;var i=[];var r=i.push;var s=i.slice;var n=i.splice;var a;if(typeof exports!=="undefined"){a=exports}else{a=t.Backbone={}}a.VERSION="1.0.0";var h=t._;if(!h&&typeof require!=="undefined")h=require("underscore");a.$=t.jQuery||t.Zepto||t.ender||t.$;a.noConflict=function(){t.Backbone=e;return this};a.emulateHTTP=false;a.emulateJSON=false;var o=a.Events={on:function(t,e,i){if(!l(this,"on",t,[e,i])||!e)return this;this._events||(this._events={});var r=this._events[t]||(this._events[t]=[]);r.push({callback:e,context:i,ctx:i||this});return this},once:function(t,e,i){if(!l(this,"once",t,[e,i])||!e)return this;var r=this;var s=h.once(function(){r.off(t,s);e.apply(this,arguments)});s._callback=e;return this.on(t,s,i)},off:function(t,e,i){var r,s,n,a,o,u,c,f;if(!this._events||!l(this,"off",t,[e,i]))return this;if(!t&&!e&&!i){this._events={};return this}a=t?[t]:h.keys(this._events);for(o=0,u=a.length;o<u;o++){t=a[o];if(n=this._events[t]){this._events[t]=r=[];if(e||i){for(c=0,f=n.length;c<f;c++){s=n[c];if(e&&e!==s.callback&&e!==s.callback._callback||i&&i!==s.context){r.push(s)}}}if(!r.length)delete this._events[t]}}return this},trigger:function(t){if(!this._events)return this;var e=s.call(arguments,1);if(!l(this,"trigger",t,e))return this;var i=this._events[t];var r=this._events.all;if(i)c(i,e);if(r)c(r,arguments);return this},stopListening:function(t,e,i){var r=this._listeners;if(!r)return this;var s=!e&&!i;if(typeof e==="object")i=this;if(t)(r={})[t._listenerId]=t;for(var n in r){r[n].off(e,i,this);if(s)delete this._listeners[n]}return this}};var u=/\s+/;var l=function(t,e,i,r){if(!i)return true;if(typeof i==="object"){for(var s in i){t[e].apply(t,[s,i[s]].concat(r))}return false}if(u.test(i)){var n=i.split(u);for(var a=0,h=n.length;a<h;a++){t[e].apply(t,[n[a]].concat(r))}return false}return true};var c=function(t,e){var i,r=-1,s=t.length,n=e[0],a=e[1],h=e[2];switch(e.length){case 0:while(++r<s)(i=t[r]).callback.call(i.ctx);return;case 1:while(++r<s)(i=t[r]).callback.call(i.ctx,n);return;case 2:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a);return;case 3:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a,h);return;default:while(++r<s)(i=t[r]).callback.apply(i.ctx,e)}};var f={listenTo:"on",listenToOnce:"once"};h.each(f,function(t,e){o[e]=function(e,i,r){var s=this._listeners||(this._listeners={});var n=e._listenerId||(e._listenerId=h.uniqueId("l"));s[n]=e;if(typeof i==="object")r=this;e[t](i,r,this);return this}});o.bind=o.on;o.unbind=o.off;h.extend(a,o);var d=a.Model=function(t,e){var i;var r=t||{};e||(e={});this.cid=h.uniqueId("c");this.attributes={};h.extend(this,h.pick(e,p));if(e.parse)r=this.parse(r,e)||{};if(i=h.result(this,"defaults")){r=h.defaults({},r,i)}this.set(r,e);this.changed={};this.initialize.apply(this,arguments)};var p=["url","urlRoot","collection"];h.extend(d.prototype,o,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(t){return h.clone(this.attributes)},sync:function(){return a.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return h.escape(this.get(t))},has:function(t){return this.get(t)!=null},set:function(t,e,i){var r,s,n,a,o,u,l,c;if(t==null)return this;if(typeof t==="object"){s=t;i=e}else{(s={})[t]=e}i||(i={});if(!this._validate(s,i))return false;n=i.unset;o=i.silent;a=[];u=this._changing;this._changing=true;if(!u){this._previousAttributes=h.clone(this.attributes);this.changed={}}c=this.attributes,l=this._previousAttributes;if(this.idAttribute in s)this.id=s[this.idAttribute];for(r in s){e=s[r];if(!h.isEqual(c[r],e))a.push(r);if(!h.isEqual(l[r],e)){this.changed[r]=e}else{delete this.changed[r]}n?delete c[r]:c[r]=e}if(!o){if(a.length)this._pending=true;for(var f=0,d=a.length;f<d;f++){this.trigger("change:"+a[f],this,c[a[f]],i)}}if(u)return this;if(!o){while(this._pending){this._pending=false;this.trigger("change",this,i)}}this._pending=false;this._changing=false;return this},unset:function(t,e){return this.set(t,void 0,h.extend({},e,{unset:true}))},clear:function(t){var e={};for(var i in this.attributes)e[i]=void 0;return this.set(e,h.extend({},t,{unset:true}))},hasChanged:function(t){if(t==null)return!h.isEmpty(this.changed);return h.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?h.clone(this.changed):false;var e,i=false;var r=this._changing?this._previousAttributes:this.attributes;for(var s in t){if(h.isEqual(r[s],e=t[s]))continue;(i||(i={}))[s]=e}return i},previous:function(t){if(t==null||!this._previousAttributes)return null;return this._previousAttributes[t]},previousAttributes:function(){return h.clone(this._previousAttributes)},fetch:function(t){t=t?h.clone(t):{};if(t.parse===void 0)t.parse=true;var e=this;var i=t.success;t.success=function(r){if(!e.set(e.parse(r,t),t))return false;if(i)i(e,r,t);e.trigger("sync",e,r,t)};R(this,t);return this.sync("read",this,t)},save:function(t,e,i){var r,s,n,a=this.attributes;if(t==null||typeof t==="object"){r=t;i=e}else{(r={})[t]=e}if(r&&(!i||!i.wait)&&!this.set(r,i))return false;i=h.extend({validate:true},i);if(!this._validate(r,i))return false;if(r&&i.wait){this.attributes=h.extend({},a,r)}if(i.parse===void 0)i.parse=true;var o=this;var u=i.success;i.success=function(t){o.attributes=a;var e=o.parse(t,i);if(i.wait)e=h.extend(r||{},e);if(h.isObject(e)&&!o.set(e,i)){return false}if(u)u(o,t,i);o.trigger("sync",o,t,i)};R(this,i);s=this.isNew()?"create":i.patch?"patch":"update";if(s==="patch")i.attrs=r;n=this.sync(s,this,i);if(r&&i.wait)this.attributes=a;return n},destroy:function(t){t=t?h.clone(t):{};var e=this;var i=t.success;var r=function(){e.trigger("destroy",e,e.collection,t)};t.success=function(s){if(t.wait||e.isNew())r();if(i)i(e,s,t);if(!e.isNew())e.trigger("sync",e,s,t)};if(this.isNew()){t.success();return false}R(this,t);var s=this.sync("delete",this,t);if(!t.wait)r();return s},url:function(){var t=h.result(this,"urlRoot")||h.result(this.collection,"url")||U();if(this.isNew())return t;return t+(t.charAt(t.length-1)==="/"?"":"/")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return this.id==null},isValid:function(t){return this._validate({},h.extend(t||{},{validate:true}))},_validate:function(t,e){if(!e.validate||!this.validate)return true;t=h.extend({},this.attributes,t);var i=this.validationError=this.validate(t,e)||null;if(!i)return true;this.trigger("invalid",this,i,h.extend(e||{},{validationError:i}));return false}});var v=["keys","values","pairs","invert","pick","omit"];h.each(v,function(t){d.prototype[t]=function(){var e=s.call(arguments);e.unshift(this.attributes);return h[t].apply(h,e)}});var g=a.Collection=function(t,e){e||(e={});if(e.url)this.url=e.url;if(e.model)this.model=e.model;if(e.comparator!==void 0)this.comparator=e.comparator;this._reset();this.initialize.apply(this,arguments);if(t)this.reset(t,h.extend({silent:true},e))};var m={add:true,remove:true,merge:true};var y={add:true,merge:false,remove:false};h.extend(g.prototype,o,{model:d,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return a.sync.apply(this,arguments)},add:function(t,e){return this.set(t,h.defaults(e||{},y))},remove:function(t,e){t=h.isArray(t)?t.slice():[t];e||(e={});var i,r,s,n;for(i=0,r=t.length;i<r;i++){n=this.get(t[i]);if(!n)continue;delete this._byId[n.id];delete this._byId[n.cid];s=this.indexOf(n);this.models.splice(s,1);this.length--;if(!e.silent){e.index=s;n.trigger("remove",n,this,e)}this._removeReference(n)}return this},set:function(t,e){e=h.defaults(e||{},m);if(e.parse)t=this.parse(t,e);if(!h.isArray(t))t=t?[t]:[];var i,s,a,o,u,l;var c=e.at;var f=this.comparator&&c==null&&e.sort!==false;var d=h.isString(this.comparator)?this.comparator:null;var p=[],v=[],g={};for(i=0,s=t.length;i<s;i++){if(!(a=this._prepareModel(t[i],e)))continue;if(u=this.get(a)){if(e.remove)g[u.cid]=true;if(e.merge){u.set(a.attributes,e);if(f&&!l&&u.hasChanged(d))l=true}}else if(e.add){p.push(a);a.on("all",this._onModelEvent,this);this._byId[a.cid]=a;if(a.id!=null)this._byId[a.id]=a}}if(e.remove){for(i=0,s=this.length;i<s;++i){if(!g[(a=this.models[i]).cid])v.push(a)}if(v.length)this.remove(v,e)}if(p.length){if(f)l=true;this.length+=p.length;if(c!=null){n.apply(this.models,[c,0].concat(p))}else{r.apply(this.models,p)}}if(l)this.sort({silent:true});if(e.silent)return this;for(i=0,s=p.length;i<s;i++){(a=p[i]).trigger("add",a,this,e)}if(l)this.trigger("sort",this,e);return this},reset:function(t,e){e||(e={});for(var i=0,r=this.models.length;i<r;i++){this._removeReference(this.models[i])}e.previousModels=this.models;this._reset();this.add(t,h.extend({silent:true},e));if(!e.silent)this.trigger("reset",this,e);return this},push:function(t,e){t=this._prepareModel(t,e);this.add(t,h.extend({at:this.length},e));return t},pop:function(t){var e=this.at(this.length-1);this.remove(e,t);return e},unshift:function(t,e){t=this._prepareModel(t,e);this.add(t,h.extend({at:0},e));return t},shift:function(t){var e=this.at(0);this.remove(e,t);return e},slice:function(t,e){return this.models.slice(t,e)},get:function(t){if(t==null)return void 0;return this._byId[t.id!=null?t.id:t.cid||t]},at:function(t){return this.models[t]},where:function(t,e){if(h.isEmpty(t))return e?void 0:[];return this[e?"find":"filter"](function(e){for(var i in t){if(t[i]!==e.get(i))return false}return true})},findWhere:function(t){return this.where(t,true)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");t||(t={});if(h.isString(this.comparator)||this.comparator.length===1){this.models=this.sortBy(this.comparator,this)}else{this.models.sort(h.bind(this.comparator,this))}if(!t.silent)this.trigger("sort",this,t);return this},sortedIndex:function(t,e,i){e||(e=this.comparator);var r=h.isFunction(e)?e:function(t){return t.get(e)};return h.sortedIndex(this.models,t,r,i)},pluck:function(t){return h.invoke(this.models,"get",t)},fetch:function(t){t=t?h.clone(t):{};if(t.parse===void 0)t.parse=true;var e=t.success;var i=this;t.success=function(r){var s=t.reset?"reset":"set";i[s](r,t);if(e)e(i,r,t);i.trigger("sync",i,r,t)};R(this,t);return this.sync("read",this,t)},create:function(t,e){e=e?h.clone(e):{};if(!(t=this._prepareModel(t,e)))return false;if(!e.wait)this.add(t,e);var i=this;var r=e.success;e.success=function(s){if(e.wait)i.add(t,e);if(r)r(t,s,e)};t.save(null,e);return t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0;this.models=[];this._byId={}},_prepareModel:function(t,e){if(t instanceof d){if(!t.collection)t.collection=this;return t}e||(e={});e.collection=this;var i=new this.model(t,e);if(!i._validate(t,e)){this.trigger("invalid",this,t,e);return false}return i},_removeReference:function(t){if(this===t.collection)delete t.collection;t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,r){if((t==="add"||t==="remove")&&i!==this)return;if(t==="destroy")this.remove(e,r);if(e&&t==="change:"+e.idAttribute){delete this._byId[e.previous(e.idAttribute)];if(e.id!=null)this._byId[e.id]=e}this.trigger.apply(this,arguments)}});var _=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","indexOf","shuffle","lastIndexOf","isEmpty","chain"];h.each(_,function(t){g.prototype[t]=function(){var e=s.call(arguments);e.unshift(this.models);return h[t].apply(h,e)}});var w=["groupBy","countBy","sortBy"];h.each(w,function(t){g.prototype[t]=function(e,i){var r=h.isFunction(e)?e:function(t){return t.get(e)};return h[t](this.models,r,i)}});var b=a.View=function(t){this.cid=h.uniqueId("view");this._configure(t||{});this._ensureElement();this.initialize.apply(this,arguments);this.delegateEvents()};var x=/^(\S+)\s*(.*)$/;var E=["model","collection","el","id","attributes","className","tagName","events"];h.extend(b.prototype,o,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){this.$el.remove();this.stopListening();return this},setElement:function(t,e){if(this.$el)this.undelegateEvents();this.$el=t instanceof a.$?t:a.$(t);this.el=this.$el[0];if(e!==false)this.delegateEvents();return this},delegateEvents:function(t){if(!(t||(t=h.result(this,"events"))))return this;this.undelegateEvents();for(var e in t){var i=t[e];if(!h.isFunction(i))i=this[t[e]];if(!i)continue;var r=e.match(x);var s=r[1],n=r[2];i=h.bind(i,this);s+=".delegateEvents"+this.cid;if(n===""){this.$el.on(s,i)}else{this.$el.on(s,n,i)}}return this},undelegateEvents:function(){this.$el.off(".delegateEvents"+this.cid);return this},_configure:function(t){if(this.options)t=h.extend({},h.result(this,"options"),t);h.extend(this,h.pick(t,E));this.options=t},_ensureElement:function(){if(!this.el){var t=h.extend({},h.result(this,"attributes"));if(this.id)t.id=h.result(this,"id");if(this.className)t["class"]=h.result(this,"className");var e=a.$("<"+h.result(this,"tagName")+">").attr(t);this.setElement(e,false)}else{this.setElement(h.result(this,"el"),false)}}});a.sync=function(t,e,i){var r=k[t];h.defaults(i||(i={}),{emulateHTTP:a.emulateHTTP,emulateJSON:a.emulateJSON});var s={type:r,dataType:"json"};if(!i.url){s.url=h.result(e,"url")||U()}if(i.data==null&&e&&(t==="create"||t==="update"||t==="patch")){s.contentType="application/json";s.data=JSON.stringify(i.attrs||e.toJSON(i))}if(i.emulateJSON){s.contentType="application/x-www-form-urlencoded";s.data=s.data?{model:s.data}:{}}if(i.emulateHTTP&&(r==="PUT"||r==="DELETE"||r==="PATCH")){s.type="POST";if(i.emulateJSON)s.data._method=r;var n=i.beforeSend;i.beforeSend=function(t){t.setRequestHeader("X-HTTP-Method-Override",r);if(n)return n.apply(this,arguments)}}if(s.type!=="GET"&&!i.emulateJSON){s.processData=false}if(s.type==="PATCH"&&window.ActiveXObject&&!(window.external&&window.external.msActiveXFilteringEnabled)){s.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")}}var o=i.xhr=a.ajax(h.extend(s,i));e.trigger("request",e,o,i);return o};var k={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};a.ajax=function(){return a.$.ajax.apply(a.$,arguments)};var S=a.Router=function(t){t||(t={});if(t.routes)this.routes=t.routes;this._bindRoutes();this.initialize.apply(this,arguments)};var $=/\((.*?)\)/g;var T=/(\(\?)?:\w+/g;var H=/\*\w+/g;var A=/[\-{}\[\]+?.,\\\^$|#\s]/g;h.extend(S.prototype,o,{initialize:function(){},route:function(t,e,i){if(!h.isRegExp(t))t=this._routeToRegExp(t);if(h.isFunction(e)){i=e;e=""}if(!i)i=this[e];var r=this;a.history.route(t,function(s){var n=r._extractParameters(t,s);i&&i.apply(r,n);r.trigger.apply(r,["route:"+e].concat(n));r.trigger("route",e,n);a.history.trigger("route",r,e,n)});return this},navigate:function(t,e){a.history.navigate(t,e);return this},_bindRoutes:function(){if(!this.routes)return;this.routes=h.result(this,"routes");var t,e=h.keys(this.routes);while((t=e.pop())!=null){this.route(t,this.routes[t])}},_routeToRegExp:function(t){t=t.replace(A,"\\$&").replace($,"(?:$1)?").replace(T,function(t,e){return e?t:"([^/]+)"}).replace(H,"(.*?)");return new RegExp("^"+t+"$")},_extractParameters:function(t,e){var i=t.exec(e).slice(1);return h.map(i,function(t){return t?decodeURIComponent(t):null})}});var I=a.History=function(){this.handlers=[];h.bindAll(this,"checkUrl");if(typeof window!=="undefined"){this.location=window.location;this.history=window.history}};var N=/^[#\/]|\s+$/g;var P=/^\/+|\/+$/g;var O=/msie [\w.]+/;var C=/\/$/;I.started=false;h.extend(I.prototype,o,{interval:50,getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getFragment:function(t,e){if(t==null){if(this._hasPushState||!this._wantsHashChange||e){t=this.location.pathname;var i=this.root.replace(C,"");if(!t.indexOf(i))t=t.substr(i.length)}else{t=this.getHash()}}return t.replace(N,"")},start:function(t){if(I.started)throw new Error("Backbone.history has already been started");I.started=true;this.options=h.extend({},{root:"/"},this.options,t);this.root=this.options.root;this._wantsHashChange=this.options.hashChange!==false;this._wantsPushState=!!this.options.pushState;this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var e=this.getFragment();var i=document.documentMode;var r=O.exec(navigator.userAgent.toLowerCase())&&(!i||i<=7);this.root=("/"+this.root+"/").replace(P,"/");if(r&&this._wantsHashChange){this.iframe=a.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow;this.navigate(e)}if(this._hasPushState){a.$(window).on("popstate",this.checkUrl)}else if(this._wantsHashChange&&"onhashchange"in window&&!r){a.$(window).on("hashchange",this.checkUrl)}else if(this._wantsHashChange){this._checkUrlInterval=setInterval(this.checkUrl,this.interval)}this.fragment=e;var s=this.location;var n=s.pathname.replace(/[^\/]$/,"$&/")===this.root;if(this._wantsHashChange&&this._wantsPushState&&!this._hasPushState&&!n){this.fragment=this.getFragment(null,true);this.location.replace(this.root+this.location.search+"#"+this.fragment);return true}else if(this._wantsPushState&&this._hasPushState&&n&&s.hash){this.fragment=this.getHash().replace(N,"");this.history.replaceState({},document.title,this.root+this.fragment+s.search)}if(!this.options.silent)return this.loadUrl()},stop:function(){a.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl);clearInterval(this._checkUrlInterval);I.started=false},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe){e=this.getFragment(this.getHash(this.iframe))}if(e===this.fragment)return false;if(this.iframe)this.navigate(e);this.loadUrl()||this.loadUrl(this.getHash())},loadUrl:function(t){var e=this.fragment=this.getFragment(t);var i=h.any(this.handlers,function(t){if(t.route.test(e)){t.callback(e);return true}});return i},navigate:function(t,e){if(!I.started)return false;if(!e||e===true)e={trigger:e};t=this.getFragment(t||"");if(this.fragment===t)return;this.fragment=t;var i=this.root+t;if(this._hasPushState){this.history[e.replace?"replaceState":"pushState"]({},document.title,i)}else if(this._wantsHashChange){this._updateHash(this.location,t,e.replace);if(this.iframe&&t!==this.getFragment(this.getHash(this.iframe))){if(!e.replace)this.iframe.document.open().close();this._updateHash(this.iframe.location,t,e.replace)}}else{return this.location.assign(i)}if(e.trigger)this.loadUrl(t)},_updateHash:function(t,e,i){if(i){var r=t.href.replace(/(javascript:|#).*$/,"");t.replace(r+"#"+e)}else{t.hash="#"+e}}});a.history=new I;var j=function(t,e){var i=this;var r;if(t&&h.has(t,"constructor")){r=t.constructor}else{r=function(){return i.apply(this,arguments)}}h.extend(r,i,e);var s=function(){this.constructor=r};s.prototype=i.prototype;r.prototype=new s;if(t)h.extend(r.prototype,t);r.__super__=i.prototype;return r};d.extend=g.extend=S.extend=b.extend=I.extend=j;var U=function(){throw new Error('A "url" property or function must be specified')};var R=function(t,e){var i=e.error;e.error=function(r){if(i)i(t,r,e);t.trigger("error",t,r,e)}}}).call(this);
/*
//@ sourceMappingURL=backbone-min.map
*/
;
define("backbone", ["lodash","jquery"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.Backbone;
    };
}(this)));

/*
Author: Jeremy Ashkenas
Author: John Resig
Author: Mark Vasilkov
License: MIT
This file is part of Misato project
https://bitbucket.org/ayanami/misato
*/
define('backbone_super',['lodash', 'backbone'], function(_, Backbone) {
	var fnTest = /foo/.test(function() {foo})?
		/\b_super\b/: {test: function() {return true}}

	function extend(protoProps, staticProps) {
		var parent = this, child, _super = this.prototype

		if (protoProps && _.has(protoProps, 'constructor')) {
			child = protoProps.constructor
		}
		else {
			child = function() {return parent.apply(this, arguments)}
		}

		function pchild() {this.constructor = child}
		pchild.prototype = parent.prototype
		child.prototype = new pchild

		for (var name in protoProps) {
			child.prototype[name] = typeof protoProps[name] == 'function' &&
				typeof _super[name] == 'function' &&
				fnTest.test(protoProps[name])?
				(function(name, fn) {
					return function() {
						if (this._super) {
							if (this.__stack)
								this.__stack.push(this._super)
							else this.__stack = [this._super]
						}

						this._super = _super[name]

						try {
							return fn.apply(this, arguments)
						}
						finally {
							if (this.__stack && this.__stack.length)
								this._super = this.__stack.pop()
							else delete this._super
						}
					}
				})(name, protoProps[name]):
				protoProps[name]
		}

		_.extend(child, parent, staticProps)

		child.__super__ = _super

		return child
	}

	Backbone.Model.extend = Backbone.Collection.extend =
	Backbone.Router.extend = Backbone.View.extend = extend

	return Backbone
})
;
define('text!js/libs/t2k/MathematicalMeaning/MathematicalMeaningTemplate.html',[],function () { return '<div id="toggledPart"> \r\n\r\n\t<div id="mathematicalMeaningContent">\r\n\t</div>\r\n\r\n</div>\r\n\r\n<div id="openMathematicalMeaningBar">\r\n\r\n\t<div id="controlVersionVisibility">\r\n\t\t<div id="appletVersion"></div>\r\n\t</div>\r\n\t{{#editMode}}\r\n\t<div class="settings-btn">\r\n\t\t&#xe002;\r\n\t</div>\r\n\t{{/editMode}}\r\n\r\n\r\n\r\n</div>';});

define( 'mathematicalMeaning',[ 'jquery', 'lodash','mustache', 'backbone_super', 
	'text!js/libs/t2k/MathematicalMeaning/MathematicalMeaningTemplate.html'], 
	function ( $, _, Mustache, Backbone, template) {


		var MathematicalMeaningView = Backbone.View.extend({

			initialize:function(options){
				this.$el = $("#mathematicalMeaningContainer");
				this.mathematicalMeaningToggled = false;
				this.isSettingsOpened = false;	
				this.editMode = options.editMode;
				this.render();
			},
			
			render:function(options)
			{	
				console.log("rendering mathematical meaning..");
				// render the view
				this.$el.empty();
				var mathMeaningTemplateView = Mustache.to_html(template, this);
				this.$el.html(mathMeaningTemplateView);
				//this.updateValues(options);
				
				this.showMathematicalMeaning(this.mathematicalMeaningToggled);


				this.$actionMenu = $("#actionMenuContainer");
				this.$settings = $("#settings");
				this.$applet = $("#appletContainer")
				this.$actioniItem = $("#actionMenuList li.action-item");
				
				return this;
			},

			events:{
				"click #openMathematicalMeaningBar .open-btn" : "toggleMathematicalMeaning",
				"click #openMathematicalMeaningBar .settings-btn" : "openSettings"
			},

			toggleMathematicalMeaning:function()
			{
				// resize the matrix so the 
				var matrixContainer = $("#matrixContainer", this.$el.parent());
				if (this.mathematicalMeaningToggled) {
					matrixContainer.height( matrixContainer.height() + 140);	
				}
				else
				{
					matrixContainer.height( matrixContainer.height() - 140);	
				}

				this.mathematicalMeaningToggled = !this.mathematicalMeaningToggled;
				this.showMathematicalMeaning(this.mathematicalMeaningToggled);
			},

			showMathematicalMeaning:function(show)
			{
				if (show) {
					$("#toggledPart").show(5, function(){
						$(this).css("opacity",100);	
					});						
				}else{
					$("#toggledPart").css("opacity",0);
					setTimeout(function(){$("#toggledPart").hide();}, 350);					
				}
			},

			openSettings:function(){
				if (this.isSettingsOpened) {
					this.$settings.css("-webkit-transform", "rotateY(180deg)");
					this.$applet.css("-webkit-transform", "rotateY(0)");
					this.$actionMenu.css("-webkit-transform", "rotateY(0)");
					this.$actioniItem.removeClass('animateOff');
				}
				else{
					this.$applet.css("-webkit-transform", "rotateY(180deg)");
					this.$actionMenu.css("-webkit-transform", "rotateY(180deg)");
					this.$settings.css("-webkit-transform", "rotateY(0deg)");
					this.$actioniItem.addClass('animateOff');
				}
				this.isSettingsOpened = !this.isSettingsOpened;
				
			},

			trimDecimal:function(num, limit){
				var str = num + '',
				chunks = str.split('.'),
				limit = limit || 2;

				if (chunks[1]) {
					chunks[1] = chunks[1].slice(0, limit);

					return Number(chunks[0] + '.' + chunks[1]);
				}

				return Number(chunks[0]);
			}
		});

	

	return MathematicalMeaningView;

});

define('events',['lodash', 'backbone'], function(_, Backbone) {

	function GlobalEvents() {
		this._names = {};
	};

	_.extend(GlobalEvents, Backbone.Events);

	_.extend(GlobalEvents.prototype, {

		register: function(eventName /* [callback], [context] */) {
			this._names[eventName] = true;
			/* console.log('Register global event: ' + eventName); */

			if (arguments.length !== 1) {
				if (typeof arguments[1] === 'function') this.bind.apply(this, arguments);
			}
		},

		unregister: function(eventName /* [callback], [context] */) {
			if (arguments.length !== 1) {
				if (typeof arguments[1] === 'function') this.unbind.apply(this, arguments);
			}

			delete this._names[eventName];
			/* console.log('Unregister global event: ' + eventName); */
		},

		_call: function(methodName, args) {
			var eventName = args[0];

			if (typeof eventName !== 'string') {
				throw new Error('Bad eventName of type ' + typeof eventName);
			}

			if (eventName.charAt(0) === '&' || typeof this._names[eventName] !== 'undefined') {
				this.constructor[methodName].apply(this.constructor, args);
			}
			else {
				throw new Error('Unknown global event: ' + eventName);
			}
		},

		once: function(eventName, callback) {
			var self = this;

			var wrapperCallback = (function(oCallback) {
				return function() {
					self._call('off', [eventName, arguments.callee]);
					oCallback.apply(this, arguments)
				}
			})(callback);

			arguments[1] = wrapperCallback ;
			this._call('on', arguments);
		},

		bind: function(/* eventName, callback, [context] */) {
			this._call('on', arguments);
		},

		unbind: function(/* eventName, callback, [context] */) {
			this._call('off', arguments);
		},

		fire: function(/* eventName, [*args] */) {
			// console.log("Event fired:", arguments)
			this._call('trigger', arguments);
		}

	});

	return new GlobalEvents();

});

define( 'globals',[ 'jquery', 'lodash', 'mustache', 'events'], 
	function ( $, _, Mustache, events) {

		function NLGlobals() {
			// constants
			this.WHOLE = "whole";
			this.DECIMAL = "decimal";
			this.FRACTION = "fraction";
			
			this.MANUAL = "manual";
			this.AUTOMATIC = "automatic";
			this.CHECKABLE = "checkable";

			this.STUDENT_ENTER = "studentEnter";
			this.STUDENT_LOCATE = "studentLocate";

			this.NOT_CHECK = "notCheck";
			this.CHECKED = "checked";
			this.TRY_AGAIN = "tryAgain";
			this.SHOW_ANSWERS = "showAnswers";
			
			this.CORRECT = "correct";
			this.PARTLY = "partly";
			this.WRONG = "wrong";

			this.WHOLE_ZOOM_IN_LIMIT = 1;
			this.DECIMAL_ZOOM_IN_LIMIT_001 = 0.001;
			this.DECIMAL_ZOOM_IN_LIMIT_01 = 0.01;
			this.DECIMAL_ZOOM_IN_LIMIT_1 = 0.1;
			this.FRACTION_ZOOM_IN_LIMIT =  1;

			this.WHOLE_ZOOM_OUT_LIMIT = 1000000;
			this.DECIMAL_ZOOM_OUT_LIMIT = 1000;
			this.FRACTION_ZOOM_OUT_LIMIT =  10;

			this.WHOLE_SCROLL_ABS_LIMIT = 10000000;
			this.DECIMAL_SCROLL_ABS_LIMIT = 10000;
			this.FRACTION_SCROLL_ABS_LIMIT =  100;

			this.ACTIVE_TICKS_MAX_AMOUNT = 11;

			this.WHOLE_FROM = -5;
			this.WHOLE_TO = 5;
			this.FRACTION_FROM = -2;
			this.FRACTION_TO = 2;
			this.DECIMAL_FROM = -1;
			this.DECIMAL_TO = 1;

			// canvas style 
			this.canvasWidth = 630;
			this.canvasHeight = 280;
			
			// axis style properties
			this.axisColor = "#374A66";
			this.axisLineWidth = 2;
			this.axisPadding = 35;
			this.tickSize = 15;
			this.majorTickSize = 54;
			this.mediumTickSize = 34;
			this.minorTickSize = 14;
			this.tresholdStep = 30;

			// numbers style
			this.numberFont = '16px t2kmathusa-regular-webfont';
			this.fractionFont = '14px t2kmathusa-regular-webfont';
			this.fractionWholeFont = '16px t2kmathusa-regular-webfont';
			this.numberAlign = 'center';
			this.fractionWholeAlign = 'right';

			this.numberPrecision = 3;

 			// points style properties
 			this.INITIAL_POINT_COLOR = "#91E3FF";
 			this.pointSize = 9;
 			this.zoomedPointSize = 4;
 			this.pointBorderColor = "#374A66";
 			this.pointBorderWidth = 1;
 			this.selectedPointBorderColor = "#374A66";
 			this.selectedPointBorderWidth = 3;

 			// Label Style
 			this.labelMinWidth = 48;

			// slide animation parameters
			this.currentStep = 0;
			this.scrollDirection = 1;
			this.stepReminder = 0;
		}

		NLGlobals.prototype = {

			getCellSize:function(numberOfTicks){
				return (this.canvasWidth - (this.axisPadding * 2)) / (numberOfTicks - 1);
			},

			fixNumber:function(number, precision){
				return parseFloat(number.toFixed(precision || this.numberPrecision));

			},
			
			sumNumbers:function(a, b){
				return this.fixNumber((a * 1000 + b * 1000),0) /  1000;
			},

			subtractNumbers:function(a, b){
				return this.fixNumber((a * 1000 - b * 1000),0) /  1000;
			},

			getNumberOfMinorTicks: function(currentTickGap, NLType, fractionDenominator){
				var ticksNumber = 10; // for whole/decimal/fraction third level and up
				if ((NLType == this.FRACTION) && (currentTickGap <= fractionDenominator)){
					ticksNumber = fractionDenominator;
				}

				return ticksNumber;
			},

			getZoomRatio: function(currentTickGap, NLType, fractionDenominator){
				var ticksNumber = 10; // for whole/decimal/fraction third level and up
				if ((NLType == this.FRACTION) && (currentTickGap < fractionDenominator)){
					ticksNumber = fractionDenominator;
				}

				return ticksNumber;
			},

			getMixedNumber:function(NLType, pointNumber, denominator, modelDenominator){
				// get the actual number on the axis
				var axisNumber = this.fixNumber(pointNumber * denominator),
					whole = 0, numerator = 1,
					mixedNumber = { whole: (pointNumber < 1 && pointNumber > -1 && pointNumber !== 0) ? "" : pointNumber,
									numerator: "",
									denominator: "",
									negative: pointNumber < 0};

				if (NLType == this.DECIMAL) { // In decimal the whole section holds the number
					mixedNumber.whole = pointNumber;
				} else if ((NLType == this.FRACTION) && (axisNumber % denominator != 0)) { // check if this is mixed number (whole + fraction)
					whole =  parseInt(axisNumber / denominator); // calculating the whole of the fraction
					numerator = Math.round(axisNumber % denominator);   // calculating the numerator
					if (whole != 0) {
						mixedNumber.whole = whole;
					} else{
						 mixedNumber.negative = numerator < 0
					}
					mixedNumber.numerator = Math.abs(numerator);
					mixedNumber.denominator = denominator;
				}

				return mixedNumber;
			},

			getRealNumber: function(mixedNumber){
				var realNumber = Math.abs(parseFloat(mixedNumber.whole || 0)) + this.fixNumber((mixedNumber.numerator || 0)/(mixedNumber.denominator || 1));
				if (mixedNumber.negative) {
					realNumber = -1 * realNumber;
				}

				return realNumber;
			}

		}

		return new NLGlobals() ;
	});

/*
 * Globalize Culture en-US
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * This file was generated by the Globalize Culture Generator
 * Translation: bugs found in this file need to be fixed in the generator
 */

(function( window, undefined ) {

var Globalize;

if ( typeof require !== "undefined" &&
	typeof exports !== "undefined" &&
	typeof module !== "undefined" ) {
	// Assume CommonJS
	Globalize = require( "globalize" );
} else {
	// Global variable
	Globalize = window.Globalize;
}

Globalize.addCultureInfo( "en-US", "default", {
	name: "en-US",
	englishName: "English (United States)"
});

Globalize.addCultureInfo( "he-IL", "default", {
	name: "he-IL",
	englishName: "Hebrew (Israel)",
	nativeName: "עברית (ישראל)",
	language: "he",
	isRTL: true,
	numberFormat: {
		"NaN": "לא מספר",
		negativeInfinity: "אינסוף שלילי",
		positiveInfinity: "אינסוף חיובי",
		percent: {
			pattern: ["-n%","n%"]
		},
		currency: {
			pattern: ["$-n","$ n"],
			symbol: "₪"
		}
	},
	calendars: {
		standard: {
			days: {
				names: ["יום ראשון","יום שני","יום שלישי","יום רביעי","יום חמישי","יום שישי","שבת"],
				namesAbbr: ["יום א","יום ב","יום ג","יום ד","יום ה","יום ו","שבת"],
				namesShort: ["א","ב","ג","ד","ה","ו","ש"]
			},
			months: {
				names: ["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר",""],
				namesAbbr: ["ינו","פבר","מרץ","אפר","מאי","יונ","יול","אוג","ספט","אוק","נוב","דצמ",""]
			},
			eras: [{"name":"לספירה","start":null,"offset":0}],
			patterns: {
				d: "dd/MM/yyyy",
				D: "dddd dd MMMM yyyy",
				t: "HH:mm",
				T: "HH:mm:ss",
				f: "dddd dd MMMM yyyy HH:mm",
				F: "dddd dd MMMM yyyy HH:mm:ss",
				M: "dd MMMM",
				Y: "MMMM yyyy"
			}
		},
		Hebrew: {
			name: "Hebrew",
			"/": " ",
			days: {
				names: ["יום ראשון","יום שני","יום שלישי","יום רביעי","יום חמישי","יום שישי","שבת"],
				namesAbbr: ["א","ב","ג","ד","ה","ו","ש"],
				namesShort: ["א","ב","ג","ד","ה","ו","ש"]
			},
			months: {
				names: ["תשרי","חשון","כסלו","טבת","שבט","אדר","אדר ב","ניסן","אייר","סיון","תמוז","אב","אלול"],
				namesAbbr: ["תשרי","חשון","כסלו","טבת","שבט","אדר","אדר ב","ניסן","אייר","סיון","תמוז","אב","אלול"]
			},
			eras: [{"name":"C.E.","start":null,"offset":0}],
			twoDigitYearMax: 5790,
			patterns: {
				d: "dd MMMM yyyy",
				D: "dddd dd MMMM yyyy",
				t: "HH:mm",
				T: "HH:mm:ss",
				f: "dddd dd MMMM yyyy HH:mm",
				F: "dddd dd MMMM yyyy HH:mm:ss",
				M: "dd MMMM",
				Y: "MMMM yyyy"
			}
		}
	}
});

Globalize.addCultureInfo( "fr-FR", "default", {
	name: "fr-FR",
	englishName: "French (France)",
	nativeName: "français (France)",
	language: "fr",
	numberFormat: {
		",": " ",
		".": ",",
		"NaN": "Non Numérique",
		negativeInfinity: "-Infini",
		positiveInfinity: "+Infini",
		percent: {
			",": " ",
			".": ","
		},
		currency: {
			pattern: ["-n $","n $"],
			",": " ",
			".": ",",
			symbol: "€"
		}
	},
	calendars: {
		standard: {
			firstDay: 1,
			days: {
				names: ["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],
				namesAbbr: ["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],
				namesShort: ["di","lu","ma","me","je","ve","sa"]
			},
			months: {
				names: ["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre",""],
				namesAbbr: ["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc.",""]
			},
			AM: null,
			PM: null,
			eras: [{"name":"ap. J.-C.","start":null,"offset":0}],
			patterns: {
				d: "dd/MM/yyyy",
				D: "dddd d MMMM yyyy",
				t: "HH:mm",
				T: "HH:mm:ss",
				f: "dddd d MMMM yyyy HH:mm",
				F: "dddd d MMMM yyyy HH:mm:ss",
				M: "d MMMM",
				Y: "MMMM yyyy"
			}
		}
	}
});

Globalize.addCultureInfo( "ko-KR", "default", {
	name: "ko-KR",
	englishName: "Korean (Korea)",
	nativeName: "한국어 (대한민국)",
	language: "ko",
	numberFormat: {
		currency: {
			pattern: ["-$n","$n"],
			decimals: 0,
			symbol: "₩"
		}
	},
	calendars: {
		standard: {
			"/": "-",
			days: {
				names: ["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],
				namesAbbr: ["일","월","화","수","목","금","토"],
				namesShort: ["일","월","화","수","목","금","토"]
			},
			months: {
				names: ["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월",""],
				namesAbbr: ["1","2","3","4","5","6","7","8","9","10","11","12",""]
			},
			AM: ["오전","오전","오전"],
			PM: ["오후","오후","오후"],
			eras: [{"name":"서기","start":null,"offset":0}],
			patterns: {
				d: "yyyy-MM-dd",
				D: "yyyy'년' M'월' d'일' dddd",
				t: "tt h:mm",
				T: "tt h:mm:ss",
				f: "yyyy'년' M'월' d'일' dddd tt h:mm",
				F: "yyyy'년' M'월' d'일' dddd tt h:mm:ss",
				M: "M'월' d'일'",
				Y: "yyyy'년' M'월'"
			}
		},
		Korean: {
			name: "Korean",
			"/": "-",
			days: {
				names: ["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],
				namesAbbr: ["일","월","화","수","목","금","토"],
				namesShort: ["일","월","화","수","목","금","토"]
			},
			months: {
				names: ["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월",""],
				namesAbbr: ["1","2","3","4","5","6","7","8","9","10","11","12",""]
			},
			AM: ["오전","오전","오전"],
			PM: ["오후","오후","오후"],
			eras: [{"name":"단기","start":null,"offset":-2333}],
			twoDigitYearMax: 4362,
			patterns: {
				d: "gg yyyy-MM-dd",
				D: "gg yyyy'년' M'월' d'일' dddd",
				t: "tt h:mm",
				T: "tt h:mm:ss",
				f: "gg yyyy'년' M'월' d'일' dddd tt h:mm",
				F: "gg yyyy'년' M'월' d'일' dddd tt h:mm:ss",
				M: "M'월' d'일'",
				Y: "gg yyyy'년' M'월'"
			}
		}
	}
});

}( this ));

define("globalizeCultures", ["globalize"], function(){});

define('text!js/NLMenu.json',[],function () { return '{\r\n\t"main": \r\n\t{\r\n\t\t"colorScheme": "dark",\r\n\t\t"items": [\r\n\t\t{\r\n\t\t\t"id": "addPoint",\r\n\t\t\t"type" : "toggle",\r\n\t\t\t"class": "NumberLine-AddPoint",\r\n\t\t\t"callback": "toggleAddPointMode"\r\n\t\t\t},\r\n\r\n\t\t\t {\r\n\t\t\t"id": "selectColor",\r\n\t\t\t"subMenuId": "pointsColorPicker",\r\n\t\t\t"type": "colorPicker",\r\n\t\t\t"class": "NumberLine-SelectColor"\r\n\t\t\t},\r\n\r\n\t\t\t {\r\n\t\t\t"id": "slice",\r\n\t\t\t"type" : "toggle",\r\n\t\t\t"class": "NumberLine-slice",\r\n\t\t\t"callback": "openSlicingPicker"\r\n\t\t\t},\r\n\r\n\t\t\t   {\r\n\t\t\t"id": "deletePoint",\r\n\t\t\t"type" : "normal",\r\n\t\t\t"class": "General-Delete",\r\n\t\t\t"callback": "deletePoint"\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t{\r\n\t\t\t\t"id": "reset",\r\n\t\t\t   "type": "simple",\r\n\t\t\t\t"class": "General-refresh",\r\n\t\t\t\t"callback":"openResetDialog"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\r\n\t"colorPickers": [\r\n\t{\r\n\t\t"id":"pointsColorPicker",\r\n\t\t"colorScheme": "dark",\r\n\t\t"colors":["#91E3FF", "#FDB3C1", "#FEEAA5", "#85E0C2"], \r\n\t\t"callback":"setPointColor"\r\n\t}\r\n\t]\r\n}';});

define( 'mathUtils',[ 'jquery', 'lodash'], 
	function ( $, _) {

		function MathUtils() {

			this.defaultPrecision = 2;

		}

		MathUtils.prototype = {

			isEmpty:function(mixedNumber){
				if (mixedNumber.whole == "" && mixedNumber.numerator == "" && mixedNumber.denominator == "") {
					return true;
				}else{
					return false;
				}
			},

			generateEmptyNumber:function(){

				return { whole:"", numerator: "", denominator: "", negative: false };
			},

			areEquals:function(mixedNumberA, mixedNumberB){
				var areEquals = false;
				if (mixedNumberA.whole == mixedNumberB.whole && 
					mixedNumberA.numerator == mixedNumberB.numerator && 
					mixedNumberA.denominator == mixedNumberB.denominator && 
					mixedNumberA.negative == mixedNumberB.negative) {

					areEquals = true;
				}

				return areEquals;
			},

			fixNumber:function(number, precision){
				return parseFloat(number.toFixed(precision || this.defaultPrecision));
			},
			
			sumNumbers:function(a, b){
				return this.fixNumber((a * 1000 + b * 1000),0) /  1000;
			},

			subtractNumbers:function(a, b){
				return this.fixNumber((a * 1000 - b * 1000),0) /  1000;
			},

			decimalToFraction:function(number){

				var reminder, whole, reminderLength, numerator, denominator;
				if (number.toString().indexOf(".") == -1) {
					reminder = "";
					whole = number;
					denominator = numerator = "";
				}else{
					reminder = number.toString().substr(number.toString().indexOf('.') + 1, number.toString().length);
					whole = Number(number.toString().substr(0, number.toString().indexOf('.')));
					reminderLength  = reminder == 0 ? 0 : reminder.toString().length;
					denominator = Math.pow(10, reminderLength);
					numerator = Number(reminder);
				}

				// now shrink the fraction part incase there is one
				if (reminder !== "" ) {
					var gcd = this.calcGCD(denominator, numerator);
					numerator /= gcd;
					denominator  /= gcd;
				}

				whole = whole == 0 ? "" : whole;
				return {whole:whole, numerator:numerator, denominator:denominator, negative: whole < 0};
			},

			fractionToDecimal: function(fraction){
				if(this.isEmpty(fraction)){
					return fraction;
				}
				var realNumber = Math.abs(parseFloat(fraction.whole || 0)) + this.fixNumber((fraction.numerator || 0)/(fraction.denominator || 1));
				if (fraction.negative) {
					realNumber = -1 * realNumber;
				}
				
				return {whole:realNumber, numerator:"", denominator:"", negative: realNumber < 0};
			},

			// type - can be either 'fraction' or 'decimal'
			getMixedNumber:function(type, number, denominator){
				// get the actual number on the axis
				var axisNumber = this.fixNumber(number * denominator),
					whole = 0, numerator = 1,
					mixedNumber = { whole: (number < 1 && number > -1 && number !== 0) ? "" : number,
									numerator: "",
									denominator: "",
									negative: number < 0};

				if (type == this.DECIMAL) { // In decimal the whole section holds the number
					mixedNumber.whole = number;
				} else if ((type == this.FRACTION) && (axisNumber % denominator != 0)) { // check if this is mixed number (whole + fraction)
					whole =  parseInt(axisNumber / denominator); // calculating the whole of the fraction
					numerator = Math.round(axisNumber % denominator);   // calculating the numerator
					if (whole != 0) {
						mixedNumber.whole = whole;
					} else{
						 mixedNumber.negative = numerator < 0
					}
					mixedNumber.numerator = Math.abs(numerator);
					mixedNumber.denominator = denominator;
				}

				return mixedNumber;
			},

			getRealNumber: function(mixedNumber){
				var realNumber = Math.abs(parseFloat(mixedNumber.whole || 0)) + this.fixNumber((mixedNumber.numerator || 0)/(mixedNumber.denominator || 1));
				if (mixedNumber.negative) {
					realNumber = -1 * realNumber;
				}

				return realNumber;
			},

			calcGCD:function(a,b){

				if (a < 0) a = -a;
				if (b < 0) b = -b;
				if (b > a) {
					var temp = a; 
					a = b; 
					b = temp;
				}
				while (true) {
					a %= b;
					if (a == 0) return b;
					b %= a;
					if (b == 0) return a;
				}
			},

			calcLCM:function(a,b){
				return Math.abs(a*b) / this.calcGCD(a,b);
			}

		}

		return new MathUtils() ;
	});

 define( 'js/NLStage/NLModel',[ 'jquery', 'lodash', 'backbone_super', 'globals', 'mathUtils'],
	function ( $, _, Backbone, globals, mathUtils) {

		var NLModel = Backbone.Model.extend(
		{
			initialize:function(options){
				this.reset(options.initialData);
			},

			reset:function(initialData, hardReset){

				this.set("defaultAxisNumbers", [-5,-4,-3,-2,-1,0,1,2,3,4,5]);

				if (initialData && !hardReset) {
					//axis
					this.set("axisPositions", initialData.axisPositions);
					this.set("axisNumbers", _.clone(initialData.axisNumbers));

					// points
					this.set("points",  _.clone(initialData.points));
					this.set("pointsData", _.clone(initialData.pointsData, true));
					this.set("selectedPoint", initialData.selectedPoint);
					this.set("draggedPoint", initialData.draggedPoint);

					// labels
					this.set("labels", _.clone(initialData.labels));
					this.set("labelsData", _.clone(initialData.labelsData, true));
//					this.set("automaticMode", initialData.labelsData);

					this.set("scrollingStep", initialData.scrollingStep);
					this.set("NLType", initialData.NLType);
					this.set("currentZoomInLimit", initialData.currentZoomInLimit);
					this.set("currentZoomOutLimit", initialData.currentZoomOutLimit);
					this.set("currentScrollAbsLimit", initialData.currentScrollAbsLimit);
					this.set("fractionDenominator", initialData.fractionDenominator);

					// settings defaults
					this.set("NLMode", initialData.NLMode);
					this.set("showWholeTickMark", initialData.showWholeTickMark);
					this.set("showDecimalTickMark", initialData.showDecimalTickMark);
					this.set("showFractionTickMark", initialData.showFractionTickMark);
					this.set("hidePredefineTickMarkValue", initialData.hidePredefineTickMarkValue);
					this.set("taskType", initialData.taskType);
					this.set("checkState", initialData.checkState);
					this.set("correctValues", initialData.correctValues);
					this.set("previousFrom", initialData.previousFrom);
					this.set("previousTo", initialData.previousTo);

					this.set("pointColor", initialData.pointColor);

				}else{
					this.resetData();
					// axis
					this.set("axisPositions", []);
					this.set("axisNumbers", _.clone(this.get("defaultAxisNumbers")));
					this.set("scrollingStep", 5);

					// settings defaults
					this.set("NLType", globals.WHOLE); // possible values - whole/decimal/fraction
					this.set("currentZoomInLimit", globals.WHOLE_ZOOM_IN_LIMIT);
					this.set("currentZoomOutLimit", globals.WHOLE_ZOOM_OUT_LIMIT);
					this.set("currentScrollAbsLimit", globals.WHOLE_SCROLL_ABS_LIMIT);
					this.set("fractionDenominator", 1); // wholes & decimals sets it to 1 so it will be ignored during calculations
					this.set("NLMode", globals.AUTOMATIC);
					this.set("showWholeTickMark", true);
					this.set("showDecimalTickMark", true);
					this.set("showFractionTickMark", true);
					this.set("hidePredefineTickMarkValue", false);
					this.set("taskType", globals.STUDENT_ENTER);
					this.set("checkState", globals.NOT_CHECK);
					this.set("previousFrom", globals.WHOLE_FROM);
					this.set("previousTo", globals.WHOLE_TO);
					this.set("pointColor", globals.INITIAL_POINT_COLOR);
				}
			},

			setDefaults: function(center, withoutNearestCenter){
				this.set("scrollingStep", 5);
				// reset the axis positions
				var cellSize = globals.getCellSize(this.get("defaultAxisNumbers").length),
					positions = _.map(this.get("defaultAxisNumbers"), function(number, index){
									return cellSize * index + globals.axisPadding;
								});				

				this.set("axisPositions", positions);

				var slicingValue = 1;
				if (this.get("NLType") == globals.DECIMAL){
					slicingValue = this.get("currentZoomInLimit");
					this.set("scrollingStep", 5 * slicingValue);
				}

				// in case we want to center at a specific point(number)
				if (center) {
					var nearestCenter = withoutNearestCenter ? center : this.getNearestCenter(center);
					this.set("axisNumbers", _.map(this.get("defaultAxisNumbers"), function(number){
						return globals.sumNumbers(globals.fixNumber(number * slicingValue), nearestCenter);
					}));

				}else
				{
					this.set("axisNumbers", _.map(this.get("defaultAxisNumbers"), function(number){
						return globals.fixNumber(number * slicingValue);
					}));
				}
			},

			resetData: function(){
				// empty all data in the model

				// points
				this.set("points", []);
				this.set("pointsData", {});
				this.set("selectedPoint", "");
				this.set("draggedPoint", "");

				// labels
				this.set("labels", []);
				this.set("labelsData", {});
//				this.set("automaticMode", false);

				this.set("correctValues", []);
			},

			getData:function(){
				// remove empty values from correctValues array before saving our data
				var index = 0,
					emptyValue ={	whole:"",
									numerator: "",
									denominator: "",
									negative: false};

				while ( index < this.get("correctValues").length){
					if (this.get("correctValues")[index].whole == emptyValue.whole &&
						this.get("correctValues")[index].numerator == emptyValue.numerator &&
						this.get("correctValues")[index].denominator == emptyValue.denominator &&
						this.get("correctValues")[index].negative == emptyValue.negative)
						this.get("correctValues").splice(index, 1);
					else
						index++;
				}

				return this.toJSON();
			},

			isWhole:function(){
				return this.get("NLType") == globals.WHOLE;
			},

			isDecimal: function(){
				return this.get("NLType") == globals.DECIMAL;
			},

			isFraction: function(){
				return this.get("NLType") == globals.FRACTION;
			},

			getLength:function(){
				return this.get("axisNumbers").length;
			},

			getCenter:function(){
				return this.get("axisNumbers")[Math.floor(this.getLength() / 2)];
			},

			getNearestCenter:function(number){
				return Number((number / this.get("scrollingStep")).toFixed(0)) * this.get("scrollingStep");
			},

			getXPosition:function(index){
				return this.get("axisPositions")[index];
			},

			getXPositionByNumber:function(number){
				var index = this.get("axisNumbers").indexOf(number*this.get("fractionDenominator"));
				return this.get("axisPositions")[index];
			},

			getIndexByPosition:function(position){
				var positionIndex = _.indexOf(this.get("axisPositions"), position),
					gapDistance = this.getXPosition(1) - this.getXPosition(0);
				// incase we didnt find the position
				if (positionIndex == -1) {
					// find the nearest position index
					_.find(this.get("axisPositions"), _.bind(function(axisPosition, index){
						positionIndex = index;
						var fromBoudary = index == 0 ?  gapDistance : gapDistance / 2,
							toBoundary = index == this.getLength() - 1 ? gapDistance : gapDistance / 2;
						return axisPosition - fromBoudary <= position &&
								axisPosition + toBoundary > position;
					}, this));
				}

				return positionIndex;
			},

			getTicksGap:function(){
				return Math.abs(globals.subtractNumbers(this.get("axisNumbers")[1], this.get("axisNumbers")[0]));
			},

			addPoint:function(number, color){
				this.get("points").push(number);
				this.get("pointsData")[number] = {  color: color || this.get("pointColor"),
													selected:false, 
													dragged:false, 
													fractionDenominator:this.get("fractionDenominator"),
													correct: this.get("editMode")};
				this.get("labels").push(number);
				if (this.get("NLMode") == globals.AUTOMATIC){
					var mixedNumber = globals.getMixedNumber(this.get("NLType"), number, this.get("fractionDenominator"), this.get("fractionDenominator"));
					this.get("labelsData")[number] = {	color: color || this.get("pointColor"),
														editable:false, 
														whole: mixedNumber.whole,
														numerator: mixedNumber.numerator,
														denominator: mixedNumber.denominator,
														negative: mixedNumber.negative,
														correct:true,
														revealedAnswer:this.get("checkState") == globals.SHOW_ANSWERS};
				} else {
					this.get("labelsData")[number] = {  color: color || this.get("pointColor"), editable:false,
														whole:"",
														numerator: "",
														denominator: "", // this.get("fractionDenominator"),
														negative: false,
														correct:false,
														revealedAnswer:false};
				}
			},

			selectPoint:function(number){
				this.deselectAllPoints(); // first, deselect other selected points
				this.get("pointsData")[number].selected = true;
				this.get("labelsData")[number].selected = true;
				this.set("selectedPoint", number);
			},

			getSelectedPointNumber:function(){
				return this.get("selectedPoint");
			},

			deselectAllPoints:function(){
				if (this.get("selectedPoint") !== "") {
					this.get("pointsData")[this.get("selectedPoint")].selected = false;
					this.get("labelsData")[this.get("selectedPoint")].selected = false;
				}
				this.set("selectedPoint", "");
			},

			hasPoint:function(number){
				return this.get("pointsData")[number] != undefined;
			},

			// check if there is a point between the sent number and the following number
			getNearbyPoints:function(number){
				var nearbyPoints = {},
					followingNumber = globals.sumNumbers(number, globals.fixNumber(this.getTicksGap()/this.get("fractionDenominator")));

				// first the select the nearby points indexes
				var nearbyPointsIndexes = _.filter(this.get("points"), function(pointNumber){
					return pointNumber > number && pointNumber < followingNumber;
				});

				// now, get those nearby points data 
				_.each(nearbyPointsIndexes, _.bind(function(pointNumber){
					nearbyPoints[pointNumber] = this.get("pointsData")[pointNumber];
				},this));

				return nearbyPoints;
			},

			hasPointByIndex:function(index){
				var number = globals.fixNumber(this.get("axisNumbers")[index]/this.get("fractionDenominator"));
				return this.hasPoint(number);
			},

			deletePoint:function(number){
				if (number !== "") {
					this.stopDragging();
					this.deselectAllPoints();
					this.get("points").splice(_.indexOf(this.get("points"), number), 1);
					this.get("labels").splice(_.indexOf(this.get("labels"), number), 1);
					delete this.get("pointsData")[number];
					delete this.get("labelsData")[number];
				}
			},

			dragPoint:function(number){
				this.set("draggedPoint", number);
				this.selectPoint(number);
				this.get("pointsData")[number].dragged = true;
			},

			isDragged:function(number){
				return this.get("pointsData")[number].dragged;
			},

			stopDragging:function(){
				if (this.get("draggedPoint") !== "") {
					this.get("pointsData")[this.get("draggedPoint")].dragged = false;
				}
				this.set("draggedPoint", "");
			},

			getDraggedPointNumber:function(){
				return this.get("draggedPoint");
			},

			isPredefinedPoint:function(pointNumber){
				if (this.get("initialData")) {
					return _.contains(this.get("initialData").points, pointNumber);	
				}else
				{
					return false;
				}
			},

			resetLabel:function(number, resetByPoint){
				var labelData = this.get("labelsData")[number],
					mixedNumber = globals.getMixedNumber(this.get("NLType"),
														number,
														this.get("pointsData")[number] ? this.get("pointsData")[number].fractionDenominator : 1,
														this.get("fractionDenominator"));
				// reset label data
				labelData.whole = resetByPoint ? mixedNumber.whole : "";
				labelData.numerator = resetByPoint ? mixedNumber.numerator : "";
				labelData.denominator = resetByPoint ? mixedNumber.denominator : "";
				labelData.negative = resetByPoint ? mixedNumber.negative : false;
				labelData.correct = resetByPoint;
				labelData.revealedAnswer = resetByPoint;
			},

			check:function(){
				var result = globals.CORRECT;
				// call the right check method according to settings
				if (this.get("taskType") == globals.STUDENT_ENTER) {
					result = this.checkEnter();
				} else {
					result = this.checkLocate();
				}
				
				this.set("checkState", globals.CHECKED);
				return result;
			},

			checkEnter:function(){
				var result,
					correctAnswers = this.get("points").length;
				_.each(this.get("points"), _.bind(function(pointNumber){
					var mixedNumber = globals.getMixedNumber(this.get("NLType"), 
															pointNumber, 
															this.get("pointsData")[pointNumber].fractionDenominator, 
															this.get("fractionDenominator")),
						labelData = this.get("labelsData")[pointNumber],
						correct = false;


					if (mathUtils.getRealNumber(mixedNumber) == mathUtils.getRealNumber(labelData)){
						correct = true;
						
					}else{

						correctAnswers--;
					}

					this.get("labelsData")[pointNumber].correct = correct;

				}, this));
				
				if (correctAnswers == this.get("points").length) {
					result = globals.CORRECT;
				}else if(correctAnswers == 0){
					result = globals.WRONG;
				}else{
					result = globals.PARTLY;
				}

				return result || globals.WRONG;
			},

			checkLocate:function(){
				var result,
					correctAnswers = this.get("correctValues").length * 2;
				_.each(this.get("correctValues"), _.bind(function(value, index){
					var realNumber = globals.getRealNumber(value);
			      	// if found point - mark as correct
			      	if (this.hasPoint(realNumber)) {
						this.get("pointsData")[realNumber].correct = true;
						value.located = true; // mark the value as located by student

			      		var labelData = this.get("labelsData")[realNumber];

						if (mathUtils.getRealNumber(value) == mathUtils.getRealNumber(labelData)) {
							this.get("labelsData")[realNumber].correct = true;
						} else {
							correctAnswers--;
						}
			      	}else{
			      		correctAnswers-=2;
			      		value.located = false;
					}
			   	},this));


 				if (correctAnswers == this.get("correctValues").length * 2) {
					if (this.get("points").length != this.get("correctValues").length) 
						result = globals.PARTLY;
					else
						result = globals.CORRECT;
				}else if(correctAnswers == 0){
					result = globals.WRONG;
				}else{
					result = globals.PARTLY;
				}

			   	return result || globals.WRONG;
			},

			tryAgain:function(){
				this.set("checkState", globals.TRY_AGAIN);
			},

			showAnswers:function(){
				var i, 
					labelsData = this.get("labelsData"), 
					pointsData = this.get("pointsData");
				
				if (this.get("taskType") == globals.STUDENT_LOCATE) {
					// First, go over the correctValues
					_.each(this.get("correctValues"), _.bind(function(value){
						// if the value was not located by the student
						if (!value.located) {
							// generate the realNumber from the value
							var realNumber = globals.getRealNumber(value);
							// and create the point
							this.addPoint(realNumber);
							this.get("pointsData")[realNumber].fractionDenominator = value.denominator || 1;
							this.get("pointsData")[realNumber].correct = true;
							this.get("pointsData")[realNumber].revealedAnswer = true;
							this.resetLabel(realNumber, true);
						}

					}, this));

					// Second, Remove all incorrect points were added by students
					var wrongPoints  = _.filter(this.get("points"), _.bind(function(number){
											return !this.get("pointsData")[number].correct;
										}, this));
					
					_.each(wrongPoints, _.bind(function(point){
						this.deletePoint(point);
					}, this));
				}
				
				// fix all wrong answers on labels
				for(i in labelsData){
					if (!labelsData[i].correct) {
						var mixedNumber = globals.getMixedNumber(this.get("NLType"), 
																i, 
																pointsData[i].fractionDenominator, 
																this.get("fractionDenominator"));
						labelsData[i].whole = mixedNumber.whole;
						labelsData[i].numerator = mixedNumber.numerator;
						labelsData[i].denominator = mixedNumber.denominator;
						labelsData[i].negative = mixedNumber.negative;
						labelsData[i].correct = pointsData[i].correct;
						labelsData[i].revealedAnswer = true;
					}
				}
				
				this.set("checkState", globals.SHOW_ANSWERS);
			}
		});

		return NLModel;
	});

define('text!js/libs/t2k/Dialog/Dialog.html',[],function () { return ' <div id="dialog">\r\n \t<div class="overlay"></div>\r\n \t<div class="modal">\r\n \t\t<div id="dialogTitle">(({{title}}))</div>\r\n \t\t<div id="dialogContent"> \r\n \t\t\t<div class="icon">\r\n \t\t\t\t<span class="{{icon}}"></span>\r\n \t\t\t</div>\r\n \t\t\t<div class="text">(({{text}}))</div>\r\n \t\t</div>\r\n \t\t<div id="dialogControls">\r\n\t\t\t<div id=\'okBtn\' value=\'ok\' class=\'btn\'>(({{buttons.okText}}))</div>\r\n\t\t\t<div id=\'cancelBtn\' value=\'cancel\' class=\'btn\'>(({{buttons.cancelText}}))</div>\r\n \t\t</div>\r\n \t</div>\r\n </div>';});

/**
 * Class Dialog
 */
define( 'js/libs/t2k/Dialog/Dialog',[ 'jquery', 'lodash','mustache', 'text!js/libs/t2k/Dialog/Dialog.html' ], function ( $, _, Mustache, template ) {

    function Dialog() {

    }

    Dialog.prototype = {

        create:function (config, callbackEvent) {
            var view_template = Mustache.render(template, config).trim();
            var clickEvent;
            $('body').append(view_template);
            config.device == "pc" ? clickEvent = "click" : clickEvent = "touchstart";
            $('#dialogControls .btn').on(clickEvent,function(e){
                var val = $(e.currentTarget).attr('value');
                $('#dialog').remove();
                callbackEvent(val);
            });
            
        }

    };

    return Dialog;
});

define('text!js/NLStage/NLStageTemplate.html',[],function () { return '<div id="canvasPH">\r\n\t<canvas id="NLCanvasDragging" width="628"  height="200"></canvas>\r\n\t<canvas id="NLCanvas" width="628"  height="200"></canvas>\r\n</div>\r\n\r\n<div id="NLLabelsPH"></div>\r\n\r\n<div id="slicePickerPH"></div>\r\n\r\n<div id="stagePH">\r\n\t<div id="navigation">\r\n\t\t<div id="scrollBackward" class="scrollBtn"><span class="General-left"></span></div>\r\n\t\t<div id="scrollForward" class="scrollBtn"><span class="General-right"></span></div>\r\n\t</div>\r\n\r\n</div>\r\n\r\n<div id="layoutControls">\r\n\t\r\n\t<div id="zoomControls">\r\n\t\t<div id="zoomIn" class="controlBtn"><span class="NumberLine-ZoomIn"></span></div>\r\n\t\t<div id="zoomOut" class="controlBtn"><span class="NumberLine-ZoomOut"></span></div>\r\n\t</div>\r\n\t<div id="viewControls">\r\n\t\t<div id="setView" class="controlBtn"><span class="NumberLine-SetView"></span></div>\r\n\t\t<div id="fitToView" class="controlBtn" numberOfPoints="0">\r\n\t\t\t<span class="NumberLine-FitToView"></span>\r\n\t\t</div>\r\n\t\t<div id="pointsTooltip">0</div>\r\n\t\t\r\n\t\t<div id="rangePickerPH" style="display:none">\r\n\t\t\t\r\n\t\t</div>\r\n\t</div>\r\n\t\r\n</div>\r\n\r\n<div id="backgroundPH">\r\n\t<img src="./media/background.png" style="float:left;"/>\r\n\t<img src="./media/background.png" style="float:left; position: absolute;"/>\r\n</div>\r\n';});

define('text!js/NLStage/slicePickerTemplate.html',[],function () { return '<div id="slicePicker" class="animated flipInX">\r\n\t\r\n\t\t{{#options}}\r\n\t\t\t<div class="option {{ZoomSelected}}">\r\n\t\t\t{{ > fraction}}\r\n\t\t\t</div>\r\n\t\t{{/options}}\r\n\t\r\n</div>';});

define('text!js/NLStage/fractionTemplate.html',[],function () { return '<div class="fractionComponent">\r\n\r\n<div class="whole">\r\n\t{{wholePart}}\r\n</div>\r\n<div class="fraction">\r\n\t<div class="numerator">{{{numerator}}}</div>\r\n\t<div class="denominator">{{{denominator}}}</div>\r\n</div>\r\n\r\n</div>';});

define('text!js/NLStage/rangePickerTemplate.html',[],function () { return '<div>\r\n\t<p>((from))<p>\r\n\t<input type="text" id="from" value="{{from}}" class="onlyNumbers" min="{{min}}" max="{{max}}" onpaste="return false;"/> \r\n</div>\r\n<div>\r\n\t<p>((to))<p>\r\n\t<input type="text" id="to" value="{{to}}" class="onlyNumbers" min="{{min}}" max="{{max}}"  onpaste="return false;"/> \r\n</div>\r\n\t<input id="set" type="button" value="((set))" /> ';});

define( 'js/NLStage/NLStage',[ 'jquery', 'lodash', 'mustache', 'events',  'globals', 
		  'js/libs/t2k/Dialog/Dialog',
		  'text!js/NLStage/NLStageTemplate.html',
		  'text!js/NLStage/slicePickerTemplate.html',
		  'text!js/NLStage/fractionTemplate.html',
		  'text!js/NLStage/rangePickerTemplate.html'], 
	function ( $, _, Mustache, events, globals, Dialog, template, slicePickerTemplate, fractionTemplate, rangePickerTemplate) {

		function NLStage(model) {

			this.$container = $("#appletContainer");
			this.model = model;

			this.addPointMode = false;
			this.dragging = false;
			this.slicePickerOpened = false;
			this.rangePickerOpened = false;
			this.previousFrom = -5;
			this.previousTo = 5;
			this.isSliding = false;
			this.scrollLeftPoint = 0;
			this.render();
		}

		NLStage.prototype = {

			render:function(){
				 console.log("**NL:rendering stage..");
				 var stageHtml = Mustache.to_html(template);
	             this.$container.empty().append(stageHtml);

	            var rangePickerHtml = Mustache.render(rangePickerTemplate, {from:this.previousFrom, 
																			 to:this.previousTo,
																			 min:-this.model.get("currentScrollAbsLimit"),
																			 max:this.model.get("currentScrollAbsLimit")}).trim();
				$("#rangePickerPH").append(rangePickerHtml);	

				 this.registerEvents();
				 this.registerElements();
				 this.updatePointsTooltip();
				 this.refreshStage(0);
				 return this;
			},

			reRender: function(){
				events.fire("render");
				this.updatePointsTooltip();
			},

			refreshStage:function(step){
				// close slicePicker in case it was opened from before.
	            this.$slicePicker.empty();

				// initialize axis positions
				globals.currentStep = step;
				var cellSize = globals.getCellSize(this.model.getLength()),
					positions = _.map(this.model.get("axisNumbers"), _.bind(function(number, index){
									return cellSize * index + globals.axisPadding + (step % cellSize);
								}, this));				

				this.model.set("axisPositions", positions);
			},

			registerEvents:function(){
				_.bindAll(this);

				if (!this.model.get("isTouch")) { // pc device

					$("#navigation #scrollForward").on("click", this.scrollForward);
					$("#navigation #scrollBackward").on("click", this.scrollBackward);
					$("#layoutControls #setView").on("click", this.toggleSetView);
					$("#layoutControls #fitToView").on("click", this.fitToView);
					$("#layoutControls #zoomIn").on("click", this.zoomIn);
					$("#layoutControls #zoomOut").on("click", this.zoomOut);

					$("#rangePickerPH").delegate("#set", "click", this.setView);
					
					$("#NLCanvas").on("click", this.addPoint);
					$("#NLCanvas").on("mousedown", this.startMoving);
					$("#NLCanvas").on("mousemove", this.moving);
					$("#NLCanvas").on("mouseup", this.endMoving);
					$("#NLCanvas").on("mouseleave", this.endMoving);

					this.$container.delegate("#slicePicker .option", "click", this.changeSlicing);

				}else{ // Tablet

					// for disabling default touch gestures
					//$(document).on("touchstart", this.disableDefaultGesture);

					$("#navigation #scrollForward").on("touchend", this.scrollForward);
					$("#navigation #scrollBackward").on("touchend", this.scrollBackward);
					$("#layoutControls #setView").on("touchend", this.toggleSetView);
					$("#layoutControls #fitToView").on("touchend", this.fitToView);
					$("#layoutControls #zoomIn").on("touchend", this.zoomIn);
					$("#layoutControls #zoomOut").on("touchend", this.zoomOut);

					$("#rangePickerPH").delegate("#set", "touchstart", this.setView);

					$("#NLCanvas").on("touchend", this.addPoint);
					// TODO: need to fix dragging on tablet
					$("#NLCanvas").on("touchstart", this.startMoving);
					$("#NLCanvas").on("touchmove", this.moving);
					$("#NLCanvas").on("touchend", this.endMoving);
					$(document).on("touchmove", this.disableDefaultGesture);
					//$(document).on("touchstart", this.disableDefaultGesture);
					
					this.$container.delegate("#slicePicker .option", "touchend", this.changeSlicing);
				}

				
				$("#rangePickerPH").delegate(".onlyNumbers", "keypress", this.rangePickerKeyPressHandler);
				$("#rangePickerPH").delegate(".onlyNumbers", "blur", this.rangePickerBlurHandler);

				$(document).on("click", this.closeSlicingPicker);

				events.register("countPoints", this.updatePointsTooltip);
				events.register("resetBoundaries", this.resetBoundaries);

				this.model.on("change:NLType", this.resetActionMenu);
				this.model.on("change:NLMode", this.resetActionMenu);
			},

			registerElements:function(){
				this.canvas = $("#NLCanvas")[0];
				this.$slicePicker = $("#slicePickerPH");
				this.$background = $("#backgroundPH");
				this.$firstImage = this.$background.find("img:first");
				this.imageWidth = 0;
			},

			actionMenuHandler:function(actionItem){
				if (actionItem.id != "addPoint") this.addPointMode = false;

				this[actionItem.callback](actionItem);
			},

			resetActionMenu: function(){
				this.actionMenu.resetAll();
				if (this.slicePickerOpened)
					this.openSlicingPicker();
				if (this.rangePickerOpened)
					this.toggleSetView();

				this.addPointMode = false;

				if (!this.model.get("editMode") &&
					this.model.get("NLMode") == globals.CHECKABLE &&
					this.model.get("taskType") == globals.STUDENT_ENTER) {
					this.actionMenu.disableActionItem("addPoint");
				}

				if (this.model.get("NLType") == globals.WHOLE) {
					this.actionMenu.disableActionItem("slice");
				} else {
					this.actionMenu.enableActionItem("slice");
				}
				this.actionMenu.pickColor(null, this.model.get('pointColor'));
			},

			resetBoundaries:function(){

				var from = $("#viewControls #from"), 
					to = $("#viewControls #to"),
					min = -this.model.get("currentScrollAbsLimit"),
					max = this.model.get("currentScrollAbsLimit");

					from.attr("min", min);
					from.attr("max", max);
					to.attr("min", min);
					to.attr("max", max);
			},

			updatePointsTooltip:function(){
				var pointsCount = this.model.get("points") ? this.model.get("points").length : 0;
				$("#pointsTooltip").html(pointsCount > 99 ? "..." : pointsCount);
			},

			openResetDialog:function(){
				var data = {
					"device" : !this.model.get("isTouch")? "pc":"tablet",
					"icon" : "General-warning",
					"title": "resetConfirmation",
					"text" : "resetQuestion",
					"icon" : "General-warning",
					"buttons" : {
						okText : 'reset',
						cancelText: 'cancel'
					}
				};

				var resetDialog = new Dialog();
				resetDialog.create(data, _.bind(this.reset, this));
			},

			reset:function(response){
				if (response == 'ok') {
					this.model.reset(this.model.get("initialData"), this.model.get("editMode"));
					this.actionMenu.pickColor(null,this.model.get('pointColor')); /*bug 877*/
					this.previousFrom = -5;
					this.previousTo = -5;
					this.refreshStage(0);
					events.fire("render");
					events.fire("renderSettings");
					events.fire("countPoints");
				}
			},

			scrollForward:function(){
				this.slide(-1);
			},

			scrollBackward:function(){
				this.slide(1);
			},

			toggleSetView:function(e){
				if (this.rangePickerOpened) {
						$("#rangePickerPH").hide();
						this.rangePickerOpened = false;
				}else{
					var from = 	this.model.get("previousFrom");
					var to =    this.model.get("previousTo");
					
					$("#viewControls #from").val(Globalize.format(from),"n0");
					$("#viewControls #to").val(Globalize.format(to),"n0");
					$("#rangePickerPH").show();
					this.rangePickerOpened = true;
				}
			},

			setView:function(){
				this.clearSelection();
				var minBoundary = -this.model.get("currentScrollAbsLimit"),
					maxBoundary = this.model.get("currentScrollAbsLimit"),
					from = Globalize.parseFloat($("#viewControls #from").val()), 
					to = Globalize.parseFloat($("#viewControls #to").val()),
					previousFrom = Math.max(minBoundary, Math.min(from,to)),
					previousTo = Math.min(maxBoundary, Math.max(from,to));

				// save from and to for later, when we'll open range picker again
				this.model.set("previousFrom", previousFrom);
				this.model.set("previousTo", previousTo);

				events.fire("setView", previousFrom , previousTo);
				this.toggleSetView() // will close the setView window
			},

			fitToView:function(){
				this.clearSelection();
				if (this.model.get("points").length) {
					// get min and max points 
					var from = _.min(this.model.get("points")),
						to = _.max(this.model.get("points"));
					events.fire("setView", Math.min(from,to) , Math.max(from,to));
				}
			},

			zoomIn:function(){
				//this.zoomInOut(-1);
				this.clearSelection();
				events.fire("zoomIn");
			},

			zoomOut:function(){
				//this.zoomInOut(1);
				this.clearSelection();
				events.fire("zoomOut");
			},

			clearSelection:function(){
				this.model.deselectAllPoints();
				this.model.stopDragging();
			},

			toggleAddPointMode:function(){
				this.addPointMode  = !this.addPointMode;
			},

			setPointColor:function(data){
				this.model.set("pointColor", data.selectedColor);
			},

			getPosition:function(e){
				var position;
				if (!this.model.get("isTouch")) {
					position = {x: e.offsetX, y:e.offsetY};
				}else{
					var container = $("#canvasPH"),
						offsetParent = container.offsetParent()[0],
						offsetTop = offsetParent.offsetTop + container[0].offsetTop,
						offsetLeft = offsetParent.offsetLeft + container[0].offsetLeft; 

					position = {x: e.originalEvent.changedTouches[0].pageX - offsetLeft, 
								y: e.originalEvent.changedTouches[0].pageY - offsetTop};
				}

				return position;
			},

			addPoint:function(e){
				// get the position we clicked on the canvas
				var position = this.getPosition(e);
				if (this.addPointMode) {
					events.fire("addPoint", position);
				}else{
					events.fire("tap", position);
				}
			},

			deletePoint:function(){
				this.addPointMode = false;
				events.fire("deletePoint");
			},

			startMoving:function(e){
				if (!this.addPointMode) {
					console.log("startMoving");
					this.isMouseDown = true;
				}
			},

			moving:function(e){
				if ((this.isTouch|| this.isMouseDown) && !this.dragging) {
					console.log("moving");
					this.dragging = true;
					var position = this.getPosition(e);
					events.fire("startDrag", position);
				}
				if (this.dragging) {
					var position = this.getPosition(e);
					events.fire("drag", position);					
				}
			},

			endMoving:function(e){
				if (this.dragging) {
					console.log("endMoving");	
					this.dragging = false;
					var position = this.getPosition(e);
					events.fire("endDrag", position);
				}
				this.isMouseDown = false;
			},

			openSlicingPicker: function(){
				if (!this.slicePickerOpened) {
					var pickerData = {options:[]};
					if (this.model.get("NLType") == globals.DECIMAL) {
						var currentZoomInLimit = this.model.get("currentZoomInLimit");
						pickerData.options.push({"wholePart":globals.DECIMAL_ZOOM_IN_LIMIT_1, "ZoomSelected": globals.DECIMAL_ZOOM_IN_LIMIT_1 == currentZoomInLimit? "ZoomSelected" : ""});
						pickerData.options.push({"wholePart":globals.DECIMAL_ZOOM_IN_LIMIT_01, "ZoomSelected": globals.DECIMAL_ZOOM_IN_LIMIT_01 == currentZoomInLimit? "ZoomSelected" : ""});
						pickerData.options.push({"wholePart":globals.DECIMAL_ZOOM_IN_LIMIT_001, "ZoomSelected": globals.DECIMAL_ZOOM_IN_LIMIT_001 == currentZoomInLimit? "ZoomSelected" : ""});
					}else if (this.model.get("NLType") == globals.FRACTION) {
						var fractionDenominator = this.model.get("fractionDenominator");
						for (var i = 2; i <= 10; i++) {
							pickerData.options.push({"numerator":1, "denominator":i, "ZoomSelected": i == fractionDenominator? "ZoomSelected" : ""});	
						};
					};

					var partials = {fraction:fractionTemplate};
					var slicePickerHtml = Mustache.to_html(slicePickerTemplate, pickerData, partials);
					this.$slicePicker.html(slicePickerHtml);
				}else{
					//this.$slicePicker.empty();
					$("#slicePicker").removeClass("flipInX").addClass("flipOutX");
				}
				// toggle slice picker
				this.slicePickerOpened = !this.slicePickerOpened;
				this.addPointMode = false;
			},

			closeSlicingPicker:function(e){
				if (!($(e.target).closest("#slicePickerPH .option").length || $(e.target).closest("#slice").length)) {
					this.$slicePicker.empty();
					this.slicePickerOpened = false;
					this.actionMenu.toggleActionItemPress("slice", false);
				}

				if (!($(e.target).closest("#rangePickerPH").length || $(e.target).closest("#viewControls #setView").length)) {
					// force closing the range picker
					this.rangePickerOpened = true;
					this.toggleSetView();
				}
			},

			changeSlicing:function(e){

				// first, let get the current center point, so we'll know how to position our axis
				var center = Math.round(this.model.getCenter() / this.model.get("fractionDenominator"));

				this.clearSelection();
				var fraction = $(".fractionComponent", $(e.target).closest(".option"));
				$(".ZoomSelected").removeClass("ZoomSelected");
				$(fraction).parent().addClass("ZoomSelected");
				if (this.model.get("NLType") == globals.DECIMAL){
					var sliceValue = $(".whole", fraction).text().trim();
					this.model.set("currentZoomInLimit", sliceValue);
					events.fire("changeSlicing", sliceValue);
				}else if (this.model.get("NLType") == globals.FRACTION){
					this.model.set("currentZoomInLimit", 1);
					var sliceValue = $(".denominator", fraction).text().trim();
					this.model.setDefaults();
					this.model.set("fractionDenominator", sliceValue);
				}

				// center the view 
				events.fire("setView", center, center);
				events.fire("render");
			},

			relocateImage:function(section){
				this.$background.animate({scrollLeft: this.scrollLeftPoint + section}, 0);
			},
			
			slide:function(direction){
				// move the background image
				//if distance between current position and end way position is very long
				if((this.$background.scrollLeft() - this.scrollLeftPoint) > 200 || (this.scrollLeftPoint - this.$background.scrollLeft()) > 200){
					return;
				}
				//if close to the right end of right image, jump to left image
				if(this.scrollLeftPoint > 2100){
					this.relocateImage(this.imageWidth * -1);
					this.scrollLeftPoint -= this.imageWidth;
				}
				else if( this.scrollLeftPoint == 0){ //jump to right image on first click
					this.imageWidth = Number(this.$firstImage.width());
					this.$background.animate({scrollLeft: (this.imageWidth)}, 0);
					this.scrollLeftPoint = this.imageWidth;
				}
				else if( this.scrollLeftPoint < 250){ //if is very left on left image, jump to right image
					this.relocateImage(this.imageWidth);
					this.scrollLeftPoint += this.imageWidth;
				}
				//add section 	
				this.scrollLeftPoint += (-150 * direction);
					
				//run slow animate
				this.$background.animate({scrollLeft: this.scrollLeftPoint}, 750, "linear");

				//move the number line
				this.clearSelection();
				events.fire("hideLabels", direction);
				var cellSize = globals.getCellSize(this.model.getLength()),
					speed = cellSize / 5, // enter the speed you like
					stepSize = speed * direction, // Math.floor(cellSize / speed) * direction,
					currentStep = 0;
				globals.stepReminder = speed;//cellSize % speed || 1;
				globals.scrollDirection = direction;

				var scroll = _.bind(function(){
					this.isSliding = true;
					this.refreshStage(currentStep);
					if (Math.abs(currentStep) < cellSize * Math.floor(this.model.getLength() / 2) &&
						((direction == 1 && Math.abs(this.model.get("axisNumbers")[0]/this.model.get("fractionDenominator")) < this.model.get("currentScrollAbsLimit")) ||
						(direction == -1 && Math.abs(this.model.get("axisNumbers")[this.model.get("axisNumbers").length-1]/this.model.get("fractionDenominator")) < this.model.get("currentScrollAbsLimit")))) {
						currentStep = globals.sumNumbers(currentStep, stepSize);
//						currentStep = globals.fixNumber(currentStep + stepSize);
						setTimeout(scroll, 10);
					} else {
						events.fire("showLabels");
						this.isSliding = false;
					}
				}, this);

				scroll();
			},

			zoomInOut:function(direction){
				var cellSize = globals.getCellSize(this.model.getLength()),
					speed = 10,
					stepSize = Math.floor(cellSize / speed) * direction,
					currentStep = 0;
				globals.stepReminder = cellSize % speed || 1;
				globals.scrollDirection = direction;

				var zoom = _.bind(function(){
					 events.fire("hideLabels", direction);
					 globals.currentStep = currentStep;
					 var cellSize = globals.getCellSize(this.model.getLength()),
						 positions = _.map(this.model.get("axisNumbers"), _.bind(function(number, index){
							 if (index < Math.floor(this.model.getLength()/2))
								 return cellSize * index + globals.axisPadding + (currentStep % cellSize);
							 else if (index > Math.floor(this.model.getLength()/2))
								 return cellSize * index + globals.axisPadding - (currentStep % cellSize);
							else
								return this.model.get("axisPositions")[Math.floor(this.model.getLength()/2)];
						 }, this));
					 this.model.set("axisPositions", positions);

					 if (Math.abs(currentStep) < cellSize * Math.floor(this.model.getLength() / 2)) {
						currentStep += stepSize;
						setTimeout(zoom, 10);
					}else{
						if (direction > 0) {
							events.fire("zoomOut");	
						}else{
							events.fire("zoomIn");	
						}
					}
				}, this)

				zoom();
			},

			rangePickerKeyPressHandler: function(e){
				var validCharacters = "0123456789-";
				if (validCharacters.indexOf(String.fromCharCode(e.charCode)) == -1){
					e.preventDefault();
					return;
				}
				//test if minus is first char (optional) and zero can only one time
				var char = String.fromCharCode(e.charCode), 
      				target = e.target,
      				inputVal = target.value,
      				currVal = inputVal.substr(0, target.selectionStart) + char + inputVal.substr(target.selectionEnd); 
      			
      			var pattern =/^(-[1-9]*|-$)?((^0|[1-9])?|[1-9]\d*)$/ // /^(-)*[1-9]{1}\d{0,2}((\,\d{3})){0,2}$/g; // /^(-)*\d+((\,\d{3})){0,2}(\.\d{1,2})?$/g;
				if(!pattern.test(currVal.replace(/,/g,''))){
					e.preventDefault();
					return;
				}

      			currVal = Globalize.parseFloat(currVal);
				if(currVal > $(e.target).attr("max") || currVal < $(e.target).attr("min")){
					e.preventDefault();
					return;
				}				
			}, 


			rangePickerBlurHandler: function(e){
				var val = $(e.target).val();
				if(val == "-" || val == "" || val == "NaN"){
					$(e.target).val(0);
					return;
				}		
				$(e.target).val(Globalize.format(Globalize.parseFloat(val),"n0"));
			}, 

			disableDefaultGesture:function(e){
				// only if this is not the canvas and the toolbar
				// if ($(e.target)[0] !== this.canvas && 
				// 	$(e.target).closest(".action-item").length === 0 &&
				// 	$(e.target).closest("#appletContainer").length) {
				// 	// prevent the touch gesture
				// 	//e.preventDefault();	// currently making a lot of trouble 
				// }

				if ($(e.target)[0] == this.canvas) {
					e.preventDefault();
				}
			}
		}

		return NLStage ;
	});

define('text!js/NLSettings/NLSettingsTemplate.html',[],function () { return '<div id="SettingsSection">\r\n\t\r\n\t<h4>Number Line Settings</h4>\r\n\t<h5>Type</h5>\r\n\t<div id="NLTypeSection" class="section">\r\n\t\t<div class="radioBtn">\r\n\t\t\t<input id="wholeType" type="radio" class="NLType" name="NLType" value="whole" checked="checked">\r\n\t\t\t<label for="wholeType"> Wholes </label>\r\n\t\t</div>\r\n\t\t\t<div class="radioBtn">\r\n\t\t\t<input id="decimalType" type="radio" class="NLType" name="NLType" value="decimal">\r\n\t\t\t<label for="decimalType"> Decimals </label>\r\n\t\t</div>\r\n\t\t<div class="radioBtn">\r\n\t\t\t<input id="fractionType" type="radio" class="NLType" name="NLType" value="fraction">\r\n\t\t\t<label for="fractionType"> Fractions </label>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<h5>Tick Mark Values:</h5>\r\n\t<div id="tickMarkValuesSection" class="section">\r\n\t\t<div class="checkbox">\r\n\t\t\t<input id="showWholeTickMark" class="showWholeTickMark" type="checkbox">\r\n\t\t\t<label for="showWholeTickMark">Show WHOLES tick mark values</label>\r\n\t\t</div>\r\n\t\t<div class="checkbox">\r\n\t\t\t<input id="showDecimalTickMark" class="showDecimalTickMark" type="checkbox"> \r\n\t\t\t<label for="showDecimalTickMark">Show DECIMALS tick mark values </label>\r\n\t\t</div>\r\n\t\t<div class="checkbox">\r\n\t\t\t<input id="showFractionTickMark" class="showFractionTickMark" type="checkbox">\r\n\t\t\t<label for="showFractionTickMark">Show FRACTION tick mark values</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<hr>\r\n\r\n\t<div id="appletModeSection">\r\n\t\t<div id="modeForStudentSection" class="section">\r\n\t\t\t<h5> Number Line Mode for Student </h5>\r\n\r\n\t\t\t<div class="radioBtn">\r\n\t\t\t\t<input id="manualMode" type="radio" class="NLMode" name="NLMode" value="manual">\r\n\t\t\t\t<label for="manualMode">Manual</label>\r\n\t\t\t\t<div class="remark">No feedback</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class="radioBtn">\r\n\t\t\t\t<input id="automaticMode" type="radio" class="NLMode" name="NLMode" value="automatic">\r\n\t\t\t\t<label for="automaticMode">Automatic</label>\r\n\t\t\t\t<div class="remark">The students gets immediate feedback</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class="radioBtn">\r\n\t\t\t\t<input id="checkableMode" type="radio" class="NLMode" name="NLMode" value="checkable">\r\n\t\t\t\t<label for="checkableMode">Checkable</label>\r\n\t\t\t\t<div class="remark">The student has to use the "check" button</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\t<div id="properties">\r\n\t\t\t<div id="manualProperties" class="section">\r\n\t\t\t\t<span class="title">Properties</span><br>\r\n\t\t\t\t<div class="checkbox">\r\n\t\t\t\t\t<input id="hidePredefine" type="checkbox">\r\n\t\t\t\t\t<label for="hidePredefine">Hide the values of predefined points</label>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div id="checkableProperties" class="section">\r\n\t\t\t\t<h5 class="title">Task Type</h5>\r\n\t\t\t\t<div class="radioBtn">\r\n\t\t\t\t\t<input id="taskTypeStudentEnter" type="radio" class="taskType" name="taskType" value="studentEnter">\r\n\t\t\t\t\t<label for="taskTypeStudentEnter">The student should enter values for predefined points</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class="radioBtn">\r\n\t\t\t\t\t<input id="taskTypeStudentLocate" type="radio" class="taskType" name="taskType" value="studentLocate">\r\n\t\t\t\t\t<label for="taskTypeStudentLocate">The student should locate points according to the task</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id="checkValues">\r\n\t\t\t\t\tCheck the following values:\r\n\t\t\t\t\t<div id="correctValues"></div>\r\n\t\t\t\t\t<input type="button" class="addPointValue" value="+">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>';});

define('text!js/NLSettings/NLPointValueTemplate.html',[],function () { return '<div class="pointValue">\r\n\r\n\t<div class="deletePoint">\r\n\t\t<span class="General-Delete">\r\n\t\t</span>\r\n\t<div>\r\n</div>';});

define('text!js/libs/t2k/numberComponent/NumberComponentTemplate.html',[],function () { return '<div class="numberComponent  {{^showMinus}}{{noWhole}}{{/showMinus}} {{withFraction}}">\r\n\t<div class="wholeWrapper">\r\n\t\t<input type="text" class="whole" value="{{#showMinus}}-{{/showMinus}}{{whole}}">\r\n\t</div>\r\n\r\n\t<div class="fraction">\r\n\t\t<input type="text" class="numerator" value="{{numerator}}" >\r\n\t\t<hr noshade size="1px" class="fraction-line">\r\n\t\t<input type="text" class="denominator" value="{{denominator}}">\r\n\t</div>\r\n\r\n\t<div class="fractionTooltip" style="display:none">\r\n\t\t<span class="General-fraction"></span>\r\n\t</div>\r\n</div>';});

define( 'numberComponent/../NumberComponentView',[ 'jquery', 'lodash', 'mustache','backbone_super', 'events', 'text!js/libs/t2k/numberComponent/NumberComponentTemplate.html'],
	function ( $, _, Mustache, Backbone, events, template) {

		var NumberComponentView = Backbone.View.extend({

			initialize:function(options){
				this.model = options.model;
				this.isTouch = this.model.isTouch;
				this.mixedNumber = options.mixedNumber;
				this.supportFractions = options.supportFractions;
				this.$container = options.$container;

				this.minWidth = this.$container.width();
				this.id = this.$container.attr("id") || options.index;
				this.keyPressCallback = options.keyPressCallback || null;
				this.saveDataCallback = options.saveDataCallback;
				this.render();
				this.registerEvents();
				this.setNumber(this.mixedNumber); // in order to fix the globalize format
			},

			render:function(){
				var numberComponentData = {},
				wholeWidth, fractionWidth, totalWidth;

				numberComponentData = _.extend(numberComponentData, this.mixedNumber);

				// calculate sizes
				wholeWidth = String(this.mixedNumber.whole).length || 1;
				if (this.mixedNumber.negative && this.mixedNumber.whole == ""){
					numberComponentData = _.extend(numberComponentData, {showMinus: true});
					wholeWidth = 1;
				}
				fractionWidth = Math.max(   String(this.mixedNumber.numerator).length,
					String(this.mixedNumber.denominator).length) || 1;
				totalWidth = (wholeWidth + fractionWidth) * 10;

				numberComponentData = _.extend(numberComponentData, {   id: "numComp_" + this.mixedNumber.whole + "_" + this.mixedNumber.numerator + "_" + this.mixedNumber.denominator,
					totalWidth: totalWidth,
					wholeWidth: 3, // fractionWidth,
					fractionWidth: 4});// wholeWidth});

				numberComponent = _.extend(numberComponentData, {noWhole:this.mixedNumber.whole === "" && this.$container.hasClass("readonly") ? "noWhole" : "",
					withFraction:this.mixedNumber.numerator !== "" ? "withFraction" : ""});

				this.$container.prepend(Mustache.to_html(template, numberComponentData));
				this.$el = $(".numberComponent", this.$container);
				this.fixWidth();

				// disable input fields incase the component is for readonly
				if (this.$container.hasClass("readonly")) {
					$("input", this.$container).attr("disabled", "disabled");
				}
			},

			registerEvents:function(){
				_.bindAll(this);
				if (!this.isTouch) { // PC

					$("input", this.$el).on("click", this.editMe);
					this.$el.delegate(".fractionTooltip", "click", this.enableFraction);

				}else{ // TABLET

					$("input", this.$el).on("touchend", this.editMe);
					this.$el.delegate(".fractionTooltip", "touchend", this.enableFraction);
				}
				
				$(this.$el).on("focusout", this.checkFocusout);
				$("input", this.$el).on("keypress", this.keyPressHandler);
				$("input", this.$el).on("keyup", this.fixWidth);
			},

			editMe:function(e){		
				if (this.supportFractions && !this.$container.hasClass("readonly")) {
					this.showFractionTooltip(e);
				}
					// alwasy show whole input in edit mode
					this.$el.removeClass("noWhole");
				},

				showFractionTooltip:function(e){
					if ($(e.target).parents(".fractionTooltip").length == 0) {
						$('.fractionTooltip', this.$el).fadeIn(300);
					// $(document).on("click." + this.id,  {numberComponent:this.$el}, this.hideFractionTooltip);
				}
			},

			hideFractionTooltip:function(e){
				//if ($(e.target).closest(".numberComponent")[0] !== e.data.numberComponent[0]) {
				// if ($(e.target).closest(".numberComponent")[0] !== this.$el[0]) {
					
					// TODO: fix the off thing, since it's not really working
					// $(document).off("click." + this.id, this.hideFractionTooltip);
					$('.fractionTooltip', this.$el).fadeOut(300);
				// }
			},

			enableFraction:function(){
				console.log("enable fraction");
				if (this.$el.hasClass("withFraction")) {
					$(".numerator", this.$el).val(""),
					$(".denominator", this.$el).val("");
					this.$el.removeClass("withFraction");
					$(".whole", this.$el).focus();
				}else{
					this.$el.addClass("withFraction");
					$(".numerator", this.$el).focus();
				}

				this.fixWidth();
			},

			checkFocusout:function(e){
				setTimeout(_.bind(function(){
					if (this.$el.find(":focus").length == 0 && 
						!this.$el.find(":active").hasClass("fractionTooltip")) {
						this.saveNumberComponentData(e);
					this.hideFractionTooltip();
				}else{
					console.log("dont save yet");
				}

			}, this), 50)
			},

			saveNumberComponentData:function(e){

				console.log("save number component");

				var $numberComponent = this.$el;
				var whole = $(".whole", $numberComponent).val(),
				numerator = $(".numerator", $numberComponent).val(),
				denominator = $(".denominator", $numberComponent).val(),
				negative = false;
				// in case the fraction is not valid, remove it and reset fraction values
				if (numerator == "" || Number(numerator) === 0 || denominator == "" || Number(denominator) == 0) {
					$(".numerator", $numberComponent).val(numerator = "");
					$(".denominator", $numberComponent).val(denominator = "");
					this.$el.removeClass("withFraction noWhole");
					// no reason to have only minus with no number
					if (whole=="-") {
						$(".whole", $numberComponent).val(whole = "");
					}

				// incase this is an improper fraction
				}else if (Number(numerator) >= Number(denominator) && numerator !== "" && !isNaN(whole)){
						var wholesToAdd = Math.floor(numerator / denominator),
						reminder = numerator % denominator;

					if (reminder === 0) {
						$(".numerator", $numberComponent).val(numerator = "");
						$(".denominator", $numberComponent).val(denominator = "");
						this.$el.removeClass("withFraction");
					}else{
						$(".numerator", $numberComponent).val(numerator = reminder);
					}

					// handle minus sign
					if (whole == "-") {
						whole = -Number(wholesToAdd);
					}else{
						// add the wholes to whole input
						//whole = Number(whole) + Number(wholesToAdd);
						whole = isNaN(whole) ? "" : Number(whole) + Number(wholesToAdd);
					}
						$(".whole", $numberComponent).val(whole);
				}

				// in case the whole is not a number but a minus sign
				if (whole == "-") {
					whole = "";
					negative = true;
				// in case the whole is empty
			}else if (whole == "" && this.$el.hasClass("withFraction")){
				this.$el.addClass("noWhole");
				// in case the whole is a number					
			} else {
				if (!isNaN(Globalize.parseFloat(String(whole)))){
					whole = Globalize.parseFloat(String(whole));
					negative = whole < 0;
				}
			}

			if (numerator != "")
				numerator = Globalize.parseFloat(String(numerator));

			if (denominator != "")
				denominator = Globalize.parseFloat(String(denominator));

			var newMixedNumber = {  whole: whole,
				numerator: numerator,
				denominator: denominator,
				negative : negative };
				
				this.setNumber(newMixedNumber);
				// save the new number
				this.saveDataCallback(this.id, newMixedNumber);
				this.fixWidth();
			},

			updateId:function(id){
				this.id = id;
			},

			setNumber:function(number){
				var numberPrecision = "n0";
				// calculate the number precision
				if (String(number.whole).indexOf(".") != -1) {
					numberPrecision = "n" + String(number.whole).substring(String(number.whole).indexOf(".")+1).length;
				}

				this.mixedNumber = number;
				if (number.whole == "" && number.negative) {
					$(".whole", this.$el).val("-");
				}else{
					$(".whole", this.$el).val(isNaN(number.whole) ? number.whole : Globalize.format(number.whole, numberPrecision));
				}
				
				$(".numerator", this.$el).val(number.numerator);
				$(".denominator", this.$el).val(number.denominator);
				// if we got a fraction 
				if (number.numerator != "") {
					this.$el.addClass("withFraction");
				}else{
					this.$el.removeClass("withFraction");
				}

				this.fixWidth();
			},

			keyPressHandler:function(e){
				if (this.keyPressCallback) {
					this.keyPressCallback(e);
				}else{
					var validCharacters;
					// if this is the whole input
					if ($(e.target).hasClass("whole")) {
						validCharacters = "0123456789-,";
						if (!this.supportFractions)
							validCharacters += ".";
					// if this is the fraction input
				}else{
					validCharacters = "0123456789";
				}
				
				if (validCharacters.indexOf(String.fromCharCode(e.charCode)) == -1){
					e.preventDefault();
					return;
				}
			}
		},

		fixWidth:function(e){

			var backspaceCode = 8;
					minWidth = this.minWidth, // 70, 
					maxWidth = 150,
					currentWidth = this.$container.width(),
					lengthTreshold = 4,
					widthForChar = 12,
					widthForFraction = 25,
					widthForNegative = 7,
					numberLength = 0;
					numberLength += $(".whole", this.$el).val().length;

					this.$container.css('width', _.bind(function(){
						var newWidth = numberLength * widthForChar + (this.$el.hasClass("withFraction") ? widthForFraction : 0) + (this.mixedNumber.negative ? widthForNegative : 0);

						if (newWidth < minWidth) {
							return minWidth;
						}else if (newWidth > maxWidth){
							return maxWidth;
						}else{
							return newWidth;
						}
					}, this));
				}
			});

return NumberComponentView;

});

define( 'numberComponent',[ 'jquery', 'lodash', 'mustache', 'events', 'numberComponent/../NumberComponentView'],
	function ( $, _, Mustache, events, numberComponentView) {

		// function NumberComponent(model, $container, index, mixedNumber, saveDataCallback, keyPressCallback) {
		function NumberComponent(options) {			
			//this.$container = $container;
			//this.model = model;
			this.view = new numberComponentView({model:options.model, 
												$container:options.container, 
												index:options.index, 
												mixedNumber:options.mixedNumber,
												supportFractions:options.supportFractions,
												keyPressCallback:options.keyPressCallback,
												saveDataCallback:options.saveDataCallback});
		}

		NumberComponent.prototype = {

			render:function(){
				this.view.render();
			},

			updateId:function(id){
				this.view.updateId(id);
			},

			setNumber:function(number){
				this.view.setNumber(number);
			}

		}

		return NumberComponent ;
	});

define( 'js/NLSettings/NLSettings',[ 'jquery', 'lodash', 'mustache', 'events', 'globals', 'mathUtils', 
	'js/libs/t2k/Dialog/Dialog',
	'text!js/NLSettings/NLSettingsTemplate.html',
	'text!js/NLSettings/NLPointValueTemplate.html',
	'numberComponent'],
	function ( $, _, Mustache, events, globals, mathUtils, Dialog, template, NLPointValueTemplate, NumberComponent) {

		function NLSettings(model) {
			this.$container = $("#settingsContent");
			this.model = model;
			this.numberComponents = [];
			this.render();

			this.registerEvents();
			this.init();
		}

		NLSettings.prototype = {

			render:function(){
				var SettingsHtml = Mustache.to_html(template, this.model), item;
				this.$container.append(SettingsHtml);

				this.$correctValues = $("#correctValues", this.$container);
				this.$correctValues.empty(); // recreate correct values GUI/Data
				_.each(this.model.get("correctValues"), function(item, index){
					this.addPointValue(null, item);
				}, this)

				if (this.$correctValues.length == 1)
					$(".pointDelete").addClass("disable").removeClass("enable");
				else
					$(".pointDelete").addClass("enable").removeClass("disable");


				return this;
			},

			registerEvents:function(){
				_.bindAll(this);
				$("#settingsContent .NLType").on("click", this.openChangeNLTypeDialog);
				$("#settingsContent #showWholeTickMark").on("click", this.showWholeTickMark);
				$("#settingsContent #showDecimalTickMark").on("click", this.showDecimalTickMark);
				$("#settingsContent #showFractionTickMark").on("click", this.showFractionTickMark);
				$("#settingsContent .NLMode").on("click", this.changeNLMode);
				$("#settingsContent #hidePredefine").on("click", this.hidePredefine);
				$("#settingsContent .taskType").on("click", this.openChangeTaskTypeDialog);
				this.$container.delegate(".deletePoint", "click", this.deletePointValue);
				this.$container.delegate(".addPointValue", "click", this.addPointValue);

				events.register("saveNumber", this.updatePointValue);
				events.register("renderSettings", this.init);
			},

			init: function(){
				// init NLType
				$(".NLType[value='"+this.model.get("NLType")+"']").prop("checked", true);
				//update setting options by NLType
				switch (this.model.get("NLType")){
					case globals.WHOLE:
					$("#showDecimalTickMark").parent().toggle(false);
					$("#showFractionTickMark").parent().toggle(false);
					break;
					case globals.DECIMAL:
					$("#showDecimalTickMark").parent().toggle(true);
					$("#showFractionTickMark").parent().toggle(false);
					break;
					case globals.FRACTION:
					$("#showDecimalTickMark").parent().toggle(false);
					$("#showFractionTickMark").parent().toggle(true);
					break;
				}

				// init NLMode
				$(".NLMode[value='"+this.model.get("NLMode")+"']").prop("checked", true);
				//update setting options by NLMode
				switch (this.model.get("NLMode")){
					case globals.MANUAL:
					$("#manualProperties").toggle(true);
					$("#checkableProperties").toggle(false);
					break;
					case globals.AUTOMATIC:
					$("#manualProperties").toggle(false);
					$("#checkableProperties").toggle(false);
					break;
					case globals.CHECKABLE:
					$("#manualProperties").toggle(false);
					$("#checkableProperties").toggle(true);
					break;
				}

				$("#settingsContent .showWholeTickMark").prop('checked', this.model.get("showWholeTickMark"));
				$("#settingsContent .showDecimalTickMark").prop('checked', this.model.get("showDecimalTickMark"));
				$("#settingsContent .showFractionTickMark").prop('checked', this.model.get("showFractionTickMark"));
				$("#settingsContent #hidePredefine").prop('checked', this.model.get("hidePredefineTickMarkValue"));

				// init taskType
				$(".taskType[value='"+this.model.get("taskType")+"']").prop("checked", true);
				//update setting options by taskType
				switch(this.model.get("taskType")){
					case globals.STUDENT_ENTER:
					$("#checkValues").toggle(false);
					break;
					case globals.STUDENT_LOCATE:
					$("#checkValues").toggle(true);
					break;
				}

				if (this.model.get("correctValues").length == 0){
					this.$correctValues.empty(); // clear correct values GUI/Data
					this.numberComponents = [];
				}
			},

			changeNLType: function(){
				this.model.resetData(); // empty all points data before changing NLType
				var newType = this.NLNewType, currentZoomInLimit, currentZoomOutLimit, currentScrollAbsLimit, fractionDenominator, previousFrom, previousTo;
				switch (newType){
					case globals.WHOLE:
					currentZoomInLimit = globals.WHOLE_ZOOM_IN_LIMIT;
					currentZoomOutLimit = globals.WHOLE_ZOOM_OUT_LIMIT;
					currentScrollAbsLimit = globals.WHOLE_SCROLL_ABS_LIMIT;
					previousFrom = globals.WHOLE_FROM;
					previousTo = globals.WHOLE_TO;
					fractionDenominator = 1;
					break;
					case globals.DECIMAL:
					currentZoomInLimit = globals.DECIMAL_ZOOM_IN_LIMIT_1;
					currentZoomOutLimit = globals.DECIMAL_ZOOM_OUT_LIMIT;
					currentScrollAbsLimit = globals.DECIMAL_SCROLL_ABS_LIMIT;
					previousFrom = globals.DECIMAL_FROM;
					previousTo = globals.DECIMAL_TO;
					fractionDenominator = 1;
					break;
					case globals.FRACTION:
					currentZoomInLimit = globals.FRACTION_ZOOM_IN_LIMIT;
					currentZoomOutLimit = globals.FRACTION_ZOOM_OUT_LIMIT;
					currentScrollAbsLimit = globals.FRACTION_SCROLL_ABS_LIMIT;
					previousFrom = globals.FRACTION_FROM;
					previousTo = globals.FRACTION_TO;
					fractionDenominator = 3;
					break;
				}
				this.model.set("currentZoomInLimit", currentZoomInLimit);
				this.model.set("currentZoomOutLimit", currentZoomOutLimit);
				this.model.set("currentScrollAbsLimit", currentScrollAbsLimit);
				this.model.set("fractionDenominator", fractionDenominator);
				this.model.set("previousFrom", previousFrom);
				this.model.set("previousTo", previousTo);

				this.model.set("NLType", newType); // possible values - whole/decimal/fraction
				this.init();
				if (String(this.model.get("axisNumbers")) != String(this.model.get("defaultAxisNumbers")))
					this.model.setDefaults();
				else {
					this.model.setDefaults();
					events.fire("render");
				}
				// count points again
				events.fire("countPoints");
				events.fire("clearFlags");
				events.fire("resetBoundaries");
			},

			changeNLMode: function(e){
				var newMode = e.currentTarget.value;
				this.model.set("NLMode", newMode);
				this.init();
			},

			showWholeTickMark: function(e){
				var val = $(e.target).is(':checked');
				this.model.set("showWholeTickMark", val);
				events.fire("render");
			},

			showDecimalTickMark: function(e){
				var val = $(e.target).is(':checked');
				this.model.set("showDecimalTickMark", val);
				events.fire("render");
			},

			showFractionTickMark: function(e){
				var val = $(e.target).is(':checked');
				this.model.set("showFractionTickMark", val);
				events.fire("render");
			},

			hidePredefine: function(e){
				var val = $(e.target).is(':checked');
				this.model.set("hidePredefineTickMarkValue", val);
			},

			openChangeTaskTypeDialog:function(e){
				var data = {
					"device" : !this.model.get("isTouch")? "pc":"tablet",
					"icon" : "General-warning",
					"title": "changeTaskTypeConfirmation",
					"text" : "changeTaskTypeQuestion",
					"icon" : "General-warning",
					"buttons" : {
						okText : 'change',
						cancelText: 'cancel'
					}
				};

				this.NLNewTaskType = e.currentTarget.value;
				var changeDialog = new Dialog();
				changeDialog.create(data, _.bind(this.changeTaskTypeDialogResponse, this));
			},

			changeTaskTypeDialogResponse:function(response){
				if (response == 'ok') {
					this.changeTaskType();
				} else {
					$(".taskType[value='"+this.model.get("taskType")+"']").prop("checked", true);
					this.init();
				}
			},

			changeTaskType: function(){
				this.model.resetData(); // empty all points data before changing taskType
				this.model.set("taskType", this.NLNewTaskType);
				this.init();
				events.fire("render");
				events.fire("countPoints");
				events.fire("clearFlags");
				events.fire("resetBoundaries");
			},

			openChangeNLTypeDialog:function(e){
				var data = {
					"device" : !this.model.get("isTouch")? "pc":"tablet",
					"title": "changeNLTypeConfirmation",
					"text" : "changeNLTypeQuestion",
					"icon" : "General-warning",
					"buttons" : {
						okText : 'change',
						cancelText: 'cancel'
					}
				};

				this.NLNewType = e.currentTarget.value;
				var changeDialog = new Dialog();
				changeDialog.create(data, _.bind(this.changeDialogResponse, this));
			},

			changeDialogResponse:function(response){
				if (response == 'ok') {
					this.changeNLType();
				} else {
					$(".NLType[value='"+this.model.get("NLType")+"']").prop("checked", true);
					this.init();
				}
			},

			deletePointValue: function(e){  // TODO
				var pointValue = $(e.target).closest(".pointValue"),
				index = pointValue.index();
				pointValue.remove();
				this.model.get("correctValues").splice(index,1);
				this.numberComponents.splice(index,1);
				
				_.each(this.numberComponents, function(numberComponent, index){
					numberComponent.updateId(index);
				});
			},

			addPointValue: function(e, number){
				// create empty number
				var number = number;
				if (!number) {
					number = {	whole:"",
					numerator: "",
					denominator: "",
					negative: false};
					var index = this.model.get("correctValues").push(number);
				}

				// render the point value 
				var pointValueHtml = Mustache.to_html(NLPointValueTemplate);
				this.$correctValues.append(pointValueHtml);
				var $pointValue = $(".pointValue:last");
				this.numberComponents.push(new NumberComponent({model:this.model, 
					container:$pointValue , 
					index:$pointValue.index(), 
					mixedNumber:number,
					supportFractions: this.model.isFraction(),
					saveDataCallback:_.bind(this.updatePointValue, this),
					keyPressCallback:_.bind(this.keyPressHandler, this)}));

			},

			updatePointValue: function(index, mixedNumber){

				var correctValues = this.model.get("correctValues");
				var alreadyExist = _.some(correctValues, function(value, valueIndex){
					if (valueIndex == index) return false;
					return mathUtils.areEquals(value, mixedNumber);
				});

				if (!alreadyExist) {
					this.model.get("correctValues")[index] = mixedNumber;
					// remove warning - in case there was one
					this.numberComponents[index].view.$container.removeClass("warning");
				}else{
					// clear the number - set empty one
					this.numberComponents[index].setNumber(mathUtils.generateEmptyNumber());
					this.model.get("correctValues")[index] = mathUtils.generateEmptyNumber();
					// add warning
					this.numberComponents[index].view.$container.addClass("warning");
				}
			},

			keyPressHandler:function(e){

				// first, validate the new char that was entered
				var valid = false,
				validCharacters = "0123456789",
				fractionLength = 2,
				newChar = String.fromCharCode(e.keyCode),
				pointIndex = e.target.value.indexOf(".") != -1 ? e.target.value.indexOf(".") : e.target.value.length,
				hasPoint = pointIndex != -1,
				inputValue, 
				newValue;

				// if the value is not a number
				if (isNaN(Globalize.parseFloat(e.target.value))) {
					inputValue = e.target.value;
				}else{
					inputValue = String(Globalize.parseFloat(e.target.value.substr(0, pointIndex)));
					// if there is a point at the end of the number, dont forget to inlcude it, coz the globalize removes it
					if (hasPoint) {
						inputValue += e.target.value.substr(pointIndex);
					}
				}
				// calculate the new value including the new char entered
				newValue = inputValue.substr(0, e.target.selectionStart) + newChar + inputValue.substr(e.target.selectionEnd)

				if ($(e.target).hasClass("whole")) {
					validCharacters = "0123456789-,";
					if (this.model.isDecimal() || (this.model.get("NLMode") == globals.MANUAL))
						validCharacters += "."

					if (this.model.get("NLMode") == globals.MANUAL) {
						// A-Z, a-z
						if((e.charCode >= 65 && e.charCode <= 90) || (e.charCode >= 97 && e.charCode <= 122) ||  (validCharacters.indexOf(newChar) != -1)){
							valid = true;
						}
					}else if (validCharacters.indexOf(newChar) != -1){
						valid = true;
					}	
				}else if (validCharacters.indexOf(newChar) != -1){
					valid = true;
					if(($(e.target).hasClass("numerator") || $(e.target).hasClass("denominator")) && $(e.target).val().trim().length >= fractionLength){
						valid = false;
					}
				}

				// if the input is valid so far, keep checking
				if (valid) {

					if (this.model.get("NLMode") == globals.MANUAL) {
						// allow any random string of 11 chars length and less
						if (newValue.length > 11) {
							valid = false;
						}

					}else if (this.model.get("NLMode") == globals.CHECKABLE) {
						// check the actual number, that it's in the appropriate range limits 
						var minLimit, maxLimit, reminderLength = 0, reminderLimit = 3;

						if (!isNaN(newValue) || newValue == "-") {

							if (this.model.isWhole()) {
								minLimit = -globals.WHOLE_SCROLL_ABS_LIMIT;
								maxLimit = globals.WHOLE_SCROLL_ABS_LIMIT;

							}else if (this.model.isDecimal()) {
								var pointIndex = newValue.indexOf(".");

								if (pointIndex != -1) {
									reminderLength = newValue.substr(pointIndex + 1).length;
								}
								minLimit = -globals.DECIMAL_SCROLL_ABS_LIMIT;
								maxLimit = globals.DECIMAL_SCROLL_ABS_LIMIT;


							}else if (this.model.isFraction()) {
								minLimit = -globals.FRACTION_SCROLL_ABS_LIMIT;
								maxLimit = globals.FRACTION_SCROLL_ABS_LIMIT;
							}

							// check if value in range
							if (newValue != "-") {
								if (!(newValue >= minLimit && newValue <= maxLimit) || !(reminderLength <= reminderLimit)){
									valid = false;
								}
							}
						}else{
							valid = false;
						}
					}
				}

				if (!valid) {
					e.preventDefault();
					return;
				}
			}

		}

		return NLSettings ;
	});

define('text!js/NLLabel/NLLabelTemplate.html',[],function () { return '<div id="{{id}}" class="label {{#numerator}}withFraction{{/numerator}} {{#selected}}focused{{/selected}}\r\n\t\t{{#showCheckMarks}}\r\n\t\t\t{{#correct}}correct{{/correct}}{{^correct}}wrong{{/correct}} \r\n\t\t{{/showCheckMarks}} \r\n\t\t{{#readonly}}readonly{{/readonly}}\r\n\t\t{{#revealedAnswer}}revealed{{/revealedAnswer}}"  onpaste="return false;"\r\n\t\tstyle="left:{{x}}px; width:{{totalWidth}}px; border-color:{{color}}; {{#readonly}}background:{{color}}{{/readonly}} ">\r\n</div>';});

define( 'js/NLLabel/NLLabelView',[ 'jquery', 'lodash', 'mustache','backbone_super', 'globals', 
	'text!js/NLLabel/NLLabelTemplate.html', 
	'numberComponent'],
	function ( $, _, Mustache, Backbone, globals, template, NumberComponent) {

		var NLLabelView = Backbone.View.extend({

			initialize:function(options){
				this.model = options.model;
				this.$container = options.$container;
				this.render();
				this.registerEvents();
			},

			render:function(animate){
				// start with clearing all labels
				if (animate) {
					if (this.$container.children().length > 0){
						this.hide(1);
					}
				}else{
					this.$container.empty(); // without animation
				}
				
				// should loop the data and add relevant labels
				_.each(this.model.get("axisNumbers"), function(tickNumber, tickIndex){
					var realPointNumber = globals.fixNumber(tickNumber/this.model.get("fractionDenominator"));
					if (this.model.hasPoint(realPointNumber) && !this.model.isDragged(realPointNumber)){
						this.addLabel(tickIndex, realPointNumber, animate == undefined ? true : animate);
					}

					// go over all nearby points and draw them
					var nearbyPoints = this.model.getNearbyPoints(realPointNumber);
					for(var i in nearbyPoints)
					{
						if(nearbyPoints.hasOwnProperty(i)){
							this.addLabel(tickIndex, i, animate == undefined ? true : animate);
						}
					}
				}, this)
			},

			registerEvents:function(){
				_.bindAll(this);
			},

			addLabel: function(tickIndex, pointNumber, animate){
				var cellSize = globals.getCellSize(this.model.getLength()),
				tickNumber = this.model.get("axisNumbers")[tickIndex],
				number = tickNumber / this.model.get("fractionDenominator"),
				offset = ((pointNumber || number) - number) * this.model.get("fractionDenominator") / this.model.getTicksGap() * cellSize,
				labelData = this.model.get("labelsData")[pointNumber],
				labelGUIData = {}, x,
				wholeWidth, fractionWidth, totalWidth,
				showCheckMarks, readonly,
				wholeAsStr, numberPrecision = "n0";

				labelGUIData = _.extend(labelGUIData, labelData);
				var isWholeOnly = ((String(labelData.whole).indexOf(".") == -1) || (this.model.get("NLMode") == globals.FRACTION));
				if (!isWholeOnly) {
					numberPrecision = "n" + String(pointNumber).substring(String(pointNumber).indexOf(".")+1).length ;
				}

				if (labelData.whole != "" && typeof(labelData.whole) === "string" && this.model.get("NLMode") != globals.MANUAL)
					labelData.whole = Number(labelData.whole);

				// only if the whole is a number, format it
				wholeAsStr = isNaN(labelData.whole) ? labelData.whole : Globalize.format(labelData.whole, numberPrecision);

				labelGUIData = _.extend(labelGUIData, {whole: wholeAsStr});

				// calculate sizes
				wholeWidth = String(wholeAsStr).length || 1;

				if (labelData.negative && labelData.whole === ""){
					labelGUIData = _.extend(labelGUIData, {showMinus: true});
					wholeWidth = 1;
				}

				fractionWidth = Math.max(String(labelData.numerator).length,
					String(labelData.denominator).length) || 1;


				totalWidth = (wholeWidth + fractionWidth) * 10;

				x = this.model.getXPosition(tickIndex) + offset - (globals.labelMinWidth/2);

				var checkState = this.model.get("checkState");
				// show check marks in case we're not in NOT_CHECK state
				showCheckMarks =    (checkState == globals.CHECKED) ||
				(checkState == globals.TRY_AGAIN && labelData.correct) ||
				(checkState == globals.SHOW_ANSWERS);
				readonly = (this.model.get("NLMode") == globals.AUTOMATIC) || 
				(checkState == globals.CHECKED) || 
				(checkState == globals.TRY_AGAIN && labelData.correct) ||
				(checkState == globals.SHOW_ANSWERS);

				labelGUIData = _.extend(labelGUIData, { x: x,
					id:pointNumber,
					totalWidth: totalWidth,
					wholeWidth: fractionWidth,
					fractionWidth: wholeWidth,
					readonly:readonly, 
					color:labelData.color,
					showCheckMarks:showCheckMarks});

				
				var	labelHtml = Mustache.to_html(template, labelGUIData);
				this.$container.append(labelHtml);
				var $label = $(".label:last");
				new NumberComponent({model:this.model, 
					container:$label , 
					index:$label.index(), 
					mixedNumber:labelGUIData,
					supportFractions: this.model.isFraction(),
					saveDataCallback:_.bind(this.saveLabelData, this),
					keyPressCallback:_.bind(this.keyPressHandler, this)});

				if (animate) {
					$label.addClass("animated fadeInUp");	
					setTimeout(function(){$label.removeClass("animated fadeInUp");}, 400);
				}
			},

			hide: function(direction){
				var $labels = $(".label").addClass((direction == 1) ? "fadeOutRight" : "fadeOutLeft");
				$labels.remove();
			},

			saveLabelData:function(id, mixedNumber){
				
				this.model.get("labelsData")[id].whole = mixedNumber.whole;
				this.model.get("labelsData")[id].numerator = mixedNumber.numerator;
				this.model.get("labelsData")[id].denominator = mixedNumber.denominator;
				this.model.get("labelsData")[id].negative = mixedNumber.negative;

			},

			keyPressHandler:function(e){

				// first, validate the new char that was entered
				var valid = false,
				validCharacters = "0123456789",
				fractionLength = 2,
				newChar = String.fromCharCode(e.keyCode),
				pointIndex = e.target.value.indexOf(".") != -1 ? e.target.value.indexOf(".") : e.target.value.length,
				hasPoint = pointIndex != -1,
				inputValue, 
				newValue;

				// if the value is not a number
				if (isNaN(Globalize.parseFloat(e.target.value))) {
					inputValue = e.target.value;
				}else{
					inputValue = String(Globalize.parseFloat(e.target.value.substr(0, pointIndex)));
					// if there is a point at the end of the number, dont forget to inlcude it, coz the globalize removes it
					if (hasPoint) {
						inputValue += e.target.value.substr(pointIndex);
					}
				}
				// calculate the new value including the new char entered
				newValue = inputValue.substr(0, e.target.selectionStart) + newChar + inputValue.substr(e.target.selectionEnd)

				if ($(e.target).hasClass("whole")) {
					validCharacters = "0123456789-,";
					if (this.model.isDecimal() || (this.model.get("NLMode") == globals.MANUAL))
						validCharacters += "."

					if (this.model.get("NLMode") == globals.MANUAL) {
						// A-Z, a-z
						if((e.charCode >= 65 && e.charCode <= 90) || (e.charCode >= 97 && e.charCode <= 122) ||  (validCharacters.indexOf(newChar) != -1)){
							valid = true;
						}
					}else if (validCharacters.indexOf(newChar) != -1){
						valid = true;
					}	
				}else if (validCharacters.indexOf(newChar) != -1){
					valid = true;
					if(($(e.target).hasClass("numerator") || $(e.target).hasClass("denominator")) && $(e.target).val().trim().length >= fractionLength){
						valid = false;
					}
				}

				// if the input is valid so far, keep checking
				if (valid) {

					if (this.model.get("NLMode") == globals.MANUAL) {
						// allow any random string of 11 chars length and less
						if (newValue.length > 11) {
							valid = false;
						}

					}else if (this.model.get("NLMode") == globals.CHECKABLE) {
						// check the actual number, that it's in the appropriate range limits 
						var minLimit, maxLimit, reminderLength = 0, reminderLimit = 3;

						if (!isNaN(newValue) || newValue == "-") {

							if (this.model.isWhole()) {
								minLimit = -globals.WHOLE_SCROLL_ABS_LIMIT;
								maxLimit = globals.WHOLE_SCROLL_ABS_LIMIT;

							}else if (this.model.isDecimal()) {
								var pointIndex = newValue.indexOf(".");

								if (pointIndex != -1) {
									reminderLength = newValue.substr(pointIndex + 1).length;
								}
								minLimit = -globals.DECIMAL_SCROLL_ABS_LIMIT;
								maxLimit = globals.DECIMAL_SCROLL_ABS_LIMIT;


							}else if (this.model.isFraction()) {
								minLimit = -globals.FRACTION_SCROLL_ABS_LIMIT;
								maxLimit = globals.FRACTION_SCROLL_ABS_LIMIT;
							}

							// check if value in range
							if (newValue != "-") {
								if (!(newValue >= minLimit && newValue <= maxLimit) || !(reminderLength <= reminderLimit)){
									valid = false;
								}
							}
						}else{
							valid = false;
						}
					}
				}

				if (!valid) {
					e.preventDefault();
					return;
				}
			}

	});

return NLLabelView;

});

define( 'js/NLLabel/NLLabel',[ 'jquery', 'lodash', 'mustache', 'events', 'globals', 'js/NLLabel/NLLabelView'],
	function ( $, _, Mustache, events, globals, LabelView) {

		function NLLabel(model) {
			this.$container = $("#NLLabelsPH");
			this.model = model;
			this.view = new LabelView({model:this.model, $container:this.$container});

			this.registerEvents();
			this.render();
		}

		NLLabel.prototype = {

			render:function(animate){
				this.view.render(animate);
			},

			registerEvents:function(){
				_.bindAll(this);
				events.register("render", this.render);
				events.register("hideLabels", this.hide);
				events.register("showLabels", this.render);
				events.register("addLabel", this.addLabel);
				this.model.bind("change:checkState", this.render);
				this.model.bind("change:axisNumbers", this.render);

				this.model.bind("change:NLMode", this.resetLabels);

				this.$container.on("focus", "input", this.focusLabel);
			},

			hide: function(direction){
				this.view.hide(direction);
			},

			addLabel:function(tickIndex, number){
				this.view.addLabel(tickIndex, number, true);
			}, 

			resetLabels:function(){
				var resetByPoint = this.model.get("NLMode") == globals.AUTOMATIC;
				_.each(this.model.get("labels"), _.bind(function(number){

					this.model.resetLabel(number, resetByPoint);
				}, this));
				events.fire('render');
			},

			focusLabel:function(e){
				$(".label", this.$container).removeClass("focused");
				$(e.target).closest(".label").addClass("focused");
			}

		}

		return NLLabel ;
	});

 define( 'js/NLAxis/NLAxisView',[ 'jquery', 'lodash', 'mustache','backbone_super', 'globals'], 
	function ( $, _, Mustache, Backbone, globals) {

		var NLAxisView = Backbone.View.extend({

			initialize:function(options){
				this.model = options.model;
				this.canvas = options.canvas;
				this.context = this.canvas.getContext('2d');
				this.drawEveryOtherNumber = false;
				this.ticksGap = 1;
			},

			render:function(){
				// clear the canvas
				this.canvas.width = this.canvas.width;
				this.drawAxis();
				// In case numbers are too big - turn on the drawEveryOtherNumber mode
//				if (this.model.get("scrollingStep") >=  globals.tresholdStep) {
				var widthToCheck = Math.max(this.context.measureText(this.model.get("axisNumbers")[0]).width, this.context.measureText(this.model.get("axisNumbers")[1]).width);
				if (widthToCheck >=  globals.tresholdStep) {
					this.drawEveryOtherNumber = true;
				}else{
					this.drawEveryOtherNumber = false;
				}
				// draw all ticks
				_.each(this.model.get("axisNumbers"), _.bind(function(number, index){
					this.addTick(index, number);
				},this));

				return this;
			},

			drawAxis:function(){
				// draw axis-x
				this.context.beginPath();

				this.context.moveTo(0, globals.canvasHeight / 2);
				this.context.lineTo(globals.canvasWidth, globals.canvasHeight / 2);
				this.context.strokeStyle = globals.axisColor;
				this.context.lineWidth = globals.axisLineWidth;
				this.context.stroke();
			},

			addTick:function(tickIndex, tickNumber){
				var cellSize = globals.getCellSize(this.model.getLength()),
					tickSize,
					nextNum,
					x = this.model.getXPosition(tickIndex),
					y = globals.canvasHeight / 2,
					zoomRatio = globals.getNumberOfMinorTicks(this.model.getTicksGap(),
																this.model.get("NLType"),
																this.model.get("fractionDenominator"));

				// set the tick size according to Zoom mode and NLtype
				if (this.model.get("NLType") == globals.WHOLE) {
					tickSize = (tickNumber == 0) || (tickNumber % (this.model.getTicksGap() * zoomRatio) == 0) ?
								globals.majorTickSize : globals.mediumTickSize;
				}else if (this.model.get("NLType") == globals.DECIMAL){
					tickSize = (tickNumber == 0) || ((tickNumber / this.model.getTicksGap() % zoomRatio) == 0) ?
								globals.majorTickSize : globals.mediumTickSize;
				}else if (this.model.get("NLType") == globals.FRACTION){
					tickSize = (tickNumber == 0) || (tickNumber % zoomRatio == 0) ?
								globals.majorTickSize : globals.mediumTickSize;
				}

				// check if we're on draw evey other number mode - in case numbers are too big
				if (!(!this.drawEveryOtherNumber || (tickIndex % 2 == 0 || tickNumber == 0))) {
					tickNumber = "";
				};

				this.drawTick(x, y, tickSize, tickNumber);

				// Draw minor ticks
				if (this.model.get("scrollingStep") >
					 this.model.get("currentZoomInLimit") * (this.model.get("axisNumbers").length / 2)) {
					this.drawMinorTicks(cellSize, tickIndex);
				};

				// Draw dummy tick
				if (globals.currentStep > 0 && tickIndex == 0) {
					this.addDummyTick(x, y, tickNumber,cellSize, tickSize, -1);
				} else if (globals.currentStep < 0 && tickIndex == this.model.getLength() - 1){
					this.addDummyTick(x, y, tickNumber,cellSize, tickSize, 1);
				}

			},

			addDummyTick: function(x, y, tickNumber, cellSize, tickSize, direction){
//					var nextNum = globals.fixNumber(tickNumber + this.ticksGap * direction);
					var nextNum = globals.sumNumbers(tickNumber, this.ticksGap * direction);

					if (!(!this.drawEveryOtherNumber || (nextNum % 2 == 0 || nextNum == 0))) {
						nextNum = "";
					};

					this.drawTick(x + cellSize * direction, y, tickSize, nextNum, true);

			},

			drawTick: function(x, y, tickSize, number, isDummy){
				var lineWidth = number === 0 ? 4 : tickSize == globals.minorTickSize ? 1 : 2;
				this.context.beginPath();
				this.context.moveTo(x, y - tickSize/2);
				this.context.lineTo(x, y + tickSize/2);
				this.context.strokeStyle = globals.axisColor;
				this.context.fillStyle= globals.axisColor;

				this.context.lineWidth = lineWidth;
				this.context.stroke();

				var isNumberPreDefined = (!this.model.get("editMode") && this.model.get("initialData") && this.model.get("initialData").pointsData && this.model.get("initialData").pointsData[globals.fixNumber(number/this.model.get("fractionDenominator"))]) ? true : false,
					numberIsFractionOrDecimal = (String(number/this.model.get("fractionDenominator")).indexOf(".") > 0);

				var shouldDrawTickNumber = !isDummy && ((!numberIsFractionOrDecimal && this.model.get("showWholeTickMark")) ||
										(numberIsFractionOrDecimal &&
											((this.model.get("NLType") == globals.DECIMAL && this.model.get("showDecimalTickMark")) ||
											(this.model.get("NLType") == globals.FRACTION && this.model.get("showFractionTickMark")))));
				// if it is a predefine point and mark value should be hidden - force hide
				if (isNumberPreDefined &&
						((this.model.get("NLMode") == globals.MANUAL) && this.model.get("hidePredefineTickMarkValue") ||
							((this.model.get("NLMode") == globals.CHECKABLE) && (this.model.get("taskType") == globals.STUDENT_ENTER))))
					shouldDrawTickNumber = false;

				if (number === 0 || (shouldDrawTickNumber && number !== "") ) {
					// draw the tick number
					 this.drawTickNumber(number, x, y);
				}
			},

			drawMinorTicks:function(cellSize, tickIndex){
				var numberOfMinorTicks = globals.getNumberOfMinorTicks(this.model.getTicksGap(), this.model.get("NLType"), this.model.get("fractionDenominator"));
				var minorCellSize = cellSize / numberOfMinorTicks;
				var tickSize = globals.minorTickSize;

				this.context.strokeStyle = globals.axisColor;
				this.context.fillStyle= globals.axisColor;
				this.context.lineWidth = 2; //

				var x = globals.axisPadding + (cellSize * tickIndex);

				for (var i = 1; i <= numberOfMinorTicks; i++) {
					this.context.beginPath();
					this.context.moveTo(x + (i * minorCellSize),
							   globals.canvasHeight / 2 - tickSize / 2);
					this.context.lineTo(x + (i * minorCellSize),
								globals.canvasHeight / 2 + tickSize / 2);
					this.context.stroke();
				};

				// if this the the first tick,
				// we need to fill the start padding with minor ticks as well
				if (tickIndex == 0) {
					for (var i = -1; i > -numberOfMinorTicks; i--) {
						this.context.beginPath();
						this.context.moveTo(x + (i * minorCellSize),
								   globals.canvasHeight / 2 - tickSize / 2);
						this.context.lineTo(x + (i * minorCellSize),
									globals.canvasHeight / 2 + tickSize / 2);
						this.context.stroke();
					};
				};
			},

			drawTickNumber: function(number, x, y){
				var value = "",
					numerator = 0,
					wholeSpacing = 7,
					textPadding = 45,
					denominator = this.model.get("fractionDenominator");
				y += textPadding;

				this.context.font = globals.numberFont;
				this.context.textAlign = globals.numberAlign;
				this.context.strokeStyle = globals.axisColor;
				this.context.fillStyle= globals.axisColor;
				this.context.lineWidth = 2;

				if ((this.model.get("NLType") == globals.FRACTION) && (Math.abs(number % denominator) > 0)) { // complex number (whole + fraction)
					value =  parseInt(number/denominator); // calculating the whole of the fraction
					numerator = number % denominator;   // calculating the numerator
					if (value != 0) {
						// writing the whole
						this.context.font = globals.fractionWholeFont;
						this.context.textAlign = globals.fractionWholeAlign;
						this.context.textBaseline = 'middle';
						value =  Globalize.format(Number(value), "n0");
						this.context.fillText(value, x, y);
					} else if (numerator < 0){ // draw minus sign (cause we don't have a whole that will draw the sign
						this.context.moveTo(x - 10, y);
						this.context.lineTo(x - 3, y);
					} else {
						wholeSpacing = 0;
					}

					// writing the fraction
					this.context.font = globals.fractionFont;
					this.context.textAlign = globals.numberAlign;
					this.context.textBaseline = 'top';
					this.context.fillText(String(denominator), x + wholeSpacing, y);

					// draw the fraction line
					this.context.moveTo(x + wholeSpacing - 5, y);
					this.context.lineTo(x + wholeSpacing + 5, y);
					this.context.stroke();

					this.context.textBaseline = 'bottom';
					this.context.fillText(String(Math.abs(numerator)), x + wholeSpacing, y);
				} else {    // whole only OR not fraction (whole/decimal)
					this.context.font = globals.fractionWholeFont;
					this.context.textAlign = globals.numberAlign;
					this.context.textBaseline = 'middle';
					var isWholeOnly = (String(number).indexOf(".") == -1), numberPrecision = "n0";
					if (!isWholeOnly) {
						numberPrecision = "n" + String(number).substring(String(number).indexOf(".")+1).length ;
					}

					value =  Globalize.format(Number(number / denominator), numberPrecision);
					this.context.fillText(value, x, y);
				}
			}

		 });

		return NLAxisView;

	});

define( 'js/NLAxis/NLAxis',[ 'jquery', 'lodash', 'mustache', 'events', 'globals', 'js/NLAxis/NLAxisView'],
	function ( $, _, Mustache, events, globals, AxisView) {

		function NLAxis(model, canvas) {
			this.model = model;// new AxisModel();
			this.view = new AxisView({model:this.model, canvas:canvas});
			this.registerEvents();
			this.setViewMode = false;
			this.render();
		}

		NLAxis.prototype = {
			
			registerEvents:function(){
				_.bindAll(this);
				events.register("render", this.render);
				events.register("clearFlags", this.clearFlags);
				events.register("scrollForward", this.scrollForward);
				events.register("scrollBackward", this.scrollBackward);
				events.register("setView", this.setView);
				events.register("zoomIn", this.zoomIn);
				events.register("zoomOut", this.zoomOut);
				events.register("changeSlicing", this.changeSlicing);

				this.model.bind("change:axisPositions", this.shiftNumbers);
				this.model.bind("change:axisNumbers", this.render);
				this.model.bind("change:checkState", this.render);
			},

			render:function(){
				this.view.render();
			},

			clearFlags: function(){
				this.setViewMode = false;
			},

			shiftNumbers:function(){
				var cellSize = globals.getCellSize(this.model.getLength()),
					direction = globals.scrollDirection,
					step = globals.currentStep,
					tickGap = this.model.getTicksGap();

 				if (step * direction > globals.stepReminder && 
 						globals.fixNumber(step * direction % cellSize) < globals.stepReminder) {
 					_.each(this.model.get("axisNumbers"), _.bind(function(number, index){
 						this.model.get("axisNumbers")[index] = 
 							globals.subtractNumbers(this.model.get("axisNumbers")[index], tickGap * direction);
// 							globals.fixNumber(this.model.get("axisNumbers")[index] - tickGap * direction);

 					}, this));
 				}
 				this.render();
			},

			setView:function(from, to){
				var fractionDenominator = this.model.get("fractionDenominator");
				if (from === to) {
					// center the view
					var center = globals.fixNumber(from * fractionDenominator);
					if (this.model.get("NLType") != globals.DECIMAL){
						center = parseInt(center);
					}
					this.model.setDefaults(center, true);
					this.setViewMode = false;
					return;
				}

				// first, lets decide on the tick gap
				var rangeLength = Math.abs(Math.floor(to - from - 1)).toString().length - 1,
					ticksGap = Math.pow(10, rangeLength),
					newAxisNumbers = [];

				// round from and to
				from = Math.floor(from / ticksGap) * ticksGap * fractionDenominator;
				to = Math.ceil(to / ticksGap) * ticksGap * fractionDenominator;

				// from & to are always wholes so the minimum gap between them can be 1,
				// and when we are in decimal we wish to change the gap to 0.1
				if (this.model.get("NLType") == globals.DECIMAL && ticksGap == 1 && (to - from) <= 1){
					ticksGap /= 10;
				} else if (this.model.get("NLType") == globals.FRACTION && (to - from) > 10) {
					//recalculate the tickGap
					ticksGap *= fractionDenominator;
				}

				for (var i = from; i <= to; ) {
					newAxisNumbers.push(i);
					i = globals.sumNumbers(i, ticksGap);
				};

				this.calcScrollingStep(newAxisNumbers);
				// update positions
				var cellSize = globals.getCellSize(newAxisNumbers.length),
					positions = _.map(newAxisNumbers, function(number, index){
									return cellSize * index + globals.axisPadding;
								});

				this.model.set("axisPositions", positions);
				this.model.set("axisNumbers", newAxisNumbers);


				// turn on flag, for setViewMode, only if amount of tick numbers has changed
				this.setViewMode = (this.model.getLength() != this.model.get("defaultAxisNumbers").length);
			},

			calcScrollingStep:function(axisNumbers){

				var from = _.first(axisNumbers),
					to = axisNumbers[axisNumbers.length - 1],
					secondVal = axisNumbers[1];

//				var newScrollingStep = globals.fixNumber((to - from) / 2);
				var newScrollingStep = globals.subtractNumbers(to, from) / 2;
				// if we use integers, we need to floor the scrolling step size
//				if (Math.abs(globals.fixNumber(secondVal - to)) >= 1) {
				var checkNum = globals.subtractNumbers(secondVal, to);
				if (Math.abs(checkNum) >= 1) {
					newScrollingStep = Math.floor(newScrollingStep);
				}

				this.model.set("scrollingStep", newScrollingStep);
			},

			zoomIn:function(){
				if (!this.zoomInAllowed()) return;

				// in case we were in setViewMode, go back to default mode first.
				if (this.setViewMode) {
					var center = this.model.getCenter();
					this.model.setDefaults(center);
					this.setViewMode = false;
					return;
				}

				var zoomRatio = globals.getNumberOfMinorTicks(this.model.getTicksGap(), this.model.get("NLType"), this.model.get("fractionDenominator"));
				// calculate the new scrolling step
				var newScrollingStep = this.model.get("scrollingStep") / zoomRatio;
				this.model.set("scrollingStep", newScrollingStep);

				// save the previous center
				var previousCenter = this.model.getCenter(),
					nearestNewCenter = this.model.getNearestCenter(previousCenter),
					from = globals.subtractNumbers(nearestNewCenter, newScrollingStep), //nearestNewCenter - newScrollingStep,
					to = globals.sumNumbers(nearestNewCenter, newScrollingStep), //nearestNewCenter + newScrollingStep,
					newAxisNumbers = [];

				// calculate the new axis numbers
				for (var i = from; i <= to;) {
//					i = globals.fixNumber(i);
					newAxisNumbers.push(i);
					i = globals.sumNumbers(i, this.model.getTicksGap()/zoomRatio);
				};

				this.model.set("axisNumbers", newAxisNumbers);
				events.fire("showLabels");
			},

			zoomOut:function(){
				if (!this.zoomOutAllowed()) return;

				// in case we were in setViewMode, go back to default mode first.
				if (this.setViewMode) {
					var center = this.model.getCenter();
					this.model.setDefaults(center);
					this.setViewMode = false;
					return;
				}

				var zoomRatio = globals.getZoomRatio(this.model.getTicksGap(), this.model.get("NLType"), this.model.get("fractionDenominator"));
				// calculate the new scrolling step
				var newScrollingStep = this.model.get("scrollingStep") * zoomRatio;
				this.model.set("scrollingStep", newScrollingStep);

				// save the previous center
				var previousCenter = this.model.getCenter(),
					nearestNewCenter = this.model.getNearestCenter(previousCenter),
					from = globals.subtractNumbers(nearestNewCenter, newScrollingStep), //nearestNewCenter - newScrollingStep,
					to = globals.sumNumbers(nearestNewCenter, newScrollingStep), //nearestNewCenter + newScrollingStep,
					newAxisNumbers = [];

				// calculate the new axis numbers
				for (var i = from; i <= to;) {
//					i = globals.fixNumber(i);
					newAxisNumbers.push(i);
					i = globals.sumNumbers(i, this.model.getTicksGap()*zoomRatio);
				};

				this.model.set("axisNumbers", newAxisNumbers);
				events.fire("showLabels");
			},

			zoomInAllowed: function(){
				var zoomedNextStep = globals.fixNumber(this.model.getTicksGap() / globals.getNumberOfMinorTicks(this.model.getTicksGap(), this.model.get("NLType"), this.model.get("fractionDenominator")));
				return (zoomedNextStep >= this.model.get("currentZoomInLimit"));
			},

			zoomOutAllowed: function(){
				var zoomedNextStep = globals.fixNumber(this.model.getTicksGap() * globals.getNumberOfMinorTicks(this.model.getTicksGap(), this.model.get("NLType"), this.model.get("fractionDenominator")));
				return ((zoomedNextStep/this.model.get("fractionDenominator")) <= this.model.get("currentZoomOutLimit"));
			},

			changeSlicing:function(slicingValue){
				var newAxisNumbers = _.map(this.model.get("defaultAxisNumbers"), function(number){
					return globals.fixNumber(number * slicingValue);
				});
				this.calcScrollingStep(newAxisNumbers);
				this.model.set("axisNumbers", newAxisNumbers);
				this.setViewMode = false;
			}
		}

		return NLAxis ;
	});

 define( 'js/NLPoint/NLPointView',[ 'jquery', 'lodash', 'mustache','backbone_super', 'globals'], 
 	function ( $, _, Mustache, Backbone, globals) {

 		var NLPointView = Backbone.View.extend({

 			initialize:function(options){
 				this.model = options.model;
 				this.canvas = options.canvas;
 				this.context = this.canvas.getContext('2d');
 				this.draggingCanvas = $("#NLCanvasDragging")[0];
 			},

 			render:function(){

 				this.draggingCanvas.width = this.draggingCanvas.width;

 				// var fractionDenominator = this.model.get("fractionDenominator"),
 				// 	axisNumbers = this.model.get("axisNumbers"),
 				// 	firstTickNumber = globals.fixNumber(_.first(axisNumbers) / fractionDenominator),
 				// 	lastTickNumber = globals.fixNumber(_.last(axisNumbers) / fractionDenominator);

 				// // get all the points between the range of the first and last tick numbers
 				// var pointsInRange = _.filter(this.model.get("points"), function(pointNumber){
 				// 	return pointNumber <= lastTickNumber && pointNumber >= firstTickNumber;
 				// });

 				// _.each(pointsInRange, _.bind(function(pointNumber){
 				// 	var tickIndex = _.indexOf(_.map(axisNumbers, function(number){return globals.fixNumber(number / fractionDenominator)}), pointNumber),
 				// 		pointsData = this.model.get("pointsData");

 				// 		if (!this.model.isDragged(pointNumber)) {
	 			// 			this.addPoint(tickIndex, 
	 			// 							pointsData[pointNumber].selected,
	 			// 							pointsData[pointNumber].color,
	 			// 							pointsData[pointNumber].correct);
 				// 		}

 				// }, this));


 				_.each(this.model.get("axisNumbers"), _.bind(function(number, index){
					var realPointNumber = globals.fixNumber(number/this.model.get("fractionDenominator"));
 					if (this.model.hasPoint(realPointNumber) && !this.model.isDragged(realPointNumber)) {
 						this.addPoint(index, this.model.get("pointsData")[realPointNumber].selected,
 											 this.model.get("pointsData")[realPointNumber].color,
 											 this.model.get("pointsData")[realPointNumber].correct);
 					}

 					// go over all nearby points and draw them
 					var nearbyPoints = this.model.getNearbyPoints(realPointNumber);
 					for(var i in nearbyPoints)
 					{
	 					if(nearbyPoints.hasOwnProperty(i) && ! this.model.isDragged(i)){
	 						this.addPoint(index, this.model.get("pointsData")[i].selected, 
	 											 this.model.get("pointsData")[i].color,
	 											 this.model.get("pointsData")[i].correct,
	 											 i);
	 					}
	 				}

 				}, this));
 				
 				return this;
 			},

 			addPoint:function(tickIndex, selected, pointColor, correct, pointNumber){
 				var cellSize = globals.getCellSize(this.model.getLength()),
 					number =  globals.fixNumber(this.model.get("axisNumbers")[tickIndex] / this.model.get("fractionDenominator")),
					offset = ((pointNumber || number) - number) * this.model.get("fractionDenominator") / this.model.getTicksGap() * cellSize,
					position = {x:this.model.getXPosition(tickIndex) + offset,
 								y:globals.canvasHeight / 2},
 					checkState = this.model.get("checkState");

 				var showCheckMark = this.model.get("taskType") == globals.STUDENT_LOCATE && 
 									((checkState == globals.CHECKED) ||
 										(checkState == globals.TRY_AGAIN && correct) ||
 										(checkState == globals.SHOW_ANSWERS));
				// if we're after check mode - show check marks
				if (showCheckMark) {
					var revealed = this.model.get("pointsData")[pointNumber || number].revealedAnswer || false;
					this.drawCheckMark(position, correct, revealed);
				}
				
				this.drawPoint(position, selected, pointNumber ? true : false, pointColor || this.model.get("pointColor"));
 			},

 			drawPoint:function(position, selected, zoomed, pointColor, isDragged){		

 				var context = this.context;
 				if (isDragged) {
 					this.draggingCanvas.width = this.draggingCanvas.width;
 					context = this.draggingCanvas.getContext('2d');
 				}


 				context.beginPath();
 				context.arc(position.x,
 							position.y,
 							zoomed ? globals.pointSize : globals.pointSize, 
 							0, Math.PI*2, true);
 				// set the point style
 				context.globalAlpha = isDragged ? 0.5 : 1;
 				context.fillStyle = pointColor;
 				context.closePath();
 				context.fill();

 				// draw border - check if selected of not.
 				context.lineWidth = selected ? globals.selectedPointBorderWidth : globals.pointBorderWidth;
      			context.strokeStyle = selected ? globals.selectedPointBorderColor : globals.pointBorderColor;
      			context.stroke();
 			},

 			drawCheckMark:function(position, correct, revealed){
 				var checkMarkSize = 26,
 					checkMarkBGColor = "#E5E5E5",
 					checkMarkBorderColor = "#B7B7B7",
 					checkMarkRevealedAnswerBorderColor = "#000",
 					checkMarkTextColor = "#374A66",
 					checkMarkText = correct ? 'e007' : 'e008';

 				// draw rectangle
				this.context.beginPath();
				this.context.fillStyle = checkMarkBGColor;
				this.context.rect(	position.x - checkMarkSize / 2, 
									position.y + 3, 
									checkMarkSize, checkMarkSize);
				// draw border
				this.context.fill();
				this.context.lineWidth = 1;
      			this.context.strokeStyle = !revealed ? checkMarkBorderColor : checkMarkRevealedAnswerBorderColor;
      			this.context.stroke();

      			// draw text
  				this.context.font = "32px NumberLine";
      			this.context.textAlign = "center";
				this.context.textBaseline = 'middle';
      			this.context.fillStyle = checkMarkTextColor;
				this.context.fillText(String.fromCharCode(parseInt(checkMarkText, 16)), 
									position.x,
									position.y + checkMarkSize / 2 + 3);
 			}
 		});

 		return NLPointView;

 	});

define( 'js/NLPoint/NLPoint',[ 'jquery', 'lodash', 'mustache', 'events', 'globals', 'js/NLPoint/NLPointView'], 
	function ( $, _, Mustache, events, globals, PointView) {

		function NLPoint(model, canvas) {
			this.canvas = canvas;
			this.model = model;
			this.view = new PointView({model:this.model, canvas:canvas});

			this.registerEvents();
			this.render();
		}

		NLPoint.prototype = {

			render:function(){
				this.view.render();
			},

			registerEvents:function(){

				_.bindAll(this);
				
				events.register("render", this.render);
				events.register("addPoint", this.addPoint);
				events.register("deletePoint", this.deletePoint);
				events.register("tap", this.selectPoint);

				events.register("startDrag", this.startDrag);
				events.register("drag", this.drag);
				events.register("endDrag", this.endDrag);

				this.model.bind("change:axisNumbers", this.render);
				this.model.bind("change:axisPositions", this.render);
				this.model.bind("change:checkState", this.render);
			},

			addPoint:function(position, color){
				// calculate the number we need to attach to
				var tickIndex = this.model.getIndexByPosition(position.x);
				// only if there is not a point here, add one..
				if (!this.model.hasPointByIndex(tickIndex)) {
					var realNumber = globals.fixNumber(this.model.get("axisNumbers")[tickIndex]/this.model.get("fractionDenominator"));
					this.model.addPoint(realNumber, color);
					this.view.addPoint(tickIndex);
					events.fire("addLabel", tickIndex, realNumber, true);
					events.fire("countPoints");
				}
			},

			selectPoint:function(position){
				var pointNumber = this.detectPoint(position);
				if (pointNumber != undefined && (!this.model.isPredefinedPoint(pointNumber) || this.model.get("editMode") )) {
					this.model.selectPoint(pointNumber);
				}else{
					this.model.deselectAllPoints();	
				}
				events.fire('render', false); // render all layers
			},

			detectPoint:function(position, includeClosePoint){
				// check if there is a point where we tapped
				var pointNumber;
				var extraTouchArea = this.model.get("isTouch") ? 15 : 0;
				
				// check if pressed close enough at the axis-y
				if ((position.y < (globals.canvasHeight / 2) + globals.pointSize + extraTouchArea &&
					position.y > (globals.canvasHeight / 2) - globals.pointSize - extraTouchArea) || includeClosePoint) {

					var rangeRadius = includeClosePoint ? 
										globals.getCellSize(this.model.getLength()) / 2 : 
										globals.pointSize + extraTouchArea,
						tapPosition = _.find(this.model.get("axisPositions"), function(tickPosition){
							if (tickPosition - rangeRadius < position.x && 
								position.x < tickPosition + rangeRadius) {
								return tickPosition;
							}
						});

					// check if we pressed close enough at the axis-x
					if (tapPosition) {
						var tickIndex = _.indexOf(this.model.get("axisPositions"), tapPosition),
							tickNumber = this.model.get("axisNumbers")[tickIndex];
						if (this.model.hasPoint(globals.fixNumber(tickNumber/this.model.get("fractionDenominator")))) {
							return globals.fixNumber(tickNumber/this.model.get("fractionDenominator"));
						}						
					}
				}
				return undefined; // means we didn't detect any point 
			},

			// remove the selected point
			deletePoint:function(){
				var selectedPointNumber = this.model.getSelectedPointNumber();
				// can delete only if not predefined point
				if (!this.model.isPredefinedPoint(selectedPointNumber) || this.model.get("editMode")) {
					this.model.deletePoint(selectedPointNumber);
					events.fire('render', false); // render all layers
					events.fire("countPoints");
				}
			},

			startDrag:function(position){
				var pointNumber = this.detectPoint(position);
				var allowDrag = pointNumber != undefined && 
								(!this.model.isPredefinedPoint(pointNumber) || this.model.get("editMode")) &&
								!this.model.get("disabledMode");
				//if (pointNumber != undefined && (!this.model.isPredefinedPoint(pointNumber) || this.model.get("editMode"))) {
				if (allowDrag) {
					this.model.dragPoint(pointNumber);
					events.fire('render', false);
				}
			},

			drag:function(position){
				position.y = globals.canvasHeight / 2;
				var draggedPoint = this.model.getDraggedPointNumber();
				if (draggedPoint !== "") {
					//events.fire('render', false);
					this.view.drawPoint(position, true, false, this.model.get("pointsData")[draggedPoint].color, true);
				}
			},

			endDrag:function(position){
				var draggedPoint = this.model.getDraggedPointNumber(),
					currentPoint = this.detectPoint(position, true),
					savePointColor;
				this.model.stopDragging();
				if (draggedPoint !== "") {

					if (!this.model.hasPoint(currentPoint)) {
						savePointColor = this.model.get("pointsData")[draggedPoint].color;
						this.model.deletePoint(draggedPoint);
						this.addPoint(position, savePointColor);
					}
					events.fire("render");
				}
			}
		}

		return NLPoint ;
	});

/**
 * Class FractionMultiplicationApplet
 */
 define( 'js/NLApplet',[ 'jquery', 'lodash', 'messageManager', 'i18n', 'globalize', 'actionMenu', 'mathematicalMeaning',
 			'globals',
 			'globalizeCultures',
 			'text!js/NLMenu.json', 
 			'js/NLStage/NLModel', 
 			'js/NLStage/NLStage', 
 			'js/NLSettings/NLSettings',
 			'js/NLLabel/NLLabel',
 			'js/NLAxis/NLAxis',
 			'js/NLPoint/NLPoint'], 
 	function ( $, _, messageManager, i18n, globalize, ActionMenu, MathematicalMeaning, globals, globalizeCultures, MenuStructure, NLModel, NLStage, NLSettings, NLLabel, NLAxis, NLPoint) {

 		function AppletController() {

		//////////////////////////////////////////////////////////////////////////
		// API handling suggestion - start
		//////////////////////////////////////////////////////////////////////////

		var msgMgr = new messageManager( window, window.parent, this.externalAPI, this ) ;

		msgMgr.send( 'ready' ) ;

		//////////////////////////////////////////////////////////////////////////
		// API handling suggestion - end
		//////////////////////////////////////////////////////////////////////////

	}

	AppletController.prototype = {

		///////////////////////////////////////////////////////
		///////////////////////////////////////////////////////
		///////////////////////////////////////////////////////
		// API object - start
		///////////////////////////////////////////////////////
		///////////////////////////////////////////////////////
		///////////////////////////////////////////////////////
		externalAPI: {

			init: function( data, callback ) {

				$("body").addClass(data.device);

				i18n.set(data.locale);
				$('body').addClass(i18n._data == undefined ? 'ltr' : i18n._data.direction);

				this.initView( data ) ;

				var isTouch = data.device !== 'pc';
				this.initVersion(isTouch);

				var $view = $("#container") ;
				var bodyMargins = {} ;
				bodyMargins[ 'top' ] = 1 * $("body").css( "margin-top" ).replace( "px", "" ) ;
				bodyMargins[ 'left' ] = 1 * $("body").css( "margin-left" ).replace( "px", "" ) ;
				bodyMargins[ 'bottom' ] = 1 * $("body").css( "margin-bottom" ).replace( "px", "" ) ;
				bodyMargins[ 'right' ] = 1 * $("body").css( "margin-right" ).replace( "px", "" ) ;

				callback( {
					width: $view.outerWidth() + bodyMargins.left + bodyMargins.right,
					height: $view.outerHeight() + bodyMargins.top + bodyMargins.bottom
				} ) ;
				
			},

			///////////////////////////////////////////////////////
			// getState - return current state as string blob
			///////////////////////////////////////////////////////
			getState:function( data, callback ){
				// call with null when not supported
				
				var state = this.model.getData();
				callback( state ) ;
			},
			///////////////////////////////////////////////////////
			// setState - use previously acquired state (getState)
			///////////////////////////////////////////////////////
			setState:function( data, callback ){

				this.model.reset(data);
				this.stage.reRender();

				callback();
			},

			///////////////////////////////////////////////////////
			// setEnabled - set view enable/disable
			///////////////////////////////////////////////////////
			setEnabled:function( data, callback ){
				this.stage.resetActionMenu();
				if (data) {
					//$("#lockModal").hide();
					this.model.set("disabledMode", false);
				}else{
					//$("#lockModal").show();
					this.model.set("disabledMode", true);
					this.actionMenu.disableAll();
				}
				callback(null);
			},

			///////////////////////////////////////////////////////
			// setVolume - set volume
			///////////////////////////////////////////////////////
			setVolume:function( data, callback ){
				// do nothing in this applet
				callback();
			},

			///////////////////////////////////////////////////////
			// pause
			///////////////////////////////////////////////////////
			pause:function( data, callback ){
				// pause any playing media
				callback();
			},

			///////////////////////////////////////////////////////
			// play
			///////////////////////////////////////////////////////
			play:function( data, callback ){
				// resume any media that was previously playing
				callback();
			},

			///////////////////////////////////////////////////////
			// check - calculate and return  the result
			// usually, disable view and wait for tryAgain
			///////////////////////////////////////////////////////
			check:function( data, callback ){
				// calculate result
				var result = this.model.check();
				this.stage.fitToView();
				callback(result) ;
			},

			///////////////////////////////////////////////////////
			// tryAgain - prepare for another try
			///////////////////////////////////////////////////////
			tryAgain:function( data, callback ){
				// clear last answer
				this.model.tryAgain();
				callback();
			},

			///////////////////////////////////////////////////////
			// showAnswer - show the correct answer
			///////////////////////////////////////////////////////
			showAnswer:function( data, callback ){
				this.model.showAnswers();
				this.stage.fitToView();
				this.stage.updatePointsTooltip();
				callback();
			},

			///////////////////////////////////////////////////////
			// getData - for edit mode
			///////////////////////////////////////////////////////
			getData:function( data, callback ){

				var data = this.model.getData();
				// return null when not supported
				callback( data ) ;
			},

			///////////////////////////////////////////////////////
			// isDataCheckable - for edit mode
			///////////////////////////////////////////////////////
			isDataCheckable:function( data, callback ){
				var checkable = this.model.get("NLMode") == globals.CHECKABLE;
				// return false when not supported
				callback( checkable) ;
			},

			///////////////////////////////////////////////////////
			// validate - for edit mode
			///////////////////////////////////////////////////////
			validate:function( data, callback ){
				// return true when valid or not supported
				// or array of strings describing invalidations
				callback( true ) ;
			}

		},
		///////////////////////////////////////////////////////
		///////////////////////////////////////////////////////
		///////////////////////////////////////////////////////
		// API object - end
		///////////////////////////////////////////////////////
		///////////////////////////////////////////////////////
		///////////////////////////////////////////////////////

		initView:function( config ) {

			// define globalize
			this.setGlobalize(config.locale);
			this.model = new NLModel({	initialData: _.clone(config.data, true), 
										editMode:config.editMode,
										isTouch:config.device !== 'pc'});

			this.stage = new NLStage(this.model);
			var settings = new NLSettings(this.model);
			var axis = new NLAxis(this.model, this.stage.canvas);
			var points = new NLPoint(this.model, this.stage.canvas);
			var labels = new NLLabel(this.model);

			// create action menu
			this.actionMenu = new ActionMenu("#actionMenuContainer", 
											$.parseJSON(MenuStructure), 
											config.editMode,
											config.device != "pc",
											 _.bind(this.stage.actionMenuHandler,this.stage)).render();
			this.stage.actionMenu = this.actionMenu;
			this.stage.resetActionMenu();
			
			// create the mathematical meaning view
			var mathematicalMeaningView = new MathematicalMeaning({editMode:config.editMode});
			//mathematicalMeaningView.render(null);
			
			if( config.editMode ) {
				// do something in edit mode
			}
			///////////////////////////////////////////////////////
		},

		/////////////////////////////////////////////////////////////////
		// action menu handler - better be implemented in the applet view - after created 
		/////////////////////////////////////////////////////////////////
		actionMenuHandler:function(actionItem)
		{
			// activate the callback according to the action item pressed on.
			this[actionItem.callback]();
		},

		resetCallbackFunction:function(){
			alert("reset");
		},

		setGlobalize:function(locale){

			var culture;

			switch (locale.toLowerCase()){
				case "en_us":
					culture = "en-US";
					break;
				case "iw_il":
					culture = "he-IL";
					break;
				case "fr_fr":
					culture = "fr-FR";
					break;
				default:
					culture = "en-US";
					break;
			}

			// set the culture
			var glob = Globalize.culture( culture );
		},

		/////////////////////////////////////////////////////////////////
		initVersion: function(isTouch){
			this._flick_start_pos = {x:0, y:0};
			this._flick_move_pos = {x:0, y:0};
			// init version from applet's manifest fileCopyright © 2013 Time To Know, Ltd. All rights reserved Page 12/13
			$.getJSON("../manifest.json", _.bind( function(manifest){
				this.appletVersion = manifest.version;
				$('#appletVersion').text("Version " + this.appletVersion);
			}, this));
			if (isTouch){
				$('#controlVersionVisibility').on('touchstart',_.bind(this.flickStart, this));
				$('#controlVersionVisibility').on('touchmove',_.bind(this.flickMove, this));
				$('#controlVersionVisibility').on('touchend',_.bind(this.flickEnd, this));
			} else {
				$('#controlVersionVisibility').on("click",_.bind(this.toggleAppletVersion, this));
				//$('#controlVersionVisibility').click(_.bind(this.toggleAppletVersion, this));
			}
		},
		toggleAppletVersion: function(e){
			// when no e parameter - means we got here from touch events,
			// when there is an e parameter we got here from click event and then
			// we check that the ctrl button was down during the click
			if (!e || (e && e.ctrlKey)) {
				$('#appletVersion').toggle();
			}
		},
		flickStart: function(e) {
			e.preventDefault();
			this._flick_start_pos = this.getXYfromEvent(e.originalEvent)[0];
		},
		flickMove: function(e) {
			e.preventDefault();
			this._flick_move_pos = this.getXYfromEvent(e.originalEvent)[0];
		},
		flickEnd: function(e) {
			e.preventDefault();
			if (this._flick_start_pos.x < this._flick_move_pos.x) {
				this.toggleAppletVersion();
				this._flick_start_pos = {x:0, y:0};
				this._flick_move_pos = {x:0, y:0};
			}
		},
		getXYfromEvent: function( event )
		{
			event = event || window.event;
			var pos = [], src;
			for(var t=0, len=event.touches.length; t<len; t++) {
				src = event.touches[t];
				pos.push({ x: src.pageX, y: src.pageY });
			}
			return pos;
		}
	} ;

	return AppletController ;
});

require.config( {

	baseUrl: '',

	paths: {
		
		jquery: 'js/libs/jquery/jquery-1.10.1.min',
		
		messageManager: 'js/libs/t2k/PostMessageManager',

		lodash: 'js/libs/lodash/lodash',
		
		globalize: 'js/libs/globalize/globalize',

		mustache_lib: 'js/libs/mustache/mustache',

		mustache: 'js/libs/mustache/mustache_wrapper',

		i18n : 'js/libs/i18n/i18n',

		backbone: 'js/libs/backbone/backbone-min',

		backbone_super: 'js/libs/backbone/backbone_super',

		events : 'js/libs/t2k/events/events',

		globals: 'js/NLGlobals',

		globalizeCultures : 'js/libs/globalize/globalize.cultures',
		
		text: 'js/libs/require/text',

		actionMenu: 'js/libs/t2k/ActionMenu/ActionMenu',

		mathematicalMeaning : 'js/libs/t2k/MathematicalMeaning/MathematicalMeaningView',

		numberComponent : 'js/libs/t2k/NumberComponent/NumberComponent',

		mathUtils : 'js/libs/t2k/NumberComponent/MathUtils'
	},

	shim: {
		backbone: {
			deps: ['lodash', 'jquery'],
			exports: 'Backbone'
		},

		globalizeCultures : {
			deps : ['globalize']
		}
	}
} ) ;

require( [ 'js/NLApplet' ], function( NLApplet ) {
	WebFont.load({
		custom: {
			families: ['NumberLine'],
			urls: ['css/fonts.css']
		}
	});

	WebFont.load({
		custom: {
			families: ['General'],
			urls: ['css/fonts.css']
		}
	});

	WebFont.load({
		custom: {
			families: ['t2kmathusa-regular-webfont'],
			urls: ['css/fonts.css']
		},
		active: function() {
			var applet = new NLApplet() ;
		}
	});

} ) ;

define("js/main", function(){});
