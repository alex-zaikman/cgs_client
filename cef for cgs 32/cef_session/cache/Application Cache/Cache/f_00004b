////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/managers/AppcacheManager.js
////////////////////////////////////////
( function() {
	
	function AppcacheManager() {

		this._ready = false ;
		
		this.callOnReady = false ;
		
		this.appCache = getAppcache() ;
		
	} 
	
	AppcacheManager.prototype = {
	
		init: function() {
			
			var status = getAppcacheStatus() ;
			
			console.log( "[DL][Appcache] --> Status --> " + status ) ;
			
			var thi$ = this ;
			this.bindAppcacheEvents( function( e ){
				thi$.handleCacheEvent( e ) ;
			} ) ;
			
		},
		
		ready: function() {
			this._ready = true ;
			if( this.callOnReady ) {
				this.callOnReady = false ;
				this.cacheReadyCallback() ;
			}
		},
		
		progress: function( e ) {
			var loaded = e.loaded ;
			var total = e.total ;
			
//			var completed = Math.round( ( total > 0 ? loaded/total : 1 ) * 100 ) ;
//			console.log( "[DL][Appcache] --> Progress --> %d%", completed ) ;
			
			if( loaded == total ) {
				console.log( "[DL][Appcache] --> Progress DONE 100%" ) ;
			}
			
			if( this.cacheProgressCallback ) {
				this.cacheProgressCallback( e ) ;
			}
		},
		
		callOnProgress: function( callback ) {
			this.cacheProgressCallback = function( e ){
				callback( e ) ;
			} ;
		},
		
		callOnCacheReady: function( callback ) {
			
			this.cacheReadyCallback = function(){
				if( callback ) {
					console.log( "[DL][Appcache] --> Ready callback called !" ) ;
					callback() ;
				}
			} ;
			
			if( this._ready ) {
				this.cacheReadyCallback() ;
		    } else {
		    	this.callOnReady = true ;
		    }
			
		},
	
		handleCacheEvent: function( e ) {
			
			var type = e.type ;
			
			var thi$ = this ;
			
			if( type != "progress" ) {
				console.log( "[DL][Appcache] --> Event --> " + type ) ;
			}
						
			switch( type ) {
				
				case "updateready" : {
					var statusMatch = window.applicationCache.status === window.applicationCache.UPDATEREADY ;
					if ( statusMatch && this.downloadedNewFiles ) {
						console.log( "[DL][Appcache] --> new version received" ) ;
						window.setTimeout( function() {
							window.applicationCache.swapCache() ;
							
//							window.setTimeout( function() {
//								console.log( "[DL][Appcache] --> reloading to use new version" ) ;
//								window.location.reload() ;
//							}, 250 ) ;
							
							thi$.ready() ;  
							
						}, 250 ) ;
					}
					break ;
				}
								
				case "downloading" : {
					this.downloadedNewFiles = true ;
					break ;
				}
								
				case "progress" : {
					this.progress( e ) ;
					break ;
				}
				
				case "error" : {
					console.log( "[DL][Appcache] --> ERROR --> " + JSON.stringify( e, null, "\t" ) ) ;
				}
				case "noupdate" : 
				case "cached" : { 
					console.log( "[DL][Appcache] --> done with appcache" ) ;
					this.ready() ;
					break ;
				}
				
				default : {
					console.log( "[DL][Appcache] --> Unhandled appcache event --> " + type ) ;
					break ;
				}
			}
			
		},
		
		bindAppcacheEvents: function( statusHandler ) {
			
			// Fired after the first cache of the manifest.
			this.appCache.addEventListener('cached', statusHandler, false);

			// Checking for an update. Always the first event fired in the sequence.
			this.appCache.addEventListener('checking', statusHandler, false);

			// An update was found. The browser is fetching resources.
			this.appCache.addEventListener('downloading', statusHandler, false);

			// The manifest returns 404 or 410, the download failed,
			// or the manifest changed while the download was in progress.
			this.appCache.addEventListener('error', statusHandler, false);

			// Fired after the first download of the manifest.
			this.appCache.addEventListener('noupdate', statusHandler, false);

			// Fired if the manifest file returns a 404 or 410.
			// This results in the application cache being deleted.
			this.appCache.addEventListener('obsolete', statusHandler, false);

			// Fired for each resource listed in the manifest as it is being fetched.
			this.appCache.addEventListener('progress', statusHandler, false);

			// Fired when the manifest resources have been newly redownloaded.
			this.appCache.addEventListener('updateready', statusHandler, false);
			
		}
			
	} ;
	
	
	function getAppcacheStatus() {
		
		var appCache = getAppcache() ;
		
		switch (appCache.status) {
		  case appCache.UNCACHED: // UNCACHED == 0
		    return 'UNCACHED';
		    break;
		    
		  case appCache.IDLE: // IDLE == 1
		    return 'IDLE';
		    break;
		    
		  case appCache.CHECKING: // CHECKING == 2
		    return 'CHECKING';
		    break;
		    
		  case appCache.DOWNLOADING: // DOWNLOADING == 3
		    return 'DOWNLOADING';
		    break;
		    
		  case appCache.UPDATEREADY:  // UPDATEREADY == 4
		    return 'UPDATEREADY';
		    break;
		    
		  case appCache.OBSOLETE: // OBSOLETE == 5
		    return 'OBSOLETE';
		    break;
		    
		  default:
		    return 'UKNOWN CACHE STATUS';
		    break;
		    
		} ;
	}
	
	function getAppcache() {
		var appCache = window.applicationCache;
		return appCache ;
	}
	
	window.AppcacheManager = new AppcacheManager() ;
	
	var onDOMLoaded = function() {
		if (window.applicationCache) {
			window.AppcacheManager.init() ;
		} else {
			window.AppcacheManager.ready();
		}
	};
	
	window.addEventListener('load', onDOMLoaded, false);
	
} )() ;
////////////////////////////////////////
// SRC End --> t2k/util/managers/AppcacheManager.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/t2k/PostMessageManager.js
////////////////////////////////////////
/*
 * PostMessageManager
 * 
 * class for handling post messages between windows
 * use at each listening side
 * 
 * use with or without require.js
 * 
 * version : 1.0.7
 * written by : Liron Zadkovsky
 * 
 * PLEASE consult before changing!
 * 
 */
( function( window, undefined ) {
	
    /**
     * @author liron.zadkovsky
     * 
     * @constructor PostMessageManager
     * @param listenerWindow listen to receive messages
     * @param targetWindow post messages to
     * @param handlerObject contains handler functions
     * @param context call handler functions in context
     * 
     * @returns {PostMessageManager}
     */
    function PostMessageManager( listenerWindow, targetWindow, handlerObject, context ) {
    	
    	// save args to class members
    	this.listenerWindow = listenerWindow ;
    	this.targetWindow = targetWindow ;
    	this.handlerObject = handlerObject ;
    	this.context = context ;

    	// get window names for logging
    	this.listenerName = this.listenerWindow.name ;
		this.targetName = this.targetWindow.name ;
    	
		this.detectBrowserFeatures() ;
		
		// bind events
		this.bindEvents() ;
		
    }

    PostMessageManager.prototype = {
	    	
	    	////////////////////////////////////////////
	    	// class members
			////////////////////////////////////////////
	    	
	    	// collection for callbacks and  timeouts
	    	callbacks: {},
	    	
	    	// get values on construction
	    	listenerWindow: null,
	    	targetWindow: null,
	    	handlerObject: null,
	    	context: null,
	    	
	    	////////////////////////////////////////////
	    	// class member functions
	    	////////////////////////////////////////////
	    	
	    	bindEvents: function() {
	    		
	    		// save listener callback, keep context = this
	    		var thi$ = this ;
	    		this.listenerCallback = function( message ){
	    			thi$.receive( message ) ;
	    		} ;
	    		
	    		// bind callback to message
	    		this.listenerWindow.addEventListener( "message", this.listenerCallback, false ) ;
	    		
	    	},
	    	
	    	/////////////////////////////////////////////////////////////
	    	// messageData structure:
	    	/////////////////////////////////////////////////////////////
			//	{
			//		method: "String",
			//		config: {} || "any...",
			//		callback: function
			//	}
	    	/////////////////////////////////////////////////////////////
	    	
	    	// handle received messages
	        receive: function( message ) {
	        	
	        	// filter messages to target window
	        	if( message.source == this.targetWindow ) {
	        		
	        		// extract message data
	        		var messageData = this.browserPostJSON ?
		    				message.data : JSON.parse( message.data ) ;
	        		
	        		// get handler function name
	        		var handlerName = messageData.method ;
	        		
	        		// get config
	        		var config = messageData.config ;
	        		
	        		// log message source/target/data
		    		this.logMessage( "Message RECEIVED", "FROM", messageData ) ;
		    		
	        		// try to get callback entry
	        		var callbackObject = this.callbacks[ handlerName ] ;
	        		
	        		// try to get method handler
	        		var methodHandler = this.handlerObject[ handlerName ] ;
	        		
	        		// try to get callback function
	        		var callbackHandler = callbackObject ? callbackObject.callback : null ;
	        		
	        		// decide on handler
	        		var handler = methodHandler || callbackHandler ;
	        		
	        		if( handler ) {
	        			
	        			// when entry exists
	        			if( callbackObject ) {
	        				
	        				this.clearCallbackTimeout( handlerName ) ;
	        				
	        			}
	        			
	        			// decide on context, from constructor or default
	        			var context = this.context || this.handlerObject ;
	        			
	        			// empty default callback function
	        			var callbackWrapper = function(){} ;
	        			
	        			// handle received callback
	        			if( messageData.callback ) {
	        				
	        				var thi$ = this ;
	        				
	        				// wrap API call in real callback function
	        				callbackWrapper = function( data ) {
	        					
	        					// call callback through message API
	        					thi$.send( messageData.callback, data ) ;
	        					
	        				} ;
	        				
	        			}
	        			
	        			// call handler in context with config & callback as arguments
	            		handler.call( context, messageData.config, callbackWrapper ) ;
	        			
	        		} else {
	        			
	        			// warning on missing handler or unknown API call
	        			console.warn( "unknown API method, or to late callback call --> " + handlerName ) ;
	        			
	        		}
	        		
	        	}
	        },
	        
	        // handle sending messages
	        send: function( method, config, callback, options ) {
	        	
	        	if( this.targetWindow && this.targetWindow.postMessage ) {
	        		
		        	// declare vars
		        	var callbackKey = null ;
		        	var timeout = null ;
		        	
		        	if( callback ) {
		        		
		        		var thi$ = this ;
		        		
		        		// generate callback key
		            	callbackKey = method + "_callback_" + ( new Date() ).getTime() * Math.random() ;
		            	
		            	// set and save timeout for callback
		            	var time = ( options && options.timeout ) || 5000 ;
		            	timeout = this.listenerWindow.setTimeout( function(){
		            		
		            		// warn when callback timed out
		            		console.warn( "Timeout for api method callback --> " + callbackKey + "sent by --> " + this.listenerName );
		            		console.warn( "Timeout - will return null to callback." );
		            		
		            		thi$.clearCallbackTimeout( callbackKey ) ;
		            		
		            		callback( null ) ;
		            		
		            	}, time ) ;
		        		
		            	// add callback entry to collection
		        		this.callbacks[ callbackKey ] = {
		        			callback: callback,
		        			timeout: timeout
		        		} ;
		        		
		        	}
		        	
		        	// create message data object
		        	var messageData = {
		        			
		        		method: method,
		        		config: config,
		        		callback: callbackKey
		        		
		        	} ;
		        	
	        		// log message source/target/data
		    		this.logMessage( "Message SENT", "TO", messageData ) ;
		    		
		    		var postData = this.browserPostJSON ?
		    				messageData : JSON.stringify( messageData ) ;
		    		
		    		// post message to target
		        	this.targetWindow.postMessage( postData, "*" ) ;
		        } else {
		        	
		        	console.warn( "[PMM - "+ this.listenerName +" ] --> sending to target: "+ this.targetName +", frame does not exist!" ) ;
		        	
		        }
	        },
	        
	        clearCallbackTimeout: function( callbackKey ) {
	        	
	        	callbackObject = this.callbacks[ callbackKey ]
	        	
	        	if( callbackObject ) {
	        		
	        		// get time out
	        		var timeout = callbackObject.timeout ;
	        		
	        		// clear timeout
	        		this.listenerWindow && this.listenerWindow.clearTimeout( timeout ) ;
	        		
	        		// remove entry from collection
	        		delete this.callbacks[ callbackKey ] ;
	        		
	        	} else {
	        		console.warn( "Trying to clear callback - Callback already called" );
	        	}
	        },
	        
	        logMessage: function( text, rel, data ) {
	    		
	    		console.log( '\n' );
	    		
	    		console.log( text + " by " +  this.listenerName + " " + rel + " " + this.targetName + " --> " + data.method ) ;
	    		
	    		console.log( JSON.stringify( data.config, null, '\t' ) ) ;
	    		
	        },
	        
	        detectBrowserFeatures: function() {
	        	
	        	var appstr = window.navigator.appVersion.toLowerCase() ;
	        	
	        	this.browserPostJSON = appstr.indexOf( 'msie 9' ) == -1 ;
	        	
	        },
	        
	        destroy: function() {
	        	
	        	// remove listener
	        	this.listenerWindow.removeEventListener( "message", this.listenerCallback, false ) ;
	        	
	        	// detach members for garbage 
	        	this.listenerCallback = null ;
	        	
	        	this.listenerWindow = null ;
	        	this.targetWindow = null ;
	        	this.handlerObject = null ;
	        	this.context = null ;
	        	
	    		this.listenerName = null ;
	    		this.targetName = null ;
	        	
	        }
	   
    } ;
    
    // non require.js use support
    window.PostMessageManager = PostMessageManager ;
    
    // require.js use support
	if ( typeof define === "function" ) {
		define( [], function () { return PostMessageManager ; } ) ;
	}
	
} )( window ) ;
////////////////////////////////////////
// SRC End --> libs/t2k/PostMessageManager.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/jquery/jquery-2.0.3.min.js
////////////////////////////////////////
/*! jQuery v2.0.3 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license
// add "//@ sourceMap..." to start on next row's comment to use the .map file
// sourceMappingURL=jquery-2.0.3.min.map
*/
(function(e,undefined){var t,n,r=typeof undefined,i=e.location,o=e.document,s=o.documentElement,a=e.jQuery,u=e.$,l={},c=[],p="2.0.3",f=c.concat,h=c.push,d=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,x=function(e,n){return new x.fn.init(e,n,t)},b=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,w=/\S+/g,T=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,k=/^-ms-/,N=/-([\da-z])/gi,E=function(e,t){return t.toUpperCase()},S=function(){o.removeEventListener("DOMContentLoaded",S,!1),e.removeEventListener("load",S,!1),x.ready()};x.fn=x.prototype={jquery:p,constructor:x,init:function(e,t,n){var r,i;if(!e)return this;if("string"==typeof e){if(r="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),C.test(r[1])&&x.isPlainObject(t))for(r in t)x.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=o.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?n.ready(e):(e.selector!==undefined&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:"",length:0,toArray:function(){return d.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[1]||{},a=2),"object"==typeof s||x.isFunction(s)||(s={}),u===a&&(s=this,--a);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(x.isPlainObject(r)||(i=x.isArray(r)))?(i?(i=!1,o=n&&x.isArray(n)?n:[]):o=n&&x.isPlainObject(n)?n:{},s[t]=x.extend(l,o,r)):r!==undefined&&(s[t]=r));return s},x.extend({expando:"jQuery"+(p+Math.random()).replace(/\D/g,""),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=a),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){(e===!0?--x.readyWait:x.isReady)||(x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(o,[x]),x.fn.trigger&&x(o).trigger("ready").off("ready")))},isFunction:function(e){return"function"===x.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[m.call(e)]||"object":typeof e},isPlainObject:function(e){if("object"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!y.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}return!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:JSON.parse,parseXML:function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(r){t=undefined}return(!t||t.getElementsByTagName("parsererror").length)&&x.error("Invalid XML: "+e),t},noop:function(){},globalEval:function(e){var t,n=eval;e=x.trim(e),e&&(1===e.indexOf("use strict")?(t=o.createElement("script"),t.text=e,o.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(k,"ms-").replace(N,E)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,s=j(e);if(n){if(s){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(s){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?"":v.call(e)},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?x.merge(n,"string"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:g.call(t,e,n)},merge:function(e,t){var n=t.length,r=e.length,i=0;if("number"==typeof n)for(;n>i;i++)e[r++]=t[i];else while(t[i]!==undefined)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){var r,i=[],o=0,s=e.length;for(n=!!n;s>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,s=j(e),a=[];if(s)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(a[a.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(a[a.length]=r);return f.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),x.isFunction(e)?(r=d.call(arguments,2),i=function(){return e.apply(t||this,r.concat(d.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):undefined},access:function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===x.type(n)){i=!0;for(a in n)x.access(e,t,a,n[a],!0,o,s)}else if(r!==undefined&&(i=!0,x.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(x(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},now:Date.now,swap:function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i}}),x.ready.promise=function(t){return n||(n=x.Deferred(),"complete"===o.readyState?setTimeout(x.ready):(o.addEventListener("DOMContentLoaded",S,!1),e.addEventListener("load",S,!1))),n.promise(t)},x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function j(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}t=x(o),function(e,undefined){var t,n,r,i,o,s,a,u,l,c,p,f,h,d,g,m,y,v="sizzle"+-new Date,b=e.document,w=0,T=0,C=st(),k=st(),N=st(),E=!1,S=function(e,t){return e===t?(E=!0,0):0},j=typeof undefined,D=1<<31,A={}.hasOwnProperty,L=[],q=L.pop,H=L.push,O=L.push,F=L.slice,P=L.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",W="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",$=W.replace("w","w#"),B="\\["+M+"*("+W+")"+M+"*(?:([*^$|!~]?=)"+M+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+$+")|)|)"+M+"*\\]",I=":("+W+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+B.replace(3,8)+")*)|.*)\\)|)",z=RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=RegExp("^"+M+"*,"+M+"*"),X=RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=RegExp(M+"*[+~]"),Y=RegExp("="+M+"*([^\\]'\"]*)"+M+"*\\]","g"),V=RegExp(I),G=RegExp("^"+$+"$"),J={ID:RegExp("^#("+W+")"),CLASS:RegExp("^\\.("+W+")"),TAG:RegExp("^("+W.replace("w","w*")+")"),ATTR:RegExp("^"+B),PSEUDO:RegExp("^"+I),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:RegExp("^(?:"+R+")$","i"),needsContext:RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/^(?:input|select|textarea|button)$/i,et=/^h\d$/i,tt=/'|\\/g,nt=RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),rt=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{O.apply(L=F.call(b.childNodes),b.childNodes),L[b.childNodes.length].nodeType}catch(it){O={apply:L.length?function(e,t){H.apply(e,F.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function ot(e,t,r,i){var o,s,a,u,l,f,g,m,x,w;if((t?t.ownerDocument||t:b)!==p&&c(t),t=t||p,r=r||[],!e||"string"!=typeof e)return r;if(1!==(u=t.nodeType)&&9!==u)return[];if(h&&!i){if(o=K.exec(e))if(a=o[1]){if(9===u){if(s=t.getElementById(a),!s||!s.parentNode)return r;if(s.id===a)return r.push(s),r}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(a))&&y(t,s)&&s.id===a)return r.push(s),r}else{if(o[2])return O.apply(r,t.getElementsByTagName(e)),r;if((a=o[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&(!d||!d.test(e))){if(m=g=v,x=t,w=9===u&&e,1===u&&"object"!==t.nodeName.toLowerCase()){f=gt(e),(g=t.getAttribute("id"))?m=g.replace(tt,"\\$&"):t.setAttribute("id",m),m="[id='"+m+"'] ",l=f.length;while(l--)f[l]=m+mt(f[l]);x=U.test(e)&&t.parentNode||t,w=f.join(",")}if(w)try{return O.apply(r,x.querySelectorAll(w)),r}catch(T){}finally{g||t.removeAttribute("id")}}}return kt(e.replace(z,"$1"),t,r,i)}function st(){var e=[];function t(n,r){return e.push(n+=" ")>i.cacheLength&&delete t[e.shift()],t[n]=r}return t}function at(e){return e[v]=!0,e}function ut(e){var t=p.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function lt(e,t){var n=e.split("|"),r=e.length;while(r--)i.attrHandle[n[r]]=t}function ct(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pt(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function ft(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ht(e){return at(function(t){return t=+t,at(function(n,r){var i,o=e([],n.length,t),s=o.length;while(s--)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}s=ot.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},n=ot.support={},c=ot.setDocument=function(e){var t=e?e.ownerDocument||e:b,r=t.defaultView;return t!==p&&9===t.nodeType&&t.documentElement?(p=t,f=t.documentElement,h=!s(t),r&&r.attachEvent&&r!==r.top&&r.attachEvent("onbeforeunload",function(){c()}),n.attributes=ut(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ut(function(e){return e.appendChild(t.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=ut(function(e){return e.innerHTML="<div class='a'></div><div class='a i'></div>",e.firstChild.className="i",2===e.getElementsByClassName("i").length}),n.getById=ut(function(e){return f.appendChild(e).id=v,!t.getElementsByName||!t.getElementsByName(v).length}),n.getById?(i.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){return e.getAttribute("id")===t}}):(delete i.find.ID,i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=n.getElementsByTagName?function(e,t){return typeof t.getElementsByTagName!==j?t.getElementsByTagName(e):undefined}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){return typeof t.getElementsByClassName!==j&&h?t.getElementsByClassName(e):undefined},g=[],d=[],(n.qsa=Q.test(t.querySelectorAll))&&(ut(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||d.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll(":checked").length||d.push(":checked")}),ut(function(e){var n=t.createElement("input");n.setAttribute("type","hidden"),e.appendChild(n).setAttribute("t",""),e.querySelectorAll("[t^='']").length&&d.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll(":enabled").length||d.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),d.push(",.*:")})),(n.matchesSelector=Q.test(m=f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut(function(e){n.disconnectedMatch=m.call(e,"div"),m.call(e,"[s!='']:x"),g.push("!=",I)}),d=d.length&&RegExp(d.join("|")),g=g.length&&RegExp(g.join("|")),y=Q.test(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},S=f.compareDocumentPosition?function(e,r){if(e===r)return E=!0,0;var i=r.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(r);return i?1&i||!n.sortDetached&&r.compareDocumentPosition(e)===i?e===t||y(b,e)?-1:r===t||y(b,r)?1:l?P.call(l,e)-P.call(l,r):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,n){var r,i=0,o=e.parentNode,s=n.parentNode,a=[e],u=[n];if(e===n)return E=!0,0;if(!o||!s)return e===t?-1:n===t?1:o?-1:s?1:l?P.call(l,e)-P.call(l,n):0;if(o===s)return ct(e,n);r=e;while(r=r.parentNode)a.unshift(r);r=n;while(r=r.parentNode)u.unshift(r);while(a[i]===u[i])i++;return i?ct(a[i],u[i]):a[i]===b?-1:u[i]===b?1:0},t):p},ot.matches=function(e,t){return ot(e,null,null,t)},ot.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Y,"='$1']"),!(!n.matchesSelector||!h||g&&g.test(t)||d&&d.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return ot(t,p,null,[e]).length>0},ot.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},ot.attr=function(e,t){(e.ownerDocument||e)!==p&&c(e);var r=i.attrHandle[t.toLowerCase()],o=r&&A.call(i.attrHandle,t.toLowerCase())?r(e,t,!h):undefined;return o===undefined?n.attributes||!h?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null:o},ot.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},ot.uniqueSort=function(e){var t,r=[],i=0,o=0;if(E=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(S),E){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return e},o=ot.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=ot.selectors={cacheLength:50,createPseudo:at,match:J,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(nt,rt),e[3]=(e[4]||e[5]||"").replace(nt,rt),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ot.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ot.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return J.CHILD.test(e[0])?null:(e[3]&&e[4]!==undefined?e[2]=e[4]:n&&V.test(n)&&(t=gt(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(nt,rt).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&C(e,function(e){return t.test("string"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=ot.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,h,d,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),x=!u&&!a;if(m){if(o){while(g){p=t;while(p=p[g])if(a?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;d=g="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?m.firstChild:m.lastChild],s&&x){c=m[v]||(m[v]={}),l=c[e]||[],h=l[0]===w&&l[1],f=l[0]===w&&l[2],p=h&&m.childNodes[h];while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[w,h,f];break}}else if(x&&(l=(t[v]||(t[v]={}))[e])&&l[0]===w)f=l[1];else while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if((a?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(x&&((p[v]||(p[v]={}))[e]=[w,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ot.error("unsupported pseudo: "+e);return r[v]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?at(function(e,n){var i,o=r(e,t),s=o.length;while(s--)i=P.call(e,o[s]),e[i]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:at(function(e){var t=[],n=[],r=a(e.replace(z,"$1"));return r[v]?at(function(e,t,n,i){var o,s=r(e,null,i,[]),a=e.length;while(a--)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:at(function(e){return function(t){return ot(e,t).length>0}}),contains:at(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:at(function(e){return G.test(e||"")||ot.error("unsupported lang: "+e),e=e.replace(nt,rt).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return et.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:ht(function(){return[0]}),last:ht(function(e,t){return[t-1]}),eq:ht(function(e,t,n){return[0>n?n+t:n]}),even:ht(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:ht(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:ht(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:ht(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}},i.pseudos.nth=i.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pt(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=ft(t);function dt(){}dt.prototype=i.filters=i.pseudos,i.setFilters=new dt;function gt(e,t){var n,r,o,s,a,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);a=e,u=[],l=i.preFilter;while(a){(!n||(r=_.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=X.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(z," ")}),a=a.slice(n.length));for(s in i.filter)!(r=J[s].exec(a))||l[s]&&!(r=l[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ot.error(e):k(e,u).slice(0)}function mt(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function yt(e,t,n){var i=t.dir,o=n&&"parentNode"===i,s=T++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,a){var u,l,c,p=w+" "+s;if(a){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,a))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[v]||(t[v]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,a)||r,l[1]===!0)return!0}}function vt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function xt(e,t,n,r,i){var o,s=[],a=0,u=e.length,l=null!=t;for(;u>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),l&&t.push(a));return s}function bt(e,t,n,r,i,o){return r&&!r[v]&&(r=bt(r)),i&&!i[v]&&(i=bt(i,o)),at(function(o,s,a,u){var l,c,p,f=[],h=[],d=s.length,g=o||Ct(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:xt(g,f,e,a,u),y=n?i||(o?e:d||r)?[]:s:m;if(n&&n(m,y,a,u),r){l=xt(y,h),r(l,[],a,u),c=l.length;while(c--)(p=l[c])&&(y[h[c]]=!(m[h[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?P.call(o,p):f[c])>-1&&(o[l]=!(s[l]=p))}}else y=xt(y===s?y.splice(d,y.length):y),i?i(null,s,y,u):O.apply(s,y)})}function wt(e){var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,c=yt(function(e){return e===t},a,!0),p=yt(function(e){return P.call(t,e)>-1},a,!0),f=[function(e,n,r){return!s&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>l;l++)if(n=i.relative[e[l].type])f=[yt(vt(f),n)];else{if(n=i.filter[e[l].type].apply(null,e[l].matches),n[v]){for(r=++l;o>r;r++)if(i.relative[e[r].type])break;return bt(l>1&&vt(f),l>1&&mt(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(z,"$1"),n,r>l&&wt(e.slice(l,r)),o>r&&wt(e=e.slice(r)),o>r&&mt(e))}f.push(n)}return vt(f)}function Tt(e,t){var n=0,o=t.length>0,s=e.length>0,a=function(a,l,c,f,h){var d,g,m,y=[],v=0,x="0",b=a&&[],T=null!=h,C=u,k=a||s&&i.find.TAG("*",h&&l.parentNode||l),N=w+=null==C?1:Math.random()||.1;for(T&&(u=l!==p&&l,r=n);null!=(d=k[x]);x++){if(s&&d){g=0;while(m=e[g++])if(m(d,l,c)){f.push(d);break}T&&(w=N,r=++n)}o&&((d=!m&&d)&&v--,a&&b.push(d))}if(v+=x,o&&x!==v){g=0;while(m=t[g++])m(b,y,l,c);if(a){if(v>0)while(x--)b[x]||y[x]||(y[x]=q.call(f));y=xt(y)}O.apply(f,y),T&&!a&&y.length>0&&v+t.length>1&&ot.uniqueSort(f)}return T&&(w=N,u=C),b};return o?at(a):a}a=ot.compile=function(e,t){var n,r=[],i=[],o=N[e+" "];if(!o){t||(t=gt(e)),n=t.length;while(n--)o=wt(t[n]),o[v]?r.push(o):i.push(o);o=N(e,Tt(i,r))}return o};function Ct(e,t,n){var r=0,i=t.length;for(;i>r;r++)ot(e,t[r],n);return n}function kt(e,t,r,o){var s,u,l,c,p,f=gt(e);if(!o&&1===f.length){if(u=f[0]=f[0].slice(0),u.length>2&&"ID"===(l=u[0]).type&&n.getById&&9===t.nodeType&&h&&i.relative[u[1].type]){if(t=(i.find.ID(l.matches[0].replace(nt,rt),t)||[])[0],!t)return r;e=e.slice(u.shift().value.length)}s=J.needsContext.test(e)?0:u.length;while(s--){if(l=u[s],i.relative[c=l.type])break;if((p=i.find[c])&&(o=p(l.matches[0].replace(nt,rt),U.test(u[0].type)&&t.parentNode||t))){if(u.splice(s,1),e=o.length&&mt(u),!e)return O.apply(r,o),r;break}}}return a(e,f)(o,t,!h,r,U.test(e)),r}n.sortStable=v.split("").sort(S).join("")===v,n.detectDuplicates=E,c(),n.sortDetached=ut(function(e){return 1&e.compareDocumentPosition(p.createElement("div"))}),ut(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||lt("type|href|height|width",function(e,t,n){return n?undefined:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ut(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||lt("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?undefined:e.defaultValue}),ut(function(e){return null==e.getAttribute("disabled")})||lt(R,function(e,t,n){var r;return n?undefined:(r=e.getAttributeNode(t))&&r.specified?r.value:e[t]===!0?t.toLowerCase():null}),x.find=ot,x.expr=ot.selectors,x.expr[":"]=x.expr.pseudos,x.unique=ot.uniqueSort,x.text=ot.getText,x.isXMLDoc=ot.isXML,x.contains=ot.contains}(e);var D={};function A(e){var t=D[e]={};return x.each(e.match(w)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e="string"==typeof e?D[e]||A(e):x.extend({},e);var t,n,r,i,o,s,a=[],u=!e.once&&[],l=function(p){for(t=e.memory&&p,n=!0,s=i||0,i=0,o=a.length,r=!0;a&&o>s;s++)if(a[s].apply(p[0],p[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,a&&(u?u.length&&l(u.shift()):t?a=[]:c.disable())},c={add:function(){if(a){var n=a.length;(function s(t){x.each(t,function(t,n){var r=x.type(n);"function"===r?e.unique&&c.has(n)||a.push(n):n&&n.length&&"string"!==r&&s(n)})})(arguments),r?o=a.length:t&&(i=n,l(t))}return this},remove:function(){return a&&x.each(arguments,function(e,t){var n;while((n=x.inArray(t,a,n))>-1)a.splice(n,1),r&&(o>=n&&o--,s>=n&&s--)}),this},has:function(e){return e?x.inArray(e,a)>-1:!(!a||!a.length)},empty:function(){return a=[],o=0,this},disable:function(){return a=u=t=undefined,this},disabled:function(){return!a},lock:function(){return u=undefined,t||c.disable(),this},locked:function(){return!u},fireWith:function(e,t){return!a||n&&!u||(t=t||[],t=[e,t.slice?t.slice():t],r?u.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},x.extend({Deferred:function(e){var t=[["resolve","done",x.Callbacks("once memory"),"resolved"],["reject","fail",x.Callbacks("once memory"),"rejected"],["notify","progress",x.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var s=o[0],a=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=d.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),s=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?d.call(arguments):r,n===a?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},a,u,l;if(r>1)for(a=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(s(t,l,n)).fail(o.reject).progress(s(t,u,a)):--i;return i||o.resolveWith(l,n),o.promise()}}),x.support=function(t){var n=o.createElement("input"),r=o.createDocumentFragment(),i=o.createElement("div"),s=o.createElement("select"),a=s.appendChild(o.createElement("option"));return n.type?(n.type="checkbox",t.checkOn=""!==n.value,t.optSelected=a.selected,t.reliableMarginRight=!0,t.boxSizingReliable=!0,t.pixelPosition=!1,n.checked=!0,t.noCloneChecked=n.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!a.disabled,n=o.createElement("input"),n.value="t",n.type="radio",t.radioValue="t"===n.value,n.setAttribute("checked","t"),n.setAttribute("name","t"),r.appendChild(n),t.checkClone=r.cloneNode(!0).cloneNode(!0).lastChild.checked,t.focusinBubbles="onfocusin"in e,i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===i.style.backgroundClip,x(function(){var n,r,s="padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",a=o.getElementsByTagName("body")[0];a&&(n=o.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",a.appendChild(n).appendChild(i),i.innerHTML="",i.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%",x.swap(a,null!=a.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===i.offsetWidth}),e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(i,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(i,null)||{width:"4px"}).width,r=i.appendChild(o.createElement("div")),r.style.cssText=i.style.cssText=s,r.style.marginRight=r.style.width="0",i.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),a.removeChild(n))}),t):t}({});var L,q,H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,O=/([A-Z])/g;function F(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=x.expando+Math.random()}F.uid=1,F.accepts=function(e){return e.nodeType?1===e.nodeType||9===e.nodeType:!0},F.prototype={key:function(e){if(!F.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=F.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,x.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if("string"==typeof t)o[t]=n;else if(x.isEmptyObject(o))x.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return t===undefined?n:n[t]},access:function(e,t,n){var r;return t===undefined||t&&"string"==typeof t&&n===undefined?(r=this.get(e,t),r!==undefined?r:this.get(e,x.camelCase(t))):(this.set(e,t,n),n!==undefined?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(t===undefined)this.cache[o]={};else{x.isArray(t)?r=t.concat(t.map(x.camelCase)):(i=x.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(w)||[])),n=r.length;while(n--)delete s[r[n]]}},hasData:function(e){return!x.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}},L=new F,q=new F,x.extend({acceptData:F.accepts,hasData:function(e){return L.hasData(e)||q.hasData(e)},data:function(e,t,n){return L.access(e,t,n)},removeData:function(e,t){L.remove(e,t)},_data:function(e,t,n){return q.access(e,t,n)},_removeData:function(e,t){q.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,i=this[0],o=0,s=null;if(e===undefined){if(this.length&&(s=L.get(i),1===i.nodeType&&!q.get(i,"hasDataAttrs"))){for(n=i.attributes;n.length>o;o++)r=n[o].name,0===r.indexOf("data-")&&(r=x.camelCase(r.slice(5)),P(i,r,s[r]));q.set(i,"hasDataAttrs",!0)}return s}return"object"==typeof e?this.each(function(){L.set(this,e)}):x.access(this,function(t){var n,r=x.camelCase(e);if(i&&t===undefined){if(n=L.get(i,e),n!==undefined)return n;if(n=L.get(i,r),n!==undefined)return n;if(n=P(i,r,undefined),n!==undefined)return n}else this.each(function(){var n=L.get(this,r);L.set(this,r,t),-1!==e.indexOf("-")&&n!==undefined&&L.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){L.remove(this,e)})}});function P(e,t,n){var r;if(n===undefined&&1===e.nodeType)if(r="data-"+t.replace(O,"-$1").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:H.test(n)?JSON.parse(n):n}catch(i){}L.set(e,t,n)}else n=undefined;return n}x.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=q.get(e,t),n&&(!r||x.isArray(n)?r=q.access(e,t,x.makeArray(n)):r.push(n)),r||[]):undefined},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t),s=function(){x.dequeue(e,t)
};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return q.get(e,n)||q.access(e,n,{empty:x.Callbacks("once memory").add(function(){q.remove(e,[t+"queue",n])})})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),n>arguments.length?x.queue(this[0],e):t===undefined?this:this.each(function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},delay:function(e,t){return e=x.fx?x.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=x.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=undefined),e=e||"fx";while(s--)n=q.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var R,M,W=/[\t\r\n\f]/g,$=/\r/g,B=/^(?:input|select|textarea|button)$/i;x.fn.extend({attr:function(e,t){return x.access(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})},prop:function(e,t){return x.access(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})},addClass:function(e){var t,n,r,i,o,s=0,a=this.length,u="string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(W," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=x.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,s=0,a=this.length,u=0===arguments.length||"string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(W," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?x.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):x.isFunction(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var t,i=0,o=x(this),s=e.match(w)||[];while(t=s[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else(n===r||"boolean"===n)&&(this.className&&q.set(this,"__className__",this.className),this.className=this.className||e===!1?"":q.get(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(W," ").indexOf(t)>=0)return!0;return!1},val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=x.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,x(this).val()):e,null==i?i="":"number"==typeof i?i+="":x.isArray(i)&&(i=x.map(i,function(e){return null==e?"":e+""})),t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&t.set(this,i,"value")!==undefined||(this.value=i))});if(i)return t=x.valHooks[i.type]||x.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&(n=t.get(i,"value"))!==undefined?n:(n=i.value,"string"==typeof n?n.replace($,""):null==n?"":n)}}}),x.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;for(;a>u;u++)if(n=r[u],!(!n.selected&&u!==i||(x.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&x.nodeName(n.parentNode,"optgroup"))){if(t=x(n).val(),o)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=x.makeArray(t),s=i.length;while(s--)r=i[s],(r.selected=x.inArray(x(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,t,n){var i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===r?x.prop(e,t,n):(1===s&&x.isXMLDoc(e)||(t=t.toLowerCase(),i=x.attrHooks[t]||(x.expr.match.bool.test(t)?M:R)),n===undefined?i&&"get"in i&&null!==(o=i.get(e,t))?o:(o=x.find.attr(e,t),null==o?undefined:o):null!==n?i&&"set"in i&&(o=i.set(e,n,t))!==undefined?o:(e.setAttribute(t,n+""),n):(x.removeAttr(e,t),undefined))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=x.propFix[n]||n,x.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!x.support.radioValue&&"radio"===t&&x.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!x.isXMLDoc(e),o&&(t=x.propFix[t]||t,i=x.propHooks[t]),n!==undefined?i&&"set"in i&&(r=i.set(e,n,t))!==undefined?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||B.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),M={set:function(e,t,n){return t===!1?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,t){var n=x.expr.attrHandle[t]||x.find.attr;x.expr.attrHandle[t]=function(e,t,r){var i=x.expr.attrHandle[t],o=r?undefined:(x.expr.attrHandle[t]=undefined)!=n(e,t,r)?t.toLowerCase():null;return x.expr.attrHandle[t]=i,o}}),x.support.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,t){return x.isArray(t)?e.checked=x.inArray(x(e).val(),t)>=0:undefined}},x.support.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var I=/^key/,z=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,X=/^([^.]*)(?:\.(.+)|)$/;function U(){return!0}function Y(){return!1}function V(){try{return o.activeElement}catch(e){}}x.event={global:{},add:function(e,t,n,i,o){var s,a,u,l,c,p,f,h,d,g,m,y=q.get(e);if(y){n.handler&&(s=n,n=s.handler,o=s.selector),n.guid||(n.guid=x.guid++),(l=y.events)||(l=y.events={}),(a=y.handle)||(a=y.handle=function(e){return typeof x===r||e&&x.event.triggered===e.type?undefined:x.event.dispatch.apply(a.elem,arguments)},a.elem=e),t=(t||"").match(w)||[""],c=t.length;while(c--)u=X.exec(t[c])||[],d=m=u[1],g=(u[2]||"").split(".").sort(),d&&(f=x.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=x.event.special[d]||{},p=x.extend({type:d,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:g.join(".")},s),(h=l[d])||(h=l[d]=[],h.delegateCount=0,f.setup&&f.setup.call(e,i,g,a)!==!1||e.addEventListener&&e.addEventListener(d,a,!1)),f.add&&(f.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,p):h.push(p),x.event.global[d]=!0);e=null}},remove:function(e,t,n,r,i){var o,s,a,u,l,c,p,f,h,d,g,m=q.hasData(e)&&q.get(e);if(m&&(u=m.events)){t=(t||"").match(w)||[""],l=t.length;while(l--)if(a=X.exec(t[l])||[],h=g=a[1],d=(a[2]||"").split(".").sort(),h){p=x.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,f=u[h]||[],a=a[2]&&RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;while(o--)c=f[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,p.remove&&p.remove.call(e,c));s&&!f.length&&(p.teardown&&p.teardown.call(e,d,m.handle)!==!1||x.removeEvent(e,h,m.handle),delete u[h])}else for(h in u)x.event.remove(e,h+t[l],n,r,!0);x.isEmptyObject(u)&&(delete m.handle,q.remove(e,"events"))}},trigger:function(t,n,r,i){var s,a,u,l,c,p,f,h=[r||o],d=y.call(t,"type")?t.type:t,g=y.call(t,"namespace")?t.namespace.split("."):[];if(a=u=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!_.test(d+x.event.triggered)&&(d.indexOf(".")>=0&&(g=d.split("."),d=g.shift(),g.sort()),c=0>d.indexOf(":")&&"on"+d,t=t[x.expando]?t:new x.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=g.join("."),t.namespace_re=t.namespace?RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=undefined,t.target||(t.target=r),n=null==n?[t]:x.makeArray(n,[t]),f=x.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!x.isWindow(r)){for(l=f.delegateType||d,_.test(l+d)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||o)&&h.push(u.defaultView||u.parentWindow||e)}s=0;while((a=h[s++])&&!t.isPropagationStopped())t.type=s>1?l:f.bindType||d,p=(q.get(a,"events")||{})[t.type]&&q.get(a,"handle"),p&&p.apply(a,n),p=c&&a[c],p&&x.acceptData(a)&&p.apply&&p.apply(a,n)===!1&&t.preventDefault();return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),n)!==!1||!x.acceptData(r)||c&&x.isFunction(r[d])&&!x.isWindow(r)&&(u=r[c],u&&(r[c]=null),x.event.triggered=d,r[d](),x.event.triggered=undefined,u&&(r[c]=u)),t.result}},dispatch:function(e){e=x.event.fix(e);var t,n,r,i,o,s=[],a=d.call(arguments),u=(q.get(this,"events")||{})[e.type]||[],l=x.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){s=x.event.handlers.call(this,e,u),t=0;while((i=s[t++])&&!e.isPropagationStopped()){e.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((x.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),r!==undefined&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",r[i]===undefined&&(r[i]=o.needsContext?x(i,this).index(u)>=0:x.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return t.length>a&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,s=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||o,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||s===undefined||(e.which=1&s?1:2&s?3:4&s?2:0),e}},fix:function(e){if(e[x.expando])return e;var t,n,r,i=e.type,s=e,a=this.fixHooks[i];a||(this.fixHooks[i]=a=z.test(i)?this.mouseHooks:I.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new x.Event(s),t=r.length;while(t--)n=r[t],e[n]=s[n];return e.target||(e.target=o),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,s):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==V()&&this.focus?(this.focus(),!1):undefined},delegateType:"focusin"},blur:{trigger:function(){return this===V()&&this.blur?(this.blur(),!1):undefined},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&x.nodeName(this,"input")?(this.click(),!1):undefined},_default:function(e){return x.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){e.result!==undefined&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?x.event.trigger(i,null,t):x.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},x.Event=function(e,t){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.getPreventDefault&&e.getPreventDefault()?U:Y):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||x.now(),this[x.expando]=!0,undefined):new x.Event(e,t)},x.Event.prototype={isDefaultPrevented:Y,isPropagationStopped:Y,isImmediatePropagationStopped:Y,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=U,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=U,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=U,this.stopPropagation()}},x.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!x.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),x.support.focusinBubbles||x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){x.event.simulate(t,e.target,x.event.fix(e),!0)};x.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),x.fn.extend({on:function(e,t,n,r,i){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=undefined);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=undefined):null==r&&("string"==typeof t?(r=n,n=undefined):(r=n,n=t,t=undefined)),r===!1)r=Y;else if(!r)return this;return 1===i&&(o=r,r=function(e){return x().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=x.guid++)),this.each(function(){x.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=undefined),n===!1&&(n=Y),this.each(function(){x.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?x.event.trigger(e,t,n,!0):undefined}});var G=/^.[^:#\[\.,]*$/,J=/^(?:parents|prev(?:Until|All))/,Q=x.expr.match.needsContext,K={children:!0,contents:!0,next:!0,prev:!0};x.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;i>t;t++)if(x.contains(r[t],this))return!0}));for(t=0;i>t;t++)x.find(e,r[t],n);return n=this.pushStack(i>1?x.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){var e=0;for(;n>e;e++)if(x.contains(this,t[e]))return!0})},not:function(e){return this.pushStack(et(this,e||[],!0))},filter:function(e){return this.pushStack(et(this,e||[],!1))},is:function(e){return!!et(this,"string"==typeof e&&Q.test(e)?x(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],s=Q.test(e)||"string"!=typeof e?x(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(s?s.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?x.unique(o):o)},index:function(e){return e?"string"==typeof e?g.call(x(e),this[0]):g.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?x(e,t):x.makeArray(e&&e.nodeType?[e]:e),r=x.merge(this.get(),n);return this.pushStack(x.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function Z(e,t){while((e=e[t])&&1!==e.nodeType);return e}x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x.dir(e,"parentNode")},parentsUntil:function(e,t,n){return x.dir(e,"parentNode",n)},next:function(e){return Z(e,"nextSibling")},prev:function(e){return Z(e,"previousSibling")},nextAll:function(e){return x.dir(e,"nextSibling")},prevAll:function(e){return x.dir(e,"previousSibling")},nextUntil:function(e,t,n){return x.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return x.dir(e,"previousSibling",n)},siblings:function(e){return x.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return x.sibling(e.firstChild)},contents:function(e){return e.contentDocument||x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=x.filter(r,i)),this.length>1&&(K[e]||x.unique(i),J.test(e)&&i.reverse()),this.pushStack(i)}}),x.extend({filter:function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,t,n){var r=[],i=n!==undefined;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&x(e).is(n))break;r.push(e)}return r},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function et(e,t,n){if(x.isFunction(t))return x.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return x.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(G.test(t))return x.filter(t,e,n);t=x.filter(t,e)}return x.grep(e,function(e){return g.call(t,e)>=0!==n})}var tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,nt=/<([\w:]+)/,rt=/<|&#?\w+;/,it=/<(?:script|style|link)/i,ot=/^(?:checkbox|radio)$/i,st=/checked\s*(?:[^=]|=\s*.checked.)/i,at=/^$|\/(?:java|ecma)script/i,ut=/^true\/(.*)/,lt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ct={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ct.optgroup=ct.option,ct.tbody=ct.tfoot=ct.colgroup=ct.caption=ct.thead,ct.th=ct.td,x.fn.extend({text:function(e){return x.access(this,function(e){return e===undefined?x.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?x.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||x.cleanData(mt(n)),n.parentNode&&(t&&x.contains(n.ownerDocument,n)&&dt(mt(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(mt(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return x.access(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!it.test(e)&&!ct[(nt.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(tt,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(x.cleanData(mt(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=x.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),x(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=f.apply([],e);var r,i,o,s,a,u,l=0,c=this.length,p=this,h=c-1,d=e[0],g=x.isFunction(d);if(g||!(1>=c||"string"!=typeof d||x.support.checkClone)&&st.test(d))return this.each(function(r){var i=p.eq(r);g&&(e[0]=d.call(this,r,i.html())),i.domManip(e,t,n)});if(c&&(r=x.buildFragment(e,this[0].ownerDocument,!1,!n&&this),i=r.firstChild,1===r.childNodes.length&&(r=i),i)){for(o=x.map(mt(r,"script"),ft),s=o.length;c>l;l++)a=r,l!==h&&(a=x.clone(a,!0,!0),s&&x.merge(o,mt(a,"script"))),t.call(this[l],a,l);if(s)for(u=o[o.length-1].ownerDocument,x.map(o,ht),l=0;s>l;l++)a=o[l],at.test(a.type||"")&&!q.access(a,"globalEval")&&x.contains(u,a)&&(a.src?x._evalUrl(a.src):x.globalEval(a.textContent.replace(lt,"")))}return this}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){var n,r=[],i=x(e),o=i.length-1,s=0;for(;o>=s;s++)n=s===o?this:this.clone(!0),x(i[s])[t](n),h.apply(r,n.get());return this.pushStack(r)}}),x.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=x.contains(e.ownerDocument,e);if(!(x.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(s=mt(a),o=mt(e),r=0,i=o.length;i>r;r++)yt(o[r],s[r]);if(t)if(n)for(o=o||mt(e),s=s||mt(a),r=0,i=o.length;i>r;r++)gt(o[r],s[r]);else gt(e,a);return s=mt(a,"script"),s.length>0&&dt(s,!u&&mt(e,"script")),a},buildFragment:function(e,t,n,r){var i,o,s,a,u,l,c=0,p=e.length,f=t.createDocumentFragment(),h=[];for(;p>c;c++)if(i=e[c],i||0===i)if("object"===x.type(i))x.merge(h,i.nodeType?[i]:i);else if(rt.test(i)){o=o||f.appendChild(t.createElement("div")),s=(nt.exec(i)||["",""])[1].toLowerCase(),a=ct[s]||ct._default,o.innerHTML=a[1]+i.replace(tt,"<$1></$2>")+a[2],l=a[0];while(l--)o=o.lastChild;x.merge(h,o.childNodes),o=f.firstChild,o.textContent=""}else h.push(t.createTextNode(i));f.textContent="",c=0;while(i=h[c++])if((!r||-1===x.inArray(i,r))&&(u=x.contains(i.ownerDocument,i),o=mt(f.appendChild(i),"script"),u&&dt(o),n)){l=0;while(i=o[l++])at.test(i.type||"")&&n.push(i)}return f},cleanData:function(e){var t,n,r,i,o,s,a=x.event.special,u=0;for(;(n=e[u])!==undefined;u++){if(F.accepts(n)&&(o=n[q.expando],o&&(t=q.cache[o]))){if(r=Object.keys(t.events||{}),r.length)for(s=0;(i=r[s])!==undefined;s++)a[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);q.cache[o]&&delete q.cache[o]}delete L.cache[n[L.expando]]}},_evalUrl:function(e){return x.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})}});function pt(e,t){return x.nodeName(e,"table")&&x.nodeName(1===t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function ft(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ht(e){var t=ut.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function dt(e,t){var n=e.length,r=0;for(;n>r;r++)q.set(e[r],"globalEval",!t||q.get(t[r],"globalEval"))}function gt(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(q.hasData(e)&&(o=q.access(e),s=q.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;r>n;n++)x.event.add(t,i,l[i][n])}L.hasData(e)&&(a=L.access(e),u=x.extend({},a),L.set(t,u))}}function mt(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return t===undefined||t&&x.nodeName(e,t)?x.merge([e],n):n}function yt(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ot.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}x.fn.extend({wrapAll:function(e){var t;return x.isFunction(e)?this.each(function(t){x(this).wrapAll(e.call(this,t))}):(this[0]&&(t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return x.isFunction(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=x.isFunction(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){x.nodeName(this,"body")||x(this).replaceWith(this.childNodes)}).end()}});var vt,xt,bt=/^(none|table(?!-c[ea]).+)/,wt=/^margin/,Tt=RegExp("^("+b+")(.*)$","i"),Ct=RegExp("^("+b+")(?!px)[a-z%]+$","i"),kt=RegExp("^([+-])=("+b+")","i"),Nt={BODY:"block"},Et={position:"absolute",visibility:"hidden",display:"block"},St={letterSpacing:0,fontWeight:400},jt=["Top","Right","Bottom","Left"],Dt=["Webkit","O","Moz","ms"];function At(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Dt.length;while(i--)if(t=Dt[i]+n,t in e)return t;return r}function Lt(e,t){return e=t||e,"none"===x.css(e,"display")||!x.contains(e.ownerDocument,e)}function qt(t){return e.getComputedStyle(t,null)}function Ht(e,t){var n,r,i,o=[],s=0,a=e.length;for(;a>s;s++)r=e[s],r.style&&(o[s]=q.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Lt(r)&&(o[s]=q.access(r,"olddisplay",Rt(r.nodeName)))):o[s]||(i=Lt(r),(n&&"none"!==n||!i)&&q.set(r,"olddisplay",i?n:x.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}x.fn.extend({css:function(e,t){return x.access(this,function(e,t,n){var r,i,o={},s=0;if(x.isArray(t)){for(r=qt(e),i=t.length;i>s;s++)o[t[s]]=x.css(e,t[s],!1,r);return o}return n!==undefined?x.style(e,t,n):x.css(e,t)},e,t,arguments.length>1)},show:function(){return Ht(this,!0)},hide:function(){return Ht(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Lt(this)?x(this).show():x(this).hide()})}}),x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=vt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=x.camelCase(t),u=e.style;return t=x.cssProps[a]||(x.cssProps[a]=At(u,a)),s=x.cssHooks[t]||x.cssHooks[a],n===undefined?s&&"get"in s&&(i=s.get(e,!1,r))!==undefined?i:u[t]:(o=typeof n,"string"===o&&(i=kt.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(x.css(e,t)),o="number"),null==n||"number"===o&&isNaN(n)||("number"!==o||x.cssNumber[a]||(n+="px"),x.support.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&(n=s.set(e,n,r))===undefined||(u[t]=n)),undefined)}},css:function(e,t,n,r){var i,o,s,a=x.camelCase(t);return t=x.cssProps[a]||(x.cssProps[a]=At(e.style,a)),s=x.cssHooks[t]||x.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),i===undefined&&(i=vt(e,t,r)),"normal"===i&&t in St&&(i=St[t]),""===n||n?(o=parseFloat(i),n===!0||x.isNumeric(o)?o||0:i):i}}),vt=function(e,t,n){var r,i,o,s=n||qt(e),a=s?s.getPropertyValue(t)||s[t]:undefined,u=e.style;return s&&(""!==a||x.contains(e.ownerDocument,e)||(a=x.style(e,t)),Ct.test(a)&&wt.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=s.width,u.width=r,u.minWidth=i,u.maxWidth=o)),a};function Ot(e,t,n){var r=Tt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function Ft(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;for(;4>o;o+=2)"margin"===n&&(s+=x.css(e,n+jt[o],!0,i)),r?("content"===n&&(s-=x.css(e,"padding"+jt[o],!0,i)),"margin"!==n&&(s-=x.css(e,"border"+jt[o]+"Width",!0,i))):(s+=x.css(e,"padding"+jt[o],!0,i),"padding"!==n&&(s+=x.css(e,"border"+jt[o]+"Width",!0,i)));return s}function Pt(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=qt(e),s=x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=vt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Ct.test(i))return i;r=s&&(x.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+Ft(e,t,n||(s?"border":"content"),r,o)+"px"}function Rt(e){var t=o,n=Nt[e];return n||(n=Mt(e,t),"none"!==n&&n||(xt=(xt||x("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=(xt[0].contentWindow||xt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=Mt(e,t),xt.detach()),Nt[e]=n),n}function Mt(e,t){var n=x(t.createElement(e)).appendTo(t.body),r=x.css(n[0],"display");return n.remove(),r}x.each(["height","width"],function(e,t){x.cssHooks[t]={get:function(e,n,r){return n?0===e.offsetWidth&&bt.test(x.css(e,"display"))?x.swap(e,Et,function(){return Pt(e,t,r)}):Pt(e,t,r):undefined},set:function(e,n,r){var i=r&&qt(e);return Ot(e,n,r?Ft(e,t,r,x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,i),i):0)}}}),x(function(){x.support.reliableMarginRight||(x.cssHooks.marginRight={get:function(e,t){return t?x.swap(e,{display:"inline-block"},vt,[e,"marginRight"]):undefined}}),!x.support.pixelPosition&&x.fn.position&&x.each(["top","left"],function(e,t){x.cssHooks[t]={get:function(e,n){return n?(n=vt(e,t),Ct.test(n)?x(e).position()[t]+"px":n):undefined}}})}),x.expr&&x.expr.filters&&(x.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight},x.expr.filters.visible=function(e){return!x.expr.filters.hidden(e)}),x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+jt[r]+t]=o[r]||o[r-2]||o[0];return i}},wt.test(e)||(x.cssHooks[e+t].set=Ot)});var Wt=/%20/g,$t=/\[\]$/,Bt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,zt=/^(?:input|select|textarea|keygen)/i;x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&zt.test(this.nodeName)&&!It.test(e)&&(this.checked||!ot.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:x.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(Bt,"\r\n")}}):{name:t.name,value:n.replace(Bt,"\r\n")}}).get()}}),x.param=function(e,t){var n,r=[],i=function(e,t){t=x.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(t===undefined&&(t=x.ajaxSettings&&x.ajaxSettings.traditional),x.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){i(this.name,this.value)});else for(n in e)_t(n,e[n],t,i);return r.join("&").replace(Wt,"+")};function _t(e,t,n,r){var i;if(x.isArray(t))x.each(t,function(t,i){n||$t.test(e)?r(e,i):_t(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==x.type(t))r(e,t);else for(i in t)_t(e+"["+i+"]",t[i],n,r)}x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)
},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var Xt,Ut,Yt=x.now(),Vt=/\?/,Gt=/#.*$/,Jt=/([?&])_=[^&]*/,Qt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Kt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Zt=/^(?:GET|HEAD)$/,en=/^\/\//,tn=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,nn=x.fn.load,rn={},on={},sn="*/".concat("*");try{Ut=i.href}catch(an){Ut=o.createElement("a"),Ut.href="",Ut=Ut.href}Xt=tn.exec(Ut.toLowerCase())||[];function un(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(w)||[];if(x.isFunction(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function ln(e,t,n,r){var i={},o=e===on;function s(a){var u;return i[a]=!0,x.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):undefined:(t.dataTypes.unshift(l),s(l),!1)}),u}return s(t.dataTypes[0])||!i["*"]&&s("*")}function cn(e,t){var n,r,i=x.ajaxSettings.flatOptions||{};for(n in t)t[n]!==undefined&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&x.extend(!0,e,r),e}x.fn.load=function(e,t,n){if("string"!=typeof e&&nn)return nn.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>=0&&(r=e.slice(a),e=e.slice(0,a)),x.isFunction(t)?(n=t,t=undefined):t&&"object"==typeof t&&(i="POST"),s.length>0&&x.ajax({url:e,type:i,dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?x("<div>").append(x.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ut,type:"GET",isLocal:Kt.test(Xt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":sn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":x.parseJSON,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?cn(cn(e,x.ajaxSettings),t):cn(x.ajaxSettings,e)},ajaxPrefilter:un(rn),ajaxTransport:un(on),ajax:function(e,t){"object"==typeof e&&(t=e,e=undefined),t=t||{};var n,r,i,o,s,a,u,l,c=x.ajaxSetup({},t),p=c.context||c,f=c.context&&(p.nodeType||p.jquery)?x(p):x.event,h=x.Deferred(),d=x.Callbacks("once memory"),g=c.statusCode||{},m={},y={},v=0,b="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===v){if(!o){o={};while(t=Qt.exec(i))o[t[1].toLowerCase()]=t[2]}t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===v?i:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return v||(e=y[n]=y[n]||e,m[e]=t),this},overrideMimeType:function(e){return v||(c.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>v)for(t in e)g[t]=[g[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||b;return n&&n.abort(t),k(0,t),this}};if(h.promise(T).complete=d.add,T.success=T.done,T.error=T.fail,c.url=((e||c.url||Ut)+"").replace(Gt,"").replace(en,Xt[1]+"//"),c.type=t.method||t.type||c.method||c.type,c.dataTypes=x.trim(c.dataType||"*").toLowerCase().match(w)||[""],null==c.crossDomain&&(a=tn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===Xt[1]&&a[2]===Xt[2]&&(a[3]||("http:"===a[1]?"80":"443"))===(Xt[3]||("http:"===Xt[1]?"80":"443")))),c.data&&c.processData&&"string"!=typeof c.data&&(c.data=x.param(c.data,c.traditional)),ln(rn,c,t,T),2===v)return T;u=c.global,u&&0===x.active++&&x.event.trigger("ajaxStart"),c.type=c.type.toUpperCase(),c.hasContent=!Zt.test(c.type),r=c.url,c.hasContent||(c.data&&(r=c.url+=(Vt.test(r)?"&":"?")+c.data,delete c.data),c.cache===!1&&(c.url=Jt.test(r)?r.replace(Jt,"$1_="+Yt++):r+(Vt.test(r)?"&":"?")+"_="+Yt++)),c.ifModified&&(x.lastModified[r]&&T.setRequestHeader("If-Modified-Since",x.lastModified[r]),x.etag[r]&&T.setRequestHeader("If-None-Match",x.etag[r])),(c.data&&c.hasContent&&c.contentType!==!1||t.contentType)&&T.setRequestHeader("Content-Type",c.contentType),T.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+("*"!==c.dataTypes[0]?", "+sn+"; q=0.01":""):c.accepts["*"]);for(l in c.headers)T.setRequestHeader(l,c.headers[l]);if(c.beforeSend&&(c.beforeSend.call(p,T,c)===!1||2===v))return T.abort();b="abort";for(l in{success:1,error:1,complete:1})T[l](c[l]);if(n=ln(on,c,t,T)){T.readyState=1,u&&f.trigger("ajaxSend",[T,c]),c.async&&c.timeout>0&&(s=setTimeout(function(){T.abort("timeout")},c.timeout));try{v=1,n.send(m,k)}catch(C){if(!(2>v))throw C;k(-1,C)}}else k(-1,"No Transport");function k(e,t,o,a){var l,m,y,b,w,C=t;2!==v&&(v=2,s&&clearTimeout(s),n=undefined,i=a||"",T.readyState=e>0?4:0,l=e>=200&&300>e||304===e,o&&(b=pn(c,T,o)),b=fn(c,b,T,l),l?(c.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(x.lastModified[r]=w),w=T.getResponseHeader("etag"),w&&(x.etag[r]=w)),204===e||"HEAD"===c.type?C="nocontent":304===e?C="notmodified":(C=b.state,m=b.data,y=b.error,l=!y)):(y=C,(e||!C)&&(C="error",0>e&&(e=0))),T.status=e,T.statusText=(t||C)+"",l?h.resolveWith(p,[m,C,T]):h.rejectWith(p,[T,C,y]),T.statusCode(g),g=undefined,u&&f.trigger(l?"ajaxSuccess":"ajaxError",[T,c,l?m:y]),d.fireWith(p,[T,C]),u&&(f.trigger("ajaxComplete",[T,c]),--x.active||x.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,undefined,t,"script")}}),x.each(["get","post"],function(e,t){x[t]=function(e,n,r,i){return x.isFunction(n)&&(i=i||r,r=n,n=undefined),x.ajax({url:e,type:t,dataType:i,data:n,success:r})}});function pn(e,t,n){var r,i,o,s,a=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),r===undefined&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):undefined}function fn(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(p){return{state:"parsererror",error:s?p:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",function(e){e.cache===undefined&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),x.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=x("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}}});var hn=[],dn=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=hn.pop()||x.expando+"_"+Yt++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(dn.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&dn.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=x.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(dn,"$1"+i):t.jsonp!==!1&&(t.url+=(Vt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||x.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,hn.push(i)),s&&x.isFunction(o)&&o(s[0]),s=o=undefined}),"script"):undefined}),x.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var gn=x.ajaxSettings.xhr(),mn={0:200,1223:204},yn=0,vn={};e.ActiveXObject&&x(e).on("unload",function(){for(var e in vn)vn[e]();vn=undefined}),x.support.cors=!!gn&&"withCredentials"in gn,x.support.ajax=gn=!!gn,x.ajaxTransport(function(e){var t;return x.support.cors||gn&&!e.crossDomain?{send:function(n,r){var i,o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)s[i]=e.xhrFields[i];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)s.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete vn[o],t=s.onload=s.onerror=null,"abort"===e?s.abort():"error"===e?r(s.status||404,s.statusText):r(mn[s.status]||s.status,s.statusText,"string"==typeof s.responseText?{text:s.responseText}:undefined,s.getAllResponseHeaders()))}},s.onload=t(),s.onerror=t("error"),t=vn[o=yn++]=t("abort"),s.send(e.hasContent&&e.data||null)},abort:function(){t&&t()}}:undefined});var xn,bn,wn=/^(?:toggle|show|hide)$/,Tn=RegExp("^(?:([+-])=|)("+b+")([a-z%]*)$","i"),Cn=/queueHooks$/,kn=[An],Nn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Tn.exec(t),o=i&&i[3]||(x.cssNumber[e]?"":"px"),s=(x.cssNumber[e]||"px"!==o&&+r)&&Tn.exec(x.css(n.elem,e)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,x.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--u)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};function En(){return setTimeout(function(){xn=undefined}),xn=x.now()}function Sn(e,t,n){var r,i=(Nn[t]||[]).concat(Nn["*"]),o=0,s=i.length;for(;s>o;o++)if(r=i[o].call(n,t,e))return r}function jn(e,t,n){var r,i,o=0,s=kn.length,a=x.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=xn||En(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;for(;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:xn||En(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?a.resolveWith(e,[l,t]):a.rejectWith(e,[l,t]),this}}),c=l.props;for(Dn(c,l.opts.specialEasing);s>o;o++)if(r=kn[o].call(l,e,c,l.opts))return r;return x.map(c,Sn,l),x.isFunction(l.opts.start)&&l.opts.start.call(e,l),x.fx.timer(x.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function Dn(e,t){var n,r,i,o,s;for(n in e)if(r=x.camelCase(n),i=t[r],o=e[n],x.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=x.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}x.Animation=x.extend(jn,{tweener:function(e,t){x.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Nn[n]=Nn[n]||[],Nn[n].unshift(t)},prefilter:function(e,t){t?kn.unshift(e):kn.push(e)}});function An(e,t,n){var r,i,o,s,a,u,l=this,c={},p=e.style,f=e.nodeType&&Lt(e),h=q.get(e,"fxshow");n.queue||(a=x._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,l.always(function(){l.always(function(){a.unqueued--,x.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===x.css(e,"display")&&"none"===x.css(e,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",l.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],wn.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(f?"hide":"show")){if("show"!==i||!h||h[r]===undefined)continue;f=!0}c[r]=h&&h[r]||x.style(e,r)}if(!x.isEmptyObject(c)){h?"hidden"in h&&(f=h.hidden):h=q.access(e,"fxshow",{}),o&&(h.hidden=!f),f?x(e).show():l.done(function(){x(e).hide()}),l.done(function(){var t;q.remove(e,"fxshow");for(t in c)x.style(e,t,c[t])});for(r in c)s=Sn(f?h[r]:0,r,l),r in h||(h[r]=s.start,f&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function Ln(e,t,n,r,i){return new Ln.prototype.init(e,t,n,r,i)}x.Tween=Ln,Ln.prototype={constructor:Ln,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=Ln.propHooks[this.prop];return e&&e.get?e.get(this):Ln.propHooks._default.get(this)},run:function(e){var t,n=Ln.propHooks[this.prop];return this.pos=t=this.options.duration?x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Ln.propHooks._default.set(this),this}},Ln.prototype.init.prototype=Ln.prototype,Ln.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=x.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[x.cssProps[e.prop]]||x.cssHooks[e.prop])?x.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Ln.propHooks.scrollTop=Ln.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.each(["toggle","show","hide"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(qn(t,!0),e,r,i)}}),x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Lt).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),o=x.speed(t,n,r),s=function(){var t=jn(this,x.extend({},e),o);(i||q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=undefined),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=x.timers,s=q.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&Cn.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&x.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=x.timers,s=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function qn(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=jt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}x.each({slideDown:qn("show"),slideUp:qn("hide"),slideToggle:qn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||x.isFunction(e)&&e,duration:e,easing:n&&t||t&&!x.isFunction(t)&&t};return r.duration=x.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in x.fx.speeds?x.fx.speeds[r.duration]:x.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){x.isFunction(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},x.timers=[],x.fx=Ln.prototype.init,x.fx.tick=function(){var e,t=x.timers,n=0;for(xn=x.now();t.length>n;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||x.fx.stop(),xn=undefined},x.fx.timer=function(e){e()&&x.timers.push(e)&&x.fx.start()},x.fx.interval=13,x.fx.start=function(){bn||(bn=setInterval(x.fx.tick,x.fx.interval))},x.fx.stop=function(){clearInterval(bn),bn=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fx.step={},x.expr&&x.expr.filters&&(x.expr.filters.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length}),x.fn.offset=function(e){if(arguments.length)return e===undefined?this:this.each(function(t){x.offset.setOffset(this,e,t)});var t,n,i=this[0],o={top:0,left:0},s=i&&i.ownerDocument;if(s)return t=s.documentElement,x.contains(t,i)?(typeof i.getBoundingClientRect!==r&&(o=i.getBoundingClientRect()),n=Hn(s),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}):o},x.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=x.css(e,"position"),p=x(e),f={};"static"===c&&(e.style.position="relative"),a=p.offset(),o=x.css(e,"top"),u=x.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=p.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),x.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),"using"in t?t.using.call(e,f):p.css(f)}},x.fn.extend({position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===x.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),x.nodeName(e[0],"html")||(r=e.offset()),r.top+=x.css(e[0],"borderTopWidth",!0),r.left+=x.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-x.css(n,"marginTop",!0),left:t.left-r.left-x.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||s;while(e&&!x.nodeName(e,"html")&&"static"===x.css(e,"position"))e=e.offsetParent;return e||s})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;x.fn[t]=function(i){return x.access(this,function(t,i,o){var s=Hn(t);return o===undefined?s?s[n]:t[i]:(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o,undefined)},t,i,arguments.length,null)}});function Hn(e){return x.isWindow(e)?e:9===e.nodeType&&e.defaultView}x.each({Height:"height",Width:"width"},function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){x.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return x.access(this,function(t,n,r){var i;return x.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):r===undefined?x.css(t,n,s):x.style(t,n,r,s)},t,o?r:undefined,o,null)}})}),x.fn.size=function(){return this.length},x.fn.andSelf=x.fn.addBack,"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=x:"function"==typeof define&&define.amd&&define("jquery",[],function(){return x}),"object"==typeof e&&"object"==typeof e.document&&(e.jQuery=e.$=x)})(window);

////////////////////////////////////////
// SRC End --> libs/jquery/jquery-2.0.3.min.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/jquery/jquery-migrate-1.2.1.min.js
////////////////////////////////////////
/*! jQuery Migrate v1.2.1 | (c) 2005, 2013 jQuery Foundation, Inc. and other contributors | jquery.org/license */
jQuery.migrateMute===void 0&&(jQuery.migrateMute=!0),function(e,t,n){function r(n){var r=t.console;i[n]||(i[n]=!0,e.migrateWarnings.push(n),r&&r.warn&&!e.migrateMute&&(r.warn("JQMIGRATE: "+n),e.migrateTrace&&r.trace&&r.trace()))}function a(t,a,i,o){if(Object.defineProperty)try{return Object.defineProperty(t,a,{configurable:!0,enumerable:!0,get:function(){return r(o),i},set:function(e){r(o),i=e}}),n}catch(s){}e._definePropertyBroken=!0,t[a]=i}var i={};e.migrateWarnings=[],!e.migrateMute&&t.console&&t.console.log&&t.console.log("JQMIGRATE: Logging is active"),e.migrateTrace===n&&(e.migrateTrace=!0),e.migrateReset=function(){i={},e.migrateWarnings.length=0},"BackCompat"===document.compatMode&&r("jQuery is not compatible with Quirks Mode");var o=e("<input/>",{size:1}).attr("size")&&e.attrFn,s=e.attr,u=e.attrHooks.value&&e.attrHooks.value.get||function(){return null},c=e.attrHooks.value&&e.attrHooks.value.set||function(){return n},l=/^(?:input|button)$/i,d=/^[238]$/,p=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,f=/^(?:checked|selected)$/i;a(e,"attrFn",o||{},"jQuery.attrFn is deprecated"),e.attr=function(t,a,i,u){var c=a.toLowerCase(),g=t&&t.nodeType;return u&&(4>s.length&&r("jQuery.fn.attr( props, pass ) is deprecated"),t&&!d.test(g)&&(o?a in o:e.isFunction(e.fn[a])))?e(t)[a](i):("type"===a&&i!==n&&l.test(t.nodeName)&&t.parentNode&&r("Can't change the 'type' of an input or button in IE 6/7/8"),!e.attrHooks[c]&&p.test(c)&&(e.attrHooks[c]={get:function(t,r){var a,i=e.prop(t,r);return i===!0||"boolean"!=typeof i&&(a=t.getAttributeNode(r))&&a.nodeValue!==!1?r.toLowerCase():n},set:function(t,n,r){var a;return n===!1?e.removeAttr(t,r):(a=e.propFix[r]||r,a in t&&(t[a]=!0),t.setAttribute(r,r.toLowerCase())),r}},f.test(c)&&r("jQuery.fn.attr('"+c+"') may use property instead of attribute")),s.call(e,t,a,i))},e.attrHooks.value={get:function(e,t){var n=(e.nodeName||"").toLowerCase();return"button"===n?u.apply(this,arguments):("input"!==n&&"option"!==n&&r("jQuery.fn.attr('value') no longer gets properties"),t in e?e.value:null)},set:function(e,t){var a=(e.nodeName||"").toLowerCase();return"button"===a?c.apply(this,arguments):("input"!==a&&"option"!==a&&r("jQuery.fn.attr('value', val) no longer sets properties"),e.value=t,n)}};var g,h,v=e.fn.init,m=e.parseJSON,y=/^([^<]*)(<[\w\W]+>)([^>]*)$/;e.fn.init=function(t,n,a){var i;return t&&"string"==typeof t&&!e.isPlainObject(n)&&(i=y.exec(e.trim(t)))&&i[0]&&("<"!==t.charAt(0)&&r("$(html) HTML strings must start with '<' character"),i[3]&&r("$(html) HTML text after last tag is ignored"),"#"===i[0].charAt(0)&&(r("HTML string cannot start with a '#' character"),e.error("JQMIGRATE: Invalid selector string (XSS)")),n&&n.context&&(n=n.context),e.parseHTML)?v.call(this,e.parseHTML(i[2],n,!0),n,a):v.apply(this,arguments)},e.fn.init.prototype=e.fn,e.parseJSON=function(e){return e||null===e?m.apply(this,arguments):(r("jQuery.parseJSON requires a valid JSON string"),null)},e.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||0>e.indexOf("compatible")&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e.browser||(g=e.uaMatch(navigator.userAgent),h={},g.browser&&(h[g.browser]=!0,h.version=g.version),h.chrome?h.webkit=!0:h.webkit&&(h.safari=!0),e.browser=h),a(e,"browser",e.browser,"jQuery.browser is deprecated"),e.sub=function(){function t(e,n){return new t.fn.init(e,n)}e.extend(!0,t,this),t.superclass=this,t.fn=t.prototype=this(),t.fn.constructor=t,t.sub=this.sub,t.fn.init=function(r,a){return a&&a instanceof e&&!(a instanceof t)&&(a=t(a)),e.fn.init.call(this,r,a,n)},t.fn.init.prototype=t.fn;var n=t(document);return r("jQuery.sub() is deprecated"),t},e.ajaxSetup({converters:{"text json":e.parseJSON}});var b=e.fn.data;e.fn.data=function(t){var a,i,o=this[0];return!o||"events"!==t||1!==arguments.length||(a=e.data(o,t),i=e._data(o,t),a!==n&&a!==i||i===n)?b.apply(this,arguments):(r("Use of jQuery.fn.data('events') is deprecated"),i)};var j=/\/(java|ecma)script/i,w=e.fn.andSelf||e.fn.addBack;e.fn.andSelf=function(){return r("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"),w.apply(this,arguments)},e.clean||(e.clean=function(t,a,i,o){a=a||document,a=!a.nodeType&&a[0]||a,a=a.ownerDocument||a,r("jQuery.clean() is deprecated");var s,u,c,l,d=[];if(e.merge(d,e.buildFragment(t,a).childNodes),i)for(c=function(e){return!e.type||j.test(e.type)?o?o.push(e.parentNode?e.parentNode.removeChild(e):e):i.appendChild(e):n},s=0;null!=(u=d[s]);s++)e.nodeName(u,"script")&&c(u)||(i.appendChild(u),u.getElementsByTagName!==n&&(l=e.grep(e.merge([],u.getElementsByTagName("script")),c),d.splice.apply(d,[s+1,0].concat(l)),s+=l.length));return d});var Q=e.event.add,x=e.event.remove,k=e.event.trigger,N=e.fn.toggle,T=e.fn.live,M=e.fn.die,S="ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",C=RegExp("\\b(?:"+S+")\\b"),H=/(?:^|\s)hover(\.\S+|)\b/,A=function(t){return"string"!=typeof t||e.event.special.hover?t:(H.test(t)&&r("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"),t&&t.replace(H,"mouseenter$1 mouseleave$1"))};e.event.props&&"attrChange"!==e.event.props[0]&&e.event.props.unshift("attrChange","attrName","relatedNode","srcElement"),e.event.dispatch&&a(e.event,"handle",e.event.dispatch,"jQuery.event.handle is undocumented and deprecated"),e.event.add=function(e,t,n,a,i){e!==document&&C.test(t)&&r("AJAX events should be attached to document: "+t),Q.call(this,e,A(t||""),n,a,i)},e.event.remove=function(e,t,n,r,a){x.call(this,e,A(t)||"",n,r,a)},e.fn.error=function(){var e=Array.prototype.slice.call(arguments,0);return r("jQuery.fn.error() is deprecated"),e.splice(0,0,"error"),arguments.length?this.bind.apply(this,e):(this.triggerHandler.apply(this,e),this)},e.fn.toggle=function(t,n){if(!e.isFunction(t)||!e.isFunction(n))return N.apply(this,arguments);r("jQuery.fn.toggle(handler, handler...) is deprecated");var a=arguments,i=t.guid||e.guid++,o=0,s=function(n){var r=(e._data(this,"lastToggle"+t.guid)||0)%o;return e._data(this,"lastToggle"+t.guid,r+1),n.preventDefault(),a[r].apply(this,arguments)||!1};for(s.guid=i;a.length>o;)a[o++].guid=i;return this.click(s)},e.fn.live=function(t,n,a){return r("jQuery.fn.live() is deprecated"),T?T.apply(this,arguments):(e(this.context).on(t,this.selector,n,a),this)},e.fn.die=function(t,n){return r("jQuery.fn.die() is deprecated"),M?M.apply(this,arguments):(e(this.context).off(t,this.selector||"**",n),this)},e.event.trigger=function(e,t,n,a){return n||C.test(e)||r("Global events are undocumented and deprecated"),k.call(this,e,t,n||document,a)},e.each(S.split("|"),function(t,n){e.event.special[n]={setup:function(){var t=this;return t!==document&&(e.event.add(document,n+"."+e.guid,function(){e.event.trigger(n,null,t,!0)}),e._data(this,n,e.guid++)),!1},teardown:function(){return this!==document&&e.event.remove(document,n+"."+e._data(this,n)),!1}}})}(jQuery,window);
////////////////////////////////////////
// SRC End --> libs/jquery/jquery-migrate-1.2.1.min.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/jquery/jquery-ui-1.10.3.custom.min.js
////////////////////////////////////////
/*! jQuery UI - v1.10.3 - 2013-08-06
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js
* Copyright 2013 jQuery Foundation and other contributors Licensed MIT */

(function(e,t){function i(t,i){var a,n,r,o=t.nodeName.toLowerCase();return"area"===o?(a=t.parentNode,n=a.name,t.href&&n&&"map"===a.nodeName.toLowerCase()?(r=e("img[usemap=#"+n+"]")[0],!!r&&s(r)):!1):(/input|select|textarea|button|object/.test(o)?!t.disabled:"a"===o?t.href||i:i)&&s(t)}function s(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}var a=0,n=/^ui-id-\d+$/;e.ui=e.ui||{},e.extend(e.ui,{version:"1.10.3",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({focus:function(t){return function(i,s){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),s&&s.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),scrollParent:function(){var t;return t=e.ui.ie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(e.css(this,"position"))&&/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!t.length?e(document):t},zIndex:function(i){if(i!==t)return this.css("zIndex",i);if(this.length)for(var s,a,n=e(this[0]);n.length&&n[0]!==document;){if(s=n.css("position"),("absolute"===s||"relative"===s||"fixed"===s)&&(a=parseInt(n.css("zIndex"),10),!isNaN(a)&&0!==a))return a;n=n.parent()}return 0},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++a)})},removeUniqueId:function(){return this.each(function(){n.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,s){return!!e.data(t,s[3])},focusable:function(t){return i(t,!isNaN(e.attr(t,"tabindex")))},tabbable:function(t){var s=e.attr(t,"tabindex"),a=isNaN(s);return(a||s>=0)&&i(t,!a)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(i,s){function a(t,i,s,a){return e.each(n,function(){i-=parseFloat(e.css(t,"padding"+this))||0,s&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),a&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var n="Width"===s?["Left","Right"]:["Top","Bottom"],r=s.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+s]=function(i){return i===t?o["inner"+s].call(this):this.each(function(){e(this).css(r,a(this,i)+"px")})},e.fn["outer"+s]=function(t,i){return"number"!=typeof t?o["outer"+s].call(this,t):this.each(function(){e(this).css(r,a(this,t,!0,i)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.support.selectstart="onselectstart"in document.createElement("div"),e.fn.extend({disableSelection:function(){return this.bind((e.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(e){e.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),e.extend(e.ui,{plugin:{add:function(t,i,s){var a,n=e.ui[t].prototype;for(a in s)n.plugins[a]=n.plugins[a]||[],n.plugins[a].push([i,s[a]])},call:function(e,t,i){var s,a=e.plugins[t];if(a&&e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType)for(s=0;a.length>s;s++)e.options[a[s][0]]&&a[s][1].apply(e.element,i)}},hasScroll:function(t,i){if("hidden"===e(t).css("overflow"))return!1;var s=i&&"left"===i?"scrollLeft":"scrollTop",a=!1;return t[s]>0?!0:(t[s]=1,a=t[s]>0,t[s]=0,a)}})})(jQuery);(function(e,t){var i=0,s=Array.prototype.slice,n=e.cleanData;e.cleanData=function(t){for(var i,s=0;null!=(i=t[s]);s++)try{e(i).triggerHandler("remove")}catch(a){}n(t)},e.widget=function(i,s,n){var a,r,o,h,l={},u=i.split(".")[0];i=i.split(".")[1],a=u+"-"+i,n||(n=s,s=e.Widget),e.expr[":"][a.toLowerCase()]=function(t){return!!e.data(t,a)},e[u]=e[u]||{},r=e[u][i],o=e[u][i]=function(e,i){return this._createWidget?(arguments.length&&this._createWidget(e,i),t):new o(e,i)},e.extend(o,r,{version:n.version,_proto:e.extend({},n),_childConstructors:[]}),h=new s,h.options=e.widget.extend({},h.options),e.each(n,function(i,n){return e.isFunction(n)?(l[i]=function(){var e=function(){return s.prototype[i].apply(this,arguments)},t=function(e){return s.prototype[i].apply(this,e)};return function(){var i,s=this._super,a=this._superApply;return this._super=e,this._superApply=t,i=n.apply(this,arguments),this._super=s,this._superApply=a,i}}(),t):(l[i]=n,t)}),o.prototype=e.widget.extend(h,{widgetEventPrefix:r?h.widgetEventPrefix:i},l,{constructor:o,namespace:u,widgetName:i,widgetFullName:a}),r?(e.each(r._childConstructors,function(t,i){var s=i.prototype;e.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete r._childConstructors):s._childConstructors.push(o),e.widget.bridge(i,o)},e.widget.extend=function(i){for(var n,a,r=s.call(arguments,1),o=0,h=r.length;h>o;o++)for(n in r[o])a=r[o][n],r[o].hasOwnProperty(n)&&a!==t&&(i[n]=e.isPlainObject(a)?e.isPlainObject(i[n])?e.widget.extend({},i[n],a):e.widget.extend({},a):a);return i},e.widget.bridge=function(i,n){var a=n.prototype.widgetFullName||i;e.fn[i]=function(r){var o="string"==typeof r,h=s.call(arguments,1),l=this;return r=!o&&h.length?e.widget.extend.apply(null,[r].concat(h)):r,o?this.each(function(){var s,n=e.data(this,a);return n?e.isFunction(n[r])&&"_"!==r.charAt(0)?(s=n[r].apply(n,h),s!==n&&s!==t?(l=s&&s.jquery?l.pushStack(s.get()):s,!1):t):e.error("no such method '"+r+"' for "+i+" widget instance"):e.error("cannot call methods on "+i+" prior to initialization; "+"attempted to call method '"+r+"'")}):this.each(function(){var t=e.data(this,a);t?t.option(r||{})._init():e.data(this,a,new n(r,this))}),l}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,s){s=e(s||this.defaultElement||this)[0],this.element=e(s),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this.bindings=e(),this.hoverable=e(),this.focusable=e(),s!==this&&(e.data(s,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===s&&this.destroy()}}),this.document=e(s.style?s.ownerDocument:s.document||s),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(i,s){var n,a,r,o=i;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof i)if(o={},n=i.split("."),i=n.shift(),n.length){for(a=o[i]=e.widget.extend({},this.options[i]),r=0;n.length-1>r;r++)a[n[r]]=a[n[r]]||{},a=a[n[r]];if(i=n.pop(),s===t)return a[i]===t?null:a[i];a[i]=s}else{if(s===t)return this.options[i]===t?null:this.options[i];o[i]=s}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!t).attr("aria-disabled",t),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(i,s,n){var a,r=this;"boolean"!=typeof i&&(n=s,s=i,i=!1),n?(s=a=e(s),this.bindings=this.bindings.add(s)):(n=s,s=this.element,a=this.widget()),e.each(n,function(n,o){function h(){return i||r.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled")?("string"==typeof o?r[o]:o).apply(r,arguments):t}"string"!=typeof o&&(h.guid=o.guid=o.guid||h.guid||e.guid++);var l=n.match(/^(\w+)\s*(.*)$/),u=l[1]+r.eventNamespace,c=l[2];c?a.delegate(c,u,h):s.bind(u,h)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(t).undelegate(t)},_delay:function(e,t){function i(){return("string"==typeof e?s[e]:e).apply(s,arguments)}var s=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,s){var n,a,r=this.options[t];if(s=s||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),i.target=this.element[0],a=i.originalEvent)for(n in a)n in i||(i[n]=a[n]);return this.element.trigger(i,s),!(e.isFunction(r)&&r.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(s,n,a){"string"==typeof n&&(n={effect:n});var r,o=n?n===!0||"number"==typeof n?i:n.effect||i:t;n=n||{},"number"==typeof n&&(n={duration:n}),r=!e.isEmptyObject(n),n.complete=a,n.delay&&s.delay(n.delay),r&&e.effects&&e.effects.effect[o]?s[t](n):o!==t&&s[o]?s[o](n.duration,n.easing,a):s.queue(function(i){e(this)[t](),a&&a.call(s[0]),i()})}})})(jQuery);(function(e){var t=!1;e(document).mouseup(function(){t=!1}),e.widget("ui.mouse",{version:"1.10.3",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(i){return!0===e.data(i.target,t.widgetName+".preventClickEvent")?(e.removeData(i.target,t.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):undefined}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(i){if(!t){this._mouseStarted&&this._mouseUp(i),this._mouseDownEvent=i;var s=this,n=1===i.which,a="string"==typeof this.options.cancel&&i.target.nodeName?e(i.target).closest(this.options.cancel).length:!1;return n&&!a&&this._mouseCapture(i)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){s.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(i)&&this._mouseDelayMet(i)&&(this._mouseStarted=this._mouseStart(i)!==!1,!this._mouseStarted)?(i.preventDefault(),!0):(!0===e.data(i.target,this.widgetName+".preventClickEvent")&&e.removeData(i.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return s._mouseMove(e)},this._mouseUpDelegate=function(e){return s._mouseUp(e)},e(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),i.preventDefault(),t=!0,!0)):!0}},_mouseMove:function(t){return e.ui.ie&&(!document.documentMode||9>document.documentMode)&&!t.button?this._mouseUp(t):this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(t){return e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})})(jQuery);(function(t,e){function i(t,e,i){return[parseFloat(t[0])*(p.test(t[0])?e/100:1),parseFloat(t[1])*(p.test(t[1])?i/100:1)]}function s(e,i){return parseInt(t.css(e,i),10)||0}function n(e){var i=e[0];return 9===i.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:t.isWindow(i)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}t.ui=t.ui||{};var a,o=Math.max,r=Math.abs,h=Math.round,l=/left|center|right/,c=/top|center|bottom/,u=/[\+\-]\d+(\.[\d]+)?%?/,d=/^\w+/,p=/%$/,f=t.fn.position;t.position={scrollbarWidth:function(){if(a!==e)return a;var i,s,n=t("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=n.children()[0];return t("body").append(n),i=o.offsetWidth,n.css("overflow","scroll"),s=o.offsetWidth,i===s&&(s=n[0].clientWidth),n.remove(),a=i-s},getScrollInfo:function(e){var i=e.isWindow?"":e.element.css("overflow-x"),s=e.isWindow?"":e.element.css("overflow-y"),n="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth,a="scroll"===s||"auto"===s&&e.height<e.element[0].scrollHeight;return{width:a?t.position.scrollbarWidth():0,height:n?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),s=t.isWindow(i[0]);return{element:i,isWindow:s,offset:i.offset()||{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:s?i.width():i.outerWidth(),height:s?i.height():i.outerHeight()}}},t.fn.position=function(e){if(!e||!e.of)return f.apply(this,arguments);e=t.extend({},e);var a,p,m,g,v,b,_=t(e.of),y=t.position.getWithinInfo(e.within),w=t.position.getScrollInfo(y),x=(e.collision||"flip").split(" "),k={};return b=n(_),_[0].preventDefault&&(e.at="left top"),p=b.width,m=b.height,g=b.offset,v=t.extend({},g),t.each(["my","at"],function(){var t,i,s=(e[this]||"").split(" ");1===s.length&&(s=l.test(s[0])?s.concat(["center"]):c.test(s[0])?["center"].concat(s):["center","center"]),s[0]=l.test(s[0])?s[0]:"center",s[1]=c.test(s[1])?s[1]:"center",t=u.exec(s[0]),i=u.exec(s[1]),k[this]=[t?t[0]:0,i?i[0]:0],e[this]=[d.exec(s[0])[0],d.exec(s[1])[0]]}),1===x.length&&(x[1]=x[0]),"right"===e.at[0]?v.left+=p:"center"===e.at[0]&&(v.left+=p/2),"bottom"===e.at[1]?v.top+=m:"center"===e.at[1]&&(v.top+=m/2),a=i(k.at,p,m),v.left+=a[0],v.top+=a[1],this.each(function(){var n,l,c=t(this),u=c.outerWidth(),d=c.outerHeight(),f=s(this,"marginLeft"),b=s(this,"marginTop"),D=u+f+s(this,"marginRight")+w.width,T=d+b+s(this,"marginBottom")+w.height,C=t.extend({},v),M=i(k.my,c.outerWidth(),c.outerHeight());"right"===e.my[0]?C.left-=u:"center"===e.my[0]&&(C.left-=u/2),"bottom"===e.my[1]?C.top-=d:"center"===e.my[1]&&(C.top-=d/2),C.left+=M[0],C.top+=M[1],t.support.offsetFractions||(C.left=h(C.left),C.top=h(C.top)),n={marginLeft:f,marginTop:b},t.each(["left","top"],function(i,s){t.ui.position[x[i]]&&t.ui.position[x[i]][s](C,{targetWidth:p,targetHeight:m,elemWidth:u,elemHeight:d,collisionPosition:n,collisionWidth:D,collisionHeight:T,offset:[a[0]+M[0],a[1]+M[1]],my:e.my,at:e.at,within:y,elem:c})}),e.using&&(l=function(t){var i=g.left-C.left,s=i+p-u,n=g.top-C.top,a=n+m-d,h={target:{element:_,left:g.left,top:g.top,width:p,height:m},element:{element:c,left:C.left,top:C.top,width:u,height:d},horizontal:0>s?"left":i>0?"right":"center",vertical:0>a?"top":n>0?"bottom":"middle"};u>p&&p>r(i+s)&&(h.horizontal="center"),d>m&&m>r(n+a)&&(h.vertical="middle"),h.important=o(r(i),r(s))>o(r(n),r(a))?"horizontal":"vertical",e.using.call(this,t,h)}),c.offset(t.extend(C,{using:l}))})},t.ui.position={fit:{left:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollLeft:s.offset.left,a=s.width,r=t.left-e.collisionPosition.marginLeft,h=n-r,l=r+e.collisionWidth-a-n;e.collisionWidth>a?h>0&&0>=l?(i=t.left+h+e.collisionWidth-a-n,t.left+=h-i):t.left=l>0&&0>=h?n:h>l?n+a-e.collisionWidth:n:h>0?t.left+=h:l>0?t.left-=l:t.left=o(t.left-r,t.left)},top:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollTop:s.offset.top,a=e.within.height,r=t.top-e.collisionPosition.marginTop,h=n-r,l=r+e.collisionHeight-a-n;e.collisionHeight>a?h>0&&0>=l?(i=t.top+h+e.collisionHeight-a-n,t.top+=h-i):t.top=l>0&&0>=h?n:h>l?n+a-e.collisionHeight:n:h>0?t.top+=h:l>0?t.top-=l:t.top=o(t.top-r,t.top)}},flip:{left:function(t,e){var i,s,n=e.within,a=n.offset.left+n.scrollLeft,o=n.width,h=n.isWindow?n.scrollLeft:n.offset.left,l=t.left-e.collisionPosition.marginLeft,c=l-h,u=l+e.collisionWidth-o-h,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,p="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,f=-2*e.offset[0];0>c?(i=t.left+d+p+f+e.collisionWidth-o-a,(0>i||r(c)>i)&&(t.left+=d+p+f)):u>0&&(s=t.left-e.collisionPosition.marginLeft+d+p+f-h,(s>0||u>r(s))&&(t.left+=d+p+f))},top:function(t,e){var i,s,n=e.within,a=n.offset.top+n.scrollTop,o=n.height,h=n.isWindow?n.scrollTop:n.offset.top,l=t.top-e.collisionPosition.marginTop,c=l-h,u=l+e.collisionHeight-o-h,d="top"===e.my[1],p=d?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,f="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,m=-2*e.offset[1];0>c?(s=t.top+p+f+m+e.collisionHeight-o-a,t.top+p+f+m>c&&(0>s||r(c)>s)&&(t.top+=p+f+m)):u>0&&(i=t.top-e.collisionPosition.marginTop+p+f+m-h,t.top+p+f+m>u&&(i>0||u>r(i))&&(t.top+=p+f+m))}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}},function(){var e,i,s,n,a,o=document.getElementsByTagName("body")[0],r=document.createElement("div");e=document.createElement(o?"div":"body"),s={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},o&&t.extend(s,{position:"absolute",left:"-1000px",top:"-1000px"});for(a in s)e.style[a]=s[a];e.appendChild(r),i=o||document.documentElement,i.insertBefore(e,i.firstChild),r.style.cssText="position: absolute; left: 10.7432222px;",n=t(r).offset().left,t.support.offsetFractions=n>10&&11>n,e.innerHTML="",i.removeChild(e)}()})(jQuery);(function(e){e.widget("ui.draggable",e.ui.mouse,{version:"1.10.3",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"!==this.options.helper||/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative"),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._mouseInit()},_destroy:function(){this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._mouseDestroy()},_mouseCapture:function(t){var i=this.options;return this.helper||i.disabled||e(t.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(t),this.handle?(e(i.iframeFix===!0?"iframe":i.iframeFix).each(function(){e("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1e3}).css(e(this).offset()).appendTo("body")}),!0):!1)},_mouseStart:function(t){var i=this.options;return this.helper=this._createHelper(t),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),e.ui.ddmanager&&(e.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(),this.offsetParent=this.helper.offsetParent(),this.offsetParentCssPosition=this.offsetParent.css("position"),this.offset=this.positionAbs=this.element.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},this.offset.scroll=!1,e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.originalPosition=this.position=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",t)===!1?(this._clear(),!1):(this._cacheHelperProportions(),e.ui.ddmanager&&!i.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this._mouseDrag(t,!0),e.ui.ddmanager&&e.ui.ddmanager.dragStart(this,t),!0)},_mouseDrag:function(t,i){if("fixed"===this.offsetParentCssPosition&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),!i){var s=this._uiHash();if(this._trigger("drag",t,s)===!1)return this._mouseUp({}),!1;this.position=s.position}return this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),!1},_mouseStop:function(t){var i=this,s=!1;return e.ui.ddmanager&&!this.options.dropBehaviour&&(s=e.ui.ddmanager.drop(this,t)),this.dropped&&(s=this.dropped,this.dropped=!1),"original"!==this.options.helper||e.contains(this.element[0].ownerDocument,this.element[0])?("invalid"===this.options.revert&&!s||"valid"===this.options.revert&&s||this.options.revert===!0||e.isFunction(this.options.revert)&&this.options.revert.call(this.element,s)?e(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",t)!==!1&&i._clear()}):this._trigger("stop",t)!==!1&&this._clear(),!1):!1},_mouseUp:function(t){return e("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)}),e.ui.ddmanager&&e.ui.ddmanager.dragStop(this,t),e.ui.mouse.prototype._mouseUp.call(this,t)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(t){return this.options.handle?!!e(t.target).closest(this.element.find(this.options.handle)).length:!0},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper)?e(i.helper.apply(this.element[0],[t])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return s.parents("body").length||s.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),s[0]===this.element[0]||/(fixed|absolute)/.test(s.css("position"))||s.css("position","absolute"),s},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.element.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,i,s,n=this.options;return n.containment?"window"===n.containment?(this.containment=[e(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,e(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,e(window).scrollLeft()+e(window).width()-this.helperProportions.width-this.margins.left,e(window).scrollTop()+(e(window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],undefined):"document"===n.containment?(this.containment=[0,0,e(document).width()-this.helperProportions.width-this.margins.left,(e(document).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],undefined):n.containment.constructor===Array?(this.containment=n.containment,undefined):("parent"===n.containment&&(n.containment=this.helper[0].parentNode),i=e(n.containment),s=i[0],s&&(t="hidden"!==i.css("overflow"),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(t?Math.max(s.scrollWidth,s.offsetWidth):s.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(t?Math.max(s.scrollHeight,s.offsetHeight):s.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relative_container=i),undefined):(this.containment=null,undefined)},_convertPositionTo:function(t,i){i||(i=this.position);var s="absolute"===t?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent;return this.offset.scroll||(this.offset.scroll={top:n.scrollTop(),left:n.scrollLeft()}),{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():this.offset.scroll.top)*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():this.offset.scroll.left)*s}},_generatePosition:function(t){var i,s,n,a,o=this.options,r="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=t.pageX,l=t.pageY;return this.offset.scroll||(this.offset.scroll={top:r.scrollTop(),left:r.scrollLeft()}),this.originalPosition&&(this.containment&&(this.relative_container?(s=this.relative_container.offset(),i=[this.containment[0]+s.left,this.containment[1]+s.top,this.containment[2]+s.left,this.containment[3]+s.top]):i=this.containment,t.pageX-this.offset.click.left<i[0]&&(h=i[0]+this.offset.click.left),t.pageY-this.offset.click.top<i[1]&&(l=i[1]+this.offset.click.top),t.pageX-this.offset.click.left>i[2]&&(h=i[2]+this.offset.click.left),t.pageY-this.offset.click.top>i[3]&&(l=i[3]+this.offset.click.top)),o.grid&&(n=o.grid[1]?this.originalPageY+Math.round((l-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY,l=i?n-this.offset.click.top>=i[1]||n-this.offset.click.top>i[3]?n:n-this.offset.click.top>=i[1]?n-o.grid[1]:n+o.grid[1]:n,a=o.grid[0]?this.originalPageX+Math.round((h-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX,h=i?a-this.offset.click.left>=i[0]||a-this.offset.click.left>i[2]?a:a-this.offset.click.left>=i[0]?a-o.grid[0]:a+o.grid[0]:a)),{top:l-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():this.offset.scroll.top),left:h-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():this.offset.scroll.left)}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1},_trigger:function(t,i,s){return s=s||this._uiHash(),e.ui.plugin.call(this,t,[i,s]),"drag"===t&&(this.positionAbs=this._convertPositionTo("absolute")),e.Widget.prototype._trigger.call(this,t,i,s)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),e.ui.plugin.add("draggable","connectToSortable",{start:function(t,i){var s=e(this).data("ui-draggable"),n=s.options,a=e.extend({},i,{item:s.element});s.sortables=[],e(n.connectToSortable).each(function(){var i=e.data(this,"ui-sortable");i&&!i.options.disabled&&(s.sortables.push({instance:i,shouldRevert:i.options.revert}),i.refreshPositions(),i._trigger("activate",t,a))})},stop:function(t,i){var s=e(this).data("ui-draggable"),n=e.extend({},i,{item:s.element});e.each(s.sortables,function(){this.instance.isOver?(this.instance.isOver=0,s.cancelHelperRemoval=!0,this.instance.cancelHelperRemoval=!1,this.shouldRevert&&(this.instance.options.revert=this.shouldRevert),this.instance._mouseStop(t),this.instance.options.helper=this.instance.options._helper,"original"===s.options.helper&&this.instance.currentItem.css({top:"auto",left:"auto"})):(this.instance.cancelHelperRemoval=!1,this.instance._trigger("deactivate",t,n))})},drag:function(t,i){var s=e(this).data("ui-draggable"),n=this;e.each(s.sortables,function(){var a=!1,o=this;this.instance.positionAbs=s.positionAbs,this.instance.helperProportions=s.helperProportions,this.instance.offset.click=s.offset.click,this.instance._intersectsWith(this.instance.containerCache)&&(a=!0,e.each(s.sortables,function(){return this.instance.positionAbs=s.positionAbs,this.instance.helperProportions=s.helperProportions,this.instance.offset.click=s.offset.click,this!==o&&this.instance._intersectsWith(this.instance.containerCache)&&e.contains(o.instance.element[0],this.instance.element[0])&&(a=!1),a})),a?(this.instance.isOver||(this.instance.isOver=1,this.instance.currentItem=e(n).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item",!0),this.instance.options._helper=this.instance.options.helper,this.instance.options.helper=function(){return i.helper[0]},t.target=this.instance.currentItem[0],this.instance._mouseCapture(t,!0),this.instance._mouseStart(t,!0,!0),this.instance.offset.click.top=s.offset.click.top,this.instance.offset.click.left=s.offset.click.left,this.instance.offset.parent.left-=s.offset.parent.left-this.instance.offset.parent.left,this.instance.offset.parent.top-=s.offset.parent.top-this.instance.offset.parent.top,s._trigger("toSortable",t),s.dropped=this.instance.element,s.currentItem=s.element,this.instance.fromOutside=s),this.instance.currentItem&&this.instance._mouseDrag(t)):this.instance.isOver&&(this.instance.isOver=0,this.instance.cancelHelperRemoval=!0,this.instance.options.revert=!1,this.instance._trigger("out",t,this.instance._uiHash(this.instance)),this.instance._mouseStop(t,!0),this.instance.options.helper=this.instance.options._helper,this.instance.currentItem.remove(),this.instance.placeholder&&this.instance.placeholder.remove(),s._trigger("fromSortable",t),s.dropped=!1)})}}),e.ui.plugin.add("draggable","cursor",{start:function(){var t=e("body"),i=e(this).data("ui-draggable").options;t.css("cursor")&&(i._cursor=t.css("cursor")),t.css("cursor",i.cursor)},stop:function(){var t=e(this).data("ui-draggable").options;t._cursor&&e("body").css("cursor",t._cursor)}}),e.ui.plugin.add("draggable","opacity",{start:function(t,i){var s=e(i.helper),n=e(this).data("ui-draggable").options;s.css("opacity")&&(n._opacity=s.css("opacity")),s.css("opacity",n.opacity)},stop:function(t,i){var s=e(this).data("ui-draggable").options;s._opacity&&e(i.helper).css("opacity",s._opacity)}}),e.ui.plugin.add("draggable","scroll",{start:function(){var t=e(this).data("ui-draggable");t.scrollParent[0]!==document&&"HTML"!==t.scrollParent[0].tagName&&(t.overflowOffset=t.scrollParent.offset())},drag:function(t){var i=e(this).data("ui-draggable"),s=i.options,n=!1;i.scrollParent[0]!==document&&"HTML"!==i.scrollParent[0].tagName?(s.axis&&"x"===s.axis||(i.overflowOffset.top+i.scrollParent[0].offsetHeight-t.pageY<s.scrollSensitivity?i.scrollParent[0].scrollTop=n=i.scrollParent[0].scrollTop+s.scrollSpeed:t.pageY-i.overflowOffset.top<s.scrollSensitivity&&(i.scrollParent[0].scrollTop=n=i.scrollParent[0].scrollTop-s.scrollSpeed)),s.axis&&"y"===s.axis||(i.overflowOffset.left+i.scrollParent[0].offsetWidth-t.pageX<s.scrollSensitivity?i.scrollParent[0].scrollLeft=n=i.scrollParent[0].scrollLeft+s.scrollSpeed:t.pageX-i.overflowOffset.left<s.scrollSensitivity&&(i.scrollParent[0].scrollLeft=n=i.scrollParent[0].scrollLeft-s.scrollSpeed))):(s.axis&&"x"===s.axis||(t.pageY-e(document).scrollTop()<s.scrollSensitivity?n=e(document).scrollTop(e(document).scrollTop()-s.scrollSpeed):e(window).height()-(t.pageY-e(document).scrollTop())<s.scrollSensitivity&&(n=e(document).scrollTop(e(document).scrollTop()+s.scrollSpeed))),s.axis&&"y"===s.axis||(t.pageX-e(document).scrollLeft()<s.scrollSensitivity?n=e(document).scrollLeft(e(document).scrollLeft()-s.scrollSpeed):e(window).width()-(t.pageX-e(document).scrollLeft())<s.scrollSensitivity&&(n=e(document).scrollLeft(e(document).scrollLeft()+s.scrollSpeed)))),n!==!1&&e.ui.ddmanager&&!s.dropBehaviour&&e.ui.ddmanager.prepareOffsets(i,t)}}),e.ui.plugin.add("draggable","snap",{start:function(){var t=e(this).data("ui-draggable"),i=t.options;t.snapElements=[],e(i.snap.constructor!==String?i.snap.items||":data(ui-draggable)":i.snap).each(function(){var i=e(this),s=i.offset();this!==t.element[0]&&t.snapElements.push({item:this,width:i.outerWidth(),height:i.outerHeight(),top:s.top,left:s.left})})},drag:function(t,i){var s,n,a,o,r,h,l,u,c,d,p=e(this).data("ui-draggable"),f=p.options,m=f.snapTolerance,g=i.offset.left,v=g+p.helperProportions.width,b=i.offset.top,y=b+p.helperProportions.height;for(c=p.snapElements.length-1;c>=0;c--)r=p.snapElements[c].left,h=r+p.snapElements[c].width,l=p.snapElements[c].top,u=l+p.snapElements[c].height,r-m>v||g>h+m||l-m>y||b>u+m||!e.contains(p.snapElements[c].item.ownerDocument,p.snapElements[c].item)?(p.snapElements[c].snapping&&p.options.snap.release&&p.options.snap.release.call(p.element,t,e.extend(p._uiHash(),{snapItem:p.snapElements[c].item})),p.snapElements[c].snapping=!1):("inner"!==f.snapMode&&(s=m>=Math.abs(l-y),n=m>=Math.abs(u-b),a=m>=Math.abs(r-v),o=m>=Math.abs(h-g),s&&(i.position.top=p._convertPositionTo("relative",{top:l-p.helperProportions.height,left:0}).top-p.margins.top),n&&(i.position.top=p._convertPositionTo("relative",{top:u,left:0}).top-p.margins.top),a&&(i.position.left=p._convertPositionTo("relative",{top:0,left:r-p.helperProportions.width}).left-p.margins.left),o&&(i.position.left=p._convertPositionTo("relative",{top:0,left:h}).left-p.margins.left)),d=s||n||a||o,"outer"!==f.snapMode&&(s=m>=Math.abs(l-b),n=m>=Math.abs(u-y),a=m>=Math.abs(r-g),o=m>=Math.abs(h-v),s&&(i.position.top=p._convertPositionTo("relative",{top:l,left:0}).top-p.margins.top),n&&(i.position.top=p._convertPositionTo("relative",{top:u-p.helperProportions.height,left:0}).top-p.margins.top),a&&(i.position.left=p._convertPositionTo("relative",{top:0,left:r}).left-p.margins.left),o&&(i.position.left=p._convertPositionTo("relative",{top:0,left:h-p.helperProportions.width}).left-p.margins.left)),!p.snapElements[c].snapping&&(s||n||a||o||d)&&p.options.snap.snap&&p.options.snap.snap.call(p.element,t,e.extend(p._uiHash(),{snapItem:p.snapElements[c].item})),p.snapElements[c].snapping=s||n||a||o||d)}}),e.ui.plugin.add("draggable","stack",{start:function(){var t,i=this.data("ui-draggable").options,s=e.makeArray(e(i.stack)).sort(function(t,i){return(parseInt(e(t).css("zIndex"),10)||0)-(parseInt(e(i).css("zIndex"),10)||0)});s.length&&(t=parseInt(e(s[0]).css("zIndex"),10)||0,e(s).each(function(i){e(this).css("zIndex",t+i)}),this.css("zIndex",t+s.length))}}),e.ui.plugin.add("draggable","zIndex",{start:function(t,i){var s=e(i.helper),n=e(this).data("ui-draggable").options;s.css("zIndex")&&(n._zIndex=s.css("zIndex")),s.css("zIndex",n.zIndex)},stop:function(t,i){var s=e(this).data("ui-draggable").options;s._zIndex&&e(i.helper).css("zIndex",s._zIndex)}})})(jQuery);(function(e){function t(e,t,i){return e>t&&t+i>e}e.widget("ui.droppable",{version:"1.10.3",widgetEventPrefix:"drop",options:{accept:"*",activeClass:!1,addClasses:!0,greedy:!1,hoverClass:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var t=this.options,i=t.accept;this.isover=!1,this.isout=!0,this.accept=e.isFunction(i)?i:function(e){return e.is(i)},this.proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight},e.ui.ddmanager.droppables[t.scope]=e.ui.ddmanager.droppables[t.scope]||[],e.ui.ddmanager.droppables[t.scope].push(this),t.addClasses&&this.element.addClass("ui-droppable")},_destroy:function(){for(var t=0,i=e.ui.ddmanager.droppables[this.options.scope];i.length>t;t++)i[t]===this&&i.splice(t,1);this.element.removeClass("ui-droppable ui-droppable-disabled")},_setOption:function(t,i){"accept"===t&&(this.accept=e.isFunction(i)?i:function(e){return e.is(i)}),e.Widget.prototype._setOption.apply(this,arguments)},_activate:function(t){var i=e.ui.ddmanager.current;this.options.activeClass&&this.element.addClass(this.options.activeClass),i&&this._trigger("activate",t,this.ui(i))},_deactivate:function(t){var i=e.ui.ddmanager.current;this.options.activeClass&&this.element.removeClass(this.options.activeClass),i&&this._trigger("deactivate",t,this.ui(i))},_over:function(t){var i=e.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.addClass(this.options.hoverClass),this._trigger("over",t,this.ui(i)))},_out:function(t){var i=e.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("out",t,this.ui(i)))},_drop:function(t,i){var s=i||e.ui.ddmanager.current,n=!1;return s&&(s.currentItem||s.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var t=e.data(this,"ui-droppable");return t.options.greedy&&!t.options.disabled&&t.options.scope===s.options.scope&&t.accept.call(t.element[0],s.currentItem||s.element)&&e.ui.intersect(s,e.extend(t,{offset:t.element.offset()}),t.options.tolerance)?(n=!0,!1):undefined}),n?!1:this.accept.call(this.element[0],s.currentItem||s.element)?(this.options.activeClass&&this.element.removeClass(this.options.activeClass),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("drop",t,this.ui(s)),this.element):!1):!1},ui:function(e){return{draggable:e.currentItem||e.element,helper:e.helper,position:e.position,offset:e.positionAbs}}}),e.ui.intersect=function(e,i,s){if(!i.offset)return!1;var n,a,o=(e.positionAbs||e.position.absolute).left,r=o+e.helperProportions.width,h=(e.positionAbs||e.position.absolute).top,l=h+e.helperProportions.height,u=i.offset.left,c=u+i.proportions.width,d=i.offset.top,p=d+i.proportions.height;switch(s){case"fit":return o>=u&&c>=r&&h>=d&&p>=l;case"intersect":return o+e.helperProportions.width/2>u&&c>r-e.helperProportions.width/2&&h+e.helperProportions.height/2>d&&p>l-e.helperProportions.height/2;case"pointer":return n=(e.positionAbs||e.position.absolute).left+(e.clickOffset||e.offset.click).left,a=(e.positionAbs||e.position.absolute).top+(e.clickOffset||e.offset.click).top,t(a,d,i.proportions.height)&&t(n,u,i.proportions.width);case"touch":return(h>=d&&p>=h||l>=d&&p>=l||d>h&&l>p)&&(o>=u&&c>=o||r>=u&&c>=r||u>o&&r>c);default:return!1}},e.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(t,i){var s,n,a=e.ui.ddmanager.droppables[t.options.scope]||[],o=i?i.type:null,r=(t.currentItem||t.element).find(":data(ui-droppable)").addBack();e:for(s=0;a.length>s;s++)if(!(a[s].options.disabled||t&&!a[s].accept.call(a[s].element[0],t.currentItem||t.element))){for(n=0;r.length>n;n++)if(r[n]===a[s].element[0]){a[s].proportions.height=0;continue e}a[s].visible="none"!==a[s].element.css("display"),a[s].visible&&("mousedown"===o&&a[s]._activate.call(a[s],i),a[s].offset=a[s].element.offset(),a[s].proportions={width:a[s].element[0].offsetWidth,height:a[s].element[0].offsetHeight})}},drop:function(t,i){var s=!1;return e.each((e.ui.ddmanager.droppables[t.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&e.ui.intersect(t,this,this.options.tolerance)&&(s=this._drop.call(this,i)||s),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],t.currentItem||t.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),s},dragStart:function(t,i){t.element.parentsUntil("body").bind("scroll.droppable",function(){t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,i)})},drag:function(t,i){t.options.refreshPositions&&e.ui.ddmanager.prepareOffsets(t,i),e.each(e.ui.ddmanager.droppables[t.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var s,n,a,o=e.ui.intersect(t,this,this.options.tolerance),r=!o&&this.isover?"isout":o&&!this.isover?"isover":null;r&&(this.options.greedy&&(n=this.options.scope,a=this.element.parents(":data(ui-droppable)").filter(function(){return e.data(this,"ui-droppable").options.scope===n}),a.length&&(s=e.data(a[0],"ui-droppable"),s.greedyChild="isover"===r)),s&&"isover"===r&&(s.isover=!1,s.isout=!0,s._out.call(s,i)),this[r]=!0,this["isout"===r?"isover":"isout"]=!1,this["isover"===r?"_over":"_out"].call(this,i),s&&"isout"===r&&(s.isout=!1,s.isover=!0,s._over.call(s,i)))}})},dragStop:function(t,i){t.element.parentsUntil("body").unbind("scroll.droppable"),t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,i)}}})(jQuery);(function(e){function t(e){return parseInt(e,10)||0}function i(e){return!isNaN(parseInt(e,10))}e.widget("ui.resizable",e.ui.mouse,{version:"1.10.3",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_create:function(){var t,i,s,n,a,o=this,r=this.options;if(this.element.addClass("ui-resizable"),e.extend(this,{_aspectRatio:!!r.aspectRatio,aspectRatio:r.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:r.helper||r.ghost||r.animate?r.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)&&(this.element.wrap(e("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.data("ui-resizable")),this.elementIsWrapper=!0,this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")}),this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0}),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css({margin:this.originalElement.css("margin")}),this._proportionallyResize()),this.handles=r.handles||(e(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),t=this.handles.split(","),this.handles={},i=0;t.length>i;i++)s=e.trim(t[i]),a="ui-resizable-"+s,n=e("<div class='ui-resizable-handle "+a+"'></div>"),n.css({zIndex:r.zIndex}),"se"===s&&n.addClass("ui-icon ui-icon-gripsmall-diagonal-se"),this.handles[s]=".ui-resizable-"+s,this.element.append(n);this._renderAxis=function(t){var i,s,n,a;t=t||this.element;for(i in this.handles)this.handles[i].constructor===String&&(this.handles[i]=e(this.handles[i],this.element).show()),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)&&(s=e(this.handles[i],this.element),a=/sw|ne|nw|se|n|s/.test(i)?s.outerHeight():s.outerWidth(),n=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),t.css(n,a),this._proportionallyResize()),e(this.handles[i]).length},this._renderAxis(this.element),this._handles=e(".ui-resizable-handle",this.element).disableSelection(),this._handles.mouseover(function(){o.resizing||(this.className&&(n=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),o.axis=n&&n[1]?n[1]:"se")}),r.autoHide&&(this._handles.hide(),e(this.element).addClass("ui-resizable-autohide").mouseenter(function(){r.disabled||(e(this).removeClass("ui-resizable-autohide"),o._handles.show())}).mouseleave(function(){r.disabled||o.resizing||(e(this).addClass("ui-resizable-autohide"),o._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var t,i=function(t){e(t).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),t=this.element,this.originalElement.css({position:t.css("position"),width:t.outerWidth(),height:t.outerHeight(),top:t.css("top"),left:t.css("left")}).insertAfter(t),t.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_mouseCapture:function(t){var i,s,n=!1;for(i in this.handles)s=e(this.handles[i])[0],(s===t.target||e.contains(s,t.target))&&(n=!0);return!this.options.disabled&&n},_mouseStart:function(i){var s,n,a,o=this.options,r=this.element.position(),h=this.element;return this.resizing=!0,/absolute/.test(h.css("position"))?h.css({position:"absolute",top:h.css("top"),left:h.css("left")}):h.is(".ui-draggable")&&h.css({position:"absolute",top:r.top,left:r.left}),this._renderProxy(),s=t(this.helper.css("left")),n=t(this.helper.css("top")),o.containment&&(s+=e(o.containment).scrollLeft()||0,n+=e(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:s,top:n},this.size=this._helper?{width:h.outerWidth(),height:h.outerHeight()}:{width:h.width(),height:h.height()},this.originalSize=this._helper?{width:h.outerWidth(),height:h.outerHeight()}:{width:h.width(),height:h.height()},this.originalPosition={left:s,top:n},this.sizeDiff={width:h.outerWidth()-h.width(),height:h.outerHeight()-h.height()},this.originalMousePosition={left:i.pageX,top:i.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,a=e(".ui-resizable-"+this.axis).css("cursor"),e("body").css("cursor","auto"===a?this.axis+"-resize":a),h.addClass("ui-resizable-resizing"),this._propagate("start",i),!0},_mouseDrag:function(t){var i,s=this.helper,n={},a=this.originalMousePosition,o=this.axis,r=this.position.top,h=this.position.left,l=this.size.width,u=this.size.height,c=t.pageX-a.left||0,d=t.pageY-a.top||0,p=this._change[o];return p?(i=p.apply(this,[t,c,d]),this._updateVirtualBoundaries(t.shiftKey),(this._aspectRatio||t.shiftKey)&&(i=this._updateRatio(i,t)),i=this._respectSize(i,t),this._updateCache(i),this._propagate("resize",t),this.position.top!==r&&(n.top=this.position.top+"px"),this.position.left!==h&&(n.left=this.position.left+"px"),this.size.width!==l&&(n.width=this.size.width+"px"),this.size.height!==u&&(n.height=this.size.height+"px"),s.css(n),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),e.isEmptyObject(n)||this._trigger("resize",t,this.ui()),!1):!1},_mouseStop:function(t){this.resizing=!1;var i,s,n,a,o,r,h,l=this.options,u=this;return this._helper&&(i=this._proportionallyResizeElements,s=i.length&&/textarea/i.test(i[0].nodeName),n=s&&e.ui.hasScroll(i[0],"left")?0:u.sizeDiff.height,a=s?0:u.sizeDiff.width,o={width:u.helper.width()-a,height:u.helper.height()-n},r=parseInt(u.element.css("left"),10)+(u.position.left-u.originalPosition.left)||null,h=parseInt(u.element.css("top"),10)+(u.position.top-u.originalPosition.top)||null,l.animate||this.element.css(e.extend(o,{top:h,left:r})),u.helper.height(u.size.height),u.helper.width(u.size.width),this._helper&&!l.animate&&this._proportionallyResize()),e("body").css("cursor","auto"),this.element.removeClass("ui-resizable-resizing"),this._propagate("stop",t),this._helper&&this.helper.remove(),!1},_updateVirtualBoundaries:function(e){var t,s,n,a,o,r=this.options;o={minWidth:i(r.minWidth)?r.minWidth:0,maxWidth:i(r.maxWidth)?r.maxWidth:1/0,minHeight:i(r.minHeight)?r.minHeight:0,maxHeight:i(r.maxHeight)?r.maxHeight:1/0},(this._aspectRatio||e)&&(t=o.minHeight*this.aspectRatio,n=o.minWidth/this.aspectRatio,s=o.maxHeight*this.aspectRatio,a=o.maxWidth/this.aspectRatio,t>o.minWidth&&(o.minWidth=t),n>o.minHeight&&(o.minHeight=n),o.maxWidth>s&&(o.maxWidth=s),o.maxHeight>a&&(o.maxHeight=a)),this._vBoundaries=o},_updateCache:function(e){this.offset=this.helper.offset(),i(e.left)&&(this.position.left=e.left),i(e.top)&&(this.position.top=e.top),i(e.height)&&(this.size.height=e.height),i(e.width)&&(this.size.width=e.width)},_updateRatio:function(e){var t=this.position,s=this.size,n=this.axis;return i(e.height)?e.width=e.height*this.aspectRatio:i(e.width)&&(e.height=e.width/this.aspectRatio),"sw"===n&&(e.left=t.left+(s.width-e.width),e.top=null),"nw"===n&&(e.top=t.top+(s.height-e.height),e.left=t.left+(s.width-e.width)),e},_respectSize:function(e){var t=this._vBoundaries,s=this.axis,n=i(e.width)&&t.maxWidth&&t.maxWidth<e.width,a=i(e.height)&&t.maxHeight&&t.maxHeight<e.height,o=i(e.width)&&t.minWidth&&t.minWidth>e.width,r=i(e.height)&&t.minHeight&&t.minHeight>e.height,h=this.originalPosition.left+this.originalSize.width,l=this.position.top+this.size.height,u=/sw|nw|w/.test(s),c=/nw|ne|n/.test(s);return o&&(e.width=t.minWidth),r&&(e.height=t.minHeight),n&&(e.width=t.maxWidth),a&&(e.height=t.maxHeight),o&&u&&(e.left=h-t.minWidth),n&&u&&(e.left=h-t.maxWidth),r&&c&&(e.top=l-t.minHeight),a&&c&&(e.top=l-t.maxHeight),e.width||e.height||e.left||!e.top?e.width||e.height||e.top||!e.left||(e.left=null):e.top=null,e},_proportionallyResize:function(){if(this._proportionallyResizeElements.length){var e,t,i,s,n,a=this.helper||this.element;for(e=0;this._proportionallyResizeElements.length>e;e++){if(n=this._proportionallyResizeElements[e],!this.borderDif)for(this.borderDif=[],i=[n.css("borderTopWidth"),n.css("borderRightWidth"),n.css("borderBottomWidth"),n.css("borderLeftWidth")],s=[n.css("paddingTop"),n.css("paddingRight"),n.css("paddingBottom"),n.css("paddingLeft")],t=0;i.length>t;t++)this.borderDif[t]=(parseInt(i[t],10)||0)+(parseInt(s[t],10)||0);n.css({height:a.height()-this.borderDif[0]-this.borderDif[2]||0,width:a.width()-this.borderDif[1]-this.borderDif[3]||0})}}},_renderProxy:function(){var t=this.element,i=this.options;this.elementOffset=t.offset(),this._helper?(this.helper=this.helper||e("<div style='overflow:hidden;'></div>"),this.helper.addClass(this._helper).css({width:this.element.outerWidth()-1,height:this.element.outerHeight()-1,position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(e,t){return{width:this.originalSize.width+t}},w:function(e,t){var i=this.originalSize,s=this.originalPosition;return{left:s.left+t,width:i.width-t}},n:function(e,t,i){var s=this.originalSize,n=this.originalPosition;return{top:n.top+i,height:s.height-i}},s:function(e,t,i){return{height:this.originalSize.height+i}},se:function(t,i,s){return e.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[t,i,s]))},sw:function(t,i,s){return e.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[t,i,s]))},ne:function(t,i,s){return e.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[t,i,s]))},nw:function(t,i,s){return e.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[t,i,s]))}},_propagate:function(t,i){e.ui.plugin.call(this,t,[i,this.ui()]),"resize"!==t&&this._trigger(t,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),e.ui.plugin.add("resizable","animate",{stop:function(t){var i=e(this).data("ui-resizable"),s=i.options,n=i._proportionallyResizeElements,a=n.length&&/textarea/i.test(n[0].nodeName),o=a&&e.ui.hasScroll(n[0],"left")?0:i.sizeDiff.height,r=a?0:i.sizeDiff.width,h={width:i.size.width-r,height:i.size.height-o},l=parseInt(i.element.css("left"),10)+(i.position.left-i.originalPosition.left)||null,u=parseInt(i.element.css("top"),10)+(i.position.top-i.originalPosition.top)||null;i.element.animate(e.extend(h,u&&l?{top:u,left:l}:{}),{duration:s.animateDuration,easing:s.animateEasing,step:function(){var s={width:parseInt(i.element.css("width"),10),height:parseInt(i.element.css("height"),10),top:parseInt(i.element.css("top"),10),left:parseInt(i.element.css("left"),10)};n&&n.length&&e(n[0]).css({width:s.width,height:s.height}),i._updateCache(s),i._propagate("resize",t)}})}}),e.ui.plugin.add("resizable","containment",{start:function(){var i,s,n,a,o,r,h,l=e(this).data("ui-resizable"),u=l.options,c=l.element,d=u.containment,p=d instanceof e?d.get(0):/parent/.test(d)?c.parent().get(0):d;p&&(l.containerElement=e(p),/document/.test(d)||d===document?(l.containerOffset={left:0,top:0},l.containerPosition={left:0,top:0},l.parentData={element:e(document),left:0,top:0,width:e(document).width(),height:e(document).height()||document.body.parentNode.scrollHeight}):(i=e(p),s=[],e(["Top","Right","Left","Bottom"]).each(function(e,n){s[e]=t(i.css("padding"+n))}),l.containerOffset=i.offset(),l.containerPosition=i.position(),l.containerSize={height:i.innerHeight()-s[3],width:i.innerWidth()-s[1]},n=l.containerOffset,a=l.containerSize.height,o=l.containerSize.width,r=e.ui.hasScroll(p,"left")?p.scrollWidth:o,h=e.ui.hasScroll(p)?p.scrollHeight:a,l.parentData={element:p,left:n.left,top:n.top,width:r,height:h}))},resize:function(t){var i,s,n,a,o=e(this).data("ui-resizable"),r=o.options,h=o.containerOffset,l=o.position,u=o._aspectRatio||t.shiftKey,c={top:0,left:0},d=o.containerElement;d[0]!==document&&/static/.test(d.css("position"))&&(c=h),l.left<(o._helper?h.left:0)&&(o.size.width=o.size.width+(o._helper?o.position.left-h.left:o.position.left-c.left),u&&(o.size.height=o.size.width/o.aspectRatio),o.position.left=r.helper?h.left:0),l.top<(o._helper?h.top:0)&&(o.size.height=o.size.height+(o._helper?o.position.top-h.top:o.position.top),u&&(o.size.width=o.size.height*o.aspectRatio),o.position.top=o._helper?h.top:0),o.offset.left=o.parentData.left+o.position.left,o.offset.top=o.parentData.top+o.position.top,i=Math.abs((o._helper?o.offset.left-c.left:o.offset.left-c.left)+o.sizeDiff.width),s=Math.abs((o._helper?o.offset.top-c.top:o.offset.top-h.top)+o.sizeDiff.height),n=o.containerElement.get(0)===o.element.parent().get(0),a=/relative|absolute/.test(o.containerElement.css("position")),n&&a&&(i-=o.parentData.left),i+o.size.width>=o.parentData.width&&(o.size.width=o.parentData.width-i,u&&(o.size.height=o.size.width/o.aspectRatio)),s+o.size.height>=o.parentData.height&&(o.size.height=o.parentData.height-s,u&&(o.size.width=o.size.height*o.aspectRatio))},stop:function(){var t=e(this).data("ui-resizable"),i=t.options,s=t.containerOffset,n=t.containerPosition,a=t.containerElement,o=e(t.helper),r=o.offset(),h=o.outerWidth()-t.sizeDiff.width,l=o.outerHeight()-t.sizeDiff.height;t._helper&&!i.animate&&/relative/.test(a.css("position"))&&e(this).css({left:r.left-n.left-s.left,width:h,height:l}),t._helper&&!i.animate&&/static/.test(a.css("position"))&&e(this).css({left:r.left-n.left-s.left,width:h,height:l})}}),e.ui.plugin.add("resizable","alsoResize",{start:function(){var t=e(this).data("ui-resizable"),i=t.options,s=function(t){e(t).each(function(){var t=e(this);t.data("ui-resizable-alsoresize",{width:parseInt(t.width(),10),height:parseInt(t.height(),10),left:parseInt(t.css("left"),10),top:parseInt(t.css("top"),10)})})};"object"!=typeof i.alsoResize||i.alsoResize.parentNode?s(i.alsoResize):i.alsoResize.length?(i.alsoResize=i.alsoResize[0],s(i.alsoResize)):e.each(i.alsoResize,function(e){s(e)})},resize:function(t,i){var s=e(this).data("ui-resizable"),n=s.options,a=s.originalSize,o=s.originalPosition,r={height:s.size.height-a.height||0,width:s.size.width-a.width||0,top:s.position.top-o.top||0,left:s.position.left-o.left||0},h=function(t,s){e(t).each(function(){var t=e(this),n=e(this).data("ui-resizable-alsoresize"),a={},o=s&&s.length?s:t.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];e.each(o,function(e,t){var i=(n[t]||0)+(r[t]||0);i&&i>=0&&(a[t]=i||null)}),t.css(a)})};"object"!=typeof n.alsoResize||n.alsoResize.nodeType?h(n.alsoResize):e.each(n.alsoResize,function(e,t){h(e,t)})},stop:function(){e(this).removeData("resizable-alsoresize")}}),e.ui.plugin.add("resizable","ghost",{start:function(){var t=e(this).data("ui-resizable"),i=t.options,s=t.size;t.ghost=t.originalElement.clone(),t.ghost.css({opacity:.25,display:"block",position:"relative",height:s.height,width:s.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass("string"==typeof i.ghost?i.ghost:""),t.ghost.appendTo(t.helper)},resize:function(){var t=e(this).data("ui-resizable");t.ghost&&t.ghost.css({position:"relative",height:t.size.height,width:t.size.width})},stop:function(){var t=e(this).data("ui-resizable");t.ghost&&t.helper&&t.helper.get(0).removeChild(t.ghost.get(0))}}),e.ui.plugin.add("resizable","grid",{resize:function(){var t=e(this).data("ui-resizable"),i=t.options,s=t.size,n=t.originalSize,a=t.originalPosition,o=t.axis,r="number"==typeof i.grid?[i.grid,i.grid]:i.grid,h=r[0]||1,l=r[1]||1,u=Math.round((s.width-n.width)/h)*h,c=Math.round((s.height-n.height)/l)*l,d=n.width+u,p=n.height+c,f=i.maxWidth&&d>i.maxWidth,m=i.maxHeight&&p>i.maxHeight,g=i.minWidth&&i.minWidth>d,v=i.minHeight&&i.minHeight>p;i.grid=r,g&&(d+=h),v&&(p+=l),f&&(d-=h),m&&(p-=l),/^(se|s|e)$/.test(o)?(t.size.width=d,t.size.height=p):/^(ne)$/.test(o)?(t.size.width=d,t.size.height=p,t.position.top=a.top-c):/^(sw)$/.test(o)?(t.size.width=d,t.size.height=p,t.position.left=a.left-u):(t.size.width=d,t.size.height=p,t.position.top=a.top-c,t.position.left=a.left-u)}})})(jQuery);(function(e){e.widget("ui.selectable",e.ui.mouse,{version:"1.10.3",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var t,i=this;this.element.addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){t=e(i.options.filter,i.element[0]),t.addClass("ui-selectee"),t.each(function(){var t=e(this),i=t.offset();e.data(this,"selectable-item",{element:this,$element:t,left:i.left,top:i.top,right:i.left+t.outerWidth(),bottom:i.top+t.outerHeight(),startselected:!1,selected:t.hasClass("ui-selected"),selecting:t.hasClass("ui-selecting"),unselecting:t.hasClass("ui-unselecting")})})},this.refresh(),this.selectees=t.addClass("ui-selectee"),this._mouseInit(),this.helper=e("<div class='ui-selectable-helper'></div>")},_destroy:function(){this.selectees.removeClass("ui-selectee").removeData("selectable-item"),this.element.removeClass("ui-selectable ui-selectable-disabled"),this._mouseDestroy()},_mouseStart:function(t){var i=this,s=this.options;this.opos=[t.pageX,t.pageY],this.options.disabled||(this.selectees=e(s.filter,this.element[0]),this._trigger("start",t),e(s.appendTo).append(this.helper),this.helper.css({left:t.pageX,top:t.pageY,width:0,height:0}),s.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var s=e.data(this,"selectable-item");s.startselected=!0,t.metaKey||t.ctrlKey||(s.$element.removeClass("ui-selected"),s.selected=!1,s.$element.addClass("ui-unselecting"),s.unselecting=!0,i._trigger("unselecting",t,{unselecting:s.element}))}),e(t.target).parents().addBack().each(function(){var s,n=e.data(this,"selectable-item");return n?(s=!t.metaKey&&!t.ctrlKey||!n.$element.hasClass("ui-selected"),n.$element.removeClass(s?"ui-unselecting":"ui-selected").addClass(s?"ui-selecting":"ui-unselecting"),n.unselecting=!s,n.selecting=s,n.selected=s,s?i._trigger("selecting",t,{selecting:n.element}):i._trigger("unselecting",t,{unselecting:n.element}),!1):undefined}))},_mouseDrag:function(t){if(this.dragged=!0,!this.options.disabled){var i,s=this,n=this.options,a=this.opos[0],o=this.opos[1],r=t.pageX,h=t.pageY;return a>r&&(i=r,r=a,a=i),o>h&&(i=h,h=o,o=i),this.helper.css({left:a,top:o,width:r-a,height:h-o}),this.selectees.each(function(){var i=e.data(this,"selectable-item"),l=!1;i&&i.element!==s.element[0]&&("touch"===n.tolerance?l=!(i.left>r||a>i.right||i.top>h||o>i.bottom):"fit"===n.tolerance&&(l=i.left>a&&r>i.right&&i.top>o&&h>i.bottom),l?(i.selected&&(i.$element.removeClass("ui-selected"),i.selected=!1),i.unselecting&&(i.$element.removeClass("ui-unselecting"),i.unselecting=!1),i.selecting||(i.$element.addClass("ui-selecting"),i.selecting=!0,s._trigger("selecting",t,{selecting:i.element}))):(i.selecting&&((t.metaKey||t.ctrlKey)&&i.startselected?(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.$element.addClass("ui-selected"),i.selected=!0):(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.startselected&&(i.$element.addClass("ui-unselecting"),i.unselecting=!0),s._trigger("unselecting",t,{unselecting:i.element}))),i.selected&&(t.metaKey||t.ctrlKey||i.startselected||(i.$element.removeClass("ui-selected"),i.selected=!1,i.$element.addClass("ui-unselecting"),i.unselecting=!0,s._trigger("unselecting",t,{unselecting:i.element})))))}),!1}},_mouseStop:function(t){var i=this;return this.dragged=!1,e(".ui-unselecting",this.element[0]).each(function(){var s=e.data(this,"selectable-item");s.$element.removeClass("ui-unselecting"),s.unselecting=!1,s.startselected=!1,i._trigger("unselected",t,{unselected:s.element})}),e(".ui-selecting",this.element[0]).each(function(){var s=e.data(this,"selectable-item");s.$element.removeClass("ui-selecting").addClass("ui-selected"),s.selecting=!1,s.selected=!0,s.startselected=!0,i._trigger("selected",t,{selected:s.element})}),this._trigger("stop",t),this.helper.remove(),!1}})})(jQuery);(function(t){function e(t,e,i){return t>e&&e+i>t}function i(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))}t.widget("ui.sortable",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_create:function(){var t=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?"x"===t.axis||i(this.items[0].item):!1,this.offset=this.element.offset(),this._mouseInit(),this.ready=!0},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled"),this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_setOption:function(e,i){"disabled"===e?(this.options[e]=i,this.widget().toggleClass("ui-sortable-disabled",!!i)):t.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(e,i){var s=null,n=!1,a=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,a.widgetName+"-item")===a?(s=t(this),!1):undefined}),t.data(e.target,a.widgetName+"-item")===a&&(s=t(e.target)),s?!this.options.handle||i||(t(this.options.handle,s).find("*").addBack().each(function(){this===e.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(e,i,s){var n,a,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(a=this.document.find("body"),this.storedCursor=a.css("cursor"),a.css("cursor",o.cursor),this.storedStylesheet=t("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(a)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!o.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,s,n,a,o=this.options,r=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<o.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+o.scrollSpeed:e.pageY-this.overflowOffset.top<o.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-o.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<o.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+o.scrollSpeed:e.pageX-this.overflowOffset.left<o.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-o.scrollSpeed)):(e.pageY-t(document).scrollTop()<o.scrollSensitivity?r=t(document).scrollTop(t(document).scrollTop()-o.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<o.scrollSensitivity&&(r=t(document).scrollTop(t(document).scrollTop()+o.scrollSpeed)),e.pageX-t(document).scrollLeft()<o.scrollSensitivity?r=t(document).scrollLeft(t(document).scrollLeft()-o.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<o.scrollSensitivity&&(r=t(document).scrollLeft(t(document).scrollLeft()+o.scrollSpeed))),r!==!1&&t.ui.ddmanager&&!o.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],a=this._intersectsWithPointer(s),a&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===a?"next":"prev"]()[0]!==n&&!t.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],n):!0)){if(this.direction=1===a?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(e,s),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var s=this,n=this.placeholder.offset(),a=this.options.axis,o={};a&&"x"!==a||(o.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollLeft)),a&&"y"!==a||(o.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(o,parseInt(this.options.revert,10)||500,function(){s._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&s.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!s.length&&e.key&&s.push(e.key+"="),s.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},i.each(function(){s.push(t(e.item||this).attr(e.attribute||"id")||"")}),s},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,a=t.left,o=a+t.width,r=t.top,h=r+t.height,l=this.offset.click.top,c=this.offset.click.left,u="x"===this.options.axis||s+l>r&&h>s+l,d="y"===this.options.axis||e+c>a&&o>e+c,p=u&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:e+this.helperProportions.width/2>a&&o>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(t){var i="x"===this.options.axis||e(this.positionAbs.top+this.offset.click.top,t.top,t.height),s="y"===this.options.axis||e(this.positionAbs.left+this.offset.click.left,t.left,t.width),n=i&&s,a=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return n?this.floating?o&&"right"===o||"down"===a?2:1:a&&("down"===a?2:1):!1},_intersectsWithSides:function(t){var i=e(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),s=e(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),n=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return this.floating&&a?"right"===a&&s||"left"===a&&!s:n&&("down"===n&&i||"up"===n&&!i)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){var i,s,n,a,o=[],r=[],h=this._connectWith();if(h&&e)for(i=h.length-1;i>=0;i--)for(n=t(h[i]),s=n.length-1;s>=0;s--)a=t.data(n[s],this.widgetFullName),a&&a!==this&&!a.options.disabled&&r.push([t.isFunction(a.options.items)?a.options.items.call(a.element):t(a.options.items,a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),a]);for(r.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),i=r.length-1;i>=0;i--)r[i][0].each(function(){o.push(this)});return t(o)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;e.length>i;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,s,n,a,o,r,h,l,c=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=t(d[i]),s=n.length-1;s>=0;s--)a=t.data(n[s],this.widgetFullName),a&&a!==this&&!a.options.disabled&&(u.push([t.isFunction(a.options.items)?a.options.items.call(a.element[0],e,{item:this.currentItem}):t(a.options.items,a.element),a]),this.containers.push(a));for(i=u.length-1;i>=0;i--)for(o=u[i][1],r=u[i][0],s=0,l=r.length;l>s;s++)h=t(r[s]),h.data(this.widgetName+"-item",o),c.push({item:h,instance:o,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,a;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?t(this.options.toleranceElement,s.item):s.item,e||(s.width=n.outerWidth(),s.height=n.outerHeight()),a=n.offset(),s.left=a.left,s.top=a.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)a=this.containers[i].element.offset(),this.containers[i].containerCache.left=a.left,this.containers[i].containerCache.top=a.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,s=e.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=e.currentItem[0].nodeName.toLowerCase(),n=t("<"+s+">",e.document[0]).addClass(i||e.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tr"===s?e.currentItem.children().each(function(){t("<td>&#160;</td>",e.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(n)}):"img"===s&&n.attr("src",e.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(t,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(s.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),s.placeholder.update(e,e.placeholder)},_contactContainers:function(s){var n,a,o,r,h,l,c,u,d,p,f=null,m=null;for(n=this.containers.length-1;n>=0;n--)if(!t.contains(this.currentItem[0],this.containers[n].element[0]))if(this._intersectsWith(this.containers[n].containerCache)){if(f&&t.contains(this.containers[n].element[0],f.element[0]))continue;f=this.containers[n],m=n}else this.containers[n].containerCache.over&&(this.containers[n]._trigger("out",s,this._uiHash(this)),this.containers[n].containerCache.over=0);if(f)if(1===this.containers.length)this.containers[m].containerCache.over||(this.containers[m]._trigger("over",s,this._uiHash(this)),this.containers[m].containerCache.over=1);else{for(o=1e4,r=null,p=f.floating||i(this.currentItem),h=p?"left":"top",l=p?"width":"height",c=this.positionAbs[h]+this.offset.click[h],a=this.items.length-1;a>=0;a--)t.contains(this.containers[m].element[0],this.items[a].item[0])&&this.items[a].item[0]!==this.currentItem[0]&&(!p||e(this.positionAbs.top+this.offset.click.top,this.items[a].top,this.items[a].height))&&(u=this.items[a].item.offset()[h],d=!1,Math.abs(u-c)>Math.abs(u+this.items[a][l]-c)&&(d=!0,u+=this.items[a][l]),o>Math.abs(u-c)&&(o=Math.abs(u-c),r=this.items[a],this.direction=d?"up":"down"));if(!r&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[m])return;r?this._rearrange(s,r,null,!0):this._rearrange(s,null,this.containers[m].element,!0),this._trigger("change",s,this._uiHash()),this.containers[m]._trigger("change",s,this._uiHash(this)),this.currentContainer=this.containers[m],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[m]._trigger("over",s,this._uiHash(this)),this.containers[m].containerCache.over=1}},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,t("document"===n.containment?document:window).width()-this.helperProportions.width-this.margins.left,(t("document"===n.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(e=t(n.containment)[0],i=t(n.containment).offset(),s="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:n.scrollLeft())*s}},_generatePosition:function(e){var i,s,n=this.options,a=e.pageX,o=e.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==document&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1],o=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((a-this.originalPageX)/n.grid[0])*n.grid[0],a=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(t,e,i,s){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(t,e){this.reverting=!1;var i,s=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(i in this._storedCSS)("auto"===this._storedCSS[i]||"static"===this._storedCSS[i])&&(this._storedCSS[i]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&s.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||s.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(s.push(function(t){this._trigger("remove",t,this._uiHash())}),s.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),s.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),i=this.containers.length-1;i>=0;i--)e||s.push(function(t){return function(e){t._trigger("deactivate",e,this._uiHash(this))}}.call(this,this.containers[i])),this.containers[i].containerCache.over&&(s.push(function(t){return function(e){t._trigger("out",e,this._uiHash(this))}}.call(this,this.containers[i])),this.containers[i].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,this.cancelHelperRemoval){if(!e){for(this._trigger("beforeStop",t,this._uiHash()),i=0;s.length>i;i++)s[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!1}if(e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null,!e){for(i=0;s.length>i;i++)s[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}})})(jQuery);(function(t){var e=0,i={},s={};i.height=i.paddingTop=i.paddingBottom=i.borderTopWidth=i.borderBottomWidth="hide",s.height=s.paddingTop=s.paddingBottom=s.borderTopWidth=s.borderBottomWidth="show",t.widget("ui.accordion",{version:"1.10.3",options:{active:0,animate:{},collapsible:!1,event:"click",header:"> li > :first-child,> :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},_create:function(){var e=this.options;this.prevShow=this.prevHide=t(),this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role","tablist"),e.collapsible||e.active!==!1&&null!=e.active||(e.active=0),this._processPanels(),0>e.active&&(e.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():t(),content:this.active.length?this.active.next():t()}},_createIcons:function(){var e=this.options.icons;e&&(t("<span>").addClass("ui-accordion-header-icon ui-icon "+e.header).prependTo(this.headers),this.active.children(".ui-accordion-header-icon").removeClass(e.header).addClass(e.activeHeader),this.headers.addClass("ui-accordion-icons"))},_destroyIcons:function(){this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()},_destroy:function(){var t;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"),this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),this._destroyIcons(),t=this.headers.next().css("display","").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),"content"!==this.options.heightStyle&&t.css("height","")},_setOption:function(t,e){return"active"===t?(this._activate(e),undefined):("event"===t&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(e)),this._super(t,e),"collapsible"!==t||e||this.options.active!==!1||this._activate(0),"icons"===t&&(this._destroyIcons(),e&&this._createIcons()),"disabled"===t&&this.headers.add(this.headers.next()).toggleClass("ui-state-disabled",!!e),undefined)},_keydown:function(e){if(!e.altKey&&!e.ctrlKey){var i=t.ui.keyCode,s=this.headers.length,n=this.headers.index(e.target),a=!1;switch(e.keyCode){case i.RIGHT:case i.DOWN:a=this.headers[(n+1)%s];break;case i.LEFT:case i.UP:a=this.headers[(n-1+s)%s];break;case i.SPACE:case i.ENTER:this._eventHandler(e);break;case i.HOME:a=this.headers[0];break;case i.END:a=this.headers[s-1]}a&&(t(e.target).attr("tabIndex",-1),t(a).attr("tabIndex",0),a.focus(),e.preventDefault())}},_panelKeyDown:function(e){e.keyCode===t.ui.keyCode.UP&&e.ctrlKey&&t(e.currentTarget).prev().focus()},refresh:function(){var e=this.options;this._processPanels(),e.active===!1&&e.collapsible===!0||!this.headers.length?(e.active=!1,this.active=t()):e.active===!1?this._activate(0):this.active.length&&!t.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(e.active=!1,this.active=t()):this._activate(Math.max(0,e.active-1)):e.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){this.headers=this.element.find(this.options.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"),this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide()},_refresh:function(){var i,s=this.options,n=s.heightStyle,a=this.element.parent(),o=this.accordionId="ui-accordion-"+(this.element.attr("id")||++e);this.active=this._findActive(s.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all"),this.active.next().addClass("ui-accordion-content-active").show(),this.headers.attr("role","tab").each(function(e){var i=t(this),s=i.attr("id"),n=i.next(),a=n.attr("id");s||(s=o+"-header-"+e,i.attr("id",s)),a||(a=o+"-panel-"+e,n.attr("id",a)),i.attr("aria-controls",a),n.attr("aria-labelledby",s)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false",tabIndex:-1}).next().attr({"aria-expanded":"false","aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true",tabIndex:0}).next().attr({"aria-expanded":"true","aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(s.event),"fill"===n?(i=a.height(),this.element.siblings(":visible").each(function(){var e=t(this),s=e.css("position");"absolute"!==s&&"fixed"!==s&&(i-=e.outerHeight(!0))}),this.headers.each(function(){i-=t(this).outerHeight(!0)}),this.headers.next().each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===n&&(i=0,this.headers.next().each(function(){i=Math.max(i,t(this).css("height","").height())}).height(i))},_activate:function(e){var i=this._findActive(e)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return"number"==typeof e?this.headers.eq(e):t()},_setupEvents:function(e){var i={keydown:"_keydown"};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(e){var i=this.options,s=this.active,n=t(e.currentTarget),a=n[0]===s[0],o=a&&i.collapsible,r=o?t():n.next(),h=s.next(),l={oldHeader:s,oldPanel:h,newHeader:o?t():n,newPanel:r};e.preventDefault(),a&&!i.collapsible||this._trigger("beforeActivate",e,l)===!1||(i.active=o?!1:this.headers.index(n),this.active=a?t():n,this._toggle(l),s.removeClass("ui-accordion-header-active ui-state-active"),i.icons&&s.children(".ui-accordion-header-icon").removeClass(i.icons.activeHeader).addClass(i.icons.header),a||(n.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"),i.icons&&n.children(".ui-accordion-header-icon").removeClass(i.icons.header).addClass(i.icons.activeHeader),n.next().addClass("ui-accordion-content-active")))},_toggle:function(e){var i=e.newPanel,s=this.prevShow.length?this.prevShow:e.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=s,this.options.animate?this._animate(i,s,e):(s.hide(),i.show(),this._toggleComplete(e)),s.attr({"aria-expanded":"false","aria-hidden":"true"}),s.prev().attr("aria-selected","false"),i.length&&s.length?s.prev().attr("tabIndex",-1):i.length&&this.headers.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),i.attr({"aria-expanded":"true","aria-hidden":"false"}).prev().attr({"aria-selected":"true",tabIndex:0})},_animate:function(t,e,n){var a,o,r,h=this,l=0,c=t.length&&(!e.length||t.index()<e.index()),u=this.options.animate||{},d=c&&u.down||u,p=function(){h._toggleComplete(n)};return"number"==typeof d&&(r=d),"string"==typeof d&&(o=d),o=o||d.easing||u.easing,r=r||d.duration||u.duration,e.length?t.length?(a=t.show().outerHeight(),e.animate(i,{duration:r,easing:o,step:function(t,e){e.now=Math.round(t)}}),t.hide().animate(s,{duration:r,easing:o,complete:p,step:function(t,i){i.now=Math.round(t),"height"!==i.prop?l+=i.now:"content"!==h.options.heightStyle&&(i.now=Math.round(a-e.outerHeight()-l),l=0)}}),undefined):e.animate(i,r,o,p):t.animate(s,r,o,p)},_toggleComplete:function(t){var e=t.oldPanel;e.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"),e.length&&(e.parent()[0].className=e.parent()[0].className),this._trigger("activate",null,t)}})})(jQuery);(function(t){var e=0;t.widget("ui.autocomplete",{version:"1.10.3",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},pending:0,_create:function(){var e,i,s,n=this.element[0].nodeName.toLowerCase(),a="textarea"===n,o="input"===n;this.isMultiLine=a?!0:o?!1:this.element.prop("isContentEditable"),this.valueMethod=this.element[a||o?"val":"text"],this.isNewMenu=!0,this.element.addClass("ui-autocomplete-input").attr("autocomplete","off"),this._on(this.element,{keydown:function(n){if(this.element.prop("readOnly"))return e=!0,s=!0,i=!0,undefined;e=!1,s=!1,i=!1;var a=t.ui.keyCode;switch(n.keyCode){case a.PAGE_UP:e=!0,this._move("previousPage",n);break;case a.PAGE_DOWN:e=!0,this._move("nextPage",n);break;case a.UP:e=!0,this._keyEvent("previous",n);break;case a.DOWN:e=!0,this._keyEvent("next",n);break;case a.ENTER:case a.NUMPAD_ENTER:this.menu.active&&(e=!0,n.preventDefault(),this.menu.select(n));break;case a.TAB:this.menu.active&&this.menu.select(n);break;case a.ESCAPE:this.menu.element.is(":visible")&&(this._value(this.term),this.close(n),n.preventDefault());break;default:i=!0,this._searchTimeout(n)}},keypress:function(s){if(e)return e=!1,(!this.isMultiLine||this.menu.element.is(":visible"))&&s.preventDefault(),undefined;if(!i){var n=t.ui.keyCode;switch(s.keyCode){case n.PAGE_UP:this._move("previousPage",s);break;case n.PAGE_DOWN:this._move("nextPage",s);break;case n.UP:this._keyEvent("previous",s);break;case n.DOWN:this._keyEvent("next",s)}}},input:function(t){return s?(s=!1,t.preventDefault(),undefined):(this._searchTimeout(t),undefined)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(t){return this.cancelBlur?(delete this.cancelBlur,undefined):(clearTimeout(this.searching),this.close(t),this._change(t),undefined)}}),this._initSource(),this.menu=t("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({role:null}).hide().data("ui-menu"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur});var i=this.menu.element[0];t(e.target).closest(".ui-menu-item").length||this._delay(function(){var e=this;this.document.one("mousedown",function(s){s.target===e.element[0]||s.target===i||t.contains(i,s.target)||e.close()})})},menufocus:function(e,i){if(this.isNewMenu&&(this.isNewMenu=!1,e.originalEvent&&/^mouse/.test(e.originalEvent.type)))return this.menu.blur(),this.document.one("mousemove",function(){t(e.target).trigger(e.originalEvent)}),undefined;var s=i.item.data("ui-autocomplete-item");!1!==this._trigger("focus",e,{item:s})?e.originalEvent&&/^key/.test(e.originalEvent.type)&&this._value(s.value):this.liveRegion.text(s.value)},menuselect:function(t,e){var i=e.item.data("ui-autocomplete-item"),s=this.previous;this.element[0]!==this.document[0].activeElement&&(this.element.focus(),this.previous=s,this._delay(function(){this.previous=s,this.selectedItem=i})),!1!==this._trigger("select",t,{item:i})&&this._value(i.value),this.term=this._value(),this.close(t),this.selectedItem=i}}),this.liveRegion=t("<span>",{role:"status","aria-live":"polite"}).addClass("ui-helper-hidden-accessible").insertBefore(this.element),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(t,e){this._super(t,e),"source"===t&&this._initSource(),"appendTo"===t&&this.menu.element.appendTo(this._appendTo()),"disabled"===t&&e&&this.xhr&&this.xhr.abort()},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e||(e=this.element.closest(".ui-front")),e.length||(e=this.document[0].body),e},_initSource:function(){var e,i,s=this;t.isArray(this.options.source)?(e=this.options.source,this.source=function(i,s){s(t.ui.autocomplete.filter(e,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(e,n){s.xhr&&s.xhr.abort(),s.xhr=t.ajax({url:i,data:e,dataType:"json",success:function(t){n(t)},error:function(){n([])}})}):this.source=this.options.source},_searchTimeout:function(t){clearTimeout(this.searching),this.searching=this._delay(function(){this.term!==this._value()&&(this.selectedItem=null,this.search(null,t))},this.options.delay)},search:function(t,e){return t=null!=t?t:this._value(),this.term=this._value(),t.length<this.options.minLength?this.close(e):this._trigger("search",e)!==!1?this._search(t):undefined},_search:function(t){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:t},this._response())},_response:function(){var t=this,i=++e;return function(s){i===e&&t.__response(s),t.pending--,t.pending||t.element.removeClass("ui-autocomplete-loading")}},__response:function(t){t&&(t=this._normalize(t)),this._trigger("response",null,{content:t}),!this.options.disabled&&t&&t.length&&!this.cancelSearch?(this._suggest(t),this._trigger("open")):this._close()},close:function(t){this.cancelSearch=!0,this._close(t)},_close:function(t){this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",t))},_change:function(t){this.previous!==this._value()&&this._trigger("change",t,{item:this.selectedItem})},_normalize:function(e){return e.length&&e[0].label&&e[0].value?e:t.map(e,function(e){return"string"==typeof e?{label:e,value:e}:t.extend({label:e.label||e.value,value:e.value||e.label},e)})},_suggest:function(e){var i=this.menu.element.empty();this._renderMenu(i,e),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(t.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next()},_resizeMenu:function(){var t=this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(e,i){var s=this;t.each(i,function(t,i){s._renderItemData(e,i)})},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-autocomplete-item",e)},_renderItem:function(e,i){return t("<li>").append(t("<a>").text(i.label)).appendTo(e)},_move:function(t,e){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(t)||this.menu.isLastItem()&&/^next/.test(t)?(this._value(this.term),this.menu.blur(),undefined):(this.menu[t](e),undefined):(this.search(null,e),undefined)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(t,e){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(t,e),e.preventDefault())}}),t.extend(t.ui.autocomplete,{escapeRegex:function(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(e,i){var s=RegExp(t.ui.autocomplete.escapeRegex(i),"i");return t.grep(e,function(t){return s.test(t.label||t.value||t)})}}),t.widget("ui.autocomplete",t.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(t){return t+(t>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(t){var e;this._superApply(arguments),this.options.disabled||this.cancelSearch||(e=t&&t.length?this.options.messages.results(t.length):this.options.messages.noResults,this.liveRegion.text(e))}})})(jQuery);(function(t){var e,i,s,n,a="ui-button ui-widget ui-state-default ui-corner-all",o="ui-state-hover ui-state-active ",r="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",h=function(){var e=t(this);setTimeout(function(){e.find(":ui-button").button("refresh")},1)},l=function(e){var i=e.name,s=e.form,n=t([]);return i&&(i=i.replace(/'/g,"\\'"),n=s?t(s).find("[name='"+i+"']"):t("[name='"+i+"']",e.ownerDocument).filter(function(){return!this.form})),n};t.widget("ui.button",{version:"1.10.3",defaultElement:"<button>",options:{disabled:null,text:!0,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset"+this.eventNamespace).bind("reset"+this.eventNamespace,h),"boolean"!=typeof this.options.disabled?this.options.disabled=!!this.element.prop("disabled"):this.element.prop("disabled",this.options.disabled),this._determineButtonType(),this.hasTitle=!!this.buttonElement.attr("title");var o=this,r=this.options,c="checkbox"===this.type||"radio"===this.type,u=c?"":"ui-state-active",d="ui-state-focus";null===r.label&&(r.label="input"===this.type?this.buttonElement.val():this.buttonElement.html()),this._hoverable(this.buttonElement),this.buttonElement.addClass(a).attr("role","button").bind("mouseenter"+this.eventNamespace,function(){r.disabled||this===e&&t(this).addClass("ui-state-active")}).bind("mouseleave"+this.eventNamespace,function(){r.disabled||t(this).removeClass(u)}).bind("click"+this.eventNamespace,function(t){r.disabled&&(t.preventDefault(),t.stopImmediatePropagation())}),this.element.bind("focus"+this.eventNamespace,function(){o.buttonElement.addClass(d)}).bind("blur"+this.eventNamespace,function(){o.buttonElement.removeClass(d)}),c&&(this.element.bind("change"+this.eventNamespace,function(){n||o.refresh()}),this.buttonElement.bind("mousedown"+this.eventNamespace,function(t){r.disabled||(n=!1,i=t.pageX,s=t.pageY)}).bind("mouseup"+this.eventNamespace,function(t){r.disabled||(i!==t.pageX||s!==t.pageY)&&(n=!0)})),"checkbox"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){return r.disabled||n?!1:undefined}):"radio"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){if(r.disabled||n)return!1;t(this).addClass("ui-state-active"),o.buttonElement.attr("aria-pressed","true");var e=o.element[0];l(e).not(e).map(function(){return t(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed","false")}):(this.buttonElement.bind("mousedown"+this.eventNamespace,function(){return r.disabled?!1:(t(this).addClass("ui-state-active"),e=this,o.document.one("mouseup",function(){e=null}),undefined)}).bind("mouseup"+this.eventNamespace,function(){return r.disabled?!1:(t(this).removeClass("ui-state-active"),undefined)}).bind("keydown"+this.eventNamespace,function(e){return r.disabled?!1:((e.keyCode===t.ui.keyCode.SPACE||e.keyCode===t.ui.keyCode.ENTER)&&t(this).addClass("ui-state-active"),undefined)}).bind("keyup"+this.eventNamespace+" blur"+this.eventNamespace,function(){t(this).removeClass("ui-state-active")}),this.buttonElement.is("a")&&this.buttonElement.keyup(function(e){e.keyCode===t.ui.keyCode.SPACE&&t(this).click()})),this._setOption("disabled",r.disabled),this._resetButton()},_determineButtonType:function(){var t,e,i;this.type=this.element.is("[type=checkbox]")?"checkbox":this.element.is("[type=radio]")?"radio":this.element.is("input")?"input":"button","checkbox"===this.type||"radio"===this.type?(t=this.element.parents().last(),e="label[for='"+this.element.attr("id")+"']",this.buttonElement=t.find(e),this.buttonElement.length||(t=t.length?t.siblings():this.element.siblings(),this.buttonElement=t.filter(e),this.buttonElement.length||(this.buttonElement=t.find(e))),this.element.addClass("ui-helper-hidden-accessible"),i=this.element.is(":checked"),i&&this.buttonElement.addClass("ui-state-active"),this.buttonElement.prop("aria-pressed",i)):this.buttonElement=this.element},widget:function(){return this.buttonElement},_destroy:function(){this.element.removeClass("ui-helper-hidden-accessible"),this.buttonElement.removeClass(a+" "+o+" "+r).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()),this.hasTitle||this.buttonElement.removeAttr("title")},_setOption:function(t,e){return this._super(t,e),"disabled"===t?(e?this.element.prop("disabled",!0):this.element.prop("disabled",!1),undefined):(this._resetButton(),undefined)},refresh:function(){var e=this.element.is("input, button")?this.element.is(":disabled"):this.element.hasClass("ui-button-disabled");e!==this.options.disabled&&this._setOption("disabled",e),"radio"===this.type?l(this.element[0]).each(function(){t(this).is(":checked")?t(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true"):t(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false")}):"checkbox"===this.type&&(this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true"):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false"))},_resetButton:function(){if("input"===this.type)return this.options.label&&this.element.val(this.options.label),undefined;var e=this.buttonElement.removeClass(r),i=t("<span></span>",this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(e.empty()).text(),s=this.options.icons,n=s.primary&&s.secondary,a=[];s.primary||s.secondary?(this.options.text&&a.push("ui-button-text-icon"+(n?"s":s.primary?"-primary":"-secondary")),s.primary&&e.prepend("<span class='ui-button-icon-primary ui-icon "+s.primary+"'></span>"),s.secondary&&e.append("<span class='ui-button-icon-secondary ui-icon "+s.secondary+"'></span>"),this.options.text||(a.push(n?"ui-button-icons-only":"ui-button-icon-only"),this.hasTitle||e.attr("title",t.trim(i)))):a.push("ui-button-text-only"),e.addClass(a.join(" "))}}),t.widget("ui.buttonset",{version:"1.10.3",options:{items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(t,e){"disabled"===t&&this.buttons.button("option",t,e),this._super(t,e)},refresh:function(){var e="rtl"===this.element.css("direction");this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){return t(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(e?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(e?"ui-corner-left":"ui-corner-right").end().end()},_destroy:function(){this.element.removeClass("ui-buttonset"),this.buttons.map(function(){return t(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy")}})})(jQuery);(function(t,e){function i(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},t.extend(this._defaults,this.regional[""]),this.dpDiv=s(t("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function s(e){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.delegate(i,"mouseout",function(){t(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).removeClass("ui-datepicker-next-hover")}).delegate(i,"mouseover",function(){t.datepicker._isDisabledDatepicker(a.inline?e.parent()[0]:a.input[0])||(t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),t(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).addClass("ui-datepicker-next-hover"))})}function n(e,i){t.extend(e,i);for(var s in i)null==i[s]&&(e[s]=i[s]);return e}t.extend(t.ui,{datepicker:{version:"1.10.3"}});var a,r="datepicker";t.extend(i.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(t){return n(this._defaults,t||{}),this},_attachDatepicker:function(e,i){var s,n,a;s=e.nodeName.toLowerCase(),n="div"===s||"span"===s,e.id||(this.uuid+=1,e.id="dp"+this.uuid),a=this._newInst(t(e),n),a.settings=t.extend({},i||{}),"input"===s?this._connectDatepicker(e,a):n&&this._inlineDatepicker(e,a)},_newInst:function(e,i){var n=e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:n,input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?s(t("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,i){var s=t(e);i.append=t([]),i.trigger=t([]),s.hasClass(this.markerClassName)||(this._attachments(s,i),s.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp),this._autoSize(i),t.data(e,r,i),i.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,i){var s,n,a,r=this._get(i,"appendText"),o=this._get(i,"isRTL");i.append&&i.append.remove(),r&&(i.append=t("<span class='"+this._appendClass+"'>"+r+"</span>"),e[o?"before":"after"](i.append)),e.unbind("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),s=this._get(i,"showOn"),("focus"===s||"both"===s)&&e.focus(this._showDatepicker),("button"===s||"both"===s)&&(n=this._get(i,"buttonText"),a=this._get(i,"buttonImage"),i.trigger=t(this._get(i,"buttonImageOnly")?t("<img/>").addClass(this._triggerClass).attr({src:a,alt:n,title:n}):t("<button type='button'></button>").addClass(this._triggerClass).html(a?t("<img/>").attr({src:a,alt:n,title:n}):n)),e[o?"before":"after"](i.trigger),i.trigger.click(function(){return t.datepicker._datepickerShowing&&t.datepicker._lastInput===e[0]?t.datepicker._hideDatepicker():t.datepicker._datepickerShowing&&t.datepicker._lastInput!==e[0]?(t.datepicker._hideDatepicker(),t.datepicker._showDatepicker(e[0])):t.datepicker._showDatepicker(e[0]),!1}))},_autoSize:function(t){if(this._get(t,"autoSize")&&!t.inline){var e,i,s,n,a=new Date(2009,11,20),r=this._get(t,"dateFormat");r.match(/[DM]/)&&(e=function(t){for(i=0,s=0,n=0;t.length>n;n++)t[n].length>i&&(i=t[n].length,s=n);return s},a.setMonth(e(this._get(t,r.match(/MM/)?"monthNames":"monthNamesShort"))),a.setDate(e(this._get(t,r.match(/DD/)?"dayNames":"dayNamesShort"))+20-a.getDay())),t.input.attr("size",this._formatDate(t,a).length)}},_inlineDatepicker:function(e,i){var s=t(e);s.hasClass(this.markerClassName)||(s.addClass(this.markerClassName).append(i.dpDiv),t.data(e,r,i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(e),i.dpDiv.css("display","block"))},_dialogDatepicker:function(e,i,s,a,o){var h,l,c,u,d,p=this._dialogInst;return p||(this.uuid+=1,h="dp"+this.uuid,this._dialogInput=t("<input type='text' id='"+h+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.keydown(this._doKeyDown),t("body").append(this._dialogInput),p=this._dialogInst=this._newInst(this._dialogInput,!1),p.settings={},t.data(this._dialogInput[0],r,p)),n(p.settings,a||{}),i=i&&i.constructor===Date?this._formatDate(p,i):i,this._dialogInput.val(i),this._pos=o?o.length?o:[o.pageX,o.pageY]:null,this._pos||(l=document.documentElement.clientWidth,c=document.documentElement.clientHeight,u=document.documentElement.scrollLeft||document.body.scrollLeft,d=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[l/2-100+u,c/2-150+d]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),p.settings.onSelect=s,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),t.blockUI&&t.blockUI(this.dpDiv),t.data(this._dialogInput[0],r,p),this},_destroyDatepicker:function(e){var i,s=t(e),n=t.data(e,r);s.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),t.removeData(e,r),"input"===i?(n.append.remove(),n.trigger.remove(),s.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):("div"===i||"span"===i)&&s.removeClass(this.markerClassName).empty())},_enableDatepicker:function(e){var i,s,n=t(e),a=t.data(e,r);n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!1,a.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().removeClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}))},_disableDatepicker:function(e){var i,s,n=t(e),a=t.data(e,r);n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!0,a.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().addClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}),this._disabledInputs[this._disabledInputs.length]=e)},_isDisabledDatepicker:function(t){if(!t)return!1;for(var e=0;this._disabledInputs.length>e;e++)if(this._disabledInputs[e]===t)return!0;return!1},_getInst:function(e){try{return t.data(e,r)}catch(i){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(i,s,a){var r,o,h,l,c=this._getInst(i);return 2===arguments.length&&"string"==typeof s?"defaults"===s?t.extend({},t.datepicker._defaults):c?"all"===s?t.extend({},c.settings):this._get(c,s):null:(r=s||{},"string"==typeof s&&(r={},r[s]=a),c&&(this._curInst===c&&this._hideDatepicker(),o=this._getDateDatepicker(i,!0),h=this._getMinMaxDate(c,"min"),l=this._getMinMaxDate(c,"max"),n(c.settings,r),null!==h&&r.dateFormat!==e&&r.minDate===e&&(c.settings.minDate=this._formatDate(c,h)),null!==l&&r.dateFormat!==e&&r.maxDate===e&&(c.settings.maxDate=this._formatDate(c,l)),"disabled"in r&&(r.disabled?this._disableDatepicker(i):this._enableDatepicker(i)),this._attachments(t(i),c),this._autoSize(c),this._setDate(c,o),this._updateAlternate(c),this._updateDatepicker(c)),e)},_changeDatepicker:function(t,e,i){this._optionDatepicker(t,e,i)},_refreshDatepicker:function(t){var e=this._getInst(t);e&&this._updateDatepicker(e)},_setDateDatepicker:function(t,e){var i=this._getInst(t);i&&(this._setDate(i,e),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(t,e){var i=this._getInst(t);return i&&!i.inline&&this._setDateFromField(i,e),i?this._getDate(i):null},_doKeyDown:function(e){var i,s,n,a=t.datepicker._getInst(e.target),r=!0,o=a.dpDiv.is(".ui-datepicker-rtl");if(a._keyEvent=!0,t.datepicker._datepickerShowing)switch(e.keyCode){case 9:t.datepicker._hideDatepicker(),r=!1;break;case 13:return n=t("td."+t.datepicker._dayOverClass+":not(."+t.datepicker._currentClass+")",a.dpDiv),n[0]&&t.datepicker._selectDay(e.target,a.selectedMonth,a.selectedYear,n[0]),i=t.datepicker._get(a,"onSelect"),i?(s=t.datepicker._formatDate(a),i.apply(a.input?a.input[0]:null,[s,a])):t.datepicker._hideDatepicker(),!1;case 27:t.datepicker._hideDatepicker();break;case 33:t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(a,"stepBigMonths"):-t.datepicker._get(a,"stepMonths"),"M");break;case 34:t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(a,"stepBigMonths"):+t.datepicker._get(a,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&t.datepicker._clearDate(e.target),r=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&t.datepicker._gotoToday(e.target),r=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,o?1:-1,"D"),r=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(a,"stepBigMonths"):-t.datepicker._get(a,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,-7,"D"),r=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,o?-1:1,"D"),r=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(a,"stepBigMonths"):+t.datepicker._get(a,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,7,"D"),r=e.ctrlKey||e.metaKey;break;default:r=!1}else 36===e.keyCode&&e.ctrlKey?t.datepicker._showDatepicker(this):r=!1;r&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(i){var s,n,a=t.datepicker._getInst(i.target);return t.datepicker._get(a,"constrainInput")?(s=t.datepicker._possibleChars(t.datepicker._get(a,"dateFormat")),n=String.fromCharCode(null==i.charCode?i.keyCode:i.charCode),i.ctrlKey||i.metaKey||" ">n||!s||s.indexOf(n)>-1):e},_doKeyUp:function(e){var i,s=t.datepicker._getInst(e.target);if(s.input.val()!==s.lastVal)try{i=t.datepicker.parseDate(t.datepicker._get(s,"dateFormat"),s.input?s.input.val():null,t.datepicker._getFormatConfig(s)),i&&(t.datepicker._setDateFromField(s),t.datepicker._updateAlternate(s),t.datepicker._updateDatepicker(s))}catch(n){}return!0},_showDatepicker:function(e){if(e=e.target||e,"input"!==e.nodeName.toLowerCase()&&(e=t("input",e.parentNode)[0]),!t.datepicker._isDisabledDatepicker(e)&&t.datepicker._lastInput!==e){var i,s,a,r,o,h,l;i=t.datepicker._getInst(e),t.datepicker._curInst&&t.datepicker._curInst!==i&&(t.datepicker._curInst.dpDiv.stop(!0,!0),i&&t.datepicker._datepickerShowing&&t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])),s=t.datepicker._get(i,"beforeShow"),a=s?s.apply(e,[e,i]):{},a!==!1&&(n(i.settings,a),i.lastVal=null,t.datepicker._lastInput=e,t.datepicker._setDateFromField(i),t.datepicker._inDialog&&(e.value=""),t.datepicker._pos||(t.datepicker._pos=t.datepicker._findPos(e),t.datepicker._pos[1]+=e.offsetHeight),r=!1,t(e).parents().each(function(){return r|="fixed"===t(this).css("position"),!r}),o={left:t.datepicker._pos[0],top:t.datepicker._pos[1]},t.datepicker._pos=null,i.dpDiv.empty(),i.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),t.datepicker._updateDatepicker(i),o=t.datepicker._checkOffset(i,o,r),i.dpDiv.css({position:t.datepicker._inDialog&&t.blockUI?"static":r?"fixed":"absolute",display:"none",left:o.left+"px",top:o.top+"px"}),i.inline||(h=t.datepicker._get(i,"showAnim"),l=t.datepicker._get(i,"duration"),i.dpDiv.zIndex(t(e).zIndex()+1),t.datepicker._datepickerShowing=!0,t.effects&&t.effects.effect[h]?i.dpDiv.show(h,t.datepicker._get(i,"showOptions"),l):i.dpDiv[h||"show"](h?l:null),t.datepicker._shouldFocusInput(i)&&i.input.focus(),t.datepicker._curInst=i))}},_updateDatepicker:function(e){this.maxRows=4,a=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e),e.dpDiv.find("."+this._dayOverClass+" a").mouseover();var i,s=this._getNumberOfMonths(e),n=s[1],r=17;e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),n>1&&e.dpDiv.addClass("ui-datepicker-multi-"+n).css("width",r*n+"em"),e.dpDiv[(1!==s[0]||1!==s[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===t.datepicker._curInst&&t.datepicker._datepickerShowing&&t.datepicker._shouldFocusInput(e)&&e.input.focus(),e.yearshtml&&(i=e.yearshtml,setTimeout(function(){i===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),i=e.yearshtml=null},0))},_shouldFocusInput:function(t){return t.input&&t.input.is(":visible")&&!t.input.is(":disabled")&&!t.input.is(":focus")},_checkOffset:function(e,i,s){var n=e.dpDiv.outerWidth(),a=e.dpDiv.outerHeight(),r=e.input?e.input.outerWidth():0,o=e.input?e.input.outerHeight():0,h=document.documentElement.clientWidth+(s?0:t(document).scrollLeft()),l=document.documentElement.clientHeight+(s?0:t(document).scrollTop());return i.left-=this._get(e,"isRTL")?n-r:0,i.left-=s&&i.left===e.input.offset().left?t(document).scrollLeft():0,i.top-=s&&i.top===e.input.offset().top+o?t(document).scrollTop():0,i.left-=Math.min(i.left,i.left+n>h&&h>n?Math.abs(i.left+n-h):0),i.top-=Math.min(i.top,i.top+a>l&&l>a?Math.abs(a+o):0),i},_findPos:function(e){for(var i,s=this._getInst(e),n=this._get(s,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||t.expr.filters.hidden(e));)e=e[n?"previousSibling":"nextSibling"];return i=t(e).offset(),[i.left,i.top]},_hideDatepicker:function(e){var i,s,n,a,o=this._curInst;!o||e&&o!==t.data(e,r)||this._datepickerShowing&&(i=this._get(o,"showAnim"),s=this._get(o,"duration"),n=function(){t.datepicker._tidyDialog(o)},t.effects&&(t.effects.effect[i]||t.effects[i])?o.dpDiv.hide(i,t.datepicker._get(o,"showOptions"),s,n):o.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?s:null,n),i||n(),this._datepickerShowing=!1,a=this._get(o,"onClose"),a&&a.apply(o.input?o.input[0]:null,[o.input?o.input.val():"",o]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),t.blockUI&&(t.unblockUI(),t("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(t){t.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(e){if(t.datepicker._curInst){var i=t(e.target),s=t.datepicker._getInst(i[0]);(i[0].id!==t.datepicker._mainDivId&&0===i.parents("#"+t.datepicker._mainDivId).length&&!i.hasClass(t.datepicker.markerClassName)&&!i.closest("."+t.datepicker._triggerClass).length&&t.datepicker._datepickerShowing&&(!t.datepicker._inDialog||!t.blockUI)||i.hasClass(t.datepicker.markerClassName)&&t.datepicker._curInst!==s)&&t.datepicker._hideDatepicker()}},_adjustDate:function(e,i,s){var n=t(e),a=this._getInst(n[0]);this._isDisabledDatepicker(n[0])||(this._adjustInstDate(a,i+("M"===s?this._get(a,"showCurrentAtPos"):0),s),this._updateDatepicker(a))},_gotoToday:function(e){var i,s=t(e),n=this._getInst(s[0]);this._get(n,"gotoCurrent")&&n.currentDay?(n.selectedDay=n.currentDay,n.drawMonth=n.selectedMonth=n.currentMonth,n.drawYear=n.selectedYear=n.currentYear):(i=new Date,n.selectedDay=i.getDate(),n.drawMonth=n.selectedMonth=i.getMonth(),n.drawYear=n.selectedYear=i.getFullYear()),this._notifyChange(n),this._adjustDate(s)},_selectMonthYear:function(e,i,s){var n=t(e),a=this._getInst(n[0]);a["selected"+("M"===s?"Month":"Year")]=a["draw"+("M"===s?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(a),this._adjustDate(n)},_selectDay:function(e,i,s,n){var a,r=t(e);t(n).hasClass(this._unselectableClass)||this._isDisabledDatepicker(r[0])||(a=this._getInst(r[0]),a.selectedDay=a.currentDay=t("a",n).html(),a.selectedMonth=a.currentMonth=i,a.selectedYear=a.currentYear=s,this._selectDate(e,this._formatDate(a,a.currentDay,a.currentMonth,a.currentYear)))},_clearDate:function(e){var i=t(e);this._selectDate(i,"")},_selectDate:function(e,i){var s,n=t(e),a=this._getInst(n[0]);i=null!=i?i:this._formatDate(a),a.input&&a.input.val(i),this._updateAlternate(a),s=this._get(a,"onSelect"),s?s.apply(a.input?a.input[0]:null,[i,a]):a.input&&a.input.trigger("change"),a.inline?this._updateDatepicker(a):(this._hideDatepicker(),this._lastInput=a.input[0],"object"!=typeof a.input[0]&&a.input.focus(),this._lastInput=null)},_updateAlternate:function(e){var i,s,n,a=this._get(e,"altField");a&&(i=this._get(e,"altFormat")||this._get(e,"dateFormat"),s=this._getDate(e),n=this.formatDate(i,s,this._getFormatConfig(e)),t(a).each(function(){t(this).val(n)}))},noWeekends:function(t){var e=t.getDay();return[e>0&&6>e,""]},iso8601Week:function(t){var e,i=new Date(t.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),e=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((e-i)/864e5)/7)+1},parseDate:function(i,s,n){if(null==i||null==s)throw"Invalid arguments";if(s="object"==typeof s?""+s:s+"",""===s)return null;var a,r,o,h,l=0,c=(n?n.shortYearCutoff:null)||this._defaults.shortYearCutoff,u="string"!=typeof c?c:(new Date).getFullYear()%100+parseInt(c,10),d=(n?n.dayNamesShort:null)||this._defaults.dayNamesShort,p=(n?n.dayNames:null)||this._defaults.dayNames,f=(n?n.monthNamesShort:null)||this._defaults.monthNamesShort,m=(n?n.monthNames:null)||this._defaults.monthNames,g=-1,v=-1,_=-1,b=-1,y=!1,x=function(t){var e=i.length>a+1&&i.charAt(a+1)===t;return e&&a++,e},k=function(t){var e=x(t),i="@"===t?14:"!"===t?20:"y"===t&&e?4:"o"===t?3:2,n=RegExp("^\\d{1,"+i+"}"),a=s.substring(l).match(n);if(!a)throw"Missing number at position "+l;return l+=a[0].length,parseInt(a[0],10)},w=function(i,n,a){var r=-1,o=t.map(x(i)?a:n,function(t,e){return[[e,t]]}).sort(function(t,e){return-(t[1].length-e[1].length)});if(t.each(o,function(t,i){var n=i[1];return s.substr(l,n.length).toLowerCase()===n.toLowerCase()?(r=i[0],l+=n.length,!1):e}),-1!==r)return r+1;throw"Unknown name at position "+l},D=function(){if(s.charAt(l)!==i.charAt(a))throw"Unexpected literal at position "+l;l++};for(a=0;i.length>a;a++)if(y)"'"!==i.charAt(a)||x("'")?D():y=!1;else switch(i.charAt(a)){case"d":_=k("d");break;case"D":w("D",d,p);break;case"o":b=k("o");break;case"m":v=k("m");break;case"M":v=w("M",f,m);break;case"y":g=k("y");break;case"@":h=new Date(k("@")),g=h.getFullYear(),v=h.getMonth()+1,_=h.getDate();break;case"!":h=new Date((k("!")-this._ticksTo1970)/1e4),g=h.getFullYear(),v=h.getMonth()+1,_=h.getDate();break;case"'":x("'")?D():y=!0;break;default:D()}if(s.length>l&&(o=s.substr(l),!/^\s+/.test(o)))throw"Extra/unparsed characters found in date: "+o;if(-1===g?g=(new Date).getFullYear():100>g&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(u>=g?0:-100)),b>-1)for(v=1,_=b;;){if(r=this._getDaysInMonth(g,v-1),r>=_)break;v++,_-=r}if(h=this._daylightSavingAdjust(new Date(g,v-1,_)),h.getFullYear()!==g||h.getMonth()+1!==v||h.getDate()!==_)throw"Invalid date";return h},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:1e7*60*60*24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925)),formatDate:function(t,e,i){if(!e)return"";var s,n=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,a=(i?i.dayNames:null)||this._defaults.dayNames,r=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,o=(i?i.monthNames:null)||this._defaults.monthNames,h=function(e){var i=t.length>s+1&&t.charAt(s+1)===e;return i&&s++,i},l=function(t,e,i){var s=""+e;if(h(t))for(;i>s.length;)s="0"+s;return s},c=function(t,e,i,s){return h(t)?s[e]:i[e]},u="",d=!1;if(e)for(s=0;t.length>s;s++)if(d)"'"!==t.charAt(s)||h("'")?u+=t.charAt(s):d=!1;else switch(t.charAt(s)){case"d":u+=l("d",e.getDate(),2);break;case"D":u+=c("D",e.getDay(),n,a);break;case"o":u+=l("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":u+=l("m",e.getMonth()+1,2);break;case"M":u+=c("M",e.getMonth(),r,o);break;case"y":u+=h("y")?e.getFullYear():(10>e.getYear()%100?"0":"")+e.getYear()%100;break;case"@":u+=e.getTime();break;case"!":u+=1e4*e.getTime()+this._ticksTo1970;break;case"'":h("'")?u+="'":d=!0;break;default:u+=t.charAt(s)}return u},_possibleChars:function(t){var e,i="",s=!1,n=function(i){var s=t.length>e+1&&t.charAt(e+1)===i;return s&&e++,s};for(e=0;t.length>e;e++)if(s)"'"!==t.charAt(e)||n("'")?i+=t.charAt(e):s=!1;else switch(t.charAt(e)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":n("'")?i+="'":s=!0;break;default:i+=t.charAt(e)}return i},_get:function(t,i){return t.settings[i]!==e?t.settings[i]:this._defaults[i]},_setDateFromField:function(t,e){if(t.input.val()!==t.lastVal){var i=this._get(t,"dateFormat"),s=t.lastVal=t.input?t.input.val():null,n=this._getDefaultDate(t),a=n,r=this._getFormatConfig(t);try{a=this.parseDate(i,s,r)||n}catch(o){s=e?"":s}t.selectedDay=a.getDate(),t.drawMonth=t.selectedMonth=a.getMonth(),t.drawYear=t.selectedYear=a.getFullYear(),t.currentDay=s?a.getDate():0,t.currentMonth=s?a.getMonth():0,t.currentYear=s?a.getFullYear():0,this._adjustInstDate(t)}},_getDefaultDate:function(t){return this._restrictMinMax(t,this._determineDate(t,this._get(t,"defaultDate"),new Date))},_determineDate:function(e,i,s){var n=function(t){var e=new Date;return e.setDate(e.getDate()+t),e},a=function(i){try{return t.datepicker.parseDate(t.datepicker._get(e,"dateFormat"),i,t.datepicker._getFormatConfig(e))}catch(s){}for(var n=(i.toLowerCase().match(/^c/)?t.datepicker._getDate(e):null)||new Date,a=n.getFullYear(),r=n.getMonth(),o=n.getDate(),h=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,l=h.exec(i);l;){switch(l[2]||"d"){case"d":case"D":o+=parseInt(l[1],10);break;case"w":case"W":o+=7*parseInt(l[1],10);break;case"m":case"M":r+=parseInt(l[1],10),o=Math.min(o,t.datepicker._getDaysInMonth(a,r));break;case"y":case"Y":a+=parseInt(l[1],10),o=Math.min(o,t.datepicker._getDaysInMonth(a,r))}l=h.exec(i)}return new Date(a,r,o)},r=null==i||""===i?s:"string"==typeof i?a(i):"number"==typeof i?isNaN(i)?s:n(i):new Date(i.getTime());return r=r&&"Invalid Date"==""+r?s:r,r&&(r.setHours(0),r.setMinutes(0),r.setSeconds(0),r.setMilliseconds(0)),this._daylightSavingAdjust(r)},_daylightSavingAdjust:function(t){return t?(t.setHours(t.getHours()>12?t.getHours()+2:0),t):null},_setDate:function(t,e,i){var s=!e,n=t.selectedMonth,a=t.selectedYear,r=this._restrictMinMax(t,this._determineDate(t,e,new Date));t.selectedDay=t.currentDay=r.getDate(),t.drawMonth=t.selectedMonth=t.currentMonth=r.getMonth(),t.drawYear=t.selectedYear=t.currentYear=r.getFullYear(),n===t.selectedMonth&&a===t.selectedYear||i||this._notifyChange(t),this._adjustInstDate(t),t.input&&t.input.val(s?"":this._formatDate(t))},_getDate:function(t){var e=!t.currentYear||t.input&&""===t.input.val()?null:this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return e},_attachHandlers:function(e){var i=this._get(e,"stepMonths"),s="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){t.datepicker._adjustDate(s,-i,"M")},next:function(){t.datepicker._adjustDate(s,+i,"M")},hide:function(){t.datepicker._hideDatepicker()},today:function(){t.datepicker._gotoToday(s)},selectDay:function(){return t.datepicker._selectDay(s,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return t.datepicker._selectMonthYear(s,this,"M"),!1},selectYear:function(){return t.datepicker._selectMonthYear(s,this,"Y"),!1}};t(this).bind(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(t){var e,i,s,n,a,r,o,h,l,c,u,d,p,f,m,g,v,_,b,y,x,k,w,D,T,C,M,S,N,I,P,A,z,H,E,F,O,W,j,R=new Date,L=this._daylightSavingAdjust(new Date(R.getFullYear(),R.getMonth(),R.getDate())),Y=this._get(t,"isRTL"),B=this._get(t,"showButtonPanel"),J=this._get(t,"hideIfNoPrevNext"),K=this._get(t,"navigationAsDateFormat"),Q=this._getNumberOfMonths(t),V=this._get(t,"showCurrentAtPos"),U=this._get(t,"stepMonths"),q=1!==Q[0]||1!==Q[1],X=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),G=this._getMinMaxDate(t,"min"),$=this._getMinMaxDate(t,"max"),Z=t.drawMonth-V,te=t.drawYear;if(0>Z&&(Z+=12,te--),$)for(e=this._daylightSavingAdjust(new Date($.getFullYear(),$.getMonth()-Q[0]*Q[1]+1,$.getDate())),e=G&&G>e?G:e;this._daylightSavingAdjust(new Date(te,Z,1))>e;)Z--,0>Z&&(Z=11,te--);for(t.drawMonth=Z,t.drawYear=te,i=this._get(t,"prevText"),i=K?this.formatDate(i,this._daylightSavingAdjust(new Date(te,Z-U,1)),this._getFormatConfig(t)):i,s=this._canAdjustMonth(t,-1,te,Z)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"e":"w")+"'>"+i+"</span></a>":J?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"e":"w")+"'>"+i+"</span></a>",n=this._get(t,"nextText"),n=K?this.formatDate(n,this._daylightSavingAdjust(new Date(te,Z+U,1)),this._getFormatConfig(t)):n,a=this._canAdjustMonth(t,1,te,Z)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"w":"e")+"'>"+n+"</span></a>":J?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"w":"e")+"'>"+n+"</span></a>",r=this._get(t,"currentText"),o=this._get(t,"gotoCurrent")&&t.currentDay?X:L,r=K?this.formatDate(r,o,this._getFormatConfig(t)):r,h=t.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(t,"closeText")+"</button>",l=B?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(Y?h:"")+(this._isInRange(t,o)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+r+"</button>":"")+(Y?"":h)+"</div>":"",c=parseInt(this._get(t,"firstDay"),10),c=isNaN(c)?0:c,u=this._get(t,"showWeek"),d=this._get(t,"dayNames"),p=this._get(t,"dayNamesMin"),f=this._get(t,"monthNames"),m=this._get(t,"monthNamesShort"),g=this._get(t,"beforeShowDay"),v=this._get(t,"showOtherMonths"),_=this._get(t,"selectOtherMonths"),b=this._getDefaultDate(t),y="",k=0;Q[0]>k;k++){for(w="",this.maxRows=4,D=0;Q[1]>D;D++){if(T=this._daylightSavingAdjust(new Date(te,Z,t.selectedDay)),C=" ui-corner-all",M="",q){if(M+="<div class='ui-datepicker-group",Q[1]>1)switch(D){case 0:M+=" ui-datepicker-group-first",C=" ui-corner-"+(Y?"right":"left");break;case Q[1]-1:M+=" ui-datepicker-group-last",C=" ui-corner-"+(Y?"left":"right");break;default:M+=" ui-datepicker-group-middle",C=""}M+="'>"}for(M+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+C+"'>"+(/all|left/.test(C)&&0===k?Y?a:s:"")+(/all|right/.test(C)&&0===k?Y?s:a:"")+this._generateMonthYearHeader(t,Z,te,G,$,k>0||D>0,f,m)+"</div><table class='ui-datepicker-calendar'><thead>"+"<tr>",S=u?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",x=0;7>x;x++)N=(x+c)%7,S+="<th"+((x+c+6)%7>=5?" class='ui-datepicker-week-end'":"")+">"+"<span title='"+d[N]+"'>"+p[N]+"</span></th>";for(M+=S+"</tr></thead><tbody>",I=this._getDaysInMonth(te,Z),te===t.selectedYear&&Z===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,I)),P=(this._getFirstDayOfMonth(te,Z)-c+7)%7,A=Math.ceil((P+I)/7),z=q?this.maxRows>A?this.maxRows:A:A,this.maxRows=z,H=this._daylightSavingAdjust(new Date(te,Z,1-P)),E=0;z>E;E++){for(M+="<tr>",F=u?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(H)+"</td>":"",x=0;7>x;x++)O=g?g.apply(t.input?t.input[0]:null,[H]):[!0,""],W=H.getMonth()!==Z,j=W&&!_||!O[0]||G&&G>H||$&&H>$,F+="<td class='"+((x+c+6)%7>=5?" ui-datepicker-week-end":"")+(W?" ui-datepicker-other-month":"")+(H.getTime()===T.getTime()&&Z===t.selectedMonth&&t._keyEvent||b.getTime()===H.getTime()&&b.getTime()===T.getTime()?" "+this._dayOverClass:"")+(j?" "+this._unselectableClass+" ui-state-disabled":"")+(W&&!v?"":" "+O[1]+(H.getTime()===X.getTime()?" "+this._currentClass:"")+(H.getTime()===L.getTime()?" ui-datepicker-today":""))+"'"+(W&&!v||!O[2]?"":" title='"+O[2].replace(/'/g,"&#39;")+"'")+(j?"":" data-handler='selectDay' data-event='click' data-month='"+H.getMonth()+"' data-year='"+H.getFullYear()+"'")+">"+(W&&!v?"&#xa0;":j?"<span class='ui-state-default'>"+H.getDate()+"</span>":"<a class='ui-state-default"+(H.getTime()===L.getTime()?" ui-state-highlight":"")+(H.getTime()===X.getTime()?" ui-state-active":"")+(W?" ui-priority-secondary":"")+"' href='#'>"+H.getDate()+"</a>")+"</td>",H.setDate(H.getDate()+1),H=this._daylightSavingAdjust(H);M+=F+"</tr>"}Z++,Z>11&&(Z=0,te++),M+="</tbody></table>"+(q?"</div>"+(Q[0]>0&&D===Q[1]-1?"<div class='ui-datepicker-row-break'></div>":""):""),w+=M}y+=w}return y+=l,t._keyEvent=!1,y},_generateMonthYearHeader:function(t,e,i,s,n,a,r,o){var h,l,c,u,d,p,f,m,g=this._get(t,"changeMonth"),v=this._get(t,"changeYear"),_=this._get(t,"showMonthAfterYear"),b="<div class='ui-datepicker-title'>",y="";if(a||!g)y+="<span class='ui-datepicker-month'>"+r[e]+"</span>";else{for(h=s&&s.getFullYear()===i,l=n&&n.getFullYear()===i,y+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",c=0;12>c;c++)(!h||c>=s.getMonth())&&(!l||n.getMonth()>=c)&&(y+="<option value='"+c+"'"+(c===e?" selected='selected'":"")+">"+o[c]+"</option>");y+="</select>"}if(_||(b+=y+(!a&&g&&v?"":"&#xa0;")),!t.yearshtml)if(t.yearshtml="",a||!v)b+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(u=this._get(t,"yearRange").split(":"),d=(new Date).getFullYear(),p=function(t){var e=t.match(/c[+\-].*/)?i+parseInt(t.substring(1),10):t.match(/[+\-].*/)?d+parseInt(t,10):parseInt(t,10);
return isNaN(e)?d:e},f=p(u[0]),m=Math.max(f,p(u[1]||"")),f=s?Math.max(f,s.getFullYear()):f,m=n?Math.min(m,n.getFullYear()):m,t.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";m>=f;f++)t.yearshtml+="<option value='"+f+"'"+(f===i?" selected='selected'":"")+">"+f+"</option>";t.yearshtml+="</select>",b+=t.yearshtml,t.yearshtml=null}return b+=this._get(t,"yearSuffix"),_&&(b+=(!a&&g&&v?"":"&#xa0;")+y),b+="</div>"},_adjustInstDate:function(t,e,i){var s=t.drawYear+("Y"===i?e:0),n=t.drawMonth+("M"===i?e:0),a=Math.min(t.selectedDay,this._getDaysInMonth(s,n))+("D"===i?e:0),r=this._restrictMinMax(t,this._daylightSavingAdjust(new Date(s,n,a)));t.selectedDay=r.getDate(),t.drawMonth=t.selectedMonth=r.getMonth(),t.drawYear=t.selectedYear=r.getFullYear(),("M"===i||"Y"===i)&&this._notifyChange(t)},_restrictMinMax:function(t,e){var i=this._getMinMaxDate(t,"min"),s=this._getMinMaxDate(t,"max"),n=i&&i>e?i:e;return s&&n>s?s:n},_notifyChange:function(t){var e=this._get(t,"onChangeMonthYear");e&&e.apply(t.input?t.input[0]:null,[t.selectedYear,t.selectedMonth+1,t])},_getNumberOfMonths:function(t){var e=this._get(t,"numberOfMonths");return null==e?[1,1]:"number"==typeof e?[1,e]:e},_getMinMaxDate:function(t,e){return this._determineDate(t,this._get(t,e+"Date"),null)},_getDaysInMonth:function(t,e){return 32-this._daylightSavingAdjust(new Date(t,e,32)).getDate()},_getFirstDayOfMonth:function(t,e){return new Date(t,e,1).getDay()},_canAdjustMonth:function(t,e,i,s){var n=this._getNumberOfMonths(t),a=this._daylightSavingAdjust(new Date(i,s+(0>e?e:n[0]*n[1]),1));return 0>e&&a.setDate(this._getDaysInMonth(a.getFullYear(),a.getMonth())),this._isInRange(t,a)},_isInRange:function(t,e){var i,s,n=this._getMinMaxDate(t,"min"),a=this._getMinMaxDate(t,"max"),r=null,o=null,h=this._get(t,"yearRange");return h&&(i=h.split(":"),s=(new Date).getFullYear(),r=parseInt(i[0],10),o=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(r+=s),i[1].match(/[+\-].*/)&&(o+=s)),(!n||e.getTime()>=n.getTime())&&(!a||e.getTime()<=a.getTime())&&(!r||e.getFullYear()>=r)&&(!o||o>=e.getFullYear())},_getFormatConfig:function(t){var e=this._get(t,"shortYearCutoff");return e="string"!=typeof e?e:(new Date).getFullYear()%100+parseInt(e,10),{shortYearCutoff:e,dayNamesShort:this._get(t,"dayNamesShort"),dayNames:this._get(t,"dayNames"),monthNamesShort:this._get(t,"monthNamesShort"),monthNames:this._get(t,"monthNames")}},_formatDate:function(t,e,i,s){e||(t.currentDay=t.selectedDay,t.currentMonth=t.selectedMonth,t.currentYear=t.selectedYear);var n=e?"object"==typeof e?e:this._daylightSavingAdjust(new Date(s,i,e)):this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return this.formatDate(this._get(t,"dateFormat"),n,this._getFormatConfig(t))}}),t.fn.datepicker=function(e){if(!this.length)return this;t.datepicker.initialized||(t(document).mousedown(t.datepicker._checkExternalClick),t.datepicker.initialized=!0),0===t("#"+t.datepicker._mainDivId).length&&t("body").append(t.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!==e&&"getDate"!==e&&"widget"!==e?"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i)):this.each(function(){"string"==typeof e?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this].concat(i)):t.datepicker._attachDatepicker(this,e)}):t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i))},t.datepicker=new i,t.datepicker.initialized=!1,t.datepicker.uuid=(new Date).getTime(),t.datepicker.version="1.10.3"})(jQuery);(function(t){var e={buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},i={maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0};t.widget("ui.dialog",{version:"1.10.3",options:{appendTo:"body",autoOpen:!0,buttons:[],closeOnEscape:!0,closeText:"close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(e){var i=t(this).css(e).offset().top;0>i&&t(this).css("top",e.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),this.options.title=this.options.title||this.originalTitle,this._createWrapper(),this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&t.fn.draggable&&this._makeDraggable(),this.options.resizable&&t.fn.resizable&&this._makeResizable(),this._isOpen=!1},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var e=this.options.appendTo;return e&&(e.jquery||e.nodeType)?t(e):this.document.find(e||"body").eq(0)},_destroy:function(){var t,e=this.originalPosition;this._destroyOverlay(),this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach(),this.uiDialog.stop(!0,!0).remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),t=e.parent.children().eq(e.index),t.length&&t[0]!==this.element[0]?t.before(this.element):e.parent.append(this.element)},widget:function(){return this.uiDialog},disable:t.noop,enable:t.noop,close:function(e){var i=this;this._isOpen&&this._trigger("beforeClose",e)!==!1&&(this._isOpen=!1,this._destroyOverlay(),this.opener.filter(":focusable").focus().length||t(this.document[0].activeElement).blur(),this._hide(this.uiDialog,this.options.hide,function(){i._trigger("close",e)}))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(t,e){var i=!!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog).length;return i&&!e&&this._trigger("focus",t),i},open:function(){var e=this;return this._isOpen?(this._moveToTop()&&this._focusTabbable(),undefined):(this._isOpen=!0,this.opener=t(this.document[0].activeElement),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this._show(this.uiDialog,this.options.show,function(){e._focusTabbable(),e._trigger("focus")}),this._trigger("open"),undefined)},_focusTabbable:function(){var t=this.element.find("[autofocus]");t.length||(t=this.element.find(":tabbable")),t.length||(t=this.uiDialogButtonPane.find(":tabbable")),t.length||(t=this.uiDialogTitlebarClose.filter(":tabbable")),t.length||(t=this.uiDialog),t.eq(0).focus()},_keepFocus:function(e){function i(){var e=this.document[0].activeElement,i=this.uiDialog[0]===e||t.contains(this.uiDialog[0],e);i||this._focusTabbable()}e.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=t("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front "+this.options.dialogClass).hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._on(this.uiDialog,{keydown:function(e){if(this.options.closeOnEscape&&!e.isDefaultPrevented()&&e.keyCode&&e.keyCode===t.ui.keyCode.ESCAPE)return e.preventDefault(),this.close(e),undefined;if(e.keyCode===t.ui.keyCode.TAB){var i=this.uiDialog.find(":tabbable"),s=i.filter(":first"),n=i.filter(":last");e.target!==n[0]&&e.target!==this.uiDialog[0]||e.shiftKey?e.target!==s[0]&&e.target!==this.uiDialog[0]||!e.shiftKey||(n.focus(1),e.preventDefault()):(s.focus(1),e.preventDefault())}},mousedown:function(t){this._moveToTop(t)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var e;this.uiDialogTitlebar=t("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog),this._on(this.uiDialogTitlebar,{mousedown:function(e){t(e.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.focus()}}),this.uiDialogTitlebarClose=t("<button></button>").button({label:this.options.closeText,icons:{primary:"ui-icon-closethick"},text:!1}).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar),this._on(this.uiDialogTitlebarClose,{click:function(t){t.preventDefault(),this.close(t)}}),e=t("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar),this._title(e),this.uiDialog.attr({"aria-labelledby":e.attr("id")})},_title:function(t){this.options.title||t.html("&#160;"),t.text(this.options.title)},_createButtonPane:function(){this.uiDialogButtonPane=t("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),this.uiButtonSet=t("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane),this._createButtons()},_createButtons:function(){var e=this,i=this.options.buttons;return this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),t.isEmptyObject(i)||t.isArray(i)&&!i.length?(this.uiDialog.removeClass("ui-dialog-buttons"),undefined):(t.each(i,function(i,s){var n,a;s=t.isFunction(s)?{click:s,text:i}:s,s=t.extend({type:"button"},s),n=s.click,s.click=function(){n.apply(e.element[0],arguments)},a={icons:s.icons,text:s.showText},delete s.icons,delete s.showText,t("<button></button>",s).button(a).appendTo(e.uiButtonSet)}),this.uiDialog.addClass("ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog),undefined)},_makeDraggable:function(){function e(t){return{position:t.position,offset:t.offset}}var i=this,s=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(s,n){t(this).addClass("ui-dialog-dragging"),i._blockFrames(),i._trigger("dragStart",s,e(n))},drag:function(t,s){i._trigger("drag",t,e(s))},stop:function(n,a){s.position=[a.position.left-i.document.scrollLeft(),a.position.top-i.document.scrollTop()],t(this).removeClass("ui-dialog-dragging"),i._unblockFrames(),i._trigger("dragStop",n,e(a))}})},_makeResizable:function(){function e(t){return{originalPosition:t.originalPosition,originalSize:t.originalSize,position:t.position,size:t.size}}var i=this,s=this.options,n=s.resizable,a=this.uiDialog.css("position"),o="string"==typeof n?n:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:s.maxWidth,maxHeight:s.maxHeight,minWidth:s.minWidth,minHeight:this._minHeight(),handles:o,start:function(s,n){t(this).addClass("ui-dialog-resizing"),i._blockFrames(),i._trigger("resizeStart",s,e(n))},resize:function(t,s){i._trigger("resize",t,e(s))},stop:function(n,a){s.height=t(this).height(),s.width=t(this).width(),t(this).removeClass("ui-dialog-resizing"),i._unblockFrames(),i._trigger("resizeStop",n,e(a))}}).css("position",a)},_minHeight:function(){var t=this.options;return"auto"===t.height?t.minHeight:Math.min(t.minHeight,t.height)},_position:function(){var t=this.uiDialog.is(":visible");t||this.uiDialog.show(),this.uiDialog.position(this.options.position),t||this.uiDialog.hide()},_setOptions:function(s){var n=this,a=!1,o={};t.each(s,function(t,s){n._setOption(t,s),t in e&&(a=!0),t in i&&(o[t]=s)}),a&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",o)},_setOption:function(t,e){var i,s,n=this.uiDialog;"dialogClass"===t&&n.removeClass(this.options.dialogClass).addClass(e),"disabled"!==t&&(this._super(t,e),"appendTo"===t&&this.uiDialog.appendTo(this._appendTo()),"buttons"===t&&this._createButtons(),"closeText"===t&&this.uiDialogTitlebarClose.button({label:""+e}),"draggable"===t&&(i=n.is(":data(ui-draggable)"),i&&!e&&n.draggable("destroy"),!i&&e&&this._makeDraggable()),"position"===t&&this._position(),"resizable"===t&&(s=n.is(":data(ui-resizable)"),s&&!e&&n.resizable("destroy"),s&&"string"==typeof e&&n.resizable("option","handles",e),s||e===!1||this._makeResizable()),"title"===t&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var t,e,i,s=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),s.minWidth>s.width&&(s.width=s.minWidth),t=this.uiDialog.css({height:"auto",width:s.width}).outerHeight(),e=Math.max(0,s.minHeight-t),i="number"==typeof s.maxHeight?Math.max(0,s.maxHeight-t):"none","auto"===s.height?this.element.css({minHeight:e,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,s.height-t)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map(function(){var e=t(this);return t("<div>").css({position:"absolute",width:e.outerWidth(),height:e.outerHeight()}).appendTo(e.parent()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(e){return t(e.target).closest(".ui-dialog").length?!0:!!t(e.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var e=this,i=this.widgetFullName;t.ui.dialog.overlayInstances||this._delay(function(){t.ui.dialog.overlayInstances&&this.document.bind("focusin.dialog",function(s){e._allowInteraction(s)||(s.preventDefault(),t(".ui-dialog:visible:last .ui-dialog-content").data(i)._focusTabbable())})}),this.overlay=t("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo()),this._on(this.overlay,{mousedown:"_keepFocus"}),t.ui.dialog.overlayInstances++}},_destroyOverlay:function(){this.options.modal&&this.overlay&&(t.ui.dialog.overlayInstances--,t.ui.dialog.overlayInstances||this.document.unbind("focusin.dialog"),this.overlay.remove(),this.overlay=null)}}),t.ui.dialog.overlayInstances=0,t.uiBackCompat!==!1&&t.widget("ui.dialog",t.ui.dialog,{_position:function(){var e,i=this.options.position,s=[],n=[0,0];i?(("string"==typeof i||"object"==typeof i&&"0"in i)&&(s=i.split?i.split(" "):[i[0],i[1]],1===s.length&&(s[1]=s[0]),t.each(["left","top"],function(t,e){+s[t]===s[t]&&(n[t]=s[t],s[t]=e)}),i={my:s[0]+(0>n[0]?n[0]:"+"+n[0])+" "+s[1]+(0>n[1]?n[1]:"+"+n[1]),at:s.join(" ")}),i=t.extend({},t.ui.dialog.prototype.options.position,i)):i=t.ui.dialog.prototype.options.position,e=this.uiDialog.is(":visible"),e||this.uiDialog.show(),this.uiDialog.position(i),e||this.uiDialog.hide()}})})(jQuery);(function(t){t.widget("ui.menu",{version:"1.10.3",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-carat-1-e"},menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length).attr({role:this.options.role,tabIndex:0}).bind("click"+this.eventNamespace,t.proxy(function(t){this.options.disabled&&t.preventDefault()},this)),this.options.disabled&&this.element.addClass("ui-state-disabled").attr("aria-disabled","true"),this._on({"mousedown .ui-menu-item > a":function(t){t.preventDefault()},"click .ui-state-disabled > a":function(t){t.preventDefault()},"click .ui-menu-item:has(a)":function(e){var i=t(e.target).closest(".ui-menu-item");!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.mouseHandled=!0,this.select(e),i.has(".ui-menu").length?this.expand(e):this.element.is(":focus")||(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){var i=t(e.currentTarget);i.siblings().children(".ui-state-active").removeClass("ui-state-active"),this.focus(e,i)},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.children(".ui-menu-item").eq(0);e||this.focus(t,i)},blur:function(e){this._delay(function(){t.contains(this.element[0],this.document[0].activeElement)||this.collapseAll(e)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(e){t(e.target).closest(".ui-menu").length||this.collapseAll(e),this.mouseHandled=!1}})},_destroy:function(){this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(),this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function(){var e=t(this);e.data("ui-menu-submenu-carat")&&e.remove()}),this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")},_keydown:function(e){function i(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}var s,n,a,o,r,h=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:h=!1,n=this.previousFilter||"",a=String.fromCharCode(e.keyCode),o=!1,clearTimeout(this.filterTimer),a===n?o=!0:a=n+a,r=RegExp("^"+i(a),"i"),s=this.activeMenu.children(".ui-menu-item").filter(function(){return r.test(t(this).children("a").text())}),s=o&&-1!==s.index(this.active.next())?this.active.nextAll(".ui-menu-item"):s,s.length||(a=String.fromCharCode(e.keyCode),r=RegExp("^"+i(a),"i"),s=this.activeMenu.children(".ui-menu-item").filter(function(){return r.test(t(this).children("a").text())})),s.length?(this.focus(e,s),s.length>1?(this.previousFilter=a,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter):delete this.previousFilter}h&&e.preventDefault()},_activate:function(t){this.active.is(".ui-state-disabled")||(this.active.children("a[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i=this.options.icons.submenu,s=this.element.find(this.options.menus);s.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var e=t(this),s=e.prev("a"),n=t("<span>").addClass("ui-menu-icon ui-icon "+i).data("ui-menu-submenu-carat",!0);s.attr("aria-haspopup","true").prepend(n),e.attr("aria-labelledby",s.attr("id"))}),e=s.add(this.element),e.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","presentation").children("a").uniqueId().addClass("ui-corner-all").attr({tabIndex:-1,role:this._itemRole()}),e.children(":not(.ui-menu-item)").each(function(){var e=t(this);/[^\-\u2014\u2013\s]/.test(e.text())||e.addClass("ui-widget-content ui-menu-divider")}),e.children(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){"icons"===t&&this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(e.submenu),this._super(t,e)},focus:function(t,e){var i,s;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),s=this.active.children("a").addClass("ui-state-focus"),this.options.role&&this.element.attr("aria-activedescendant",s.attr("id")),this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=e.children(".ui-menu"),i.length&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,s,n,a,o,r;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,s=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,n=e.offset().top-this.activeMenu.offset().top-i-s,a=this.activeMenu.scrollTop(),o=this.activeMenu.height(),r=e.height(),0>n?this.activeMenu.scrollTop(a+n):n+r>o&&this.activeMenu.scrollTop(a+n-o+r))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this.active.children("a").removeClass("ui-state-focus"),this.active=null,this._trigger("blur",t,{item:this.active}))},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(t)},this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay(function(){var s=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));s.length||(s=this.element),this._close(s),this.blur(e),this.activeMenu=s},this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false").end().find("a.ui-state-active").removeClass("ui-state-active")},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").children(".ui-menu-item").first();e&&e.length&&(this._open(e.parent()),this._delay(function(){this.focus(t,e)}))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var s;this.active&&(s="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),s&&s.length&&this.active||(s=this.activeMenu.children(".ui-menu-item")[e]()),this.focus(i,s)},nextPage:function(e){var i,s,n;return this.active?(this.isLastItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=t(this),0>i.offset().top-s-n}),this.focus(e,i)):this.focus(e,this.activeMenu.children(".ui-menu-item")[this.active?"last":"first"]())),undefined):(this.next(e),undefined)},previousPage:function(e){var i,s,n;return this.active?(this.isFirstItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=t(this),i.offset().top-s+n>0}),this.focus(e,i)):this.focus(e,this.activeMenu.children(".ui-menu-item").first())),undefined):(this.next(e),undefined)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)}})})(jQuery);(function(t,e){t.widget("ui.progressbar",{version:"1.10.3",options:{max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min}),this.valueDiv=t("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element),this._refreshValue()},_destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.valueDiv.remove()},value:function(t){return t===e?this.options.value:(this.options.value=this._constrainedValue(t),this._refreshValue(),e)},_constrainedValue:function(t){return t===e&&(t=this.options.value),this.indeterminate=t===!1,"number"!=typeof t&&(t=0),this.indeterminate?!1:Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).toggleClass("ui-corner-right",e===this.options.max).width(i.toFixed(0)+"%"),this.element.toggleClass("ui-progressbar-indeterminate",this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}})})(jQuery);(function(t){var e=5;t.widget("ui.slider",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget"+" ui-widget-content"+" ui-corner-all"),this._refresh(),this._setOption("disabled",this.options.disabled),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,s=this.options,n=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),a="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",o=[];for(i=s.values&&s.values.length||1,n.length>i&&(n.slice(i).remove(),n=n.slice(0,i)),e=n.length;i>e;e++)o.push(a);this.handles=n.add(t(o.join("")).appendTo(this.element)),this.handle=this.handles.eq(0),this.handles.each(function(e){t(this).data("ui-slider-handle-index",e)})},_createRange:function(){var e=this.options,i="";e.range?(e.range===!0&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({left:"",bottom:""}):(this.range=t("<div></div>").appendTo(this.element),i="ui-slider-range ui-widget-header ui-corner-all"),this.range.addClass(i+("min"===e.range||"max"===e.range?" ui-slider-range-"+e.range:""))):this.range=t([])},_setupEvents:function(){var t=this.handles.add(this.range).filter("a");this._off(t),this._on(t,this._handleEvents),this._hoverable(t),this._focusable(t)},_destroy:function(){this.handles.remove(),this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"),this._mouseDestroy()},_mouseCapture:function(e){var i,s,n,a,o,r,h,l,u=this,c=this.options;return c.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},s=this._normValueFromMouse(i),n=this._valueMax()-this._valueMin()+1,this.handles.each(function(e){var i=Math.abs(s-u.values(e));(n>i||n===i&&(e===u._lastChangedValue||u.values(e)===c.min))&&(n=i,a=t(this),o=e)}),r=this._start(e,o),r===!1?!1:(this._mouseSliding=!0,this._handleIndex=o,a.addClass("ui-state-active").focus(),h=a.offset(),l=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:e.pageX-h.left-a.width()/2,top:e.pageY-h.top-a.height()/2-(parseInt(a.css("borderTopWidth"),10)||0)-(parseInt(a.css("borderBottomWidth"),10)||0)+(parseInt(a.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,o,s),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,s,n,a;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),s=i/e,s>1&&(s=1),0>s&&(s=0),"vertical"===this.orientation&&(s=1-s),n=this._valueMax()-this._valueMin(),a=this._valueMin()+s*n,this._trimAlignValue(a)},_start:function(t,e){var i={handle:this.handles[e],value:this.value()};return this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._trigger("start",t,i)},_slide:function(t,e,i){var s,n,a;this.options.values&&this.options.values.length?(s=this.values(e?0:1),2===this.options.values.length&&this.options.range===!0&&(0===e&&i>s||1===e&&s>i)&&(i=s),i!==this.values(e)&&(n=this.values(),n[e]=i,a=this._trigger("slide",t,{handle:this.handles[e],value:i,values:n}),s=this.values(e?0:1),a!==!1&&this.values(e,i,!0))):i!==this.value()&&(a=this._trigger("slide",t,{handle:this.handles[e],value:i}),a!==!1&&this.value(i))},_stop:function(t,e){var i={handle:this.handles[e],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._trigger("stop",t,i)},_change:function(t,e){if(!this._keySliding&&!this._mouseSliding){var i={handle:this.handles[e],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._lastChangedValue=e,this._trigger("change",t,i)}},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),this._change(null,0),undefined):this._value()},values:function(e,i){var s,n,a;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),this._change(null,e),undefined;if(!arguments.length)return this._values();if(!t.isArray(arguments[0]))return this.options.values&&this.options.values.length?this._values(e):this.value();for(s=this.options.values,n=arguments[0],a=0;s.length>a;a+=1)s[a]=this._trimAlignValue(n[a]),this._change(null,a);this._refreshValue()},_setOption:function(e,i){var s,n=0;switch("range"===e&&this.options.range===!0&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(n=this.options.values.length),t.Widget.prototype._setOption.apply(this,arguments),e){case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue();break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),s=0;n>s;s+=1)this._change(null,s);this._animateOff=!1;break;case"min":case"max":this._animateOff=!0,this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_value:function(){var t=this.options.value;return t=this._trimAlignValue(t)},_values:function(t){var e,i,s;if(arguments.length)return e=this.options.values[t],e=this._trimAlignValue(e);if(this.options.values&&this.options.values.length){for(i=this.options.values.slice(),s=0;i.length>s;s+=1)i[s]=this._trimAlignValue(i[s]);return i}return[]},_trimAlignValue:function(t){if(this._valueMin()>=t)return this._valueMin();if(t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,s=t-i;return 2*Math.abs(i)>=e&&(s+=i>0?e:-e),parseFloat(s.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var e,i,s,n,a,o=this.options.range,r=this.options,h=this,l=this._animateOff?!1:r.animate,u={};this.options.values&&this.options.values.length?this.handles.each(function(s){i=100*((h.values(s)-h._valueMin())/(h._valueMax()-h._valueMin())),u["horizontal"===h.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[l?"animate":"css"](u,r.animate),h.options.range===!0&&("horizontal"===h.orientation?(0===s&&h.range.stop(1,1)[l?"animate":"css"]({left:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:r.animate})):(0===s&&h.range.stop(1,1)[l?"animate":"css"]({bottom:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:r.animate}))),e=i}):(s=this.value(),n=this._valueMin(),a=this._valueMax(),i=a!==n?100*((s-n)/(a-n)):0,u["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[l?"animate":"css"](u,r.animate),"min"===o&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:i+"%"},r.animate),"max"===o&&"horizontal"===this.orientation&&this.range[l?"animate":"css"]({width:100-i+"%"},{queue:!1,duration:r.animate}),"min"===o&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:i+"%"},r.animate),"max"===o&&"vertical"===this.orientation&&this.range[l?"animate":"css"]({height:100-i+"%"},{queue:!1,duration:r.animate}))},_handleEvents:{keydown:function(i){var s,n,a,o,r=t(i.target).data("ui-slider-handle-index");switch(i.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(i.preventDefault(),!this._keySliding&&(this._keySliding=!0,t(i.target).addClass("ui-state-active"),s=this._start(i,r),s===!1))return}switch(o=this.options.step,n=a=this.options.values&&this.options.values.length?this.values(r):this.value(),i.keyCode){case t.ui.keyCode.HOME:a=this._valueMin();break;case t.ui.keyCode.END:a=this._valueMax();break;case t.ui.keyCode.PAGE_UP:a=this._trimAlignValue(n+(this._valueMax()-this._valueMin())/e);break;case t.ui.keyCode.PAGE_DOWN:a=this._trimAlignValue(n-(this._valueMax()-this._valueMin())/e);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if(n===this._valueMax())return;a=this._trimAlignValue(n+o);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(n===this._valueMin())return;a=this._trimAlignValue(n-o)}this._slide(i,r,a)},click:function(t){t.preventDefault()},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),t(e.target).removeClass("ui-state-active"))}}})})(jQuery);(function(t){function e(t){return function(){var e=this.element.val();t.apply(this,arguments),this._refresh(),e!==this.element.val()&&this._trigger("change")}}t.widget("ui.spinner",{version:"1.10.3",defaultElement:"<input>",widgetEventPrefix:"spin",options:{culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var e={},i=this.element;return t.each(["min","max","step"],function(t,s){var n=i.attr(s);void 0!==n&&n.length&&(e[s]=n)}),e},_events:{keydown:function(t){this._start(t)&&this._keydown(t)&&t.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(t){return this.cancelBlur?(delete this.cancelBlur,void 0):(this._stop(),this._refresh(),this.previous!==this.element.val()&&this._trigger("change",t),void 0)},mousewheel:function(t,e){if(e){if(!this.spinning&&!this._start(t))return!1;this._spin((e>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(t)},100),t.preventDefault()}},"mousedown .ui-spinner-button":function(e){function i(){var t=this.element[0]===this.document[0].activeElement;t||(this.element.focus(),this.previous=s,this._delay(function(){this.previous=s}))}var s;s=this.element[0]===this.document[0].activeElement?this.previous:this.element.val(),e.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,i.call(this)}),this._start(e)!==!1&&this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(e){return t(e.currentTarget).hasClass("ui-state-active")?this._start(e)===!1?!1:(this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e),void 0):void 0},"mouseleave .ui-spinner-button":"_stop"},_draw:function(){var t=this.uiSpinner=this.element.addClass("ui-spinner-input").attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());this.element.attr("role","spinbutton"),this.buttons=t.find(".ui-spinner-button").attr("tabIndex",-1).button().removeClass("ui-corner-all"),this.buttons.height()>Math.ceil(.5*t.height())&&t.height()>0&&t.height(t.height()),this.options.disabled&&this.disable()},_keydown:function(e){var i=this.options,s=t.ui.keyCode;switch(e.keyCode){case s.UP:return this._repeat(null,1,e),!0;case s.DOWN:return this._repeat(null,-1,e),!0;case s.PAGE_UP:return this._repeat(null,i.page,e),!0;case s.PAGE_DOWN:return this._repeat(null,-i.page,e),!0}return!1},_uiSpinnerHtml:function(){return"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"},_buttonHtml:function(){return"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon "+this.options.icons.up+"'>&#9650;</span>"+"</a>"+"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>"+"<span class='ui-icon "+this.options.icons.down+"'>&#9660;</span>"+"</a>"},_start:function(t){return this.spinning||this._trigger("start",t)!==!1?(this.counter||(this.counter=1),this.spinning=!0,!0):!1},_repeat:function(t,e,i){t=t||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,e,i)},t),this._spin(e*this.options.step,i)},_spin:function(t,e){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+t*this._increment(this.counter)),this.spinning&&this._trigger("spin",e,{value:i})===!1||(this._value(i),this.counter++)},_increment:function(e){var i=this.options.incremental;return i?t.isFunction(i)?i(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=""+t,i=e.indexOf(".");return-1===i?0:e.length-i-1},_adjustValue:function(t){var e,i,s=this.options;return e=null!==s.min?s.min:0,i=t-e,i=Math.round(i/s.step)*s.step,t=e+i,t=parseFloat(t.toFixed(this._precision())),null!==s.max&&t>s.max?s.max:null!==s.min&&s.min>t?s.min:t},_stop:function(t){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",t))},_setOption:function(t,e){if("culture"===t||"numberFormat"===t){var i=this._parse(this.element.val());return this.options[t]=e,this.element.val(this._format(i)),void 0}("max"===t||"min"===t||"step"===t)&&"string"==typeof e&&(e=this._parse(e)),"icons"===t&&(this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(e.up),this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(e.down)),this._super(t,e),"disabled"===t&&(e?(this.element.prop("disabled",!0),this.buttons.button("disable")):(this.element.prop("disabled",!1),this.buttons.button("enable")))},_setOptions:e(function(t){this._super(t),this._value(this.element.val())}),_parse:function(t){return"string"==typeof t&&""!==t&&(t=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(t,10,this.options.culture):+t),""===t||isNaN(t)?null:t},_format:function(t){return""===t?"":window.Globalize&&this.options.numberFormat?Globalize.format(t,this.options.numberFormat,this.options.culture):t},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},_value:function(t,e){var i;""!==t&&(i=this._parse(t),null!==i&&(e||(i=this._adjustValue(i)),t=this._format(i))),this.element.val(t),this._refresh()},_destroy:function(){this.element.removeClass("ui-spinner-input").prop("disabled",!1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:e(function(t){this._stepUp(t)}),_stepUp:function(t){this._start()&&(this._spin((t||1)*this.options.step),this._stop())},stepDown:e(function(t){this._stepDown(t)}),_stepDown:function(t){this._start()&&(this._spin((t||1)*-this.options.step),this._stop())},pageUp:e(function(t){this._stepUp((t||1)*this.options.page)}),pageDown:e(function(t){this._stepDown((t||1)*this.options.page)}),value:function(t){return arguments.length?(e(this._value).call(this,t),void 0):this._parse(this.element.val())},widget:function(){return this.uiSpinner}})})(jQuery);(function(t,e){function i(){return++n}function s(t){return t.hash.length>1&&decodeURIComponent(t.href.replace(a,""))===decodeURIComponent(location.href.replace(a,""))}var n=0,a=/#.*$/;t.widget("ui.tabs",{version:"1.10.3",delay:300,options:{active:null,collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_create:function(){var e=this,i=this.options;this.running=!1,this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible",i.collapsible).delegate(".ui-tabs-nav > li","mousedown"+this.eventNamespace,function(e){t(this).is(".ui-state-disabled")&&e.preventDefault()}).delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){t(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this._processTabs(),i.active=this._initialActive(),t.isArray(i.disabled)&&(i.disabled=t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"),function(t){return e.tabs.index(t)}))).sort()),this.active=this.options.active!==!1&&this.anchors.length?this._findActive(i.active):t(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var i=this.options.active,s=this.options.collapsible,n=location.hash.substring(1);return null===i&&(n&&this.tabs.each(function(s,a){return t(a).attr("aria-controls")===n?(i=s,!1):e}),null===i&&(i=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),(null===i||-1===i)&&(i=this.tabs.length?0:!1)),i!==!1&&(i=this.tabs.index(this.tabs.eq(i)),-1===i&&(i=s?!1:0)),!s&&i===!1&&this.anchors.length&&(i=0),i},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):t()}},_tabKeydown:function(i){var s=t(this.document[0].activeElement).closest("li"),n=this.tabs.index(s),a=!0;if(!this._handlePageNav(i)){switch(i.keyCode){case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:n++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:a=!1,n--;break;case t.ui.keyCode.END:n=this.anchors.length-1;break;case t.ui.keyCode.HOME:n=0;break;case t.ui.keyCode.SPACE:return i.preventDefault(),clearTimeout(this.activating),this._activate(n),e;case t.ui.keyCode.ENTER:return i.preventDefault(),clearTimeout(this.activating),this._activate(n===this.options.active?!1:n),e;default:return}i.preventDefault(),clearTimeout(this.activating),n=this._focusNextTab(n,a),i.ctrlKey||(s.attr("aria-selected","false"),this.tabs.eq(n).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",n)},this.delay))}},_panelKeydown:function(e){this._handlePageNav(e)||e.ctrlKey&&e.keyCode===t.ui.keyCode.UP&&(e.preventDefault(),this.active.focus())},_handlePageNav:function(i){return i.altKey&&i.keyCode===t.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):i.altKey&&i.keyCode===t.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):e},_findNextTab:function(e,i){function s(){return e>n&&(e=0),0>e&&(e=n),e}for(var n=this.tabs.length-1;-1!==t.inArray(s(),this.options.disabled);)e=i?e+1:e-1;return e},_focusNextTab:function(t,e){return t=this._findNextTab(t,e),this.tabs.eq(t).focus(),t},_setOption:function(t,i){return"active"===t?(this._activate(i),e):"disabled"===t?(this._setupDisabled(i),e):(this._super(t,i),"collapsible"===t&&(this.element.toggleClass("ui-tabs-collapsible",i),i||this.options.active!==!1||this._activate(0)),"event"===t&&this._setupEvents(i),"heightStyle"===t&&this._setupHeightStyle(i),e)},_tabId:function(t){return t.attr("aria-controls")||"ui-tabs-"+i()},_sanitizeSelector:function(t){return t?t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var e=this.options,i=this.tablist.children(":has(a[href])");e.disabled=t.map(i.filter(".ui-state-disabled"),function(t){return i.index(t)}),this._processTabs(),e.active!==!1&&this.anchors.length?this.active.length&&!t.contains(this.tablist[0],this.active[0])?this.tabs.length===e.disabled.length?(e.active=!1,this.active=t()):this._activate(this._findNextTab(Math.max(0,e.active-1),!1)):e.active=this.tabs.index(this.active):(e.active=!1,this.active=t()),this._refresh()},_refresh:function(){this._setupDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-expanded":"false","aria-hidden":"true"}),this.active.length?(this.active.addClass("ui-tabs-active ui-state-active").attr({"aria-selected":"true",tabIndex:0}),this._getPanelForTab(this.active).show().attr({"aria-expanded":"true","aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var e=this;this.tablist=this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role","tablist"),this.tabs=this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({role:"tab",tabIndex:-1}),this.anchors=this.tabs.map(function(){return t("a",this)[0]}).addClass("ui-tabs-anchor").attr({role:"presentation",tabIndex:-1}),this.panels=t(),this.anchors.each(function(i,n){var a,o,r,h=t(n).uniqueId().attr("id"),l=t(n).closest("li"),u=l.attr("aria-controls");s(n)?(a=n.hash,o=e.element.find(e._sanitizeSelector(a))):(r=e._tabId(l),a="#"+r,o=e.element.find(a),o.length||(o=e._createPanel(r),o.insertAfter(e.panels[i-1]||e.tablist)),o.attr("aria-live","polite")),o.length&&(e.panels=e.panels.add(o)),u&&l.data("ui-tabs-aria-controls",u),l.attr({"aria-controls":a.substring(1),"aria-labelledby":h}),o.attr("aria-labelledby",h)}),this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role","tabpanel")},_getList:function(){return this.element.find("ol,ul").eq(0)},_createPanel:function(e){return t("<div>").attr("id",e).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)},_setupDisabled:function(e){t.isArray(e)&&(e.length?e.length===this.anchors.length&&(e=!0):e=!1);for(var i,s=0;i=this.tabs[s];s++)e===!0||-1!==t.inArray(s,e)?t(i).addClass("ui-state-disabled").attr("aria-disabled","true"):t(i).removeClass("ui-state-disabled").removeAttr("aria-disabled");this.options.disabled=e},_setupEvents:function(e){var i={click:function(t){t.preventDefault()}};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(e){var i,s=this.element.parent();"fill"===e?(i=s.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each(function(){var e=t(this),s=e.css("position");"absolute"!==s&&"fixed"!==s&&(i-=e.outerHeight(!0))}),this.element.children().not(this.panels).each(function(){i-=t(this).outerHeight(!0)}),this.panels.each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===e&&(i=0,this.panels.each(function(){i=Math.max(i,t(this).height("").height())}).height(i))},_eventHandler:function(e){var i=this.options,s=this.active,n=t(e.currentTarget),a=n.closest("li"),o=a[0]===s[0],r=o&&i.collapsible,h=r?t():this._getPanelForTab(a),l=s.length?this._getPanelForTab(s):t(),u={oldTab:s,oldPanel:l,newTab:r?t():a,newPanel:h};e.preventDefault(),a.hasClass("ui-state-disabled")||a.hasClass("ui-tabs-loading")||this.running||o&&!i.collapsible||this._trigger("beforeActivate",e,u)===!1||(i.active=r?!1:this.tabs.index(a),this.active=o?t():a,this.xhr&&this.xhr.abort(),l.length||h.length||t.error("jQuery UI Tabs: Mismatching fragment identifier."),h.length&&this.load(this.tabs.index(a),e),this._toggle(e,u))},_toggle:function(e,i){function s(){a.running=!1,a._trigger("activate",e,i)}function n(){i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),o.length&&a.options.show?a._show(o,a.options.show,s):(o.show(),s())}var a=this,o=i.newPanel,r=i.oldPanel;this.running=!0,r.length&&this.options.hide?this._hide(r,this.options.hide,function(){i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),n()}):(i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),r.hide(),n()),r.attr({"aria-expanded":"false","aria-hidden":"true"}),i.oldTab.attr("aria-selected","false"),o.length&&r.length?i.oldTab.attr("tabIndex",-1):o.length&&this.tabs.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),o.attr({"aria-expanded":"true","aria-hidden":"false"}),i.newTab.attr({"aria-selected":"true",tabIndex:0})},_activate:function(e){var i,s=this._findActive(e);s[0]!==this.active[0]&&(s.length||(s=this.active),i=s.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return e===!1?t():this.tabs.eq(e)},_getIndex:function(t){return"string"==typeof t&&(t=this.anchors.index(this.anchors.filter("[href$='"+t+"']"))),t},_destroy:function(){this.xhr&&this.xhr.abort(),this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"),this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"),this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId(),this.tabs.add(this.panels).each(function(){t.data(this,"ui-tabs-destroy")?t(this).remove():t(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")}),this.tabs.each(function(){var e=t(this),i=e.data("ui-tabs-aria-controls");i?e.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):e.removeAttr("aria-controls")}),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(i){var s=this.options.disabled;s!==!1&&(i===e?s=!1:(i=this._getIndex(i),s=t.isArray(s)?t.map(s,function(t){return t!==i?t:null}):t.map(this.tabs,function(t,e){return e!==i?e:null})),this._setupDisabled(s))},disable:function(i){var s=this.options.disabled;if(s!==!0){if(i===e)s=!0;else{if(i=this._getIndex(i),-1!==t.inArray(i,s))return;s=t.isArray(s)?t.merge([i],s).sort():[i]}this._setupDisabled(s)}},load:function(e,i){e=this._getIndex(e);var n=this,a=this.tabs.eq(e),o=a.find(".ui-tabs-anchor"),r=this._getPanelForTab(a),h={tab:a,panel:r};s(o[0])||(this.xhr=t.ajax(this._ajaxSettings(o,i,h)),this.xhr&&"canceled"!==this.xhr.statusText&&(a.addClass("ui-tabs-loading"),r.attr("aria-busy","true"),this.xhr.success(function(t){setTimeout(function(){r.html(t),n._trigger("load",i,h)},1)}).complete(function(t,e){setTimeout(function(){"abort"===e&&n.panels.stop(!1,!0),a.removeClass("ui-tabs-loading"),r.removeAttr("aria-busy"),t===n.xhr&&delete n.xhr},1)})))},_ajaxSettings:function(e,i,s){var n=this;return{url:e.attr("href"),beforeSend:function(e,a){return n._trigger("beforeLoad",i,t.extend({jqXHR:e,ajaxSettings:a},s))}}},_getPanelForTab:function(e){var i=t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}})})(jQuery);(function(t){function e(e,i){var s=(e.attr("aria-describedby")||"").split(/\s+/);s.push(i),e.data("ui-tooltip-id",i).attr("aria-describedby",t.trim(s.join(" ")))}function i(e){var i=e.data("ui-tooltip-id"),s=(e.attr("aria-describedby")||"").split(/\s+/),n=t.inArray(i,s);-1!==n&&s.splice(n,1),e.removeData("ui-tooltip-id"),s=t.trim(s.join(" ")),s?e.attr("aria-describedby",s):e.removeAttr("aria-describedby")}var s=0;t.widget("ui.tooltip",{version:"1.10.3",options:{content:function(){var e=t(this).attr("title")||"";return t("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,tooltipClass:null,track:!1,close:null,open:null},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.options.disabled&&this._disable()},_setOption:function(e,i){var s=this;return"disabled"===e?(this[i?"_disable":"_enable"](),this.options[e]=i,void 0):(this._super(e,i),"content"===e&&t.each(this.tooltips,function(t,e){s._updateContent(e)}),void 0)},_disable:function(){var e=this;t.each(this.tooltips,function(i,s){var n=t.Event("blur");n.target=n.currentTarget=s[0],e.close(n,!0)}),this.element.find(this.options.items).addBack().each(function(){var e=t(this);e.is("[title]")&&e.data("ui-tooltip-title",e.attr("title")).attr("title","")})},_enable:function(){this.element.find(this.options.items).addBack().each(function(){var e=t(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))})},open:function(e){var i=this,s=t(e?e.target:this.element).closest(this.options.items);s.length&&!s.data("ui-tooltip-id")&&(s.attr("title")&&s.data("ui-tooltip-title",s.attr("title")),s.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&s.parents().each(function(){var e,s=t(this);s.data("ui-tooltip-open")&&(e=t.Event("blur"),e.target=e.currentTarget=this,i.close(e,!0)),s.attr("title")&&(s.uniqueId(),i.parents[this.id]={element:this,title:s.attr("title")},s.attr("title",""))}),this._updateContent(s,e))},_updateContent:function(t,e){var i,s=this.options.content,n=this,a=e?e.type:null;return"string"==typeof s?this._open(e,t,s):(i=s.call(t[0],function(i){t.data("ui-tooltip-open")&&n._delay(function(){e&&(e.type=a),this._open(e,t,i)})}),i&&this._open(e,t,i),void 0)},_open:function(i,s,n){function a(t){l.of=t,o.is(":hidden")||o.position(l)}var o,r,h,l=t.extend({},this.options.position);if(n){if(o=this._find(s),o.length)return o.find(".ui-tooltip-content").html(n),void 0;s.is("[title]")&&(i&&"mouseover"===i.type?s.attr("title",""):s.removeAttr("title")),o=this._tooltip(s),e(s,o.attr("id")),o.find(".ui-tooltip-content").html(n),this.options.track&&i&&/^mouse/.test(i.type)?(this._on(this.document,{mousemove:a}),a(i)):o.position(t.extend({of:s},this.options.position)),o.hide(),this._show(o,this.options.show),this.options.show&&this.options.show.delay&&(h=this.delayedShow=setInterval(function(){o.is(":visible")&&(a(l.of),clearInterval(h))},t.fx.interval)),this._trigger("open",i,{tooltip:o}),r={keyup:function(e){if(e.keyCode===t.ui.keyCode.ESCAPE){var i=t.Event(e);i.currentTarget=s[0],this.close(i,!0)}},remove:function(){this._removeTooltip(o)}},i&&"mouseover"!==i.type||(r.mouseleave="close"),i&&"focusin"!==i.type||(r.focusout="close"),this._on(!0,s,r)}},close:function(e){var s=this,n=t(e?e.currentTarget:this.element),a=this._find(n);this.closing||(clearInterval(this.delayedShow),n.data("ui-tooltip-title")&&n.attr("title",n.data("ui-tooltip-title")),i(n),a.stop(!0),this._hide(a,this.options.hide,function(){s._removeTooltip(t(this))}),n.removeData("ui-tooltip-open"),this._off(n,"mouseleave focusout keyup"),n[0]!==this.element[0]&&this._off(n,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&t.each(this.parents,function(e,i){t(i.element).attr("title",i.title),delete s.parents[e]}),this.closing=!0,this._trigger("close",e,{tooltip:a}),this.closing=!1)},_tooltip:function(e){var i="ui-tooltip-"+s++,n=t("<div>").attr({id:i,role:"tooltip"}).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+(this.options.tooltipClass||""));return t("<div>").addClass("ui-tooltip-content").appendTo(n),n.appendTo(this.document[0].body),this.tooltips[i]=e,n},_find:function(e){var i=e.data("ui-tooltip-id");return i?t("#"+i):t()},_removeTooltip:function(t){t.remove(),delete this.tooltips[t.attr("id")]},_destroy:function(){var e=this;t.each(this.tooltips,function(i,s){var n=t.Event("blur");n.target=n.currentTarget=s[0],e.close(n,!0),t("#"+i).remove(),s.data("ui-tooltip-title")&&(s.attr("title",s.data("ui-tooltip-title")),s.removeData("ui-tooltip-title"))})}})})(jQuery);(function(t,e){var i="ui-effects-";t.effects={effect:{}},function(t,e){function i(t,e,i){var s=u[e.type]||{};return null==t?i||!e.def?null:e.def:(t=s.floor?~~t:parseFloat(t),isNaN(t)?e.def:s.mod?(t+s.mod)%s.mod:0>t?0:t>s.max?s.max:t)}function s(i){var s=l(),n=s._rgba=[];return i=i.toLowerCase(),f(h,function(t,a){var o,r=a.re.exec(i),h=r&&a.parse(r),l=a.space||"rgba";return h?(o=s[l](h),s[c[l].cache]=o[c[l].cache],n=s._rgba=o._rgba,!1):e}),n.length?("0,0,0,0"===n.join()&&t.extend(n,a.transparent),s):a[i]}function n(t,e,i){return i=(i+1)%1,1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+6*(e-t)*(2/3-i):t}var a,o="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,h=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],l=t.Color=function(e,i,s,n){return new t.Color.fn.parse(e,i,s,n)},c={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},u={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},d=l.support={},p=t("<p>")[0],f=t.each;p.style.cssText="background-color:rgba(1,1,1,.5)",d.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(c,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}}),l.fn=t.extend(l.prototype,{parse:function(n,o,r,h){if(n===e)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=t(n).css(o),o=e);var u=this,d=t.type(n),p=this._rgba=[];return o!==e&&(n=[n,o,r,h],d="array"),"string"===d?this.parse(s(n)||a._default):"array"===d?(f(c.rgba.props,function(t,e){p[e.idx]=i(n[e.idx],e)}),this):"object"===d?(n instanceof l?f(c,function(t,e){n[e.cache]&&(u[e.cache]=n[e.cache].slice())}):f(c,function(e,s){var a=s.cache;f(s.props,function(t,e){if(!u[a]&&s.to){if("alpha"===t||null==n[t])return;u[a]=s.to(u._rgba)}u[a][e.idx]=i(n[t],e,!0)}),u[a]&&0>t.inArray(null,u[a].slice(0,3))&&(u[a][3]=1,s.from&&(u._rgba=s.from(u[a])))}),this):e},is:function(t){var i=l(t),s=!0,n=this;return f(c,function(t,a){var o,r=i[a.cache];return r&&(o=n[a.cache]||a.to&&a.to(n._rgba)||[],f(a.props,function(t,i){return null!=r[i.idx]?s=r[i.idx]===o[i.idx]:e})),s}),s},_space:function(){var t=[],e=this;return f(c,function(i,s){e[s.cache]&&t.push(i)}),t.pop()},transition:function(t,e){var s=l(t),n=s._space(),a=c[n],o=0===this.alpha()?l("transparent"):this,r=o[a.cache]||a.to(o._rgba),h=r.slice();return s=s[a.cache],f(a.props,function(t,n){var a=n.idx,o=r[a],l=s[a],c=u[n.type]||{};null!==l&&(null===o?h[a]=l:(c.mod&&(l-o>c.mod/2?o+=c.mod:o-l>c.mod/2&&(o-=c.mod)),h[a]=i((l-o)*e+o,n)))}),this[n](h)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=l(e)._rgba;return l(t.map(i,function(t,e){return(1-s)*n[e]+s*t}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&3>e&&(t=Math.round(100*t)+"%"),t});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),s=i.pop();return e&&i.push(~~(255*s)),"#"+t.map(i,function(t){return t=(t||0).toString(16),1===t.length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),l.fn.parse.prototype=l.fn,c.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,s=t[0]/255,n=t[1]/255,a=t[2]/255,o=t[3],r=Math.max(s,n,a),h=Math.min(s,n,a),l=r-h,c=r+h,u=.5*c;return e=h===r?0:s===r?60*(n-a)/l+360:n===r?60*(a-s)/l+120:60*(s-n)/l+240,i=0===l?0:.5>=u?l/c:l/(2-c),[Math.round(e)%360,i,u,null==o?1:o]},c.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],s=t[2],a=t[3],o=.5>=s?s*(1+i):s+i-s*i,r=2*s-o;return[Math.round(255*n(r,o,e+1/3)),Math.round(255*n(r,o,e)),Math.round(255*n(r,o,e-1/3)),a]},f(c,function(s,n){var a=n.props,o=n.cache,h=n.to,c=n.from;l.fn[s]=function(s){if(h&&!this[o]&&(this[o]=h(this._rgba)),s===e)return this[o].slice();var n,r=t.type(s),u="array"===r||"object"===r?s:arguments,d=this[o].slice();return f(a,function(t,e){var s=u["object"===r?t:e.idx];null==s&&(s=d[e.idx]),d[e.idx]=i(s,e)}),c?(n=l(c(d)),n[o]=d,n):l(d)},f(a,function(e,i){l.fn[e]||(l.fn[e]=function(n){var a,o=t.type(n),h="alpha"===e?this._hsla?"hsla":"rgba":s,l=this[h](),c=l[i.idx];return"undefined"===o?c:("function"===o&&(n=n.call(this,c),o=t.type(n)),null==n&&i.empty?this:("string"===o&&(a=r.exec(n),a&&(n=c+parseFloat(a[2])*("+"===a[1]?1:-1))),l[i.idx]=n,this[h](l)))})})}),l.hook=function(e){var i=e.split(" ");f(i,function(e,i){t.cssHooks[i]={set:function(e,n){var a,o,r="";if("transparent"!==n&&("string"!==t.type(n)||(a=s(n)))){if(n=l(a||n),!d.rgba&&1!==n._rgba[3]){for(o="backgroundColor"===i?e.parentNode:e;(""===r||"transparent"===r)&&o&&o.style;)try{r=t.css(o,"backgroundColor"),o=o.parentNode}catch(h){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{e.style[i]=n}catch(h){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=l(e.elem,i),e.end=l(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}})},l.hook(o),t.cssHooks.borderColor={expand:function(t){var e={};return f(["Top","Right","Bottom","Left"],function(i,s){e["border"+s+"Color"]=t}),e}},a=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(jQuery),function(){function i(e){var i,s,n=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,a={};if(n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(a[t.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(a[i]=n[i]);return a}function s(e,i){var s,n,o={};for(s in i)n=i[s],e[s]!==n&&(a[s]||(t.fx.step[s]||!isNaN(parseFloat(n)))&&(o[s]=n));return o}var n=["add","remove","toggle"],a={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(jQuery.style(t.elem,i,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(e,a,o,r){var h=t.speed(a,o,r);return this.queue(function(){var a,o=t(this),r=o.attr("class")||"",l=h.children?o.find("*").addBack():o;l=l.map(function(){var e=t(this);return{el:e,start:i(this)}}),a=function(){t.each(n,function(t,i){e[i]&&o[i+"Class"](e[i])})},a(),l=l.map(function(){return this.end=i(this.el[0]),this.diff=s(this.start,this.end),this}),o.attr("class",r),l=l.map(function(){var e=this,i=t.Deferred(),s=t.extend({},h,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,s),i.promise()}),t.when.apply(t,l.get()).done(function(){a(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),h.complete.call(o[0])})})},t.fn.extend({addClass:function(e){return function(i,s,n,a){return s?t.effects.animateClass.call(this,{add:i},s,n,a):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,s,n,a){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},s,n,a):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(i){return function(s,n,a,o,r){return"boolean"==typeof n||n===e?a?t.effects.animateClass.call(this,n?{add:s}:{remove:s},a,o,r):i.apply(this,arguments):t.effects.animateClass.call(this,{toggle:s},n,a,o)}}(t.fn.toggleClass),switchClass:function(e,i,s,n,a){return t.effects.animateClass.call(this,{add:i,remove:e},s,n,a)}})}(),function(){function s(e,i,s,n){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(n=s,s=i,i={}),t.isFunction(s)&&(n=s,s=null),i&&t.extend(e,i),s=s||i.duration,e.duration=t.fx.off?0:"number"==typeof s?s:s in t.fx.speeds?t.fx.speeds[s]:t.fx.speeds._default,e.complete=n||i.complete,e}function n(e){return!e||"number"==typeof e||t.fx.speeds[e]?!0:"string"!=typeof e||t.effects.effect[e]?t.isFunction(e)?!0:"object"!=typeof e||e.effect?!1:!0:!0}t.extend(t.effects,{version:"1.10.3",save:function(t,e){for(var s=0;e.length>s;s++)null!==e[s]&&t.data(i+e[s],t[0].style[e[s]])},restore:function(t,s){var n,a;for(a=0;s.length>a;a++)null!==s[a]&&(n=t.data(i+s[a]),n===e&&(n=""),t.css(s[a],n))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},getBaseline:function(t,e){var i,s;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=t[1]/e.width}return{x:s,y:i}},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),"float":e.css("float")},s=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:e.width(),height:e.height()},a=document.activeElement;try{a.id}catch(o){a=document.body}return e.wrap(s),(e[0]===a||t.contains(e[0],a))&&t(a).focus(),s=e.parent(),"static"===e.css("position")?(s.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,s){i[s]=e.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(n),s.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).focus()),e},setTransition:function(e,i,s,n){return n=n||{},t.each(i,function(t,i){var a=e.cssUnit(i);a[0]>0&&(n[i]=a[0]*s+a[1])}),n}}),t.fn.extend({effect:function(){function e(e){function s(){t.isFunction(a)&&a.call(n[0]),t.isFunction(e)&&e()}var n=t(this),a=i.complete,r=i.mode;(n.is(":hidden")?"hide"===r:"show"===r)?(n[r](),s()):o.call(n[0],i,s)}var i=s.apply(this,arguments),n=i.mode,a=i.queue,o=t.effects.effect[i.effect];return t.fx.off||!o?n?this[n](i.duration,i.complete):this.each(function(){i.complete&&i.complete.call(this)}):a===!1?this.each(e):this.queue(a||"fx",e)},show:function(t){return function(e){if(n(e))return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="show",this.effect.call(this,i)}}(t.fn.show),hide:function(t){return function(e){if(n(e))return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="hide",this.effect.call(this,i)}}(t.fn.hide),toggle:function(t){return function(e){if(n(e)||"boolean"==typeof e)return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="toggle",this.effect.call(this,i)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),s=[];return t.each(["em","px","%","pt"],function(t,e){i.indexOf(e)>0&&(s=[parseFloat(i),e])}),s}})}(),function(){var e={};t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,i){e[i]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;((e=Math.pow(2,--i))-1)/11>t;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return.5>t?i(2*t)/2:1-i(-2*t+2)/2}})}()})(jQuery);(function(t){var e=/up|down|vertical/,i=/up|left|vertical|horizontal/;t.effects.effect.blind=function(s,n){var a,o,r,h=t(this),l=["position","top","bottom","left","right","height","width"],c=t.effects.setMode(h,s.mode||"hide"),u=s.direction||"up",d=e.test(u),p=d?"height":"width",f=d?"top":"left",m=i.test(u),g={},v="show"===c;h.parent().is(".ui-effects-wrapper")?t.effects.save(h.parent(),l):t.effects.save(h,l),h.show(),a=t.effects.createWrapper(h).css({overflow:"hidden"}),o=a[p](),r=parseFloat(a.css(f))||0,g[p]=v?o:0,m||(h.css(d?"bottom":"right",0).css(d?"top":"left","auto").css({position:"absolute"}),g[f]=v?r:o+r),v&&(a.css(p,0),m||a.css(f,r+o)),a.animate(g,{duration:s.duration,easing:s.easing,queue:!1,complete:function(){"hide"===c&&h.hide(),t.effects.restore(h,l),t.effects.removeWrapper(h),n()}})}})(jQuery);(function(t){t.effects.effect.bounce=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","height","width"],h=t.effects.setMode(o,e.mode||"effect"),l="hide"===h,c="show"===h,u=e.direction||"up",d=e.distance,p=e.times||5,f=2*p+(c||l?1:0),m=e.duration/f,g=e.easing,v="up"===u||"down"===u?"top":"left",_="up"===u||"left"===u,b=o.queue(),y=b.length;for((c||l)&&r.push("opacity"),t.effects.save(o,r),o.show(),t.effects.createWrapper(o),d||(d=o["top"===v?"outerHeight":"outerWidth"]()/3),c&&(a={opacity:1},a[v]=0,o.css("opacity",0).css(v,_?2*-d:2*d).animate(a,m,g)),l&&(d/=Math.pow(2,p-1)),a={},a[v]=0,s=0;p>s;s++)n={},n[v]=(_?"-=":"+=")+d,o.animate(n,m,g).animate(a,m,g),d=l?2*d:d/2;l&&(n={opacity:0},n[v]=(_?"-=":"+=")+d,o.animate(n,m,g)),o.queue(function(){l&&o.hide(),t.effects.restore(o,r),t.effects.removeWrapper(o),i()}),y>1&&b.splice.apply(b,[1,0].concat(b.splice(y,f+1))),o.dequeue()}})(jQuery);(function(t){t.effects.effect.clip=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","height","width"],h=t.effects.setMode(o,e.mode||"hide"),l="show"===h,c=e.direction||"vertical",u="vertical"===c,d=u?"height":"width",p=u?"top":"left",f={};t.effects.save(o,r),o.show(),s=t.effects.createWrapper(o).css({overflow:"hidden"}),n="IMG"===o[0].tagName?s:o,a=n[d](),l&&(n.css(d,0),n.css(p,a/2)),f[d]=l?a:0,f[p]=l?0:a/2,n.animate(f,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){l||o.hide(),t.effects.restore(o,r),t.effects.removeWrapper(o),i()}})}})(jQuery);(function(t){t.effects.effect.drop=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","opacity","height","width"],o=t.effects.setMode(n,e.mode||"hide"),r="show"===o,h=e.direction||"left",l="up"===h||"down"===h?"top":"left",c="up"===h||"left"===h?"pos":"neg",u={opacity:r?1:0};t.effects.save(n,a),n.show(),t.effects.createWrapper(n),s=e.distance||n["top"===l?"outerHeight":"outerWidth"](!0)/2,r&&n.css("opacity",0).css(l,"pos"===c?-s:s),u[l]=(r?"pos"===c?"+=":"-=":"pos"===c?"-=":"+=")+s,n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}})}})(jQuery);(function(t){t.effects.effect.explode=function(e,i){function s(){b.push(this),b.length===u*d&&n()}function n(){p.css({visibility:"visible"}),t(b).remove(),m||p.hide(),i()}var a,o,r,h,l,c,u=e.pieces?Math.round(Math.sqrt(e.pieces)):3,d=u,p=t(this),f=t.effects.setMode(p,e.mode||"hide"),m="show"===f,g=p.show().css("visibility","hidden").offset(),v=Math.ceil(p.outerWidth()/d),_=Math.ceil(p.outerHeight()/u),b=[];for(a=0;u>a;a++)for(h=g.top+a*_,c=a-(u-1)/2,o=0;d>o;o++)r=g.left+o*v,l=o-(d-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-o*v,top:-a*_}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:v,height:_,left:r+(m?l*v:0),top:h+(m?c*_:0),opacity:m?0:1}).animate({left:r+(m?0:l*v),top:h+(m?0:c*_),opacity:m?1:0},e.duration||500,e.easing,s)}})(jQuery);(function(t){t.effects.effect.fade=function(e,i){var s=t(this),n=t.effects.setMode(s,e.mode||"toggle");s.animate({opacity:n},{queue:!1,duration:e.duration,easing:e.easing,complete:i})}})(jQuery);(function(t){t.effects.effect.fold=function(e,i){var s,n,a=t(this),o=["position","top","bottom","left","right","height","width"],r=t.effects.setMode(a,e.mode||"hide"),h="show"===r,l="hide"===r,c=e.size||15,u=/([0-9]+)%/.exec(c),d=!!e.horizFirst,p=h!==d,f=p?["width","height"]:["height","width"],m=e.duration/2,g={},v={};t.effects.save(a,o),a.show(),s=t.effects.createWrapper(a).css({overflow:"hidden"}),n=p?[s.width(),s.height()]:[s.height(),s.width()],u&&(c=parseInt(u[1],10)/100*n[l?0:1]),h&&s.css(d?{height:0,width:c}:{height:c,width:0}),g[f[0]]=h?n[0]:c,v[f[1]]=h?n[1]:0,s.animate(g,m,e.easing).animate(v,m,e.easing,function(){l&&a.hide(),t.effects.restore(a,o),t.effects.removeWrapper(a),i()})}})(jQuery);(function(t){t.effects.effect.highlight=function(e,i){var s=t(this),n=["backgroundImage","backgroundColor","opacity"],a=t.effects.setMode(s,e.mode||"show"),o={backgroundColor:s.css("backgroundColor")};"hide"===a&&(o.opacity=0),t.effects.save(s,n),s.show().css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(o,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===a&&s.hide(),t.effects.restore(s,n),i()}})}})(jQuery);(function(t){t.effects.effect.pulsate=function(e,i){var s,n=t(this),a=t.effects.setMode(n,e.mode||"show"),o="show"===a,r="hide"===a,h=o||"hide"===a,l=2*(e.times||5)+(h?1:0),c=e.duration/l,u=0,d=n.queue(),p=d.length;for((o||!n.is(":visible"))&&(n.css("opacity",0).show(),u=1),s=1;l>s;s++)n.animate({opacity:u},c,e.easing),u=1-u;n.animate({opacity:u},c,e.easing),n.queue(function(){r&&n.hide(),i()}),p>1&&d.splice.apply(d,[1,0].concat(d.splice(p,l+1))),n.dequeue()}})(jQuery);(function(t){t.effects.effect.puff=function(e,i){var s=t(this),n=t.effects.setMode(s,e.mode||"hide"),a="hide"===n,o=parseInt(e.percent,10)||150,r=o/100,h={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()};t.extend(e,{effect:"scale",queue:!1,fade:!0,mode:n,complete:i,percent:a?o:100,from:a?h:{height:h.height*r,width:h.width*r,outerHeight:h.outerHeight*r,outerWidth:h.outerWidth*r}}),s.effect(e)},t.effects.effect.scale=function(e,i){var s=t(this),n=t.extend(!0,{},e),a=t.effects.setMode(s,e.mode||"effect"),o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"hide"===a?0:100),r=e.direction||"both",h=e.origin,l={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()},c={y:"horizontal"!==r?o/100:1,x:"vertical"!==r?o/100:1};n.effect="size",n.queue=!1,n.complete=i,"effect"!==a&&(n.origin=h||["middle","center"],n.restore=!0),n.from=e.from||("show"===a?{height:0,width:0,outerHeight:0,outerWidth:0}:l),n.to={height:l.height*c.y,width:l.width*c.x,outerHeight:l.outerHeight*c.y,outerWidth:l.outerWidth*c.x},n.fade&&("show"===a&&(n.from.opacity=0,n.to.opacity=1),"hide"===a&&(n.from.opacity=1,n.to.opacity=0)),s.effect(n)},t.effects.effect.size=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","width","height","overflow","opacity"],h=["position","top","bottom","left","right","overflow","opacity"],l=["width","height","overflow"],c=["fontSize"],u=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],d=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],p=t.effects.setMode(o,e.mode||"effect"),f=e.restore||"effect"!==p,m=e.scale||"both",g=e.origin||["middle","center"],v=o.css("position"),_=f?r:h,b={height:0,width:0,outerHeight:0,outerWidth:0};"show"===p&&o.show(),s={height:o.height(),width:o.width(),outerHeight:o.outerHeight(),outerWidth:o.outerWidth()},"toggle"===e.mode&&"show"===p?(o.from=e.to||b,o.to=e.from||s):(o.from=e.from||("show"===p?b:s),o.to=e.to||("hide"===p?b:s)),a={from:{y:o.from.height/s.height,x:o.from.width/s.width},to:{y:o.to.height/s.height,x:o.to.width/s.width}},("box"===m||"both"===m)&&(a.from.y!==a.to.y&&(_=_.concat(u),o.from=t.effects.setTransition(o,u,a.from.y,o.from),o.to=t.effects.setTransition(o,u,a.to.y,o.to)),a.from.x!==a.to.x&&(_=_.concat(d),o.from=t.effects.setTransition(o,d,a.from.x,o.from),o.to=t.effects.setTransition(o,d,a.to.x,o.to))),("content"===m||"both"===m)&&a.from.y!==a.to.y&&(_=_.concat(c).concat(l),o.from=t.effects.setTransition(o,c,a.from.y,o.from),o.to=t.effects.setTransition(o,c,a.to.y,o.to)),t.effects.save(o,_),o.show(),t.effects.createWrapper(o),o.css("overflow","hidden").css(o.from),g&&(n=t.effects.getBaseline(g,s),o.from.top=(s.outerHeight-o.outerHeight())*n.y,o.from.left=(s.outerWidth-o.outerWidth())*n.x,o.to.top=(s.outerHeight-o.to.outerHeight)*n.y,o.to.left=(s.outerWidth-o.to.outerWidth)*n.x),o.css(o.from),("content"===m||"both"===m)&&(u=u.concat(["marginTop","marginBottom"]).concat(c),d=d.concat(["marginLeft","marginRight"]),l=r.concat(u).concat(d),o.find("*[width]").each(function(){var i=t(this),s={height:i.height(),width:i.width(),outerHeight:i.outerHeight(),outerWidth:i.outerWidth()};f&&t.effects.save(i,l),i.from={height:s.height*a.from.y,width:s.width*a.from.x,outerHeight:s.outerHeight*a.from.y,outerWidth:s.outerWidth*a.from.x},i.to={height:s.height*a.to.y,width:s.width*a.to.x,outerHeight:s.height*a.to.y,outerWidth:s.width*a.to.x},a.from.y!==a.to.y&&(i.from=t.effects.setTransition(i,u,a.from.y,i.from),i.to=t.effects.setTransition(i,u,a.to.y,i.to)),a.from.x!==a.to.x&&(i.from=t.effects.setTransition(i,d,a.from.x,i.from),i.to=t.effects.setTransition(i,d,a.to.x,i.to)),i.css(i.from),i.animate(i.to,e.duration,e.easing,function(){f&&t.effects.restore(i,l)})})),o.animate(o.to,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){0===o.to.opacity&&o.css("opacity",o.from.opacity),"hide"===p&&o.hide(),t.effects.restore(o,_),f||("static"===v?o.css({position:"relative",top:o.to.top,left:o.to.left}):t.each(["top","left"],function(t,e){o.css(e,function(e,i){var s=parseInt(i,10),n=t?o.to.left:o.to.top;return"auto"===i?n+"px":s+n+"px"})})),t.effects.removeWrapper(o),i()}})}})(jQuery);(function(t){t.effects.effect.shake=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","height","width"],o=t.effects.setMode(n,e.mode||"effect"),r=e.direction||"left",h=e.distance||20,l=e.times||3,c=2*l+1,u=Math.round(e.duration/c),d="up"===r||"down"===r?"top":"left",p="up"===r||"left"===r,f={},m={},g={},v=n.queue(),_=v.length;for(t.effects.save(n,a),n.show(),t.effects.createWrapper(n),f[d]=(p?"-=":"+=")+h,m[d]=(p?"+=":"-=")+2*h,g[d]=(p?"-=":"+=")+2*h,n.animate(f,u,e.easing),s=1;l>s;s++)n.animate(m,u,e.easing).animate(g,u,e.easing);n.animate(m,u,e.easing).animate(f,u/2,e.easing).queue(function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}),_>1&&v.splice.apply(v,[1,0].concat(v.splice(_,c+1))),n.dequeue()}})(jQuery);(function(t){t.effects.effect.slide=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","width","height"],o=t.effects.setMode(n,e.mode||"show"),r="show"===o,h=e.direction||"left",l="up"===h||"down"===h?"top":"left",c="up"===h||"left"===h,u={};t.effects.save(n,a),n.show(),s=e.distance||n["top"===l?"outerHeight":"outerWidth"](!0),t.effects.createWrapper(n).css({overflow:"hidden"}),r&&n.css(l,c?isNaN(s)?"-"+s:-s:s),u[l]=(r?c?"+=":"-=":c?"-=":"+=")+s,n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}})}})(jQuery);(function(t){t.effects.effect.transfer=function(e,i){var s=t(this),n=t(e.to),a="fixed"===n.css("position"),o=t("body"),r=a?o.scrollTop():0,h=a?o.scrollLeft():0,l=n.offset(),c={top:l.top-r,left:l.left-h,height:n.innerHeight(),width:n.innerWidth()},u=s.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(e.className).css({top:u.top-r,left:u.left-h,height:s.innerHeight(),width:s.innerWidth(),position:a?"fixed":"absolute"}).animate(c,e.duration,e.easing,function(){d.remove(),i()})}})(jQuery);
////////////////////////////////////////
// SRC End --> libs/jquery/jquery-ui-1.10.3.custom.min.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/jquery/jquery.mobile-1.3.2.min.js
////////////////////////////////////////
/*! jQuery Mobile 1.3.2 | Git HEAD hash: 528cf0e <> 2013-07-19T22:17:57Z | (c) 2010, 2013 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b,c){"function"==typeof define&&define.amd?define(["jquery"],function(d){return c(d,a,b),d.mobile}):c(a.jQuery,a,b)}(this,document,function(a,b,c,d){!function(a){a.mobile={}}(a),function(a,b,d){var e={};a.mobile=a.extend(a.mobile,{version:"1.3.2",ns:"",subPageUrlKey:"ui-page",activePageClass:"ui-page-active",activeBtnClass:"ui-btn-active",focusClass:"ui-focus",ajaxEnabled:!0,hashListeningEnabled:!0,linkBindingEnabled:!0,defaultPageTransition:"fade",maxTransitionWidth:!1,minScrollBack:250,touchOverflowEnabled:!1,defaultDialogTransition:"pop",pageLoadErrorMessage:"Error Loading Page",pageLoadErrorMessageTheme:"e",phonegapNavigationEnabled:!1,autoInitializePage:!0,pushStateEnabled:!0,ignoreContentEnabled:!1,orientationChangeEnabled:!0,buttonMarkup:{hoverDelay:200},window:a(b),document:a(c),keyCode:{ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91},behaviors:{},silentScroll:function(c){"number"!==a.type(c)&&(c=a.mobile.defaultHomeScroll),a.event.special.scrollstart.enabled=!1,setTimeout(function(){b.scrollTo(0,c),a.mobile.document.trigger("silentscroll",{x:0,y:c})},20),setTimeout(function(){a.event.special.scrollstart.enabled=!0},150)},nsNormalizeDict:e,nsNormalize:function(b){return b?e[b]||(e[b]=a.camelCase(a.mobile.ns+b)):void 0},getInheritedTheme:function(a,b){for(var c,d,e=a[0],f="",g=/ui-(bar|body|overlay)-([a-z])\b/;e&&(c=e.className||"",!(c&&(d=g.exec(c))&&(f=d[2])));)e=e.parentNode;return f||b||"a"},closestPageData:function(a){return a.closest(':jqmData(role="page"), :jqmData(role="dialog")').data("mobile-page")},enhanceable:function(a){return this.haveParents(a,"enhance")},hijackable:function(a){return this.haveParents(a,"ajax")},haveParents:function(b,c){if(!a.mobile.ignoreContentEnabled)return b;for(var d,e,f,g=b.length,h=a(),i=0;g>i;i++){for(e=b.eq(i),f=!1,d=b[i];d;){var j=d.getAttribute?d.getAttribute("data-"+a.mobile.ns+c):"";if("false"===j){f=!0;break}d=d.parentNode}f||(h=h.add(e))}return h},getScreenHeight:function(){return b.innerHeight||a.mobile.window.height()}},a.mobile),a.fn.jqmData=function(b,c){var e;return"undefined"!=typeof b&&(b&&(b=a.mobile.nsNormalize(b)),e=arguments.length<2||c===d?this.data(b):this.data(b,c)),e},a.jqmData=function(b,c,d){var e;return"undefined"!=typeof c&&(e=a.data(b,c?a.mobile.nsNormalize(c):c,d)),e},a.fn.jqmRemoveData=function(b){return this.removeData(a.mobile.nsNormalize(b))},a.jqmRemoveData=function(b,c){return a.removeData(b,a.mobile.nsNormalize(c))},a.fn.removeWithDependents=function(){a.removeWithDependents(this)},a.removeWithDependents=function(b){var c=a(b);(c.jqmData("dependents")||a()).remove(),c.remove()},a.fn.addDependents=function(b){a.addDependents(a(this),b)},a.addDependents=function(b,c){var d=a(b).jqmData("dependents")||a();a(b).jqmData("dependents",a.merge(d,c))},a.fn.getEncodedText=function(){return a("<div/>").text(a(this).text()).html()},a.fn.jqmEnhanceable=function(){return a.mobile.enhanceable(this)},a.fn.jqmHijackable=function(){return a.mobile.hijackable(this)};var f=a.find,g=/:jqmData\(([^)]*)\)/g;a.find=function(b,c,d,e){return b=b.replace(g,"[data-"+(a.mobile.ns||"")+"$1]"),f.call(this,b,c,d,e)},a.extend(a.find,f),a.find.matches=function(b,c){return a.find(b,null,null,c)},a.find.matchesSelector=function(b,c){return a.find(c,null,null,[b]).length>0}}(a,this),function(a,b){var c=0,d=Array.prototype.slice,e=a.cleanData;a.cleanData=function(b){for(var c,d=0;null!=(c=b[d]);d++)try{a(c).triggerHandler("remove")}catch(f){}e(b)},a.widget=function(b,c,d){var e,f,g,h,i=b.split(".")[0];b=b.split(".")[1],e=i+"-"+b,d||(d=c,c=a.Widget),a.expr[":"][e.toLowerCase()]=function(b){return!!a.data(b,e)},a[i]=a[i]||{},f=a[i][b],g=a[i][b]=function(a,b){return this._createWidget?(arguments.length&&this._createWidget(a,b),void 0):new g(a,b)},a.extend(g,f,{version:d.version,_proto:a.extend({},d),_childConstructors:[]}),h=new c,h.options=a.widget.extend({},h.options),a.each(d,function(b,e){a.isFunction(e)&&(d[b]=function(){var a=function(){return c.prototype[b].apply(this,arguments)},d=function(a){return c.prototype[b].apply(this,a)};return function(){var b,c=this._super,f=this._superApply;return this._super=a,this._superApply=d,b=e.apply(this,arguments),this._super=c,this._superApply=f,b}}())}),g.prototype=a.widget.extend(h,{widgetEventPrefix:f?h.widgetEventPrefix:b},d,{constructor:g,namespace:i,widgetName:b,widgetFullName:e}),f?(a.each(f._childConstructors,function(b,c){var d=c.prototype;a.widget(d.namespace+"."+d.widgetName,g,c._proto)}),delete f._childConstructors):c._childConstructors.push(g),a.widget.bridge(b,g)},a.widget.extend=function(c){for(var e,f,g=d.call(arguments,1),h=0,i=g.length;i>h;h++)for(e in g[h])f=g[h][e],g[h].hasOwnProperty(e)&&f!==b&&(c[e]=a.isPlainObject(f)?a.isPlainObject(c[e])?a.widget.extend({},c[e],f):a.widget.extend({},f):f);return c},a.widget.bridge=function(c,e){var f=e.prototype.widgetFullName||c;a.fn[c]=function(g){var h="string"==typeof g,i=d.call(arguments,1),j=this;return g=!h&&i.length?a.widget.extend.apply(null,[g].concat(i)):g,h?this.each(function(){var d,e=a.data(this,f);return e?a.isFunction(e[g])&&"_"!==g.charAt(0)?(d=e[g].apply(e,i),d!==e&&d!==b?(j=d&&d.jquery?j.pushStack(d.get()):d,!1):void 0):a.error("no such method '"+g+"' for "+c+" widget instance"):a.error("cannot call methods on "+c+" prior to initialization; "+"attempted to call method '"+g+"'")}):this.each(function(){var b=a.data(this,f);b?b.option(g||{})._init():a.data(this,f,new e(g,this))}),j}},a.Widget=function(){},a.Widget._childConstructors=[],a.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(b,d){d=a(d||this.defaultElement||this)[0],this.element=a(d),this.uuid=c++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=a.widget.extend({},this.options,this._getCreateOptions(),b),this.bindings=a(),this.hoverable=a(),this.focusable=a(),d!==this&&(a.data(d,this.widgetFullName,this),this._on(!0,this.element,{remove:function(a){a.target===d&&this.destroy()}}),this.document=a(d.style?d.ownerDocument:d.document||d),this.window=a(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:a.noop,_getCreateEventData:a.noop,_create:a.noop,_init:a.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(a.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:a.noop,widget:function(){return this.element},option:function(c,d){var e,f,g,h=c;if(0===arguments.length)return a.widget.extend({},this.options);if("string"==typeof c)if(h={},e=c.split("."),c=e.shift(),e.length){for(f=h[c]=a.widget.extend({},this.options[c]),g=0;g<e.length-1;g++)f[e[g]]=f[e[g]]||{},f=f[e[g]];if(c=e.pop(),d===b)return f[c]===b?null:f[c];f[c]=d}else{if(d===b)return this.options[c]===b?null:this.options[c];h[c]=d}return this._setOptions(h),this},_setOptions:function(a){var b;for(b in a)this._setOption(b,a[b]);return this},_setOption:function(a,b){return this.options[a]=b,"disabled"===a&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!b).attr("aria-disabled",b),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(b,c,d){var e,f=this;"boolean"!=typeof b&&(d=c,c=b,b=!1),d?(c=e=a(c),this.bindings=this.bindings.add(c)):(d=c,c=this.element,e=this.widget()),a.each(d,function(d,g){function h(){return b||f.options.disabled!==!0&&!a(this).hasClass("ui-state-disabled")?("string"==typeof g?f[g]:g).apply(f,arguments):void 0}"string"!=typeof g&&(h.guid=g.guid=g.guid||h.guid||a.guid++);var i=d.match(/^(\w+)\s*(.*)$/),j=i[1]+f.eventNamespace,k=i[2];k?e.delegate(k,j,h):c.bind(j,h)})},_off:function(a,b){b=(b||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,a.unbind(b).undelegate(b)},_delay:function(a,b){function c(){return("string"==typeof a?d[a]:a).apply(d,arguments)}var d=this;return setTimeout(c,b||0)},_hoverable:function(b){this.hoverable=this.hoverable.add(b),this._on(b,{mouseenter:function(b){a(b.currentTarget).addClass("ui-state-hover")},mouseleave:function(b){a(b.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(b){this.focusable=this.focusable.add(b),this._on(b,{focusin:function(b){a(b.currentTarget).addClass("ui-state-focus")},focusout:function(b){a(b.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(b,c,d){var e,f,g=this.options[b];if(d=d||{},c=a.Event(c),c.type=(b===this.widgetEventPrefix?b:this.widgetEventPrefix+b).toLowerCase(),c.target=this.element[0],f=c.originalEvent)for(e in f)e in c||(c[e]=f[e]);return this.element.trigger(c,d),!(a.isFunction(g)&&g.apply(this.element[0],[c].concat(d))===!1||c.isDefaultPrevented())}},a.each({show:"fadeIn",hide:"fadeOut"},function(b,c){a.Widget.prototype["_"+b]=function(d,e,f){"string"==typeof e&&(e={effect:e});var g,h=e?e===!0||"number"==typeof e?c:e.effect||c:b;e=e||{},"number"==typeof e&&(e={duration:e}),g=!a.isEmptyObject(e),e.complete=f,e.delay&&d.delay(e.delay),g&&a.effects&&a.effects.effect[h]?d[b](e):h!==b&&d[h]?d[h](e.duration,e.easing,f):d.queue(function(c){a(this)[b](),f&&f.call(d[0]),c()})}})}(a),function(a,b){a.widget("mobile.widget",{_createWidget:function(){a.Widget.prototype._createWidget.apply(this,arguments),this._trigger("init")},_getCreateOptions:function(){var c=this.element,d={};return a.each(this.options,function(a){var e=c.jqmData(a.replace(/[A-Z]/g,function(a){return"-"+a.toLowerCase()}));e!==b&&(d[a]=e)}),d},enhanceWithin:function(b,c){this.enhance(a(this.options.initSelector,a(b)),c)},enhance:function(b,c){var d,e,f=a(b);f=a.mobile.enhanceable(f),c&&f.length&&(d=a.mobile.closestPageData(f),e=d&&d.keepNativeSelector()||"",f=f.not(e)),f[this.widgetName]()},raise:function(a){throw"Widget ["+this.widgetName+"]: "+a}})}(a),function(a){a.extend(a.mobile,{loadingMessageTextVisible:d,loadingMessageTheme:d,loadingMessage:d,showPageLoadingMsg:function(b,c,d){a.mobile.loading("show",b,c,d)},hidePageLoadingMsg:function(){a.mobile.loading("hide")},loading:function(){this.loaderWidget.loader.apply(this.loaderWidget,arguments)}});var b="ui-loader",c=a("html"),e=a.mobile.window;a.widget("mobile.loader",{options:{theme:"a",textVisible:!1,html:"",text:"loading"},defaultHtml:"<div class='"+b+"'>"+"<span class='ui-icon ui-icon-loading'></span>"+"<h1></h1>"+"</div>",fakeFixLoader:function(){var b=a("."+a.mobile.activeBtnClass).first();this.element.css({top:a.support.scrollTop&&e.scrollTop()+e.height()/2||b.length&&b.offset().top||100})},checkLoaderPosition:function(){var b=this.element.offset(),c=e.scrollTop(),d=a.mobile.getScreenHeight();(b.top<c||b.top-c>d)&&(this.element.addClass("ui-loader-fakefix"),this.fakeFixLoader(),e.unbind("scroll",this.checkLoaderPosition).bind("scroll",a.proxy(this.fakeFixLoader,this)))},resetHtml:function(){this.element.html(a(this.defaultHtml).html())},show:function(f,g,h){var i,j,k;this.resetHtml(),"object"===a.type(f)?(k=a.extend({},this.options,f),f=k.theme||a.mobile.loadingMessageTheme):(k=this.options,f=f||a.mobile.loadingMessageTheme||k.theme),j=g||a.mobile.loadingMessage||k.text,c.addClass("ui-loading"),(a.mobile.loadingMessage!==!1||k.html)&&(i=a.mobile.loadingMessageTextVisible!==d?a.mobile.loadingMessageTextVisible:k.textVisible,this.element.attr("class",b+" ui-corner-all ui-body-"+f+" ui-loader-"+(i||g||f.text?"verbose":"default")+(k.textonly||h?" ui-loader-textonly":"")),k.html?this.element.html(k.html):this.element.find("h1").text(j),this.element.appendTo(a.mobile.pageContainer),this.checkLoaderPosition(),e.bind("scroll",a.proxy(this.checkLoaderPosition,this)))},hide:function(){c.removeClass("ui-loading"),a.mobile.loadingMessage&&this.element.removeClass("ui-loader-fakefix"),a.mobile.window.unbind("scroll",this.fakeFixLoader),a.mobile.window.unbind("scroll",this.checkLoaderPosition)}}),e.bind("pagecontainercreate",function(){a.mobile.loaderWidget=a.mobile.loaderWidget||a(a.mobile.loader.prototype.defaultHtml).loader()})}(a,this),function(a,b,d){function e(a){return a=a||location.href,"#"+a.replace(/^[^#]*#?(.*)$/,"$1")}var f,g="hashchange",h=c,i=a.event.special,j=h.documentMode,k="on"+g in b&&(j===d||j>7);a.fn[g]=function(a){return a?this.bind(g,a):this.trigger(g)},a.fn[g].delay=50,i[g]=a.extend(i[g],{setup:function(){return k?!1:(a(f.start),void 0)},teardown:function(){return k?!1:(a(f.stop),void 0)}}),f=function(){function c(){var d=e(),h=n(j);d!==j?(m(j=d,h),a(b).trigger(g)):h!==j&&(location.href=location.href.replace(/#.*/,"")+h),f=setTimeout(c,a.fn[g].delay)}var f,i={},j=e(),l=function(a){return a},m=l,n=l;return i.start=function(){f||c()},i.stop=function(){f&&clearTimeout(f),f=d},b.attachEvent&&!b.addEventListener&&!k&&function(){var b,d;i.start=function(){b||(d=a.fn[g].src,d=d&&d+e(),b=a('<iframe tabindex="-1" title="empty"/>').hide().one("load",function(){d||m(e()),c()}).attr("src",d||"javascript:0").insertAfter("body")[0].contentWindow,h.onpropertychange=function(){try{"title"===event.propertyName&&(b.document.title=h.title)}catch(a){}})},i.stop=l,n=function(){return e(b.location.href)},m=function(c,d){var e=b.document,f=a.fn[g].domain;c!==d&&(e.title=h.title,e.open(),f&&e.write('<script>document.domain="'+f+'"</script>'),e.close(),b.location.hash=c)}}(),i}()}(a,this),function(a){b.matchMedia=b.matchMedia||function(a){var b,c=a.documentElement,d=c.firstElementChild||c.firstChild,e=a.createElement("body"),f=a.createElement("div");return f.id="mq-test-1",f.style.cssText="position:absolute;top:-100em",e.style.background="none",e.appendChild(f),function(a){return f.innerHTML='&shy;<style media="'+a+'"> #mq-test-1 { width: 42px; }</style>',c.insertBefore(e,d),b=42===f.offsetWidth,c.removeChild(e),{matches:b,media:a}}}(c),a.mobile.media=function(a){return b.matchMedia(a).matches}}(a),function(a){var b={touch:"ontouchend"in c};a.mobile.support=a.mobile.support||{},a.extend(a.support,b),a.extend(a.mobile.support,b)}(a),function(a){a.extend(a.support,{orientation:"orientation"in b&&"onorientationchange"in b})}(a),function(a,d){function e(a){var b=a.charAt(0).toUpperCase()+a.substr(1),c=(a+" "+n.join(b+" ")+b).split(" ");for(var e in c)if(m[c[e]]!==d)return!0}function f(a,b,d){for(var e,f=c.createElement("div"),g=function(a){return a.charAt(0).toUpperCase()+a.substr(1)},h=function(a){return""===a?"":"-"+a.charAt(0).toLowerCase()+a.substr(1)+"-"},i=function(c){var d=h(c)+a+": "+b+";",i=g(c),j=i+(""===i?a:g(a));f.setAttribute("style",d),f.style[j]&&(e=!0)},j=d?d:n,k=0;k<j.length;k++)i(j[k]);return!!e}function g(){var e="transform-3d",f=a.mobile.media("(-"+n.join("-"+e+"),(-")+"-"+e+"),("+e+")");if(f)return!!f;var g=c.createElement("div"),h={MozTransform:"-moz-transform",transform:"transform"};l.append(g);for(var i in h)g.style[i]!==d&&(g.style[i]="translate3d( 100px, 1px, 1px )",f=b.getComputedStyle(g).getPropertyValue(h[i]));return!!f&&"none"!==f}function h(){var b,c,d=location.protocol+"//"+location.host+location.pathname+"ui-dir/",e=a("head base"),f=null,g="";return e.length?g=e.attr("href"):e=f=a("<base>",{href:d}).appendTo("head"),b=a("<a href='testurl' />").prependTo(l),c=b[0].href,e[0].href=g||location.pathname,f&&f.remove(),0===c.indexOf(d)}function i(){var a,d=c.createElement("x"),e=c.documentElement,f=b.getComputedStyle;return"pointerEvents"in d.style?(d.style.pointerEvents="auto",d.style.pointerEvents="x",e.appendChild(d),a=f&&"auto"===f(d,"").pointerEvents,e.removeChild(d),!!a):!1}function j(){var a=c.createElement("div");return"undefined"!=typeof a.getBoundingClientRect}function k(){var a=b,c=navigator.userAgent,d=navigator.platform,e=c.match(/AppleWebKit\/([0-9]+)/),f=!!e&&e[1],g=c.match(/Fennec\/([0-9]+)/),h=!!g&&g[1],i=c.match(/Opera Mobi\/([0-9]+)/),j=!!i&&i[1];return(d.indexOf("iPhone")>-1||d.indexOf("iPad")>-1||d.indexOf("iPod")>-1)&&f&&534>f||a.operamini&&"[object OperaMini]"==={}.toString.call(a.operamini)||i&&7458>j||c.indexOf("Android")>-1&&f&&533>f||h&&6>h||"palmGetResource"in b&&f&&534>f||c.indexOf("MeeGo")>-1&&c.indexOf("NokiaBrowser/8.5.0")>-1?!1:!0}var l=a("<body>").prependTo("html"),m=l[0].style,n=["Webkit","Moz","O"],o="palmGetResource"in b,p=b.opera,q=b.operamini&&"[object OperaMini]"==={}.toString.call(b.operamini),r=b.blackberry&&!e("-webkit-transform");a.extend(a.mobile,{browser:{}}),a.mobile.browser.oldIE=function(){var a=3,b=c.createElement("div"),d=b.all||[];do b.innerHTML="<!--[if gt IE "+ ++a+"]><br><![endif]-->";while(d[0]);return a>4?a:!a}(),a.extend(a.support,{cssTransitions:"WebKitTransitionEvent"in b||f("transition","height 100ms linear",["Webkit","Moz",""])&&!a.mobile.browser.oldIE&&!p,pushState:"pushState"in history&&"replaceState"in history&&!(b.navigator.userAgent.indexOf("Firefox")>=0&&b.top!==b)&&-1===b.navigator.userAgent.search(/CriOS/),mediaquery:a.mobile.media("only all"),cssPseudoElement:!!e("content"),touchOverflow:!!e("overflowScrolling"),cssTransform3d:g(),boxShadow:!!e("boxShadow")&&!r,fixedPosition:k(),scrollTop:("pageXOffset"in b||"scrollTop"in c.documentElement||"scrollTop"in l[0])&&!o&&!q,dynamicBaseTag:h(),cssPointerEvents:i(),boundingRect:j()}),l.remove();var s=function(){var a=b.navigator.userAgent;return a.indexOf("Nokia")>-1&&(a.indexOf("Symbian/3")>-1||a.indexOf("Series60/5")>-1)&&a.indexOf("AppleWebKit")>-1&&a.match(/(BrowserNG|NokiaBrowser)\/7\.[0-3]/)}();a.mobile.gradeA=function(){return(a.support.mediaquery||a.mobile.browser.oldIE&&a.mobile.browser.oldIE>=7)&&(a.support.boundingRect||null!==a.fn.jquery.match(/1\.[0-7+]\.[0-9+]?/))},a.mobile.ajaxBlacklist=b.blackberry&&!b.WebKitPoint||q||s,s&&a(function(){a("head link[rel='stylesheet']").attr("rel","alternate stylesheet").attr("rel","stylesheet")}),a.support.boxShadow||a("html").addClass("ui-mobile-nosupport-boxshadow")}(a),function(a,b){var c,d=a.mobile.window;a.event.special.navigate=c={bound:!1,pushStateEnabled:!0,originalEventName:b,isPushStateEnabled:function(){return a.support.pushState&&a.mobile.pushStateEnabled===!0&&this.isHashChangeEnabled()},isHashChangeEnabled:function(){return a.mobile.hashListeningEnabled===!0},popstate:function(b){var c=new a.Event("navigate"),e=new a.Event("beforenavigate"),f=b.originalEvent.state||{};location.href,d.trigger(e),e.isDefaultPrevented()||(b.historyState&&a.extend(f,b.historyState),c.originalEvent=b,setTimeout(function(){d.trigger(c,{state:f})},0))},hashchange:function(b){var c=new a.Event("navigate"),e=new a.Event("beforenavigate");d.trigger(e),e.isDefaultPrevented()||(c.originalEvent=b,d.trigger(c,{state:b.hashchangeState||{}}))},setup:function(){c.bound||(c.bound=!0,c.isPushStateEnabled()?(c.originalEventName="popstate",d.bind("popstate.navigate",c.popstate)):c.isHashChangeEnabled()&&(c.originalEventName="hashchange",d.bind("hashchange.navigate",c.hashchange)))}}}(a),function(a,c){var d,e,f="&ui-state=dialog";a.mobile.path=d={uiStateKey:"&ui-state",urlParseRE:/^\s*(((([^:\/#\?]+:)?(?:(\/\/)((?:(([^:@\/#\?]+)(?:\:([^:@\/#\?]+))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((\/?(?:[^\/\?#]+\/+)*)([^\?#]*)))?(\?[^#]+)?)(#.*)?/,getLocation:function(a){var b=a?this.parseUrl(a):location,c=this.parseUrl(a||location.href).hash;return c="#"===c?"":c,b.protocol+"//"+b.host+b.pathname+b.search+c},parseLocation:function(){return this.parseUrl(this.getLocation())},parseUrl:function(b){if("object"===a.type(b))return b;var c=d.urlParseRE.exec(b||"")||[];return{href:c[0]||"",hrefNoHash:c[1]||"",hrefNoSearch:c[2]||"",domain:c[3]||"",protocol:c[4]||"",doubleSlash:c[5]||"",authority:c[6]||"",username:c[8]||"",password:c[9]||"",host:c[10]||"",hostname:c[11]||"",port:c[12]||"",pathname:c[13]||"",directory:c[14]||"",filename:c[15]||"",search:c[16]||"",hash:c[17]||""}},makePathAbsolute:function(a,b){if(a&&"/"===a.charAt(0))return a;a=a||"",b=b?b.replace(/^\/|(\/[^\/]*|[^\/]+)$/g,""):"";for(var c=b?b.split("/"):[],d=a.split("/"),e=0;e<d.length;e++){var f=d[e];switch(f){case".":break;case"..":c.length&&c.pop();break;default:c.push(f)}}return"/"+c.join("/")},isSameDomain:function(a,b){return d.parseUrl(a).domain===d.parseUrl(b).domain},isRelativeUrl:function(a){return""===d.parseUrl(a).protocol},isAbsoluteUrl:function(a){return""!==d.parseUrl(a).protocol},makeUrlAbsolute:function(a,b){if(!d.isRelativeUrl(a))return a;b===c&&(b=this.documentBase);var e=d.parseUrl(a),f=d.parseUrl(b),g=e.protocol||f.protocol,h=e.protocol?e.doubleSlash:e.doubleSlash||f.doubleSlash,i=e.authority||f.authority,j=""!==e.pathname,k=d.makePathAbsolute(e.pathname||f.filename,f.pathname),l=e.search||!j&&f.search||"",m=e.hash;return g+h+i+k+l+m},addSearchParams:function(b,c){var e=d.parseUrl(b),f="object"==typeof c?a.param(c):c,g=e.search||"?";return e.hrefNoSearch+g+("?"!==g.charAt(g.length-1)?"&":"")+f+(e.hash||"")},convertUrlToDataUrl:function(a){var c=d.parseUrl(a);return d.isEmbeddedPage(c)?c.hash.split(f)[0].replace(/^#/,"").replace(/\?.*$/,""):d.isSameDomain(c,this.documentBase)?c.hrefNoHash.replace(this.documentBase.domain,"").split(f)[0]:b.decodeURIComponent(a)},get:function(a){return a===c&&(a=d.parseLocation().hash),d.stripHash(a).replace(/[^\/]*\.[^\/*]+$/,"")},set:function(a){location.hash=a},isPath:function(a){return/\//.test(a)},clean:function(a){return a.replace(this.documentBase.domain,"")},stripHash:function(a){return a.replace(/^#/,"")},stripQueryParams:function(a){return a.replace(/\?.*$/,"")},cleanHash:function(a){return d.stripHash(a.replace(/\?.*$/,"").replace(f,""))},isHashValid:function(a){return/^#[^#]+$/.test(a)},isExternal:function(a){var b=d.parseUrl(a);return b.protocol&&b.domain!==this.documentUrl.domain?!0:!1},hasProtocol:function(a){return/^(:?\w+:)/.test(a)},isEmbeddedPage:function(a){var b=d.parseUrl(a);return""!==b.protocol?!this.isPath(b.hash)&&b.hash&&(b.hrefNoHash===this.documentUrl.hrefNoHash||this.documentBaseDiffers&&b.hrefNoHash===this.documentBase.hrefNoHash):/^#/.test(b.href)},squash:function(a,b){var c,e,f,g,h=this.isPath(a),i=this.parseUrl(a),j=i.hash,k="";return b=b||(d.isPath(a)?d.getLocation():d.getDocumentUrl()),e=h?d.stripHash(a):a,e=d.isPath(i.hash)?d.stripHash(i.hash):e,g=e.indexOf(this.uiStateKey),g>-1&&(k=e.slice(g),e=e.slice(0,g)),c=d.makeUrlAbsolute(e,b),f=this.parseUrl(c).search,h?((d.isPath(j)||0===j.replace("#","").indexOf(this.uiStateKey))&&(j=""),k&&-1===j.indexOf(this.uiStateKey)&&(j+=k),-1===j.indexOf("#")&&""!==j&&(j="#"+j),c=d.parseUrl(c),c=c.protocol+"//"+c.host+c.pathname+f+j):c+=c.indexOf("#")>-1?k:"#"+k,c},isPreservableHash:function(a){return 0===a.replace("#","").indexOf(this.uiStateKey)}},d.documentUrl=d.parseLocation(),e=a("head").find("base"),d.documentBase=e.length?d.parseUrl(d.makeUrlAbsolute(e.attr("href"),d.documentUrl.href)):d.documentUrl,d.documentBaseDiffers=d.documentUrl.hrefNoHash!==d.documentBase.hrefNoHash,d.getDocumentUrl=function(b){return b?a.extend({},d.documentUrl):d.documentUrl.href},d.getDocumentBase=function(b){return b?a.extend({},d.documentBase):d.documentBase.href}}(a),function(a,b){a.mobile.path,a.mobile.History=function(a,b){this.stack=a||[],this.activeIndex=b||0},a.extend(a.mobile.History.prototype,{getActive:function(){return this.stack[this.activeIndex]},getLast:function(){return this.stack[this.previousIndex]},getNext:function(){return this.stack[this.activeIndex+1]},getPrev:function(){return this.stack[this.activeIndex-1]},add:function(a,b){b=b||{},this.getNext()&&this.clearForward(),b.hash&&-1===b.hash.indexOf("#")&&(b.hash="#"+b.hash),b.url=a,this.stack.push(b),this.activeIndex=this.stack.length-1},clearForward:function(){this.stack=this.stack.slice(0,this.activeIndex+1)},find:function(a,b,c){b=b||this.stack;var d,e,f,g=b.length;for(e=0;g>e;e++)if(d=b[e],(decodeURIComponent(a)===decodeURIComponent(d.url)||decodeURIComponent(a)===decodeURIComponent(d.hash))&&(f=e,c))return f;return f},closest:function(a){var c,d=this.activeIndex;return c=this.find(a,this.stack.slice(0,d)),c===b&&(c=this.find(a,this.stack.slice(d),!0),c=c===b?c:c+d),c},direct:function(c){var d=this.closest(c.url),e=this.activeIndex;d!==b&&(this.activeIndex=d,this.previousIndex=e),e>d?(c.present||c.back||a.noop)(this.getActive(),"back"):d>e?(c.present||c.forward||a.noop)(this.getActive(),"forward"):d===b&&c.missing&&c.missing(this.getActive())}})}(a),function(a){var d=a.mobile.path,e=location.href;a.mobile.Navigator=function(b){this.history=b,this.ignoreInitialHashChange=!0,a.mobile.window.bind({"popstate.history":a.proxy(this.popstate,this),"hashchange.history":a.proxy(this.hashchange,this)})},a.extend(a.mobile.Navigator.prototype,{squash:function(e,f){var g,h,i=d.isPath(e)?d.stripHash(e):e;return h=d.squash(e),g=a.extend({hash:i,url:h},f),b.history.replaceState(g,g.title||c.title,h),g},hash:function(a,b){var c,e,f;if(c=d.parseUrl(a),e=d.parseLocation(),e.pathname+e.search===c.pathname+c.search)f=c.hash?c.hash:c.pathname+c.search;else if(d.isPath(a)){var g=d.parseUrl(b);f=g.pathname+g.search+(d.isPreservableHash(g.hash)?g.hash.replace("#",""):"")}else f=a;return f},go:function(e,f,g){var h,i,j,k,l=a.event.special.navigate.isPushStateEnabled();i=d.squash(e),j=this.hash(e,i),g&&j!==d.stripHash(d.parseLocation().hash)&&(this.preventNextHashChange=g),this.preventHashAssignPopState=!0,b.location.hash=j,this.preventHashAssignPopState=!1,h=a.extend({url:i,hash:j,title:c.title},f),l&&(k=new a.Event("popstate"),k.originalEvent={type:"popstate",state:null},this.squash(e,h),g||(this.ignorePopState=!0,a.mobile.window.trigger(k))),this.history.add(h.url,h)},popstate:function(b){var c,f;if(a.event.special.navigate.isPushStateEnabled())return this.preventHashAssignPopState?(this.preventHashAssignPopState=!1,b.stopImmediatePropagation(),void 0):this.ignorePopState?(this.ignorePopState=!1,void 0):!b.originalEvent.state&&1===this.history.stack.length&&this.ignoreInitialHashChange&&(this.ignoreInitialHashChange=!1,location.href===e)?(b.preventDefault(),void 0):(c=d.parseLocation().hash,!b.originalEvent.state&&c?(f=this.squash(c),this.history.add(f.url,f),b.historyState=f,void 0):(this.history.direct({url:(b.originalEvent.state||{}).url||c,present:function(c,d){b.historyState=a.extend({},c),b.historyState.direction=d}}),void 0))},hashchange:function(b){var e,f;if(a.event.special.navigate.isHashChangeEnabled()&&!a.event.special.navigate.isPushStateEnabled()){if(this.preventNextHashChange)return this.preventNextHashChange=!1,b.stopImmediatePropagation(),void 0;e=this.history,f=d.parseLocation().hash,this.history.direct({url:f,present:function(c,d){b.hashchangeState=a.extend({},c),b.hashchangeState.direction=d},missing:function(){e.add(f,{hash:f,title:c.title})}})}}})}(a),function(a){a.mobile.navigate=function(b,c,d){a.mobile.navigate.navigator.go(b,c,d)},a.mobile.navigate.history=new a.mobile.History,a.mobile.navigate.navigator=new a.mobile.Navigator(a.mobile.navigate.history);var b=a.mobile.path.parseLocation();a.mobile.navigate.history.add(b.href,{hash:b.hash})}(a),function(a,b,c,d){function e(a){for(;a&&"undefined"!=typeof a.originalEvent;)a=a.originalEvent;return a}function f(b,c){var f,g,h,i,j,k,l,m,n,o=b.type;if(b=a.Event(b),b.type=c,f=b.originalEvent,g=a.event.props,o.search(/^(mouse|click)/)>-1&&(g=D),f)for(l=g.length,i;l;)i=g[--l],b[i]=f[i];if(o.search(/mouse(down|up)|click/)>-1&&!b.which&&(b.which=1),-1!==o.search(/^touch/)&&(h=e(f),o=h.touches,j=h.changedTouches,k=o&&o.length?o[0]:j&&j.length?j[0]:d))for(m=0,n=B.length;n>m;m++)i=B[m],b[i]=k[i];return b}function g(b){for(var c,d,e={};b;){c=a.data(b,y);for(d in c)c[d]&&(e[d]=e.hasVirtualBinding=!0);b=b.parentNode}return e}function h(b,c){for(var d;b;){if(d=a.data(b,y),d&&(!c||d[c]))return b;b=b.parentNode}return null}function i(){L=!1}function j(){L=!0}function k(){P=0,J.length=0,K=!1,j()}function l(){i()}function m(){n(),F=setTimeout(function(){F=0,k()},a.vmouse.resetTimerDuration)}function n(){F&&(clearTimeout(F),F=0)}function o(b,c,d){var e;return(d&&d[b]||!d&&h(c.target,b))&&(e=f(c,b),a(c.target).trigger(e)),e}function p(b){var c=a.data(b.target,z);if(!(K||P&&P===c)){var d=o("v"+b.type,b);d&&(d.isDefaultPrevented()&&b.preventDefault(),d.isPropagationStopped()&&b.stopPropagation(),d.isImmediatePropagationStopped()&&b.stopImmediatePropagation())}}function q(b){var c,d,f=e(b).touches;if(f&&1===f.length&&(c=b.target,d=g(c),d.hasVirtualBinding)){P=O++,a.data(c,z,P),n(),l(),I=!1;var h=e(b).touches[0];G=h.pageX,H=h.pageY,o("vmouseover",b,d),o("vmousedown",b,d)}}function r(a){L||(I||o("vmousecancel",a,g(a.target)),I=!0,m())}function s(b){if(!L){var c=e(b).touches[0],d=I,f=a.vmouse.moveDistanceThreshold,h=g(b.target);I=I||Math.abs(c.pageX-G)>f||Math.abs(c.pageY-H)>f,I&&!d&&o("vmousecancel",b,h),o("vmousemove",b,h),m()}}function t(a){if(!L){j();var b,c=g(a.target);if(o("vmouseup",a,c),!I){var d=o("vclick",a,c);d&&d.isDefaultPrevented()&&(b=e(a).changedTouches[0],J.push({touchID:P,x:b.clientX,y:b.clientY}),K=!0)}o("vmouseout",a,c),I=!1,m()}}function u(b){var c,d=a.data(b,y);if(d)for(c in d)if(d[c])return!0;return!1}function v(){}function w(b){var c=b.substr(1);return{setup:function(){u(this)||a.data(this,y,{});var d=a.data(this,y);d[b]=!0,E[b]=(E[b]||0)+1,1===E[b]&&N.bind(c,p),a(this).bind(c,v),M&&(E.touchstart=(E.touchstart||0)+1,1===E.touchstart&&N.bind("touchstart",q).bind("touchend",t).bind("touchmove",s).bind("scroll",r))},teardown:function(){--E[b],E[b]||N.unbind(c,p),M&&(--E.touchstart,E.touchstart||N.unbind("touchstart",q).unbind("touchmove",s).unbind("touchend",t).unbind("scroll",r));var d=a(this),e=a.data(this,y);e&&(e[b]=!1),d.unbind(c,v),u(this)||d.removeData(y)}}}var x,y="virtualMouseBindings",z="virtualTouchID",A="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),B="clientX clientY pageX pageY screenX screenY".split(" "),C=a.event.mouseHooks?a.event.mouseHooks.props:[],D=a.event.props.concat(C),E={},F=0,G=0,H=0,I=!1,J=[],K=!1,L=!1,M="addEventListener"in c,N=a(c),O=1,P=0;a.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500};for(var Q=0;Q<A.length;Q++)a.event.special[A[Q]]=w(A[Q]);M&&c.addEventListener("click",function(b){var c,d,e,f,g,h,i=J.length,j=b.target;if(i)for(c=b.clientX,d=b.clientY,x=a.vmouse.clickDistanceThreshold,e=j;e;){for(f=0;i>f;f++)if(g=J[f],h=0,e===j&&Math.abs(g.x-c)<x&&Math.abs(g.y-d)<x||a.data(e,z)===g.touchID)return b.preventDefault(),b.stopPropagation(),void 0;e=e.parentNode}},!0)}(a,b,c),function(a,b,d){function e(b,c,d){var e=d.type;d.type=c,a.event.dispatch.call(b,d),d.type=e}var f=a(c);a.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight scrollstart scrollstop".split(" "),function(b,c){a.fn[c]=function(a){return a?this.bind(c,a):this.trigger(c)},a.attrFn&&(a.attrFn[c]=!0)});var g=a.mobile.support.touch,h="touchmove scroll",i=g?"touchstart":"mousedown",j=g?"touchend":"mouseup",k=g?"touchmove":"mousemove";a.event.special.scrollstart={enabled:!0,setup:function(){function b(a,b){c=b,e(f,c?"scrollstart":"scrollstop",a)}var c,d,f=this,g=a(f);g.bind(h,function(e){a.event.special.scrollstart.enabled&&(c||b(e,!0),clearTimeout(d),d=setTimeout(function(){b(e,!1)},50))})}},a.event.special.tap={tapholdThreshold:750,setup:function(){var b=this,c=a(b);c.bind("vmousedown",function(d){function g(){clearTimeout(j)}function h(){g(),c.unbind("vclick",i).unbind("vmouseup",g),f.unbind("vmousecancel",h)}function i(a){h(),k===a.target&&e(b,"tap",a)
}if(d.which&&1!==d.which)return!1;var j,k=d.target;d.originalEvent,c.bind("vmouseup",g).bind("vclick",i),f.bind("vmousecancel",h),j=setTimeout(function(){e(b,"taphold",a.Event("taphold",{target:k}))},a.event.special.tap.tapholdThreshold)})}},a.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:30,verticalDistanceThreshold:75,start:function(b){var c=b.originalEvent.touches?b.originalEvent.touches[0]:b;return{time:(new Date).getTime(),coords:[c.pageX,c.pageY],origin:a(b.target)}},stop:function(a){var b=a.originalEvent.touches?a.originalEvent.touches[0]:a;return{time:(new Date).getTime(),coords:[b.pageX,b.pageY]}},handleSwipe:function(b,c){c.time-b.time<a.event.special.swipe.durationThreshold&&Math.abs(b.coords[0]-c.coords[0])>a.event.special.swipe.horizontalDistanceThreshold&&Math.abs(b.coords[1]-c.coords[1])<a.event.special.swipe.verticalDistanceThreshold&&b.origin.trigger("swipe").trigger(b.coords[0]>c.coords[0]?"swipeleft":"swiperight")},setup:function(){var b=this,c=a(b);c.bind(i,function(b){function e(b){g&&(f=a.event.special.swipe.stop(b),Math.abs(g.coords[0]-f.coords[0])>a.event.special.swipe.scrollSupressionThreshold&&b.preventDefault())}var f,g=a.event.special.swipe.start(b);c.bind(k,e).one(j,function(){c.unbind(k,e),g&&f&&a.event.special.swipe.handleSwipe(g,f),g=f=d})})}},a.each({scrollstop:"scrollstart",taphold:"tap",swipeleft:"swipe",swiperight:"swipe"},function(b,c){a.event.special[b]={setup:function(){a(this).bind(c,a.noop)}}})}(a,this),function(a){a.event.special.throttledresize={setup:function(){a(this).bind("resize",f)},teardown:function(){a(this).unbind("resize",f)}};var b,c,d,e=250,f=function(){c=(new Date).getTime(),d=c-g,d>=e?(g=c,a(this).trigger("throttledresize")):(b&&clearTimeout(b),b=setTimeout(f,e-d))},g=0}(a),function(a,b){function d(){var a=e();a!==f&&(f=a,i.trigger(j))}var e,f,g,h,i=a(b),j="orientationchange",k={0:!0,180:!0};if(a.support.orientation){var l=b.innerWidth||i.width(),m=b.innerHeight||i.height(),n=50;g=l>m&&l-m>n,h=k[b.orientation],(g&&h||!g&&!h)&&(k={"-90":!0,90:!0})}a.event.special.orientationchange=a.extend({},a.event.special.orientationchange,{setup:function(){return a.support.orientation&&!a.event.special.orientationchange.disabled?!1:(f=e(),i.bind("throttledresize",d),void 0)},teardown:function(){return a.support.orientation&&!a.event.special.orientationchange.disabled?!1:(i.unbind("throttledresize",d),void 0)},add:function(a){var b=a.handler;a.handler=function(a){return a.orientation=e(),b.apply(this,arguments)}}}),a.event.special.orientationchange.orientation=e=function(){var d=!0,e=c.documentElement;return d=a.support.orientation?k[b.orientation]:e&&e.clientWidth/e.clientHeight<1.1,d?"portrait":"landscape"},a.fn[j]=function(a){return a?this.bind(j,a):this.trigger(j)},a.attrFn&&(a.attrFn[j]=!0)}(a,this),function(a){a.widget("mobile.page",a.mobile.widget,{options:{theme:"c",domCache:!1,keepNativeDefault:":jqmData(role='none'), :jqmData(role='nojs')"},_create:function(){return this._trigger("beforecreate")===!1?!1:(this.element.attr("tabindex","0").addClass("ui-page ui-body-"+this.options.theme),this._on(this.element,{pagebeforehide:"removeContainerBackground",pagebeforeshow:"_handlePageBeforeShow"}),void 0)},_handlePageBeforeShow:function(){this.setContainerBackground()},removeContainerBackground:function(){a.mobile.pageContainer.removeClass("ui-overlay-"+a.mobile.getInheritedTheme(this.element.parent()))},setContainerBackground:function(b){this.options.theme&&a.mobile.pageContainer.addClass("ui-overlay-"+(b||this.options.theme))},keepNativeSelector:function(){var b=this.options,c=b.keepNative&&a.trim(b.keepNative);return c&&b.keepNative!==b.keepNativeDefault?[b.keepNative,b.keepNativeDefault].join(", "):b.keepNativeDefault}})}(a),function(a,b,c){var d=function(d){return d===c&&(d=!0),function(c,e,f,g){var h=new a.Deferred,i=e?" reverse":"",j=a.mobile.urlHistory.getActive(),k=j.lastScroll||a.mobile.defaultHomeScroll,l=a.mobile.getScreenHeight(),m=a.mobile.maxTransitionWidth!==!1&&a.mobile.window.width()>a.mobile.maxTransitionWidth,n=!a.support.cssTransitions||m||!c||"none"===c||Math.max(a.mobile.window.scrollTop(),k)>a.mobile.getMaxScrollForTransition(),o=" ui-page-pre-in",p=function(){a.mobile.pageContainer.toggleClass("ui-mobile-viewport-transitioning viewport-"+c)},q=function(){a.event.special.scrollstart.enabled=!1,b.scrollTo(0,k),setTimeout(function(){a.event.special.scrollstart.enabled=!0},150)},r=function(){g.removeClass(a.mobile.activePageClass+" out in reverse "+c).height("")},s=function(){d?g.animationComplete(t):t(),g.height(l+a.mobile.window.scrollTop()).addClass(c+" out"+i)},t=function(){g&&d&&r(),u()},u=function(){f.css("z-index",-10),f.addClass(a.mobile.activePageClass+o),a.mobile.focusPage(f),f.height(l+k),q(),f.css("z-index",""),n||f.animationComplete(v),f.removeClass(o).addClass(c+" in"+i),n&&v()},v=function(){d||g&&r(),f.removeClass("out in reverse "+c).height(""),p(),a.mobile.window.scrollTop()!==k&&q(),h.resolve(c,e,f,g,!0)};return p(),g&&!n?s():t(),h.promise()}},e=d(),f=d(!1),g=function(){return 3*a.mobile.getScreenHeight()};a.mobile.defaultTransitionHandler=e,a.mobile.transitionHandlers={"default":a.mobile.defaultTransitionHandler,sequential:e,simultaneous:f},a.mobile.transitionFallbacks={},a.mobile._maybeDegradeTransition=function(b){return b&&!a.support.cssTransform3d&&a.mobile.transitionFallbacks[b]&&(b=a.mobile.transitionFallbacks[b]),b},a.mobile.getMaxScrollForTransition=a.mobile.getMaxScrollForTransition||g}(a,this),function(a,d){function e(b){!p||p.closest("."+a.mobile.activePageClass).length&&!b||p.removeClass(a.mobile.activeBtnClass),p=null}function f(){t=!1,s.length>0&&a.mobile.changePage.apply(null,s.pop())}function g(b,c,d,e){c&&c.data("mobile-page")._trigger("beforehide",null,{nextPage:b}),b.data("mobile-page")._trigger("beforeshow",null,{prevPage:c||a("")}),a.mobile.hidePageLoadingMsg(),d=a.mobile._maybeDegradeTransition(d);var f=a.mobile.transitionHandlers[d||"default"]||a.mobile.defaultTransitionHandler,g=f(d,e,b,c);return g.done(function(){c&&c.data("mobile-page")._trigger("hide",null,{nextPage:b}),b.data("mobile-page")._trigger("show",null,{prevPage:c||a("")})}),g}function h(b,c){c&&b.attr("data-"+a.mobile.ns+"role",c),b.page()}function i(){var b=a.mobile.activePage&&k(a.mobile.activePage);return b||x.hrefNoHash}function j(a){for(;a&&("string"!=typeof a.nodeName||"a"!==a.nodeName.toLowerCase());)a=a.parentNode;return a}function k(b){var c=a(b).closest(".ui-page").jqmData("url"),d=x.hrefNoHash;return c&&n.isPath(c)||(c=d),n.makeUrlAbsolute(c,d)}var l=a.mobile.window,m=(a("html"),a("head")),n=a.extend(a.mobile.path,{getFilePath:function(b){var c="&"+a.mobile.subPageUrlKey;return b&&b.split(c)[0].split(u)[0]},isFirstPageUrl:function(b){var c=n.parseUrl(n.makeUrlAbsolute(b,this.documentBase)),e=c.hrefNoHash===this.documentUrl.hrefNoHash||this.documentBaseDiffers&&c.hrefNoHash===this.documentBase.hrefNoHash,f=a.mobile.firstPage,g=f&&f[0]?f[0].id:d;return e&&(!c.hash||"#"===c.hash||g&&c.hash.replace(/^#/,"")===g)},isPermittedCrossDomainRequest:function(b,c){return a.mobile.allowCrossDomainPages&&"file:"===b.protocol&&-1!==c.search(/^https?:/)}}),o=null,p=null,q=a.Deferred(),r=a.mobile.navigate.history,s=[],t=!1,u="&ui-state=dialog",v=m.children("base"),w=n.documentUrl,x=n.documentBase,y=(n.documentBaseDiffers,a.mobile.getScreenHeight),z=a.support.dynamicBaseTag?{element:v.length?v:a("<base>",{href:x.hrefNoHash}).prependTo(m),set:function(a){a=n.parseUrl(a).hrefNoHash,z.element.attr("href",n.makeUrlAbsolute(a,x))},reset:function(){z.element.attr("href",x.hrefNoSearch)}}:d;a.mobile.getDocumentUrl=n.getDocumentUrl,a.mobile.getDocumentBase=n.getDocumentBase,a.mobile.back=function(){var a=b.navigator;this.phonegapNavigationEnabled&&a&&a.app&&a.app.backHistory?a.app.backHistory():b.history.back()},a.mobile.focusPage=function(a){var b=a.find("[autofocus]"),c=a.find(".ui-title:eq(0)");return b.length?(b.focus(),void 0):(c.length?c.focus():a.focus(),void 0)};var A,B,C=!0;A=function(){if(C){var b=a.mobile.urlHistory.getActive();if(b){var c=l.scrollTop();b.lastScroll=c<a.mobile.minScrollBack?a.mobile.defaultHomeScroll:c}}},B=function(){setTimeout(A,100)},l.bind(a.support.pushState?"popstate":"hashchange",function(){C=!1}),l.one(a.support.pushState?"popstate":"hashchange",function(){C=!0}),l.one("pagecontainercreate",function(){a.mobile.pageContainer.bind("pagechange",function(){C=!0,l.unbind("scrollstop",B),l.bind("scrollstop",B)})}),l.bind("scrollstop",B),a.mobile._maybeDegradeTransition=a.mobile._maybeDegradeTransition||function(a){return a},a.mobile.resetActivePageHeight=function(b){var c=a("."+a.mobile.activePageClass),d=parseFloat(c.css("padding-top")),e=parseFloat(c.css("padding-bottom")),f=parseFloat(c.css("border-top-width")),g=parseFloat(c.css("border-bottom-width"));b="number"==typeof b?b:y(),c.css("min-height",b-d-e-f-g)},a.fn.animationComplete=function(b){return a.support.cssTransitions?a(this).one("webkitAnimationEnd animationend",b):(setTimeout(b,0),a(this))},a.mobile.path=n,a.mobile.base=z,a.mobile.urlHistory=r,a.mobile.dialogHashKey=u,a.mobile.allowCrossDomainPages=!1,a.mobile._bindPageRemove=function(){var b=a(this);!b.data("mobile-page").options.domCache&&b.is(":jqmData(external-page='true')")&&b.bind("pagehide.remove",function(){var b=a(this),c=new a.Event("pageremove");b.trigger(c),c.isDefaultPrevented()||b.removeWithDependents()})},a.mobile.loadPage=function(b,c){var e=a.Deferred(),f=a.extend({},a.mobile.loadPage.defaults,c),g=null,j=null,k=n.makeUrlAbsolute(b,i());f.data&&"get"===f.type&&(k=n.addSearchParams(k,f.data),f.data=d),f.data&&"post"===f.type&&(f.reloadPage=!0);var l=n.getFilePath(k),m=n.convertUrlToDataUrl(k);if(f.pageContainer=f.pageContainer||a.mobile.pageContainer,g=f.pageContainer.children("[data-"+a.mobile.ns+"url='"+m+"']"),0===g.length&&m&&!n.isPath(m)&&(g=f.pageContainer.children("#"+m).attr("data-"+a.mobile.ns+"url",m).jqmData("url",m)),0===g.length)if(a.mobile.firstPage&&n.isFirstPageUrl(l))a.mobile.firstPage.parent().length&&(g=a(a.mobile.firstPage));else if(n.isEmbeddedPage(l))return e.reject(k,c),e.promise();if(g.length){if(!f.reloadPage)return h(g,f.role),e.resolve(k,c,g),z&&!c.prefetch&&z.set(b),e.promise();j=g}var o=f.pageContainer,p=new a.Event("pagebeforeload"),q={url:b,absUrl:k,dataUrl:m,deferred:e,options:f};if(o.trigger(p,q),p.isDefaultPrevented())return e.promise();if(f.showLoadMsg)var r=setTimeout(function(){a.mobile.showPageLoadingMsg()},f.loadMsgDelay),s=function(){clearTimeout(r),a.mobile.hidePageLoadingMsg()};return!z||"undefined"!=typeof c&&"undefined"!=typeof c.prefetch||z.reset(),a.mobile.allowCrossDomainPages||n.isSameDomain(w,k)?a.ajax({url:l,type:f.type,data:f.data,contentType:f.contentType,dataType:"html",success:function(d,i,o){var p=a("<div></div>"),r=d.match(/<title[^>]*>([^<]*)/)&&RegExp.$1,t=new RegExp("(<[^>]+\\bdata-"+a.mobile.ns+"role=[\"']?page[\"']?[^>]*>)"),u=new RegExp("\\bdata-"+a.mobile.ns+"url=[\"']?([^\"'>]*)[\"']?");if(t.test(d)&&RegExp.$1&&u.test(RegExp.$1)&&RegExp.$1&&(b=l=n.getFilePath(a("<div>"+RegExp.$1+"</div>").text())),!z||"undefined"!=typeof c&&"undefined"!=typeof c.prefetch||z.set(l),p.get(0).innerHTML=d,g=p.find(":jqmData(role='page'), :jqmData(role='dialog')").first(),g.length||(g=a("<div data-"+a.mobile.ns+"role='page'>"+(d.split(/<\/?body[^>]*>/gim)[1]||"")+"</div>")),r&&!g.jqmData("title")&&(~r.indexOf("&")&&(r=a("<div>"+r+"</div>").text()),g.jqmData("title",r)),!a.support.dynamicBaseTag){var v=n.get(l);g.find("[src], link[href], a[rel='external'], :jqmData(ajax='false'), a[target]").each(function(){var b=a(this).is("[href]")?"href":a(this).is("[src]")?"src":"action",c=a(this).attr(b);c=c.replace(location.protocol+"//"+location.host+location.pathname,""),/^(\w+:|#|\/)/.test(c)||a(this).attr(b,v+c)})}g.attr("data-"+a.mobile.ns+"url",n.convertUrlToDataUrl(l)).attr("data-"+a.mobile.ns+"external-page",!0).appendTo(f.pageContainer),g.one("pagecreate",a.mobile._bindPageRemove),h(g,f.role),k.indexOf("&"+a.mobile.subPageUrlKey)>-1&&(g=f.pageContainer.children("[data-"+a.mobile.ns+"url='"+m+"']")),f.showLoadMsg&&s(),q.xhr=o,q.textStatus=i,q.page=g,f.pageContainer.trigger("pageload",q),e.resolve(k,c,g,j)},error:function(b,d,g){z&&z.set(n.get()),q.xhr=b,q.textStatus=d,q.errorThrown=g;var h=new a.Event("pageloadfailed");f.pageContainer.trigger(h,q),h.isDefaultPrevented()||(f.showLoadMsg&&(s(),a.mobile.showPageLoadingMsg(a.mobile.pageLoadErrorMessageTheme,a.mobile.pageLoadErrorMessage,!0),setTimeout(a.mobile.hidePageLoadingMsg,1500)),e.reject(k,c))}}):e.reject(k,c),e.promise()},a.mobile.loadPage.defaults={type:"get",data:d,reloadPage:!1,role:d,showLoadMsg:!1,pageContainer:d,loadMsgDelay:50},a.mobile.changePage=function(b,j){if(t)return s.unshift(arguments),void 0;var k,l=a.extend({},a.mobile.changePage.defaults,j);l.pageContainer=l.pageContainer||a.mobile.pageContainer,l.fromPage=l.fromPage||a.mobile.activePage,k="string"==typeof b;var m=l.pageContainer,o=new a.Event("pagebeforechange"),p={toPage:b,options:l};if(p.absUrl=k?n.makeUrlAbsolute(b,i()):b.data("absUrl"),m.trigger(o,p),!o.isDefaultPrevented()){if(b=p.toPage,k="string"==typeof b,t=!0,k)return l.target=b,a.mobile.loadPage(b,l).done(function(b,c,d,e){t=!1,c.duplicateCachedPage=e,d.data("absUrl",p.absUrl),a.mobile.changePage(d,c)}).fail(function(){e(!0),f(),l.pageContainer.trigger("pagechangefailed",p)}),void 0;b[0]!==a.mobile.firstPage[0]||l.dataUrl||(l.dataUrl=w.hrefNoHash);var q=l.fromPage,v=l.dataUrl&&n.convertUrlToDataUrl(l.dataUrl)||b.jqmData("url"),x=v,y=(n.getFilePath(v),r.getActive()),z=0===r.activeIndex,A=0,B=c.title,C="dialog"===l.role||"dialog"===b.jqmData("role");if(q&&q[0]===b[0]&&!l.allowSamePageTransition)return t=!1,m.trigger("pagechange",p),l.fromHashChange&&r.direct({url:v}),void 0;h(b,l.role),l.fromHashChange&&(A="back"===j.direction?-1:1);try{c.activeElement&&"body"!==c.activeElement.nodeName.toLowerCase()?a(c.activeElement).blur():a("input:focus, textarea:focus, select:focus").blur()}catch(D){}var E=!1;C&&y&&(y.url&&y.url.indexOf(u)>-1&&a.mobile.activePage&&!a.mobile.activePage.is(".ui-dialog")&&r.activeIndex>0&&(l.changeHash=!1,E=!0),v=y.url||"",v+=!E&&v.indexOf("#")>-1?u:"#"+u,0===r.activeIndex&&v===r.initialDst&&(v+=u));var F=y?b.jqmData("title")||b.children(":jqmData(role='header')").find(".ui-title").text():B;if(F&&B===c.title&&(B=F),b.jqmData("title")||b.jqmData("title",B),l.transition=l.transition||(A&&!z?y.transition:d)||(C?a.mobile.defaultDialogTransition:a.mobile.defaultPageTransition),!A&&E&&(r.getActive().pageUrl=x),v&&!l.fromHashChange){var G;!n.isPath(v)&&v.indexOf("#")<0&&(v="#"+v),G={transition:l.transition,title:B,pageUrl:x,role:l.role},l.changeHash!==!1&&a.mobile.hashListeningEnabled?a.mobile.navigate(v,G,!0):b[0]!==a.mobile.firstPage[0]&&a.mobile.navigate.history.add(v,G)}c.title=B,a.mobile.activePage=b,l.reverse=l.reverse||0>A,g(b,q,l.transition,l.reverse).done(function(c,d,g,h,i){e(),l.duplicateCachedPage&&l.duplicateCachedPage.remove(),i||a.mobile.focusPage(b),f(),m.trigger("pagechange",p)})}},a.mobile.changePage.defaults={transition:d,reverse:!1,changeHash:!0,fromHashChange:!1,role:d,duplicateCachedPage:d,pageContainer:d,showLoadMsg:!0,dataUrl:d,fromPage:d,allowSamePageTransition:!1},a.mobile.navreadyDeferred=a.Deferred(),a.mobile._registerInternalEvents=function(){var c=function(b,c){var d,e,f,g,h=!0;return!a.mobile.ajaxEnabled||b.is(":jqmData(ajax='false')")||!b.jqmHijackable().length||b.attr("target")?!1:(d=b.attr("action"),g=(b.attr("method")||"get").toLowerCase(),d||(d=k(b),"get"===g&&(d=n.parseUrl(d).hrefNoSearch),d===x.hrefNoHash&&(d=w.hrefNoSearch)),d=n.makeUrlAbsolute(d,k(b)),n.isExternal(d)&&!n.isPermittedCrossDomainRequest(w,d)?!1:(c||(e=b.serializeArray(),o&&o[0].form===b[0]&&(f=o.attr("name"),f&&(a.each(e,function(a,b){return b.name===f?(f="",!1):void 0}),f&&e.push({name:f,value:o.attr("value")}))),h={url:d,options:{type:g,data:a.param(e),transition:b.jqmData("transition"),reverse:"reverse"===b.jqmData("direction"),reloadPage:!0}}),h))};a.mobile.document.delegate("form","submit",function(b){var d=c(a(this));d&&(a.mobile.changePage(d.url,d.options),b.preventDefault())}),a.mobile.document.bind("vclick",function(b){var d,f,g=b.target,h=!1;if(!(b.which>1)&&a.mobile.linkBindingEnabled){if(o=a(g),a.data(g,"mobile-button")){if(!c(a(g).closest("form"),!0))return;g.parentNode&&(g=g.parentNode)}else{if(g=j(g),!g||"#"===n.parseUrl(g.getAttribute("href")||"#").hash)return;if(!a(g).jqmHijackable().length)return}~g.className.indexOf("ui-link-inherit")?g.parentNode&&(f=a.data(g.parentNode,"buttonElements")):f=a.data(g,"buttonElements"),f?g=f.outer:h=!0,d=a(g),h&&(d=d.closest(".ui-btn")),d.length>0&&!d.hasClass("ui-disabled")&&(e(!0),p=d,p.addClass(a.mobile.activeBtnClass))}}),a.mobile.document.bind("click",function(c){if(a.mobile.linkBindingEnabled&&!c.isDefaultPrevented()){var f,g=j(c.target),h=a(g);if(g&&!(c.which>1)&&h.jqmHijackable().length){if(f=function(){b.setTimeout(function(){e(!0)},200)},h.is(":jqmData(rel='back')"))return a.mobile.back(),!1;var i=k(h),l=n.makeUrlAbsolute(h.attr("href")||"#",i);if(!a.mobile.ajaxEnabled&&!n.isEmbeddedPage(l))return f(),void 0;if(-1!==l.search("#")){if(l=l.replace(/[^#]*#/,""),!l)return c.preventDefault(),void 0;l=n.isPath(l)?n.makeUrlAbsolute(l,i):n.makeUrlAbsolute("#"+l,w.hrefNoHash)}var m=h.is("[rel='external']")||h.is(":jqmData(ajax='false')")||h.is("[target]"),o=m||n.isExternal(l)&&!n.isPermittedCrossDomainRequest(w,l);if(o)return f(),void 0;var p=h.jqmData("transition"),q="reverse"===h.jqmData("direction")||h.jqmData("back"),r=h.attr("data-"+a.mobile.ns+"rel")||d;a.mobile.changePage(l,{transition:p,reverse:q,role:r,link:h}),c.preventDefault()}}}),a.mobile.document.delegate(".ui-page","pageshow.prefetch",function(){var b=[];a(this).find("a:jqmData(prefetch)").each(function(){var c=a(this),d=c.attr("href");d&&-1===a.inArray(d,b)&&(b.push(d),a.mobile.loadPage(d,{role:c.attr("data-"+a.mobile.ns+"rel"),prefetch:!0}))})}),a.mobile._handleHashChange=function(c,e){var f=n.stripHash(c),g=0===a.mobile.urlHistory.stack.length?"none":d,h={changeHash:!1,fromHashChange:!0,reverse:"back"===e.direction};if(a.extend(h,e,{transition:(r.getLast()||{}).transition||g}),r.activeIndex>0&&f.indexOf(u)>-1&&r.initialDst!==f){if(a.mobile.activePage&&!a.mobile.activePage.is(".ui-dialog"))return"back"===e.direction?a.mobile.back():b.history.forward(),void 0;f=e.pageUrl;var i=a.mobile.urlHistory.getActive();a.extend(h,{role:i.role,transition:i.transition,reverse:"back"===e.direction})}f?(f=n.isPath(f)?f:n.makeUrlAbsolute("#"+f,x),f===n.makeUrlAbsolute("#"+r.initialDst,x)&&r.stack.length&&r.stack[0].url!==r.initialDst.replace(u,"")&&(f=a.mobile.firstPage),a.mobile.changePage(f,h)):a.mobile.changePage(a.mobile.firstPage,h)},l.bind("navigate",function(b,c){var d;b.originalEvent&&b.originalEvent.isDefaultPrevented()||(d=a.event.special.navigate.originalEventName.indexOf("hashchange")>-1?c.state.hash:c.state.url,d||(d=a.mobile.path.parseLocation().hash),d&&"#"!==d&&0!==d.indexOf("#"+a.mobile.path.uiStateKey)||(d=location.href),a.mobile._handleHashChange(d,c.state))}),a.mobile.document.bind("pageshow",a.mobile.resetActivePageHeight),a.mobile.window.bind("throttledresize",a.mobile.resetActivePageHeight)},a(function(){q.resolve()}),a.when(q,a.mobile.navreadyDeferred).done(function(){a.mobile._registerInternalEvents()})}(a),function(a){a.mobile.transitionFallbacks.flip="fade"}(a,this),function(a){a.mobile.transitionFallbacks.flow="fade"}(a,this),function(a){a.mobile.transitionFallbacks.pop="fade"}(a,this),function(a){a.mobile.transitionHandlers.slide=a.mobile.transitionHandlers.simultaneous,a.mobile.transitionFallbacks.slide="fade"}(a,this),function(a){a.mobile.transitionFallbacks.slidedown="fade"}(a,this),function(a){a.mobile.transitionFallbacks.slidefade="fade"}(a,this),function(a){a.mobile.transitionFallbacks.slideup="fade"}(a,this),function(a){a.mobile.transitionFallbacks.turn="fade"}(a,this),function(a){a.mobile.page.prototype.options.degradeInputs={color:!1,date:!1,datetime:!1,"datetime-local":!1,email:!1,month:!1,number:!1,range:"number",search:"text",tel:!1,time:!1,url:!1,week:!1},a.mobile.document.bind("pagecreate create",function(b){var c,d=a.mobile.closestPageData(a(b.target));d&&(c=d.options,a(b.target).find("input").not(d.keepNativeSelector()).each(function(){var b=a(this),d=this.getAttribute("type"),e=c.degradeInputs[d]||"text";if(c.degradeInputs[d]){var f=a("<div>").html(b.clone()).html(),g=f.indexOf(" type=")>-1,h=g?/\s+type=["']?\w+['"]?/:/\/?>/,i=' type="'+e+'" data-'+a.mobile.ns+'type="'+d+'"'+(g?"":">");b.replaceWith(f.replace(h,i))}}))})}(a),function(a){a.widget("mobile.dialog",a.mobile.widget,{options:{closeBtn:"left",closeBtnText:"Close",overlayTheme:"a",corners:!0,initSelector:":jqmData(role='dialog')"},_handlePageBeforeShow:function(){this._isCloseable=!0,this.options.overlayTheme&&this.element.page("removeContainerBackground").page("setContainerBackground",this.options.overlayTheme)},_handlePageBeforeHide:function(){this._isCloseable=!1},_create:function(){var b=this.element,c=this.options.corners?" ui-corner-all":"",d=a("<div/>",{role:"dialog","class":"ui-dialog-contain ui-overlay-shadow"+c});b.addClass("ui-dialog ui-overlay-"+this.options.overlayTheme),b.wrapInner(d),b.bind("vclick submit",function(b){var c,d=a(b.target).closest("vclick"===b.type?"a":"form");d.length&&!d.jqmData("transition")&&(c=a.mobile.urlHistory.getActive()||{},d.attr("data-"+a.mobile.ns+"transition",c.transition||a.mobile.defaultDialogTransition).attr("data-"+a.mobile.ns+"direction","reverse"))}),this._on(b,{pagebeforeshow:"_handlePageBeforeShow",pagebeforehide:"_handlePageBeforeHide"}),a.extend(this,{_createComplete:!1}),this._setCloseBtn(this.options.closeBtn)},_setCloseBtn:function(b){var c,d,e=this;this._headerCloseButton&&(this._headerCloseButton.remove(),this._headerCloseButton=null),"none"!==b&&(d="left"===b?"left":"right",c=a("<a href='#' class='ui-btn-"+d+"' data-"+a.mobile.ns+"icon='delete' data-"+a.mobile.ns+"iconpos='notext'>"+this.options.closeBtnText+"</a>"),this.element.children().find(":jqmData(role='header')").first().prepend(c),this._createComplete&&a.fn.buttonMarkup&&c.buttonMarkup(),this._createComplete=!0,c.bind("click",function(){e.close()}),this._headerCloseButton=c)},_setOption:function(a,b){"closeBtn"===a&&this._setCloseBtn(b),this._super(a,b)},close:function(){var b,c,d=a.mobile.navigate.history;this._isCloseable&&(this._isCloseable=!1,a.mobile.hashListeningEnabled&&d.activeIndex>0?a.mobile.back():(b=Math.max(0,d.activeIndex-1),c=d.stack[b].pageUrl||d.stack[b].url,d.previousIndex=d.activeIndex,d.activeIndex=b,a.mobile.path.isPath(c)||(c=a.mobile.path.makeUrlAbsolute("#"+c)),a.mobile.changePage(c,{direction:"back",changeHash:!1,fromHashChange:!0})))}}),a.mobile.document.delegate(a.mobile.dialog.prototype.options.initSelector,"pagecreate",function(){a.mobile.dialog.prototype.enhance(this)})}(a,this),function(a){a.mobile.page.prototype.options.backBtnText="Back",a.mobile.page.prototype.options.addBackBtn=!1,a.mobile.page.prototype.options.backBtnTheme=null,a.mobile.page.prototype.options.headerTheme="a",a.mobile.page.prototype.options.footerTheme="a",a.mobile.page.prototype.options.contentTheme=null,a.mobile.document.bind("pagecreate",function(b){var c=a(b.target),d=c.data("mobile-page").options,e=c.jqmData("role"),f=d.theme;a(":jqmData(role='header'), :jqmData(role='footer'), :jqmData(role='content')",c).jqmEnhanceable().each(function(){var b,g,h,i,j=a(this),k=j.jqmData("role"),l=j.jqmData("theme"),m=l||d.contentTheme||"dialog"===e&&f;if(j.addClass("ui-"+k),"header"===k||"footer"===k){var n=l||("header"===k?d.headerTheme:d.footerTheme)||f;j.addClass("ui-bar-"+n).attr("role","header"===k?"banner":"contentinfo"),"header"===k&&(b=j.children("a, button"),g=b.hasClass("ui-btn-left"),h=b.hasClass("ui-btn-right"),g=g||b.eq(0).not(".ui-btn-right").addClass("ui-btn-left").length,h=h||b.eq(1).addClass("ui-btn-right").length),d.addBackBtn&&"header"===k&&a(".ui-page").length>1&&c.jqmData("url")!==a.mobile.path.stripHash(location.hash)&&!g&&(i=a("<a href='javascript:void(0);' class='ui-btn-left' data-"+a.mobile.ns+"rel='back' data-"+a.mobile.ns+"icon='arrow-l'>"+d.backBtnText+"</a>").attr("data-"+a.mobile.ns+"theme",d.backBtnTheme||n).prependTo(j)),j.children("h1, h2, h3, h4, h5, h6").addClass("ui-title").attr({role:"heading","aria-level":"1"})}else"content"===k&&(m&&j.addClass("ui-body-"+m),j.attr("role","main"))})})}(a),function(a,b){function d(a){for(var b;a&&(b="string"==typeof a.className&&a.className+" ",!(b&&b.indexOf("ui-btn ")>-1&&b.indexOf("ui-disabled ")<0));)a=a.parentNode;return a}function e(d,e,f,g,h){var i=a.data(d[0],"buttonElements");d.removeClass(e).addClass(f),i&&(i.bcls=a(c.createElement("div")).addClass(i.bcls+" "+f).removeClass(e).attr("class"),g!==b&&(i.hover=g),i.state=h)}var f=function(a,c){var d=a.getAttribute(c);return"true"===d?!0:"false"===d?!1:null===d?b:d};a.fn.buttonMarkup=function(d){var e,h=this,i="data-"+a.mobile.ns;d=d&&"object"===a.type(d)?d:{};for(var j=0;j<h.length;j++){var k,l,m,n,o,p,q=h.eq(j),r=q[0],s=a.extend({},a.fn.buttonMarkup.defaults,{icon:d.icon!==b?d.icon:f(r,i+"icon"),iconpos:d.iconpos!==b?d.iconpos:f(r,i+"iconpos"),theme:d.theme!==b?d.theme:f(r,i+"theme")||a.mobile.getInheritedTheme(q,"c"),inline:d.inline!==b?d.inline:f(r,i+"inline"),shadow:d.shadow!==b?d.shadow:f(r,i+"shadow"),corners:d.corners!==b?d.corners:f(r,i+"corners"),iconshadow:d.iconshadow!==b?d.iconshadow:f(r,i+"iconshadow"),mini:d.mini!==b?d.mini:f(r,i+"mini")},d),t="ui-btn-inner",u="ui-btn-text",v=!1,w="up";for(e in s)s[e]===b||null===s[e]?q.removeAttr(i+e):r.setAttribute(i+e,s[e]);for(p=a.data("INPUT"===r.tagName||"BUTTON"===r.tagName?r.parentNode:r,"buttonElements"),p?(r=p.outer,q=a(r),m=p.inner,n=p.text,a(p.icon).remove(),p.icon=null,v=p.hover,w=p.state):(m=c.createElement(s.wrapperEls),n=c.createElement(s.wrapperEls)),o=s.icon?c.createElement("span"):null,g&&!p&&g(),s.theme||(s.theme=a.mobile.getInheritedTheme(q,"c")),k="ui-btn ",k+=v?"ui-btn-hover-"+s.theme:"",k+=w?" ui-btn-"+w+"-"+s.theme:"",k+=s.shadow?" ui-shadow":"",k+=s.corners?" ui-btn-corner-all":"",s.mini!==b&&(k+=s.mini===!0?" ui-mini":" ui-fullsize"),s.inline!==b&&(k+=s.inline===!0?" ui-btn-inline":" ui-btn-block"),s.icon&&(s.icon="ui-icon-"+s.icon,s.iconpos=s.iconpos||"left",l="ui-icon "+s.icon,s.iconshadow&&(l+=" ui-icon-shadow")),s.iconpos&&(k+=" ui-btn-icon-"+s.iconpos,"notext"!==s.iconpos||q.attr("title")||q.attr("title",q.getEncodedText())),p&&q.removeClass(p.bcls||""),q.removeClass("ui-link").addClass(k),m.className=t,n.className=u,p||m.appendChild(n),o&&(o.className=l,p&&p.icon||(o.innerHTML="&#160;",m.appendChild(o)));r.firstChild&&!p;)n.appendChild(r.firstChild);p||r.appendChild(m),p={hover:v,state:w,bcls:k,outer:r,inner:m,text:n,icon:o},a.data(r,"buttonElements",p),a.data(m,"buttonElements",p),a.data(n,"buttonElements",p),o&&a.data(o,"buttonElements",p)}return this},a.fn.buttonMarkup.defaults={corners:!0,shadow:!0,iconshadow:!0,wrapperEls:"span"};var g=function(){var c,f,h=a.mobile.buttonMarkup.hoverDelay;a.mobile.document.bind({"vmousedown vmousecancel vmouseup vmouseover vmouseout focus blur scrollstart":function(g){var i,j=a(d(g.target)),k=g.originalEvent&&/^touch/.test(g.originalEvent.type),l=g.type;j.length&&(i=j.attr("data-"+a.mobile.ns+"theme"),"vmousedown"===l?k?c=setTimeout(function(){e(j,"ui-btn-up-"+i,"ui-btn-down-"+i,b,"down")},h):e(j,"ui-btn-up-"+i,"ui-btn-down-"+i,b,"down"):"vmousecancel"===l||"vmouseup"===l?e(j,"ui-btn-down-"+i,"ui-btn-up-"+i,b,"up"):"vmouseover"===l||"focus"===l?k?f=setTimeout(function(){e(j,"ui-btn-up-"+i,"ui-btn-hover-"+i,!0,"")},h):e(j,"ui-btn-up-"+i,"ui-btn-hover-"+i,!0,""):("vmouseout"===l||"blur"===l||"scrollstart"===l)&&(e(j,"ui-btn-hover-"+i+" ui-btn-down-"+i,"ui-btn-up-"+i,!1,"up"),c&&clearTimeout(c),f&&clearTimeout(f)))},"focusin focus":function(b){a(d(b.target)).addClass(a.mobile.focusClass)},"focusout blur":function(b){a(d(b.target)).removeClass(a.mobile.focusClass)}}),g=null};a.mobile.document.bind("pagecreate create",function(b){a(":jqmData(role='button'), .ui-bar > a, .ui-header > a, .ui-footer > a, .ui-bar > :jqmData(role='controlgroup') > a",b.target).jqmEnhanceable().not("button, input, .ui-btn, :jqmData(role='none'), :jqmData(role='nojs')").buttonMarkup()})}(a),function(a,b){a.widget("mobile.collapsible",a.mobile.widget,{options:{expandCueText:" click to expand contents",collapseCueText:" click to collapse contents",collapsed:!0,heading:"h1,h2,h3,h4,h5,h6,legend",collapsedIcon:"plus",expandedIcon:"minus",iconpos:"left",theme:null,contentTheme:null,inset:!0,corners:!0,mini:!1,initSelector:":jqmData(role='collapsible')"},_create:function(){var c=this.element,d=this.options,e=c.addClass("ui-collapsible"),f=c.children(d.heading).first(),g=e.wrapInner("<div class='ui-collapsible-content'></div>").children(".ui-collapsible-content"),h=c.closest(":jqmData(role='collapsible-set')").addClass("ui-collapsible-set"),i="";f.is("legend")&&(f=a("<div role='heading'>"+f.html()+"</div>").insertBefore(f),f.next().remove()),h.length?(d.theme||(d.theme=h.jqmData("theme")||a.mobile.getInheritedTheme(h,"c")),d.contentTheme||(d.contentTheme=h.jqmData("content-theme")),d.collapsedIcon=c.jqmData("collapsed-icon")||h.jqmData("collapsed-icon")||d.collapsedIcon,d.expandedIcon=c.jqmData("expanded-icon")||h.jqmData("expanded-icon")||d.expandedIcon,d.iconpos=c.jqmData("iconpos")||h.jqmData("iconpos")||d.iconpos,d.inset=h.jqmData("inset")!==b?h.jqmData("inset"):!0,d.corners=!1,d.mini||(d.mini=h.jqmData("mini"))):d.theme||(d.theme=a.mobile.getInheritedTheme(c,"c")),d.inset&&(i+=" ui-collapsible-inset",d.corners&&(i+=" ui-corner-all")),d.contentTheme&&(i+=" ui-collapsible-themed-content",g.addClass("ui-body-"+d.contentTheme)),""!==i&&e.addClass(i),f.insertBefore(g).addClass("ui-collapsible-heading").append("<span class='ui-collapsible-heading-status'></span>").wrapInner("<a href='#' class='ui-collapsible-heading-toggle'></a>").find("a").first().buttonMarkup({shadow:!1,corners:!1,iconpos:d.iconpos,icon:d.collapsedIcon,mini:d.mini,theme:d.theme}),e.bind("expand collapse",function(b){if(!b.isDefaultPrevented()){var c=a(this),e="collapse"===b.type;b.preventDefault(),f.toggleClass("ui-collapsible-heading-collapsed",e).find(".ui-collapsible-heading-status").text(e?d.expandCueText:d.collapseCueText).end().find(".ui-icon").toggleClass("ui-icon-"+d.expandedIcon,!e).toggleClass("ui-icon-"+d.collapsedIcon,e||d.expandedIcon===d.collapsedIcon).end().find("a").first().removeClass(a.mobile.activeBtnClass),c.toggleClass("ui-collapsible-collapsed",e),g.toggleClass("ui-collapsible-content-collapsed",e).attr("aria-hidden",e),g.trigger("updatelayout")}}).trigger(d.collapsed?"collapse":"expand"),f.bind("tap",function(){f.find("a").first().addClass(a.mobile.activeBtnClass)}).bind("click",function(a){var b=f.is(".ui-collapsible-heading-collapsed")?"expand":"collapse";e.trigger(b),a.preventDefault(),a.stopPropagation()})}}),a.mobile.document.bind("pagecreate create",function(b){a.mobile.collapsible.prototype.enhanceWithin(b.target)})}(a),function(a){a.mobile.behaviors.addFirstLastClasses={_getVisibles:function(a,b){var c;return b?c=a.not(".ui-screen-hidden"):(c=a.filter(":visible"),0===c.length&&(c=a.not(".ui-screen-hidden"))),c},_addFirstLastClasses:function(a,b,c){a.removeClass("ui-first-child ui-last-child"),b.eq(0).addClass("ui-first-child").end().last().addClass("ui-last-child"),c||this.element.trigger("updatelayout")}}}(a),function(a,b){a.widget("mobile.collapsibleset",a.mobile.widget,a.extend({options:{initSelector:":jqmData(role='collapsible-set')"},_create:function(){var c=this.element.addClass("ui-collapsible-set"),d=this.options;d.theme||(d.theme=a.mobile.getInheritedTheme(c,"c")),d.contentTheme||(d.contentTheme=c.jqmData("content-theme")),d.corners||(d.corners=c.jqmData("corners")),c.jqmData("inset")!==b&&(d.inset=c.jqmData("inset")),d.inset=d.inset!==b?d.inset:!0,d.corners=d.corners!==b?d.corners:!0,d.corners&&d.inset&&c.addClass("ui-corner-all"),c.jqmData("collapsiblebound")||c.jqmData("collapsiblebound",!0).bind("expand",function(b){var c=a(b.target).closest(".ui-collapsible");
	c.parent().is(":jqmData(role='collapsible-set')")&&c.siblings(".ui-collapsible").trigger("collapse")})},_init:function(){var a=this.element,b=a.children(":jqmData(role='collapsible')"),c=b.filter(":jqmData(collapsed='false')");this._refresh("true"),c.trigger("expand")},_refresh:function(b){var c=this.element.children(":jqmData(role='collapsible')");a.mobile.collapsible.prototype.enhance(c.not(".ui-collapsible")),this._addFirstLastClasses(c,this._getVisibles(c,b),b)},refresh:function(){this._refresh(!1)}},a.mobile.behaviors.addFirstLastClasses)),a.mobile.document.bind("pagecreate create",function(b){a.mobile.collapsibleset.prototype.enhanceWithin(b.target)})}(a),function(a){a.fn.fieldcontain=function(){return this.addClass("ui-field-contain ui-body ui-br").contents().filter(function(){return 3===this.nodeType&&!/\S/.test(this.nodeValue)}).remove()},a(c).bind("pagecreate create",function(b){a(":jqmData(role='fieldcontain')",b.target).jqmEnhanceable().fieldcontain()})}(a),function(a){a.fn.grid=function(b){return this.each(function(){var c,d=a(this),e=a.extend({grid:null},b),f=d.children(),g={solo:1,a:2,b:3,c:4,d:5},h=e.grid;if(!h)if(f.length<=5)for(var i in g)g[i]===f.length&&(h=i);else h="a",d.addClass("ui-grid-duo");c=g[h],d.addClass("ui-grid-"+h),f.filter(":nth-child("+c+"n+1)").addClass("ui-block-a"),c>1&&f.filter(":nth-child("+c+"n+2)").addClass("ui-block-b"),c>2&&f.filter(":nth-child("+c+"n+3)").addClass("ui-block-c"),c>3&&f.filter(":nth-child("+c+"n+4)").addClass("ui-block-d"),c>4&&f.filter(":nth-child("+c+"n+5)").addClass("ui-block-e")})}}(a),function(a,b){a.widget("mobile.navbar",a.mobile.widget,{options:{iconpos:"top",grid:null,initSelector:":jqmData(role='navbar')"},_create:function(){var d=this.element,e=d.find("a"),f=e.filter(":jqmData(icon)").length?this.options.iconpos:b;d.addClass("ui-navbar ui-mini").attr("role","navigation").find("ul").jqmEnhanceable().grid({grid:this.options.grid}),e.buttonMarkup({corners:!1,shadow:!1,inline:!0,iconpos:f}),d.delegate("a","vclick",function(b){var d=a(b.target).is("a")?a(this):a(this).parent("a");if(!d.is(".ui-disabled, .ui-btn-active")){e.removeClass(a.mobile.activeBtnClass),a(this).addClass(a.mobile.activeBtnClass);var f=a(this);a(c).one("pagehide",function(){f.removeClass(a.mobile.activeBtnClass)})}}),d.closest(".ui-page").bind("pagebeforeshow",function(){e.filter(".ui-state-persist").addClass(a.mobile.activeBtnClass)})}}),a.mobile.document.bind("pagecreate create",function(b){a.mobile.navbar.prototype.enhanceWithin(b.target)})}(a),function(a){var b={};a.widget("mobile.listview",a.mobile.widget,a.extend({options:{theme:null,countTheme:"c",headerTheme:"b",dividerTheme:"b",icon:"arrow-r",splitIcon:"arrow-r",splitTheme:"b",corners:!0,shadow:!0,inset:!1,initSelector:":jqmData(role='listview')"},_create:function(){var a=this,b="";b+=a.options.inset?" ui-listview-inset":"",a.options.inset&&(b+=a.options.corners?" ui-corner-all":"",b+=a.options.shadow?" ui-shadow":""),a.element.addClass(function(a,c){return c+" ui-listview"+b}),a.refresh(!0)},_findFirstElementByTagName:function(a,b,c,d){var e={};for(e[c]=e[d]=!0;a;){if(e[a.nodeName])return a;a=a[b]}return null},_getChildrenByTagName:function(b,c,d){var e=[],f={};for(f[c]=f[d]=!0,b=b.firstChild;b;)f[b.nodeName]&&e.push(b),b=b.nextSibling;return a(e)},_addThumbClasses:function(b){var c,d,e=b.length;for(c=0;e>c;c++)d=a(this._findFirstElementByTagName(b[c].firstChild,"nextSibling","img","IMG")),d.length&&(d.addClass("ui-li-thumb"),a(this._findFirstElementByTagName(d[0].parentNode,"parentNode","li","LI")).addClass(d.is(".ui-li-icon")?"ui-li-has-icon":"ui-li-has-thumb"))},refresh:function(b){this.parentPage=this.element.closest(".ui-page"),this._createSubPages();var d,e,f,g,h,i,j,k,l,m,n,o,p=this.options,q=this.element,r=q.jqmData("dividertheme")||p.dividerTheme,s=q.jqmData("splittheme"),t=q.jqmData("spliticon"),u=q.jqmData("icon"),v=this._getChildrenByTagName(q[0],"li","LI"),w=!!a.nodeName(q[0],"ol"),x=!a.support.cssPseudoElement,y=q.attr("start"),z={};w&&x&&q.find(".ui-li-dec").remove(),w&&(y||0===y?x?j=parseInt(y,10):(k=parseInt(y,10)-1,q.css("counter-reset","listnumbering "+k)):x&&(j=1)),p.theme||(p.theme=a.mobile.getInheritedTheme(this.element,"c"));for(var A=0,B=v.length;B>A;A++){if(d=v.eq(A),e="ui-li",b||!d.hasClass("ui-li")){f=d.jqmData("theme")||p.theme,g=this._getChildrenByTagName(d[0],"a","A");var C="list-divider"===d.jqmData("role");g.length&&!C?(n=d.jqmData("icon"),d.buttonMarkup({wrapperEls:"div",shadow:!1,corners:!1,iconpos:"right",icon:g.length>1||n===!1?!1:n||u||p.icon,theme:f}),n!==!1&&1===g.length&&d.addClass("ui-li-has-arrow"),g.first().removeClass("ui-link").addClass("ui-link-inherit"),g.length>1&&(e+=" ui-li-has-alt",h=g.last(),i=s||h.jqmData("theme")||p.splitTheme,o=h.jqmData("icon"),h.appendTo(d).attr("title",a.trim(h.getEncodedText())).addClass("ui-li-link-alt").empty().buttonMarkup({shadow:!1,corners:!1,theme:f,icon:!1,iconpos:"notext"}).find(".ui-btn-inner").append(a(c.createElement("span")).buttonMarkup({shadow:!0,corners:!0,theme:i,iconpos:"notext",icon:o||n||t||p.splitIcon})))):C?(e+=" ui-li-divider ui-bar-"+(d.jqmData("theme")||r),d.attr("role","heading"),w&&(y||0===y?x?j=parseInt(y,10):(l=parseInt(y,10)-1,d.css("counter-reset","listnumbering "+l)):x&&(j=1))):e+=" ui-li-static ui-btn-up-"+f}w&&x&&e.indexOf("ui-li-divider")<0&&(m=e.indexOf("ui-li-static")>0?d:d.find(".ui-link-inherit"),m.addClass("ui-li-jsnumbering").prepend("<span class='ui-li-dec'>"+j++ +". </span>")),z[e]||(z[e]=[]),z[e].push(d[0])}for(e in z)a(z[e]).addClass(e).children(".ui-btn-inner").addClass(e);q.find("h1, h2, h3, h4, h5, h6").addClass("ui-li-heading").end().find("p, dl").addClass("ui-li-desc").end().find(".ui-li-aside").each(function(){var b=a(this);b.prependTo(b.parent())}).end().find(".ui-li-count").each(function(){a(this).closest("li").addClass("ui-li-has-count")}).addClass("ui-btn-up-"+(q.jqmData("counttheme")||this.options.countTheme)+" ui-btn-corner-all"),this._addThumbClasses(v),this._addThumbClasses(q.find(".ui-link-inherit")),this._addFirstLastClasses(v,this._getVisibles(v,b),b),this._trigger("afterrefresh")},_idStringEscape:function(a){return a.replace(/[^a-zA-Z0-9]/g,"-")},_createSubPages:function(){var c,d=this.element,e=d.closest(".ui-page"),f=e.jqmData("url"),g=f||e[0][a.expando],h=d.attr("id"),i=this.options,j="data-"+a.mobile.ns,k=this,l=e.find(":jqmData(role='footer')").jqmData("id");if("undefined"==typeof b[g]&&(b[g]=-1),h=h||++b[g],a(d.find("li>ul, li>ol").toArray().reverse()).each(function(b){var e,g,k=a(this),m=k.attr("id")||h+"-"+b,n=k.parent(),o=a(k.prevAll().toArray().reverse()),p=o.length?o:a("<span>"+a.trim(n.contents()[0].nodeValue)+"</span>"),q=p.first().getEncodedText(),r=(f||"")+"&"+a.mobile.subPageUrlKey+"="+m,s=k.jqmData("theme")||i.theme,t=k.jqmData("counttheme")||d.jqmData("counttheme")||i.countTheme;c=!0,e=k.detach().wrap("<div "+j+"role='page' "+j+"url='"+r+"' "+j+"theme='"+s+"' "+j+"count-theme='"+t+"'><div "+j+"role='content'></div></div>").parent().before("<div "+j+"role='header' "+j+"theme='"+i.headerTheme+"'><div class='ui-title'>"+q+"</div></div>").after(l?a("<div "+j+"role='footer' "+j+"id='"+l+"'>"):"").parent().appendTo(a.mobile.pageContainer),e.page(),g=n.find("a:first"),g.length||(g=a("<a/>").html(p||q).prependTo(n.empty())),g.attr("href","#"+r)}).listview(),c&&e.is(":jqmData(external-page='true')")&&e.data("mobile-page").options.domCache===!1){var m=function(b,c){var d,g=c.nextPage,h=new a.Event("pageremove");c.nextPage&&(d=g.jqmData("url"),0!==d.indexOf(f+"&"+a.mobile.subPageUrlKey)&&(k.childPages().remove(),e.trigger(h),h.isDefaultPrevented()||e.removeWithDependents()))};e.unbind("pagehide.remove").bind("pagehide.remove",m)}},childPages:function(){var b=this.parentPage.jqmData("url");return a(":jqmData(url^='"+b+"&"+a.mobile.subPageUrlKey+"')")}},a.mobile.behaviors.addFirstLastClasses)),a.mobile.document.bind("pagecreate create",function(b){a.mobile.listview.prototype.enhanceWithin(b.target)})}(a),function(a){var b=a("meta[name=viewport]"),c=b.attr("content"),d=c+",maximum-scale=1, user-scalable=no",e=c+",maximum-scale=10, user-scalable=yes",f=/(user-scalable[\s]*=[\s]*no)|(maximum-scale[\s]*=[\s]*1)[$,\s]/.test(c);a.mobile.zoom=a.extend({},{enabled:!f,locked:!1,disable:function(c){f||a.mobile.zoom.locked||(b.attr("content",d),a.mobile.zoom.enabled=!1,a.mobile.zoom.locked=c||!1)},enable:function(c){f||a.mobile.zoom.locked&&c!==!0||(b.attr("content",e),a.mobile.zoom.enabled=!0,a.mobile.zoom.locked=!1)},restore:function(){f||(b.attr("content",c),a.mobile.zoom.enabled=!0)}})}(a),function(a){a.widget("mobile.textinput",a.mobile.widget,{options:{theme:null,mini:!1,preventFocusZoom:/iPhone|iPad|iPod/.test(navigator.platform)&&navigator.userAgent.indexOf("AppleWebKit")>-1,initSelector:"input[type='text'], input[type='search'], :jqmData(type='search'), input[type='number'], :jqmData(type='number'), input[type='password'], input[type='email'], input[type='url'], input[type='tel'], textarea, input[type='time'], input[type='date'], input[type='month'], input[type='week'], input[type='datetime'], input[type='datetime-local'], input[type='color'], input:not([type]), input[type='file']",clearBtn:!1,clearSearchButtonText:null,clearBtnText:"clear text",disabled:!1},_create:function(){function b(){setTimeout(function(){d.toggleClass("ui-input-clear-hidden",!f.val())},0)}var c,d,e=this,f=this.element,g=this.options,h=g.theme||a.mobile.getInheritedTheme(this.element,"c"),i=" ui-body-"+h,j=g.mini?" ui-mini":"",k=f.is("[type='search'], :jqmData(type='search')"),l=g.clearSearchButtonText||g.clearBtnText,m=f.is("textarea, :jqmData(type='range')"),n=!!g.clearBtn&&!m,o=f.is("input")&&!f.is(":jqmData(type='range')");if(a("label[for='"+f.attr("id")+"']").addClass("ui-input-text"),c=f.addClass("ui-input-text ui-body-"+h),"undefined"==typeof f[0].autocorrect||a.support.touchOverflow||(f[0].setAttribute("autocorrect","off"),f[0].setAttribute("autocomplete","off")),k?c=f.wrap("<div class='ui-input-search ui-shadow-inset ui-btn-corner-all ui-btn-shadow ui-icon-searchfield"+i+j+"'></div>").parent():o&&(c=f.wrap("<div class='ui-input-text ui-shadow-inset ui-corner-all ui-btn-shadow"+i+j+"'></div>").parent()),n||k?(d=a("<a href='#' class='ui-input-clear' title='"+l+"'>"+l+"</a>").bind("click",function(a){f.val("").focus().trigger("change"),d.addClass("ui-input-clear-hidden"),a.preventDefault()}).appendTo(c).buttonMarkup({icon:"delete",iconpos:"notext",corners:!0,shadow:!0,mini:g.mini}),k||c.addClass("ui-input-has-clear"),b(),f.bind("paste cut keyup input focus change blur",b)):o||k||f.addClass("ui-corner-all ui-shadow-inset"+i+j),f.focus(function(){g.preventFocusZoom&&a.mobile.zoom.disable(!0),c.addClass(a.mobile.focusClass)}).blur(function(){c.removeClass(a.mobile.focusClass),g.preventFocusZoom&&a.mobile.zoom.enable(!0)}),f.is("textarea")){var p,q=15,r=100;this._keyup=function(){var a=f[0].scrollHeight,b=f[0].clientHeight;if(a>b){var c=parseFloat(f.css("padding-top")),d=parseFloat(f.css("padding-bottom")),e=c+d;f.height(a-e+q)}},f.on("keyup change input paste",function(){clearTimeout(p),p=setTimeout(e._keyup,r)}),this._on(!0,a.mobile.document,{pagechange:"_keyup"}),a.trim(f.val())&&this._on(!0,a.mobile.window,{load:"_keyup"})}f.attr("disabled")&&this.disable()},disable:function(){var a,b=this.element.is("[type='search'], :jqmData(type='search')"),c=this.element.is("input")&&!this.element.is(":jqmData(type='range')"),d=this.element.attr("disabled",!0)&&(c||b);return a=d?this.element.parent():this.element,a.addClass("ui-disabled"),this._setOption("disabled",!0)},enable:function(){var a,b=this.element.is("[type='search'], :jqmData(type='search')"),c=this.element.is("input")&&!this.element.is(":jqmData(type='range')"),d=this.element.attr("disabled",!1)&&(c||b);return a=d?this.element.parent():this.element,a.removeClass("ui-disabled"),this._setOption("disabled",!1)}}),a.mobile.document.bind("pagecreate create",function(b){a.mobile.textinput.prototype.enhanceWithin(b.target,!0)})}(a),function(a){a.mobile.listview.prototype.options.filter=!1,a.mobile.listview.prototype.options.filterPlaceholder="Filter items...",a.mobile.listview.prototype.options.filterTheme="c",a.mobile.listview.prototype.options.filterReveal=!1;var b=function(a,b){return-1===a.toString().toLowerCase().indexOf(b)};a.mobile.listview.prototype.options.filterCallback=b,a.mobile.document.delegate("ul, ol","listviewcreate",function(){var c=a(this),d=c.data("mobile-listview");if(d&&d.options.filter){d.options.filterReveal&&c.children().addClass("ui-screen-hidden");var e=a("<form>",{"class":"ui-listview-filter ui-bar-"+d.options.filterTheme,role:"search"}).submit(function(a){a.preventDefault(),g.blur()}),f=function(){var e,f=a(this),g=this.value.toLowerCase(),h=null,i=c.children(),j=f.jqmData("lastval")+"",k=!1,l="",m=d.options.filterCallback!==b;if(!j||j!==g){if(d._trigger("beforefilter","beforefilter",{input:this}),f.jqmData("lastval",g),m||g.length<j.length||0!==g.indexOf(j)?h=c.children():(h=c.children(":not(.ui-screen-hidden)"),!h.length&&d.options.filterReveal&&(h=c.children(".ui-screen-hidden"))),g){for(var n=h.length-1;n>=0;n--)e=a(h[n]),l=e.jqmData("filtertext")||e.text(),e.is("li:jqmData(role=list-divider)")?(e.toggleClass("ui-filter-hidequeue",!k),k=!1):d.options.filterCallback(l,g,e)?e.toggleClass("ui-filter-hidequeue",!0):k=!0;h.filter(":not(.ui-filter-hidequeue)").toggleClass("ui-screen-hidden",!1),h.filter(".ui-filter-hidequeue").toggleClass("ui-screen-hidden",!0).toggleClass("ui-filter-hidequeue",!1)}else h.toggleClass("ui-screen-hidden",!!d.options.filterReveal);d._addFirstLastClasses(i,d._getVisibles(i,!1),!1)}},g=a("<input>",{placeholder:d.options.filterPlaceholder}).attr("data-"+a.mobile.ns+"type","search").jqmData("lastval","").bind("keyup change input",f).appendTo(e).textinput();d.options.inset&&e.addClass("ui-listview-filter-inset"),e.bind("submit",function(){return!1}).insertBefore(c)}})}(a),function(a){a.mobile.listview.prototype.options.autodividers=!1,a.mobile.listview.prototype.options.autodividersSelector=function(b){var c=a.trim(b.text())||null;return c?c=c.slice(0,1).toUpperCase():null},a.mobile.document.delegate("ul,ol","listviewcreate",function(){var b=a(this),d=b.data("mobile-listview");if(d&&d.options.autodividers){var e=function(){b.find("li:jqmData(role='list-divider')").remove();for(var e,f,g=b.find("li"),h=null,i=0;i<g.length;i++){if(e=g[i],f=d.options.autodividersSelector(a(e)),f&&h!==f){var j=c.createElement("li");j.appendChild(c.createTextNode(f)),j.setAttribute("data-"+a.mobile.ns+"role","list-divider"),e.parentNode.insertBefore(j,e)}h=f}},f=function(){b.unbind("listviewafterrefresh",f),e(),d.refresh(),b.bind("listviewafterrefresh",f)};f()}})}(a),function(a){a(c).bind("pagecreate create",function(b){a(":jqmData(role='nojs')",b.target).addClass("ui-nojs")})}(a),function(a){a.mobile.behaviors.formReset={_handleFormReset:function(){this._on(this.element.closest("form"),{reset:function(){this._delay("_reset")}})}}}(a),function(a){a.widget("mobile.checkboxradio",a.mobile.widget,a.extend({options:{theme:null,mini:!1,initSelector:"input[type='checkbox'],input[type='radio']"},_create:function(){var b=this,d=this.element,e=this.options,f=function(a,b){return a.jqmData(b)||a.closest("form, fieldset").jqmData(b)},g=a(d).closest("label"),h=g.length?g:a(d).closest("form, fieldset, :jqmData(role='page'), :jqmData(role='dialog')").find("label").filter("[for='"+d[0].id+"']").first(),i=d[0].type,j=f(d,"mini")||e.mini,k=i+"-on",l=i+"-off",m=f(d,"iconpos"),n="ui-"+k,o="ui-"+l;if("checkbox"===i||"radio"===i){a.extend(this,{label:h,inputtype:i,checkedClass:n,uncheckedClass:o,checkedicon:k,uncheckedicon:l}),e.theme||(e.theme=a.mobile.getInheritedTheme(this.element,"c")),h.buttonMarkup({theme:e.theme,icon:l,shadow:!1,mini:j,iconpos:m});var p=c.createElement("div");p.className="ui-"+i,d.add(h).wrapAll(p),h.bind({vmouseover:function(b){a(this).parent().is(".ui-disabled")&&b.stopPropagation()},vclick:function(a){return d.is(":disabled")?(a.preventDefault(),void 0):(b._cacheVals(),d.prop("checked","radio"===i&&!0||!d.prop("checked")),d.triggerHandler("click"),b._getInputSet().not(d).prop("checked",!1),b._updateAll(),!1)}}),d.bind({vmousedown:function(){b._cacheVals()},vclick:function(){var c=a(this);c.is(":checked")?(c.prop("checked",!0),b._getInputSet().not(c).prop("checked",!1)):c.prop("checked",!1),b._updateAll()},focus:function(){h.addClass(a.mobile.focusClass)},blur:function(){h.removeClass(a.mobile.focusClass)}}),this._handleFormReset(),this.refresh()}},_cacheVals:function(){this._getInputSet().each(function(){a(this).jqmData("cacheVal",this.checked)})},_getInputSet:function(){return"checkbox"===this.inputtype?this.element:this.element.closest("form, :jqmData(role='page'), :jqmData(role='dialog')").find("input[name='"+this.element[0].name+"'][type='"+this.inputtype+"']")},_updateAll:function(){var b=this;this._getInputSet().each(function(){var c=a(this);(this.checked||"checkbox"===b.inputtype)&&c.trigger("change")}).checkboxradio("refresh")},_reset:function(){this.refresh()},refresh:function(){var b=this.element[0],c=" "+a.mobile.activeBtnClass,d=this.checkedClass+(this.element.parents(".ui-controlgroup-horizontal").length?c:""),e=this.label;b.checked?e.removeClass(this.uncheckedClass+c).addClass(d).buttonMarkup({icon:this.checkedicon}):e.removeClass(d).addClass(this.uncheckedClass).buttonMarkup({icon:this.uncheckedicon}),b.disabled?this.disable():this.enable()},disable:function(){this.element.prop("disabled",!0).parent().addClass("ui-disabled")},enable:function(){this.element.prop("disabled",!1).parent().removeClass("ui-disabled")}},a.mobile.behaviors.formReset)),a.mobile.document.bind("pagecreate create",function(b){a.mobile.checkboxradio.prototype.enhanceWithin(b.target,!0)})}(a),function(a){a.widget("mobile.button",a.mobile.widget,{options:{theme:null,icon:null,iconpos:null,corners:!0,shadow:!0,iconshadow:!0,inline:null,mini:null,initSelector:"button, [type='button'], [type='submit'], [type='reset']"},_create:function(){var b,c=this.element,d=function(a){var b,c={};for(b in a)null!==a[b]&&"initSelector"!==b&&(c[b]=a[b]);return c}(this.options),e="";return"A"===c[0].tagName?(c.hasClass("ui-btn")||c.buttonMarkup(),void 0):(this.options.theme||(this.options.theme=a.mobile.getInheritedTheme(this.element,"c")),~c[0].className.indexOf("ui-btn-left")&&(e="ui-btn-left"),~c[0].className.indexOf("ui-btn-right")&&(e="ui-btn-right"),("submit"===c.attr("type")||"reset"===c.attr("type"))&&(e?e+=" ui-submit":e="ui-submit"),a("label[for='"+c.attr("id")+"']").addClass("ui-submit"),this.button=a("<div></div>")[c.html()?"html":"text"](c.html()||c.val()).insertBefore(c).buttonMarkup(d).addClass(e).append(c.addClass("ui-btn-hidden")),b=this.button,c.bind({focus:function(){b.addClass(a.mobile.focusClass)},blur:function(){b.removeClass(a.mobile.focusClass)}}),this.refresh(),void 0)},_setOption:function(b,c){var d={};d[b]=c,"initSelector"!==b&&(this.button.buttonMarkup(d),this.element.attr("data-"+(a.mobile.ns||"")+b.replace(/([A-Z])/,"-$1").toLowerCase(),c)),this._super("_setOption",b,c)},enable:function(){return this.element.attr("disabled",!1),this.button.removeClass("ui-disabled").attr("aria-disabled",!1),this._setOption("disabled",!1)},disable:function(){return this.element.attr("disabled",!0),this.button.addClass("ui-disabled").attr("aria-disabled",!0),this._setOption("disabled",!0)},refresh:function(){var b=this.element;b.prop("disabled")?this.disable():this.enable(),a(this.button.data("buttonElements").text)[b.html()?"html":"text"](b.html()||b.val())}}),a.mobile.document.bind("pagecreate create",function(b){a.mobile.button.prototype.enhanceWithin(b.target,!0)})}(a),function(a,d){a.widget("mobile.slider",a.mobile.widget,a.extend({widgetEventPrefix:"slide",options:{theme:null,trackTheme:null,disabled:!1,initSelector:"input[type='range'], :jqmData(type='range'), :jqmData(role='slider')",mini:!1,highlight:!1},_create:function(){var e,f,g=this,h=this.element,i=a.mobile.getInheritedTheme(h,"c"),j=this.options.theme||i,k=this.options.trackTheme||i,l=h[0].nodeName.toLowerCase(),m=(this.isToggleSwitch="select"===l,h.parent().is(":jqmData(role='rangeslider')")),n=this.isToggleSwitch?"ui-slider-switch":"",o=h.attr("id"),p=a("[for='"+o+"']"),q=p.attr("id")||o+"-label",r=p.attr("id",q),s=this.isToggleSwitch?0:parseFloat(h.attr("min")),t=this.isToggleSwitch?h.find("option").length-1:parseFloat(h.attr("max")),u=b.parseFloat(h.attr("step")||1),v=this.options.mini||h.jqmData("mini")?" ui-mini":"",w=c.createElement("a"),x=a(w),y=c.createElement("div"),z=a(y),A=this.options.highlight&&!this.isToggleSwitch?function(){var b=c.createElement("div");return b.className="ui-slider-bg "+a.mobile.activeBtnClass+" ui-btn-corner-all",a(b).prependTo(z)}():!1;if(w.setAttribute("href","#"),y.setAttribute("role","application"),y.className=[this.isToggleSwitch?"ui-slider ":"ui-slider-track ",n," ui-btn-down-",k," ui-btn-corner-all",v].join(""),w.className="ui-slider-handle",y.appendChild(w),x.buttonMarkup({corners:!0,theme:j,shadow:!0}).attr({role:"slider","aria-valuemin":s,"aria-valuemax":t,"aria-valuenow":this._value(),"aria-valuetext":this._value(),title:this._value(),"aria-labelledby":q}),a.extend(this,{slider:z,handle:x,type:l,step:u,max:t,min:s,valuebg:A,isRangeslider:m,dragging:!1,beforeStart:null,userModified:!1,mouseMoved:!1}),this.isToggleSwitch){f=c.createElement("div"),f.className="ui-slider-inneroffset";for(var B=0,C=y.childNodes.length;C>B;B++)f.appendChild(y.childNodes[B]);y.appendChild(f),x.addClass("ui-slider-handle-snapping"),e=h.find("option");for(var D=0,E=e.length;E>D;D++){var F=D?"a":"b",G=D?" "+a.mobile.activeBtnClass:" ui-btn-down-"+k,H=(c.createElement("div"),c.createElement("span"));H.className=["ui-slider-label ui-slider-label-",F,G," ui-btn-corner-all"].join(""),H.setAttribute("role","img"),H.appendChild(c.createTextNode(e[D].innerHTML)),a(H).prependTo(z)}g._labels=a(".ui-slider-label",z)}r.addClass("ui-slider"),h.addClass(this.isToggleSwitch?"ui-slider-switch":"ui-slider-input"),this._on(h,{change:"_controlChange",keyup:"_controlKeyup",blur:"_controlBlur",vmouseup:"_controlVMouseUp"}),z.bind("vmousedown",a.proxy(this._sliderVMouseDown,this)).bind("vclick",!1),this._on(c,{vmousemove:"_preventDocumentDrag"}),this._on(z.add(c),{vmouseup:"_sliderVMouseUp"}),z.insertAfter(h),this.isToggleSwitch||m||(f=this.options.mini?"<div class='ui-slider ui-mini'>":"<div class='ui-slider'>",h.add(z).wrapAll(f)),this.isToggleSwitch&&this.handle.bind({focus:function(){z.addClass(a.mobile.focusClass)},blur:function(){z.removeClass(a.mobile.focusClass)}}),this._on(this.handle,{vmousedown:"_handleVMouseDown",keydown:"_handleKeydown",keyup:"_handleKeyup"}),this.handle.bind("vclick",!1),this._handleFormReset(),this.refresh(d,d,!0)},_controlChange:function(a){return this._trigger("controlchange",a)===!1?!1:(this.mouseMoved||this.refresh(this._value(),!0),void 0)},_controlKeyup:function(){this.refresh(this._value(),!0,!0)},_controlBlur:function(){this.refresh(this._value(),!0)},_controlVMouseUp:function(){this._checkedRefresh()},_handleVMouseDown:function(){this.handle.focus()},_handleKeydown:function(b){var c=this._value();if(!this.options.disabled){switch(b.keyCode){case a.mobile.keyCode.HOME:case a.mobile.keyCode.END:case a.mobile.keyCode.PAGE_UP:case a.mobile.keyCode.PAGE_DOWN:case a.mobile.keyCode.UP:case a.mobile.keyCode.RIGHT:case a.mobile.keyCode.DOWN:case a.mobile.keyCode.LEFT:b.preventDefault(),this._keySliding||(this._keySliding=!0,this.handle.addClass("ui-state-active"))}switch(b.keyCode){case a.mobile.keyCode.HOME:this.refresh(this.min);break;case a.mobile.keyCode.END:this.refresh(this.max);break;case a.mobile.keyCode.PAGE_UP:case a.mobile.keyCode.UP:case a.mobile.keyCode.RIGHT:this.refresh(c+this.step);break;case a.mobile.keyCode.PAGE_DOWN:case a.mobile.keyCode.DOWN:case a.mobile.keyCode.LEFT:this.refresh(c-this.step)}}},_handleKeyup:function(){this._keySliding&&(this._keySliding=!1,this.handle.removeClass("ui-state-active"))},_sliderVMouseDown:function(a){return this.options.disabled||1!==a.which&&0!==a.which&&a.which!==d?!1:this._trigger("beforestart",a)===!1?!1:(this.dragging=!0,this.userModified=!1,this.mouseMoved=!1,this.isToggleSwitch&&(this.beforeStart=this.element[0].selectedIndex),this.refresh(a),this._trigger("start"),!1)},_sliderVMouseUp:function(){return this.dragging?(this.dragging=!1,this.isToggleSwitch&&(this.handle.addClass("ui-slider-handle-snapping"),this.mouseMoved?this.userModified?this.refresh(0===this.beforeStart?1:0):this.refresh(this.beforeStart):this.refresh(0===this.beforeStart?1:0)),this.mouseMoved=!1,this._trigger("stop"),!1):void 0},_preventDocumentDrag:function(a){return this._trigger("drag",a)===!1?!1:this.dragging&&!this.options.disabled?(this.mouseMoved=!0,this.isToggleSwitch&&this.handle.removeClass("ui-slider-handle-snapping"),this.refresh(a),this.userModified=this.beforeStart!==this.element[0].selectedIndex,!1):void 0},_checkedRefresh:function(){this.value!==this._value()&&this.refresh(this._value())},_value:function(){return this.isToggleSwitch?this.element[0].selectedIndex:parseFloat(this.element.val())},_reset:function(){this.refresh(d,!1,!0)},refresh:function(b,d,e){var f,g,h,i,j=this,k=a.mobile.getInheritedTheme(this.element,"c"),l=this.options.theme||k,m=this.options.trackTheme||k;j.slider[0].className=[this.isToggleSwitch?"ui-slider ui-slider-switch":"ui-slider-track"," ui-btn-down-"+m," ui-btn-corner-all",this.options.mini?" ui-mini":""].join(""),(this.options.disabled||this.element.attr("disabled"))&&this.disable(),this.value=this._value(),this.options.highlight&&!this.isToggleSwitch&&0===this.slider.find(".ui-slider-bg").length&&(this.valuebg=function(){var b=c.createElement("div");return b.className="ui-slider-bg "+a.mobile.activeBtnClass+" ui-btn-corner-all",a(b).prependTo(j.slider)}()),this.handle.buttonMarkup({corners:!0,theme:l,shadow:!0});var n,o,p=this.element,q=!this.isToggleSwitch,r=q?[]:p.find("option"),s=q?parseFloat(p.attr("min")):0,t=q?parseFloat(p.attr("max")):r.length-1,u=q&&parseFloat(p.attr("step"))>0?parseFloat(p.attr("step")):1;if("object"==typeof b){if(h=b,i=8,f=this.slider.offset().left,g=this.slider.width(),n=g/((t-s)/u),!this.dragging||h.pageX<f-i||h.pageX>f+g+i)return;o=n>1?100*((h.pageX-f)/g):Math.round(100*((h.pageX-f)/g))}else null==b&&(b=q?parseFloat(p.val()||0):p[0].selectedIndex),o=100*((parseFloat(b)-s)/(t-s));if(!isNaN(o)){var v=o/100*(t-s)+s,w=(v-s)%u,x=v-w;2*Math.abs(w)>=u&&(x+=w>0?u:-u);var y=100/((t-s)/u);if(v=parseFloat(x.toFixed(5)),"undefined"==typeof n&&(n=g/((t-s)/u)),n>1&&q&&(o=(v-s)*y*(1/u)),0>o&&(o=0),o>100&&(o=100),s>v&&(v=s),v>t&&(v=t),this.handle.css("left",o+"%"),this.handle[0].setAttribute("aria-valuenow",q?v:r.eq(v).attr("value")),this.handle[0].setAttribute("aria-valuetext",q?v:r.eq(v).getEncodedText()),this.handle[0].setAttribute("title",q?v:r.eq(v).getEncodedText()),this.valuebg&&this.valuebg.css("width",o+"%"),this._labels){var z=100*(this.handle.width()/this.slider.width()),A=o&&z+(100-z)*o/100,B=100===o?0:Math.min(z+100-A,100);this._labels.each(function(){var b=a(this).is(".ui-slider-label-a");a(this).width((b?A:B)+"%")})}if(!e){var C=!1;if(q?(C=p.val()!==v,p.val(v)):(C=p[0].selectedIndex!==v,p[0].selectedIndex=v),this._trigger("beforechange",b)===!1)return!1;!d&&C&&p.trigger("change")}}},enable:function(){return this.element.attr("disabled",!1),this.slider.removeClass("ui-disabled").attr("aria-disabled",!1),this._setOption("disabled",!1)},disable:function(){return this.element.attr("disabled",!0),this.slider.addClass("ui-disabled").attr("aria-disabled",!0),this._setOption("disabled",!0)}},a.mobile.behaviors.formReset)),a.mobile.document.bind("pagecreate create",function(b){a.mobile.slider.prototype.enhanceWithin(b.target,!0)})}(a),function(a){a.widget("mobile.rangeslider",a.mobile.widget,{options:{theme:null,trackTheme:null,disabled:!1,initSelector:":jqmData(role='rangeslider')",mini:!1,highlight:!0},_create:function(){var b,c=this.element,d=this.options.mini?"ui-rangeslider ui-mini":"ui-rangeslider",e=c.find("input").first(),f=c.find("input").last(),g=c.find("label").first(),h=a.data(e.get(0),"mobileSlider").slider,i=a.data(f.get(0),"mobileSlider").slider,j=a.data(e.get(0),"mobileSlider").handle,k=a('<div class="ui-rangeslider-sliders" />').appendTo(c);c.find("label").length>1&&(b=c.find("label").last().hide()),e.addClass("ui-rangeslider-first"),f.addClass("ui-rangeslider-last"),c.addClass(d),h.appendTo(k),i.appendTo(k),g.prependTo(c),j.prependTo(i),a.extend(this,{_inputFirst:e,_inputLast:f,_sliderFirst:h,_sliderLast:i,_targetVal:null,_sliderTarget:!1,_sliders:k,_proxy:!1}),this.refresh(),this._on(this.element.find("input.ui-slider-input"),{slidebeforestart:"_slidebeforestart",slidestop:"_slidestop",slidedrag:"_slidedrag",slidebeforechange:"_change",blur:"_change",keyup:"_change"}),this._on({mousedown:"_change"}),this._on(this.element.closest("form"),{reset:"_handleReset"}),this._on(j,{vmousedown:"_dragFirstHandle"})},_handleReset:function(){var a=this;setTimeout(function(){a._updateHighlight()},0)},_dragFirstHandle:function(b){return a.data(this._inputFirst.get(0),"mobileSlider").dragging=!0,a.data(this._inputFirst.get(0),"mobileSlider").refresh(b),!1},_slidedrag:function(b){var c=a(b.target).is(this._inputFirst),d=c?this._inputLast:this._inputFirst;return this._sliderTarget=!1,"first"===this._proxy&&c||"last"===this._proxy&&!c?(a.data(d.get(0),"mobileSlider").dragging=!0,a.data(d.get(0),"mobileSlider").refresh(b),!1):void 0},_slidestop:function(b){var c=a(b.target).is(this._inputFirst);this._proxy=!1,this.element.find("input").trigger("vmouseup"),this._sliderFirst.css("z-index",c?1:"")},_slidebeforestart:function(b){this._sliderTarget=!1,a(b.originalEvent.target).hasClass("ui-slider-track")&&(this._sliderTarget=!0,this._targetVal=a(b.target).val())},_setOption:function(a){this._superApply(a),this.refresh()},refresh:function(){var a=this.element,b=this.options;a.find("input").slider({theme:b.theme,trackTheme:b.trackTheme,disabled:b.disabled,mini:b.mini,highlight:b.highlight}).slider("refresh"),this._updateHighlight()},_change:function(b){if("keyup"===b.type)return this._updateHighlight(),!1;var c=this,d=parseFloat(this._inputFirst.val(),10),e=parseFloat(this._inputLast.val(),10),f=a(b.target).hasClass("ui-rangeslider-first"),g=f?this._inputFirst:this._inputLast,h=f?this._inputLast:this._inputFirst;if(this._inputFirst.val()>this._inputLast.val()&&"mousedown"===b.type&&!a(b.target).hasClass("ui-slider-handle"))g.blur();else if("mousedown"===b.type)return;return d>e&&!this._sliderTarget?(g.val(f?e:d).slider("refresh"),this._trigger("normalize")):d>e&&(g.val(this._targetVal).slider("refresh"),setTimeout(function(){h.val(f?d:e).slider("refresh"),a.data(h.get(0),"mobileSlider").handle.focus(),c._sliderFirst.css("z-index",f?"":1),c._trigger("normalize")},0),this._proxy=f?"first":"last"),d===e?(a.data(g.get(0),"mobileSlider").handle.css("z-index",1),a.data(h.get(0),"mobileSlider").handle.css("z-index",0)):(a.data(h.get(0),"mobileSlider").handle.css("z-index",""),a.data(g.get(0),"mobileSlider").handle.css("z-index","")),this._updateHighlight(),d>=e?!1:void 0},_updateHighlight:function(){var b=parseInt(a.data(this._inputFirst.get(0),"mobileSlider").handle.get(0).style.left,10),c=parseInt(a.data(this._inputLast.get(0),"mobileSlider").handle.get(0).style.left,10),d=c-b;this.element.find(".ui-slider-bg").css({"margin-left":b+"%",width:d+"%"})},_destroy:function(){this.element.removeClass("ui-rangeslider ui-mini").find("label").show(),this._inputFirst.after(this._sliderFirst),this._inputLast.after(this._sliderLast),this._sliders.remove(),this.element.find("input").removeClass("ui-rangeslider-first ui-rangeslider-last").slider("destroy")}}),a.widget("mobile.rangeslider",a.mobile.rangeslider,a.mobile.behaviors.formReset),a(c).bind("pagecreate create",function(b){a.mobile.rangeslider.prototype.enhanceWithin(b.target,!0)})}(a),function(a){a.widget("mobile.selectmenu",a.mobile.widget,a.extend({options:{theme:null,disabled:!1,icon:"arrow-d",iconpos:"right",inline:!1,corners:!0,shadow:!0,iconshadow:!0,overlayTheme:"a",dividerTheme:"b",hidePlaceholderMenuItems:!0,closeText:"Close",nativeMenu:!0,preventFocusZoom:/iPhone|iPad|iPod/.test(navigator.platform)&&navigator.userAgent.indexOf("AppleWebKit")>-1,initSelector:"select:not( :jqmData(role='slider') )",mini:!1},_button:function(){return a("<div/>")
},_setDisabled:function(a){return this.element.attr("disabled",a),this.button.attr("aria-disabled",a),this._setOption("disabled",a)},_focusButton:function(){var a=this;setTimeout(function(){a.button.focus()},40)},_selectOptions:function(){return this.select.find("option")},_preExtension:function(){var b="";~this.element[0].className.indexOf("ui-btn-left")&&(b=" ui-btn-left"),~this.element[0].className.indexOf("ui-btn-right")&&(b=" ui-btn-right"),this.select=this.element.removeClass("ui-btn-left ui-btn-right").wrap("<div class='ui-select"+b+"'>"),this.selectID=this.select.attr("id"),this.label=a("label[for='"+this.selectID+"']").addClass("ui-select"),this.isMultiple=this.select[0].multiple,this.options.theme||(this.options.theme=a.mobile.getInheritedTheme(this.select,"c"))},_destroy:function(){var a=this.element.parents(".ui-select");a.length>0&&(a.is(".ui-btn-left, .ui-btn-right")&&this.element.addClass(a.is(".ui-btn-left")?"ui-btn-left":"ui-btn-right"),this.element.insertAfter(a),a.remove())},_create:function(){this._preExtension(),this._trigger("beforeCreate"),this.button=this._button();var c=this,d=this.options,e=d.inline||this.select.jqmData("inline"),f=d.mini||this.select.jqmData("mini"),g=d.icon?d.iconpos||this.select.jqmData("iconpos"):!1,h=(-1===this.select[0].selectedIndex?0:this.select[0].selectedIndex,this.button.insertBefore(this.select).buttonMarkup({theme:d.theme,icon:d.icon,iconpos:g,inline:e,corners:d.corners,shadow:d.shadow,iconshadow:d.iconshadow,mini:f}));this.setButtonText(),d.nativeMenu&&b.opera&&b.opera.version&&h.addClass("ui-select-nativeonly"),this.isMultiple&&(this.buttonCount=a("<span>").addClass("ui-li-count ui-btn-up-c ui-btn-corner-all").hide().appendTo(h.addClass("ui-li-has-count"))),(d.disabled||this.element.attr("disabled"))&&this.disable(),this.select.change(function(){c.refresh(),d.nativeMenu&&this.blur()}),this._handleFormReset(),this.build()},build:function(){var b=this;this.select.appendTo(b.button).bind("vmousedown",function(){b.button.addClass(a.mobile.activeBtnClass)}).bind("focus",function(){b.button.addClass(a.mobile.focusClass)}).bind("blur",function(){b.button.removeClass(a.mobile.focusClass)}).bind("focus vmouseover",function(){b.button.trigger("vmouseover")}).bind("vmousemove",function(){b.button.removeClass(a.mobile.activeBtnClass)}).bind("change blur vmouseout",function(){b.button.trigger("vmouseout").removeClass(a.mobile.activeBtnClass)}).bind("change blur",function(){b.button.removeClass("ui-btn-down-"+b.options.theme)}),b.button.bind("vmousedown",function(){b.options.preventFocusZoom&&a.mobile.zoom.disable(!0)}),b.label.bind("click focus",function(){b.options.preventFocusZoom&&a.mobile.zoom.disable(!0)}),b.select.bind("focus",function(){b.options.preventFocusZoom&&a.mobile.zoom.disable(!0)}),b.button.bind("mouseup",function(){b.options.preventFocusZoom&&setTimeout(function(){a.mobile.zoom.enable(!0)},0)}),b.select.bind("blur",function(){b.options.preventFocusZoom&&a.mobile.zoom.enable(!0)})},selected:function(){return this._selectOptions().filter(":selected")},selectedIndices:function(){var a=this;return this.selected().map(function(){return a._selectOptions().index(this)}).get()},setButtonText:function(){var b=this,d=this.selected(),e=this.placeholder,f=a(c.createElement("span"));this.button.find(".ui-btn-text").html(function(){return e=d.length?d.map(function(){return a(this).text()}).get().join(", "):b.placeholder,f.text(e).addClass(b.select.attr("class")).addClass(d.attr("class"))})},setButtonCount:function(){var a=this.selected();this.isMultiple&&this.buttonCount[a.length>1?"show":"hide"]().text(a.length)},_reset:function(){this.refresh()},refresh:function(){this.setButtonText(),this.setButtonCount()},open:a.noop,close:a.noop,disable:function(){this._setDisabled(!0),this.button.addClass("ui-disabled")},enable:function(){this._setDisabled(!1),this.button.removeClass("ui-disabled")}},a.mobile.behaviors.formReset)),a.mobile.document.bind("pagecreate create",function(b){a.mobile.selectmenu.prototype.enhanceWithin(b.target,!0)})}(a),function(a,d){function e(a,b,c,d){var e=d;return e=b>a?c+(a-b)/2:Math.min(Math.max(c,d-b/2),c+a-b)}function f(){var c=a.mobile.window;return{x:c.scrollLeft(),y:c.scrollTop(),cx:b.innerWidth||c.width(),cy:b.innerHeight||c.height()}}a.widget("mobile.popup",a.mobile.widget,{options:{theme:null,overlayTheme:null,shadow:!0,corners:!0,transition:"none",positionTo:"origin",tolerance:null,initSelector:":jqmData(role='popup')",closeLinkSelector:"a:jqmData(rel='back')",closeLinkEvents:"click.popup",navigateEvents:"navigate.popup",closeEvents:"navigate.popup pagebeforechange.popup",dismissible:!0,history:!a.mobile.browser.oldIE},_eatEventAndClose:function(a){return a.preventDefault(),a.stopImmediatePropagation(),this.options.dismissible&&this.close(),!1},_resizeScreen:function(){var a=this._ui.container.outerHeight(!0);this._ui.screen.removeAttr("style"),a>this._ui.screen.height()&&this._ui.screen.height(a)},_handleWindowKeyUp:function(b){return this._isOpen&&b.keyCode===a.mobile.keyCode.ESCAPE?this._eatEventAndClose(b):void 0},_expectResizeEvent:function(){var b=f();if(this._resizeData){if(b.x===this._resizeData.winCoords.x&&b.y===this._resizeData.winCoords.y&&b.cx===this._resizeData.winCoords.cx&&b.cy===this._resizeData.winCoords.cy)return!1;clearTimeout(this._resizeData.timeoutId)}return this._resizeData={timeoutId:setTimeout(a.proxy(this,"_resizeTimeout"),200),winCoords:b},!0},_resizeTimeout:function(){this._isOpen?this._expectResizeEvent()||(this._ui.container.hasClass("ui-popup-hidden")&&(this._ui.container.removeClass("ui-popup-hidden"),this.reposition({positionTo:"window"}),this._ignoreResizeEvents()),this._resizeScreen(),this._resizeData=null,this._orientationchangeInProgress=!1):(this._resizeData=null,this._orientationchangeInProgress=!1)},_ignoreResizeEvents:function(){var a=this;this._ignoreResizeTo&&clearTimeout(this._ignoreResizeTo),this._ignoreResizeTo=setTimeout(function(){a._ignoreResizeTo=0},1e3)},_handleWindowResize:function(){this._isOpen&&0===this._ignoreResizeTo&&(!this._expectResizeEvent()&&!this._orientationchangeInProgress||this._ui.container.hasClass("ui-popup-hidden")||this._ui.container.addClass("ui-popup-hidden").removeAttr("style"))},_handleWindowOrientationchange:function(){!this._orientationchangeInProgress&&this._isOpen&&0===this._ignoreResizeTo&&(this._expectResizeEvent(),this._orientationchangeInProgress=!0)},_handleDocumentFocusIn:function(b){var d,e=b.target,f=this._ui;if(this._isOpen){if(e!==f.container[0]){if(d=a(b.target),0===d.parents().filter(f.container[0]).length)return a(c.activeElement).one("focus",function(){d.blur()}),f.focusElement.focus(),b.preventDefault(),b.stopImmediatePropagation(),!1;f.focusElement[0]===f.container[0]&&(f.focusElement=d)}this._ignoreResizeEvents()}},_create:function(){var b={screen:a("<div class='ui-screen-hidden ui-popup-screen'></div>"),placeholder:a("<div style='display: none;'><!-- placeholder --></div>"),container:a("<div class='ui-popup-container ui-popup-hidden'></div>")},c=this.element.closest(".ui-page"),d=this.element.attr("id"),e=this.options;e.history=e.history&&a.mobile.ajaxEnabled&&a.mobile.hashListeningEnabled,0===c.length&&(c=a("body")),e.container=e.container||a.mobile.pageContainer||c,c.append(b.screen),b.container.insertAfter(b.screen),b.placeholder.insertAfter(this.element),d&&(b.screen.attr("id",d+"-screen"),b.container.attr("id",d+"-popup"),b.placeholder.html("<!-- placeholder for "+d+" -->")),b.container.append(this.element),b.focusElement=b.container,this.element.addClass("ui-popup"),a.extend(this,{_scrollTop:0,_page:c,_ui:b,_fallbackTransition:"",_currentTransition:!1,_prereqs:null,_isOpen:!1,_tolerance:null,_resizeData:null,_ignoreResizeTo:0,_orientationchangeInProgress:!1}),this._applyTheme(this.element,e.theme,"body"),this._applyTheme(this._ui.screen,e.overlayTheme,"overlay"),this._applyTransition(e.transition),this.element.toggleClass("ui-overlay-shadow",e.shadow).toggleClass("ui-corner-all",e.corners),this._setTolerance(e.tolerance),b.screen.bind("vclick",a.proxy(this,"_eatEventAndClose")),this._on(a.mobile.window,{orientationchange:a.proxy(this,"_handleWindowOrientationchange"),resize:a.proxy(this,"_handleWindowResize"),keyup:a.proxy(this,"_handleWindowKeyUp")}),this._on(a.mobile.document,{focusin:a.proxy(this,"_handleDocumentFocusIn")})},_applyTheme:function(a,b,c){for(var d,e=(a.attr("class")||"").split(" "),f=null,g=String(b);e.length>0;){if(f=e.pop(),d=new RegExp("^ui-"+c+"-([a-z])$").exec(f),d&&d.length>1){f=d[1];break}f=null}b!==f&&(a.removeClass("ui-"+c+"-"+f),null!==b&&"none"!==b&&a.addClass("ui-"+c+"-"+g))},_setTheme:function(a){this._applyTheme(this.element,a,"body")},_setOverlayTheme:function(a){this._applyTheme(this._ui.screen,a,"overlay"),this._isOpen&&this._ui.screen.addClass("in")},_setShadow:function(a){this.element.toggleClass("ui-overlay-shadow",a)},_setCorners:function(a){this.element.toggleClass("ui-corner-all",a)},_applyTransition:function(b){this._ui.container.removeClass(this._fallbackTransition),b&&"none"!==b&&(this._fallbackTransition=a.mobile._maybeDegradeTransition(b),"none"===this._fallbackTransition&&(this._fallbackTransition=""),this._ui.container.addClass(this._fallbackTransition))},_setTransition:function(a){this._currentTransition||this._applyTransition(a)},_setTolerance:function(b){var c={t:30,r:15,b:30,l:15};if(b!==d){var e=String(b).split(",");switch(a.each(e,function(a,b){e[a]=parseInt(b,10)}),e.length){case 1:isNaN(e[0])||(c.t=c.r=c.b=c.l=e[0]);break;case 2:isNaN(e[0])||(c.t=c.b=e[0]),isNaN(e[1])||(c.l=c.r=e[1]);break;case 4:isNaN(e[0])||(c.t=e[0]),isNaN(e[1])||(c.r=e[1]),isNaN(e[2])||(c.b=e[2]),isNaN(e[3])||(c.l=e[3])}}this._tolerance=c},_setOption:function(a,b){var c="_set"+a.charAt(0).toUpperCase()+a.slice(1);this[c]!==d&&this[c](b),this._super(a,b)},_placementCoords:function(a){var b,d,g=f(),h={x:this._tolerance.l,y:g.y+this._tolerance.t,cx:g.cx-this._tolerance.l-this._tolerance.r,cy:g.cy-this._tolerance.t-this._tolerance.b};this._ui.container.css("max-width",h.cx),b={cx:this._ui.container.outerWidth(!0),cy:this._ui.container.outerHeight(!0)},d={x:e(h.cx,b.cx,h.x,a.x),y:e(h.cy,b.cy,h.y,a.y)},d.y=Math.max(0,d.y);var i=c.documentElement,j=c.body,k=Math.max(i.clientHeight,j.scrollHeight,j.offsetHeight,i.scrollHeight,i.offsetHeight);return d.y-=Math.min(d.y,Math.max(0,d.y+b.cy-k)),{left:d.x,top:d.y}},_createPrereqs:function(b,c,d){var e,f=this;e={screen:a.Deferred(),container:a.Deferred()},e.screen.then(function(){e===f._prereqs&&b()}),e.container.then(function(){e===f._prereqs&&c()}),a.when(e.screen,e.container).done(function(){e===f._prereqs&&(f._prereqs=null,d())}),f._prereqs=e},_animate:function(b){return this._ui.screen.removeClass(b.classToRemove).addClass(b.screenClassToAdd),b.prereqs.screen.resolve(),b.transition&&"none"!==b.transition&&(b.applyTransition&&this._applyTransition(b.transition),this._fallbackTransition)?(this._ui.container.animationComplete(a.proxy(b.prereqs.container,"resolve")).addClass(b.containerClassToAdd).removeClass(b.classToRemove),void 0):(this._ui.container.removeClass(b.classToRemove),b.prereqs.container.resolve(),void 0)},_desiredCoords:function(b){var c,d=null,e=f(),g=b.x,h=b.y,i=b.positionTo;if(i&&"origin"!==i)if("window"===i)g=e.cx/2+e.x,h=e.cy/2+e.y;else{try{d=a(i)}catch(j){d=null}d&&(d.filter(":visible"),0===d.length&&(d=null))}return d&&(c=d.offset(),g=c.left+d.outerWidth()/2,h=c.top+d.outerHeight()/2),("number"!==a.type(g)||isNaN(g))&&(g=e.cx/2+e.x),("number"!==a.type(h)||isNaN(h))&&(h=e.cy/2+e.y),{x:g,y:h}},_reposition:function(a){a={x:a.x,y:a.y,positionTo:a.positionTo},this._trigger("beforeposition",d,a),this._ui.container.offset(this._placementCoords(this._desiredCoords(a)))},reposition:function(a){this._isOpen&&this._reposition(a)},_openPrereqsComplete:function(){this._ui.container.addClass("ui-popup-active"),this._isOpen=!0,this._resizeScreen(),this._ui.container.attr("tabindex","0").focus(),this._ignoreResizeEvents(),this._trigger("afteropen")},_open:function(b){var c=a.extend({},this.options,b),d=function(){var a=navigator.userAgent,b=a.match(/AppleWebKit\/([0-9\.]+)/),c=!!b&&b[1],d=a.match(/Android (\d+(?:\.\d+))/),e=!!d&&d[1],f=a.indexOf("Chrome")>-1;return null!==d&&"4.0"===e&&c&&c>534.13&&!f?!0:!1}();this._createPrereqs(a.noop,a.noop,a.proxy(this,"_openPrereqsComplete")),this._currentTransition=c.transition,this._applyTransition(c.transition),this.options.theme||this._setTheme(this._page.jqmData("theme")||a.mobile.getInheritedTheme(this._page,"c")),this._ui.screen.removeClass("ui-screen-hidden"),this._ui.container.removeClass("ui-popup-hidden"),this._reposition(c),this.options.overlayTheme&&d&&this.element.closest(".ui-page").addClass("ui-popup-open"),this._animate({additionalCondition:!0,transition:c.transition,classToRemove:"",screenClassToAdd:"in",containerClassToAdd:"in",applyTransition:!1,prereqs:this._prereqs})},_closePrereqScreen:function(){this._ui.screen.removeClass("out").addClass("ui-screen-hidden")},_closePrereqContainer:function(){this._ui.container.removeClass("reverse out").addClass("ui-popup-hidden").removeAttr("style")},_closePrereqsDone:function(){var b=this._ui.container;b.removeAttr("tabindex"),a.mobile.popup.active=d,a(":focus",b[0]).add(b[0]).blur(),this._trigger("afterclose")},_close:function(b){this._ui.container.removeClass("ui-popup-active"),this._page.removeClass("ui-popup-open"),this._isOpen=!1,this._createPrereqs(a.proxy(this,"_closePrereqScreen"),a.proxy(this,"_closePrereqContainer"),a.proxy(this,"_closePrereqsDone")),this._animate({additionalCondition:this._ui.screen.hasClass("in"),transition:b?"none":this._currentTransition,classToRemove:"in",screenClassToAdd:"out",containerClassToAdd:"reverse out",applyTransition:!0,prereqs:this._prereqs})},_unenhance:function(){this._setTheme("none"),this.element.detach().insertAfter(this._ui.placeholder).removeClass("ui-popup ui-overlay-shadow ui-corner-all"),this._ui.screen.remove(),this._ui.container.remove(),this._ui.placeholder.remove()},_destroy:function(){a.mobile.popup.active===this?(this.element.one("popupafterclose",a.proxy(this,"_unenhance")),this.close()):this._unenhance()},_closePopup:function(c,d){var e,f,g=this.options,h=!1;b.scrollTo(0,this._scrollTop),c&&"pagebeforechange"===c.type&&d&&(e="string"==typeof d.toPage?d.toPage:d.toPage.jqmData("url"),e=a.mobile.path.parseUrl(e),f=e.pathname+e.search+e.hash,this._myUrl!==a.mobile.path.makeUrlAbsolute(f)?h=!0:c.preventDefault()),g.container.unbind(g.closeEvents),this.element.undelegate(g.closeLinkSelector,g.closeLinkEvents),this._close(h)},_bindContainerClose:function(){this.options.container.one(this.options.closeEvents,a.proxy(this,"_closePopup"))},open:function(c){var d,e,f,g,h,i,j=this,k=this.options;if(!a.mobile.popup.active){if(a.mobile.popup.active=this,this._scrollTop=a.mobile.window.scrollTop(),!k.history)return j._open(c),j._bindContainerClose(),j.element.delegate(k.closeLinkSelector,k.closeLinkEvents,function(a){j.close(),a.preventDefault()}),void 0;if(i=a.mobile.urlHistory,e=a.mobile.dialogHashKey,f=a.mobile.activePage,g=f.is(".ui-dialog"),this._myUrl=d=i.getActive().url,h=d.indexOf(e)>-1&&!g&&i.activeIndex>0)return j._open(c),j._bindContainerClose(),void 0;-1!==d.indexOf(e)||g?d=a.mobile.path.parseLocation().hash+e:d+=d.indexOf("#")>-1?e:"#"+e,0===i.activeIndex&&d===i.initialDst&&(d+=e),a(b).one("beforenavigate",function(a){a.preventDefault(),j._open(c),j._bindContainerClose()}),this.urlAltered=!0,a.mobile.navigate(d,{role:"dialog"})}},close:function(){a.mobile.popup.active===this&&(this._scrollTop=a.mobile.window.scrollTop(),this.options.history&&this.urlAltered?(a.mobile.back(),this.urlAltered=!1):this._closePopup())}}),a.mobile.popup.handleLink=function(b){var c,d=b.closest(":jqmData(role='page')"),e=0===d.length?a("body"):d,f=a(a.mobile.path.parseUrl(b.attr("href")).hash,e[0]);f.data("mobile-popup")&&(c=b.offset(),f.popup("open",{x:c.left+b.outerWidth()/2,y:c.top+b.outerHeight()/2,transition:b.jqmData("transition"),positionTo:b.jqmData("position-to")})),setTimeout(function(){var c=b.parent().parent();c.hasClass("ui-li")&&(b=c.parent()),b.removeClass(a.mobile.activeBtnClass)},300)},a.mobile.document.bind("pagebeforechange",function(b,c){"popup"===c.options.role&&(a.mobile.popup.handleLink(c.options.link),b.preventDefault())}),a.mobile.document.bind("pagecreate create",function(b){a.mobile.popup.prototype.enhanceWithin(b.target,!0)})}(a),function(a,b){var d=function(d){var e,f,g,h=(d.select,d._destroy),i=d.selectID,j=i?i:(a.mobile.ns||"")+"uuid-"+d.uuid,k=j+"-listbox",l=j+"-dialog",m=d.label,n=d.select.closest(".ui-page"),o=d._selectOptions(),p=d.isMultiple=d.select[0].multiple,q=i+"-button",r=i+"-menu",s=a("<div data-"+a.mobile.ns+"role='dialog' id='"+l+"' data-"+a.mobile.ns+"theme='"+d.options.theme+"' data-"+a.mobile.ns+"overlay-theme='"+d.options.overlayTheme+"'>"+"<div data-"+a.mobile.ns+"role='header'>"+"<div class='ui-title'>"+m.getEncodedText()+"</div>"+"</div>"+"<div data-"+a.mobile.ns+"role='content'></div>"+"</div>"),t=a("<div id='"+k+"' class='ui-selectmenu'>").insertAfter(d.select).popup({theme:d.options.overlayTheme}),u=a("<ul>",{"class":"ui-selectmenu-list",id:r,role:"listbox","aria-labelledby":q}).attr("data-"+a.mobile.ns+"theme",d.options.theme).attr("data-"+a.mobile.ns+"divider-theme",d.options.dividerTheme).appendTo(t),v=a("<div>",{"class":"ui-header ui-bar-"+d.options.theme}).prependTo(t),w=a("<h1>",{"class":"ui-title"}).appendTo(v);d.isMultiple&&(g=a("<a>",{text:d.options.closeText,href:"#","class":"ui-btn-left"}).attr("data-"+a.mobile.ns+"iconpos","notext").attr("data-"+a.mobile.ns+"icon","delete").appendTo(v).buttonMarkup()),a.extend(d,{select:d.select,selectID:i,buttonId:q,menuId:r,popupID:k,dialogID:l,thisPage:n,menuPage:s,label:m,selectOptions:o,isMultiple:p,theme:d.options.theme,listbox:t,list:u,header:v,headerTitle:w,headerClose:g,menuPageContent:e,menuPageClose:f,placeholder:"",build:function(){var c=this,e=function(a){return a.replace(/([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g,"\\$1")};c.refresh(),c._origTabIndex===b&&(c._origTabIndex=null===c.select[0].getAttribute("tabindex")?!1:c.select.attr("tabindex")),c.select.attr("tabindex","-1").focus(function(){a(this).blur(),c.button.focus()}),c.button.bind("vclick keydown",function(b){c.options.disabled||c.isOpen||("vclick"===b.type||b.keyCode&&(b.keyCode===a.mobile.keyCode.ENTER||b.keyCode===a.mobile.keyCode.SPACE))&&(c._decideFormat(),"overlay"===c.menuType?c.button.attr("href","#"+e(c.popupID)).attr("data-"+(a.mobile.ns||"")+"rel","popup"):c.button.attr("href","#"+e(c.dialogID)).attr("data-"+(a.mobile.ns||"")+"rel","dialog"),c.isOpen=!0)}),c.list.attr("role","listbox").bind("focusin",function(b){a(b.target).attr("tabindex","0").trigger("vmouseover")}).bind("focusout",function(b){a(b.target).attr("tabindex","-1").trigger("vmouseout")}).delegate("li:not(.ui-disabled, .ui-li-divider)","click",function(b){var e=c.select[0].selectedIndex,f=c.list.find("li:not(.ui-li-divider)").index(this),g=c._selectOptions().eq(f)[0];g.selected=c.isMultiple?!g.selected:!0,c.isMultiple&&a(this).find(".ui-icon").toggleClass("ui-icon-checkbox-on",g.selected).toggleClass("ui-icon-checkbox-off",!g.selected),(c.isMultiple||e!==f)&&c.select.trigger("change"),c.isMultiple?c.list.find("li:not(.ui-li-divider)").eq(f).addClass("ui-btn-down-"+d.options.theme).find("a").first().focus():c.close(),b.preventDefault()}).keydown(function(b){var c,e,f=a(b.target),g=f.closest("li");switch(b.keyCode){case 38:return c=g.prev().not(".ui-selectmenu-placeholder"),c.is(".ui-li-divider")&&(c=c.prev()),c.length&&(f.blur().attr("tabindex","-1"),c.addClass("ui-btn-down-"+d.options.theme).find("a").first().focus()),!1;case 40:return e=g.next(),e.is(".ui-li-divider")&&(e=e.next()),e.length&&(f.blur().attr("tabindex","-1"),e.addClass("ui-btn-down-"+d.options.theme).find("a").first().focus()),!1;case 13:case 32:return f.trigger("click"),!1}}),c.menuPage.bind("pagehide",function(){a.mobile._bindPageRemove.call(c.thisPage)}),c.listbox.bind("popupafterclose",function(){c.close()}),c.isMultiple&&c.headerClose.click(function(){return"overlay"===c.menuType?(c.close(),!1):void 0}),c.thisPage.addDependents(this.menuPage)},_isRebuildRequired:function(){var a=this.list.find("li"),b=this._selectOptions();return b.text()!==a.text()},selected:function(){return this._selectOptions().filter(":selected:not( :jqmData(placeholder='true') )")},refresh:function(b){var c,d=this;this.element,this.isMultiple,(b||this._isRebuildRequired())&&d._buildList(),c=this.selectedIndices(),d.setButtonText(),d.setButtonCount(),d.list.find("li:not(.ui-li-divider)").removeClass(a.mobile.activeBtnClass).attr("aria-selected",!1).each(function(b){if(a.inArray(b,c)>-1){var e=a(this);e.attr("aria-selected",!0),d.isMultiple?e.find(".ui-icon").removeClass("ui-icon-checkbox-off").addClass("ui-icon-checkbox-on"):e.is(".ui-selectmenu-placeholder")?e.next().addClass(a.mobile.activeBtnClass):e.addClass(a.mobile.activeBtnClass)}})},close:function(){if(!this.options.disabled&&this.isOpen){var a=this;"page"===a.menuType?(a.menuPage.dialog("close"),a.list.appendTo(a.listbox)):a.listbox.popup("close"),a._focusButton(),a.isOpen=!1}},open:function(){this.button.click()},_decideFormat:function(){function b(){var b=c.list.find("."+a.mobile.activeBtnClass+" a");0===b.length&&(b=c.list.find("li.ui-btn:not( :jqmData(placeholder='true') ) a")),b.first().focus().closest("li").addClass("ui-btn-down-"+d.options.theme)}var c=this,e=a.mobile.window,f=c.list.parent(),g=f.outerHeight(),h=(f.outerWidth(),a("."+a.mobile.activePageClass),e.scrollTop()),i=c.button.offset().top,j=e.height();e.width(),g>j-80||!a.support.scrollTop?(c.menuPage.appendTo(a.mobile.pageContainer).page(),c.menuPageContent=s.find(".ui-content"),c.menuPageClose=s.find(".ui-header a"),c.thisPage.unbind("pagehide.remove"),0===h&&i>j&&c.thisPage.one("pagehide",function(){a(this).jqmData("lastScroll",i)}),c.menuPage.one("pageshow",function(){b()}).one("pagehide",function(){c.close()}),c.menuType="page",c.menuPageContent.append(c.list),c.menuPage.find("div .ui-title").text(c.label.text())):(c.menuType="overlay",c.listbox.one("popupafteropen",b))},_buildList:function(){var b=this,d=this.options,e=this.placeholder,f=!0,g=b.isMultiple?"checkbox-off":"false";b.list.empty().filter(".ui-listview").listview("destroy");for(var h,i=b.select.find("option"),j=i.length,k=this.select[0],l="data-"+a.mobile.ns,m=l+"option-index",n=l+"icon",o=l+"role",p=l+"placeholder",q=c.createDocumentFragment(),r=!1,s=0;j>s;s++,r=!1){var t=i[s],u=a(t),v=t.parentNode,w=u.text(),x=c.createElement("a"),y=[];if(x.setAttribute("href","#"),x.appendChild(c.createTextNode(w)),v!==k&&"optgroup"===v.nodeName.toLowerCase()){var z=v.getAttribute("label");if(z!==h){var A=c.createElement("li");A.setAttribute(o,"list-divider"),A.setAttribute("role","option"),A.setAttribute("tabindex","-1"),A.appendChild(c.createTextNode(z)),q.appendChild(A),h=z}}!f||t.getAttribute("value")&&0!==w.length&&!u.jqmData("placeholder")||(f=!1,r=!0,null===t.getAttribute(p)&&(this._removePlaceholderAttr=!0),t.setAttribute(p,!0),d.hidePlaceholderMenuItems&&y.push("ui-selectmenu-placeholder"),e!==w&&(e=b.placeholder=w));var B=c.createElement("li");t.disabled&&(y.push("ui-disabled"),B.setAttribute("aria-disabled",!0)),B.setAttribute(m,s),B.setAttribute(n,g),r&&B.setAttribute(p,!0),B.className=y.join(" "),B.setAttribute("role","option"),x.setAttribute("tabindex","-1"),B.appendChild(x),q.appendChild(B)}b.list[0].appendChild(q),this.isMultiple||e.length?this.headerTitle.text(this.placeholder):this.header.hide(),b.list.listview()},_button:function(){return a("<a>",{href:"#",role:"button",id:this.buttonId,"aria-haspopup":"true","aria-owns":this.menuId})},_destroy:function(){this.close(),this._origTabIndex!==b&&(this._origTabIndex!==!1?this.select.attr("tabindex",this._origTabIndex):this.select.removeAttr("tabindex")),this._removePlaceholderAttr&&this._selectOptions().removeAttr("data-"+a.mobile.ns+"placeholder"),this.listbox.remove(),this.menuPage.remove(),h.apply(this,arguments)}})};a.mobile.document.bind("selectmenubeforecreate",function(b){var c=a(b.target).data("mobile-selectmenu");c.options.nativeMenu||0!==c.element.parents(":jqmData(role='popup')").length||d(c)})}(a),function(a,b){a.widget("mobile.controlgroup",a.mobile.widget,a.extend({options:{shadow:!1,corners:!0,excludeInvisible:!0,type:"vertical",mini:!1,initSelector:":jqmData(role='controlgroup')"},_create:function(){var c=this.element,d={inner:a("<div class='ui-controlgroup-controls'></div>"),legend:a("<div role='heading' class='ui-controlgroup-label'></div>")},e=c.children("legend"),f=this;c.wrapInner(d.inner),e.length&&d.legend.append(e).insertBefore(c.children(0)),c.addClass("ui-corner-all ui-controlgroup"),a.extend(this,{_initialRefresh:!0}),a.each(this.options,function(a,c){f.options[a]=b,f._setOption(a,c,!0)})},_init:function(){this.refresh()},_setOption:function(c,d){var e="_set"+c.charAt(0).toUpperCase()+c.slice(1);this[e]!==b&&this[e](d),this._super(c,d),this.element.attr("data-"+(a.mobile.ns||"")+c.replace(/([A-Z])/,"-$1").toLowerCase(),d)},_setType:function(a){this.element.removeClass("ui-controlgroup-horizontal ui-controlgroup-vertical").addClass("ui-controlgroup-"+a),this.refresh()},_setCorners:function(a){this.element.toggleClass("ui-corner-all",a)},_setShadow:function(a){this.element.toggleClass("ui-shadow",a)},_setMini:function(a){this.element.toggleClass("ui-mini",a)},container:function(){return this.element.children(".ui-controlgroup-controls")},refresh:function(){var b=this.element.find(".ui-btn").not(".ui-slider-handle"),c=this._initialRefresh;a.mobile.checkboxradio&&this.element.find(":mobile-checkboxradio").checkboxradio("refresh"),this._addFirstLastClasses(b,this.options.excludeInvisible?this._getVisibles(b,c):b,c),this._initialRefresh=!1}},a.mobile.behaviors.addFirstLastClasses)),a(function(){a.mobile.document.bind("pagecreate create",function(b){a.mobile.controlgroup.prototype.enhanceWithin(b.target,!0)})})}(a),function(a){a(c).bind("pagecreate create",function(b){a(b.target).find("a").jqmEnhanceable().filter(":jqmData(rel='popup')[href][href!='']").each(function(){var b=this,d=a(this).attr("href"),e=d.substring(1);b.setAttribute("aria-haspopup",!0),b.setAttribute("aria-owns",e),b.setAttribute("aria-expanded",!1),a(c).on("popupafteropen",d,function(){b.setAttribute("aria-expanded",!0)}).on("popupafterclose",d,function(){b.setAttribute("aria-expanded",!1)})}).end().not(".ui-btn, .ui-link-inherit, :jqmData(role='none'), :jqmData(role='nojs')").addClass("ui-link")})}(a),function(a,b){a.widget("mobile.fixedtoolbar",a.mobile.widget,{options:{visibleOnPageShow:!0,disablePageZoom:!0,transition:"slide",fullscreen:!1,tapToggle:!0,tapToggleBlacklist:"a, button, input, select, textarea, .ui-header-fixed, .ui-footer-fixed, .ui-popup, .ui-panel, .ui-panel-dismiss-open",hideDuringFocus:"input, textarea, select",updatePagePadding:!0,trackPersistentToolbars:!0,supportBlacklist:function(){return!a.support.fixedPosition},initSelector:":jqmData(position='fixed')"},_create:function(){var b=this,c=b.options,d=b.element,e=d.is(":jqmData(role='header')")?"header":"footer",f=d.closest(".ui-page");return c.supportBlacklist()?(b.destroy(),void 0):(d.addClass("ui-"+e+"-fixed"),c.fullscreen?(d.addClass("ui-"+e+"-fullscreen"),f.addClass("ui-page-"+e+"-fullscreen")):f.addClass("ui-page-"+e+"-fixed"),a.extend(this,{_thisPage:null}),b._addTransitionClass(),b._bindPageEvents(),b._bindToggleHandlers(),void 0)},_addTransitionClass:function(){var a=this.options.transition;a&&"none"!==a&&("slide"===a&&(a=this.element.is(".ui-header")?"slidedown":"slideup"),this.element.addClass(a))},_bindPageEvents:function(){this._thisPage=this.element.closest(".ui-page"),this._on(this._thisPage,{pagebeforeshow:"_handlePageBeforeShow",webkitAnimationStart:"_handleAnimationStart",animationstart:"_handleAnimationStart",updatelayout:"_handleAnimationStart",pageshow:"_handlePageShow",pagebeforehide:"_handlePageBeforeHide"})},_handlePageBeforeShow:function(){var b=this.options;b.disablePageZoom&&a.mobile.zoom.disable(!0),b.visibleOnPageShow||this.hide(!0)},_handleAnimationStart:function(){this.options.updatePagePadding&&this.updatePagePadding(this._thisPage)},_handlePageShow:function(){this.updatePagePadding(this._thisPage),this.options.updatePagePadding&&this._on(a.mobile.window,{throttledresize:"updatePagePadding"})},_handlePageBeforeHide:function(b,c){var d=this.options;if(d.disablePageZoom&&a.mobile.zoom.enable(!0),d.updatePagePadding&&this._off(a.mobile.window,"throttledresize"),d.trackPersistentToolbars){var e=a(".ui-footer-fixed:jqmData(id)",this._thisPage),f=a(".ui-header-fixed:jqmData(id)",this._thisPage),g=e.length&&c.nextPage&&a(".ui-footer-fixed:jqmData(id='"+e.jqmData("id")+"')",c.nextPage)||a(),h=f.length&&c.nextPage&&a(".ui-header-fixed:jqmData(id='"+f.jqmData("id")+"')",c.nextPage)||a();(g.length||h.length)&&(g.add(h).appendTo(a.mobile.pageContainer),c.nextPage.one("pageshow",function(){h.prependTo(this),g.appendTo(this)}))}},_visible:!0,updatePagePadding:function(c){var d=this.element,e=d.is(".ui-header"),f=parseFloat(d.css(e?"top":"bottom"));this.options.fullscreen||(c=c&&c.type===b&&c||this._thisPage||d.closest(".ui-page"),a(c).css("padding-"+(e?"top":"bottom"),d.outerHeight()+f))},_useTransition:function(b){var c=a.mobile.window,d=this.element,e=c.scrollTop(),f=d.height(),g=d.closest(".ui-page").height(),h=a.mobile.getScreenHeight(),i=d.is(":jqmData(role='header')")?"header":"footer";return!b&&(this.options.transition&&"none"!==this.options.transition&&("header"===i&&!this.options.fullscreen&&e>f||"footer"===i&&!this.options.fullscreen&&g-f>e+h)||this.options.fullscreen)},show:function(a){var b="ui-fixed-hidden",c=this.element;this._useTransition(a)?c.removeClass("out "+b).addClass("in").animationComplete(function(){c.removeClass("in")}):c.removeClass(b),this._visible=!0},hide:function(a){var b="ui-fixed-hidden",c=this.element,d="out"+("slide"===this.options.transition?" reverse":"");this._useTransition(a)?c.addClass(d).removeClass("in").animationComplete(function(){c.addClass(b).removeClass(d)}):c.addClass(b).removeClass(d),this._visible=!1},toggle:function(){this[this._visible?"hide":"show"]()},_bindToggleHandlers:function(){var b,c,d=this,e=d.options,f=d.element,g=!0;f.closest(".ui-page").bind("vclick",function(b){e.tapToggle&&!a(b.target).closest(e.tapToggleBlacklist).length&&d.toggle()}).bind("focusin focusout",function(f){screen.width<1025&&a(f.target).is(e.hideDuringFocus)&&!a(f.target).closest(".ui-header-fixed, .ui-footer-fixed").length&&("focusout"!==f.type||g?"focusin"===f.type&&g&&(clearTimeout(b),g=!1,c=setTimeout(function(){d.hide()},0)):(g=!0,clearTimeout(c),b=setTimeout(function(){d.show()},0)))})},_destroy:function(){var a=this.element,b=a.is(".ui-header");a.closest(".ui-page").css("padding-"+(b?"top":"bottom"),""),a.removeClass("ui-header-fixed ui-footer-fixed ui-header-fullscreen ui-footer-fullscreen in out fade slidedown slideup ui-fixed-hidden"),a.closest(".ui-page").removeClass("ui-page-header-fixed ui-page-footer-fixed ui-page-header-fullscreen ui-page-footer-fullscreen")}}),a.mobile.document.bind("pagecreate create",function(b){a(b.target).jqmData("fullscreen")&&a(a.mobile.fixedtoolbar.prototype.options.initSelector,b.target).not(":jqmData(fullscreen)").jqmData("fullscreen",!0),a.mobile.fixedtoolbar.prototype.enhanceWithin(b.target)})}(a),function(a){a.widget("mobile.fixedtoolbar",a.mobile.fixedtoolbar,{_create:function(){this._super(),this._workarounds()},_workarounds:function(){var a=navigator.userAgent,b=navigator.platform,c=a.match(/AppleWebKit\/([0-9]+)/),d=!!c&&c[1],e=null,f=this;if(b.indexOf("iPhone")>-1||b.indexOf("iPad")>-1||b.indexOf("iPod")>-1)e="ios";else{if(!(a.indexOf("Android")>-1))return;e="android"}if("ios"===e)f._bindScrollWorkaround();else{if(!("android"===e&&d&&534>d))return;f._bindScrollWorkaround(),f._bindListThumbWorkaround()}},_viewportOffset:function(){var b=this.element,c=b.is(".ui-header"),d=Math.abs(b.offset().top-a.mobile.window.scrollTop());
	return c||(d=Math.round(d-a.mobile.window.height()+b.outerHeight())-60),d},_bindScrollWorkaround:function(){var b=this;this._on(a.mobile.window,{scrollstop:function(){var a=b._viewportOffset();a>2&&b._visible&&b._triggerRedraw()}})},_bindListThumbWorkaround:function(){this.element.closest(".ui-page").addClass("ui-android-2x-fixed")},_triggerRedraw:function(){var b=parseFloat(a(".ui-page-active").css("padding-bottom"));a(".ui-page-active").css("padding-bottom",b+1+"px"),setTimeout(function(){a(".ui-page-active").css("padding-bottom",b+"px")},0)},destroy:function(){this._super(),this.element.closest(".ui-page-active").removeClass("ui-android-2x-fix")}})}(a),function(a,d){a.widget("mobile.panel",a.mobile.widget,{options:{classes:{panel:"ui-panel",panelOpen:"ui-panel-open",panelClosed:"ui-panel-closed",panelFixed:"ui-panel-fixed",panelInner:"ui-panel-inner",modal:"ui-panel-dismiss",modalOpen:"ui-panel-dismiss-open",pagePanel:"ui-page-panel",pagePanelOpen:"ui-page-panel-open",contentWrap:"ui-panel-content-wrap",contentWrapOpen:"ui-panel-content-wrap-open",contentWrapClosed:"ui-panel-content-wrap-closed",contentFixedToolbar:"ui-panel-content-fixed-toolbar",contentFixedToolbarOpen:"ui-panel-content-fixed-toolbar-open",contentFixedToolbarClosed:"ui-panel-content-fixed-toolbar-closed",animate:"ui-panel-animate"},animate:!0,theme:"c",position:"left",dismissible:!0,display:"reveal",initSelector:":jqmData(role='panel')",swipeClose:!0,positionFixed:!1},_panelID:null,_closeLink:null,_page:null,_modal:null,_panelInner:null,_wrapper:null,_fixedToolbar:null,_create:function(){var b=this,c=b.element,d=c.closest(":jqmData(role='page')"),e=function(){var b=a.data(d[0],"mobilePage").options.theme,c="ui-body-"+b;return c},f=function(){var a=c.find("."+b.options.classes.panelInner);return 0===a.length&&(a=c.children().wrapAll('<div class="'+b.options.classes.panelInner+'" />').parent()),a},g=function(){var c=d.find("."+b.options.classes.contentWrap);return 0===c.length&&(c=d.children(".ui-header:not(:jqmData(position='fixed')), .ui-content:not(:jqmData(role='popup')), .ui-footer:not(:jqmData(position='fixed'))").wrapAll('<div class="'+b.options.classes.contentWrap+" "+e()+'" />').parent(),a.support.cssTransform3d&&b.options.animate&&c.addClass(b.options.classes.animate)),c},h=function(){var c=d.find("."+b.options.classes.contentFixedToolbar);return 0===c.length&&(c=d.find(".ui-header:jqmData(position='fixed'), .ui-footer:jqmData(position='fixed')").addClass(b.options.classes.contentFixedToolbar),a.support.cssTransform3d&&b.options.animate&&c.addClass(b.options.classes.animate)),c};a.extend(this,{_panelID:c.attr("id"),_closeLink:c.find(":jqmData(rel='close')"),_page:c.closest(":jqmData(role='page')"),_pageTheme:e(),_panelInner:f(),_wrapper:g(),_fixedToolbar:h()}),b._addPanelClasses(),b._wrapper.addClass(this.options.classes.contentWrapClosed),b._fixedToolbar.addClass(this.options.classes.contentFixedToolbarClosed),b._page.addClass(b.options.classes.pagePanel),a.support.cssTransform3d&&b.options.animate&&this.element.addClass(b.options.classes.animate),b._bindUpdateLayout(),b._bindCloseEvents(),b._bindLinkListeners(),b._bindPageEvents(),b.options.dismissible&&b._createModal(),b._bindSwipeEvents()},_createModal:function(){var b=this;b._modal=a("<div class='"+b.options.classes.modal+"' data-panelid='"+b._panelID+"'></div>").on("mousedown",function(){b.close()}).appendTo(this._page)},_getPosDisplayClasses:function(a){return a+"-position-"+this.options.position+" "+a+"-display-"+this.options.display},_getPanelClasses:function(){var a=this.options.classes.panel+" "+this._getPosDisplayClasses(this.options.classes.panel)+" "+this.options.classes.panelClosed;return this.options.theme&&(a+=" ui-body-"+this.options.theme),this.options.positionFixed&&(a+=" "+this.options.classes.panelFixed),a},_addPanelClasses:function(){this.element.addClass(this._getPanelClasses())},_bindCloseEvents:function(){var a=this;a._closeLink.on("click.panel",function(b){return b.preventDefault(),a.close(),!1}),a.element.on("click.panel","a:jqmData(ajax='false')",function(){a.close()})},_positionPanel:function(){var b=this,c=b._panelInner.outerHeight(),d=c>a.mobile.getScreenHeight();d||!b.options.positionFixed?(d&&(b._unfixPanel(),a.mobile.resetActivePageHeight(c)),b._scrollIntoView(c)):b._fixPanel()},_scrollIntoView:function(c){c<a(b).scrollTop()&&b.scrollTo(0,0)},_bindFixListener:function(){this._on(a(b),{throttledresize:"_positionPanel"})},_unbindFixListener:function(){this._off(a(b),"throttledresize")},_unfixPanel:function(){this.options.positionFixed&&a.support.fixedPosition&&this.element.removeClass(this.options.classes.panelFixed)},_fixPanel:function(){this.options.positionFixed&&a.support.fixedPosition&&this.element.addClass(this.options.classes.panelFixed)},_bindUpdateLayout:function(){var a=this;a.element.on("updatelayout",function(){a._open&&a._positionPanel()})},_bindLinkListeners:function(){var b=this;b._page.on("click.panel","a",function(c){if(this.href.split("#")[1]===b._panelID&&b._panelID!==d){c.preventDefault();var e,f=a(this);return f.hasClass("ui-link")||(e=f.parent().parent(),e.hasClass("ui-li")&&(f=e.parent()),f.addClass(a.mobile.activeBtnClass),b.element.one("panelopen panelclose",function(){f.removeClass(a.mobile.activeBtnClass)})),b.toggle(),!1}})},_bindSwipeEvents:function(){var a=this,b=a._modal?a.element.add(a._modal):a.element;a.options.swipeClose&&("left"===a.options.position?b.on("swipeleft.panel",function(){a.close()}):b.on("swiperight.panel",function(){a.close()}))},_bindPageEvents:function(){var a=this;a._page.on("panelbeforeopen",function(b){a._open&&b.target!==a.element[0]&&a.close()}).on("pagehide",function(){a._open&&a.close(!0)}).on("keyup.panel",function(b){27===b.keyCode&&a._open&&a.close()})},_open:!1,_contentWrapOpenClasses:null,_fixedToolbarOpenClasses:null,_modalOpenClasses:null,open:function(b){if(!this._open){var c=this,d=c.options,e=function(){c._page.off("panelclose"),c._page.jqmData("panel","open"),!b&&a.support.cssTransform3d&&d.animate?c.element.add(c._wrapper).on(c._transitionEndEvents,f):setTimeout(f,0),c.options.theme&&"overlay"!==c.options.display&&c._page.removeClass(c._pageTheme).addClass("ui-body-"+c.options.theme),c.element.removeClass(d.classes.panelClosed).addClass(d.classes.panelOpen),c._positionPanel(),c.options.theme&&"overlay"!==c.options.display&&c._wrapper.css("min-height",c._page.css("min-height")),c._contentWrapOpenClasses=c._getPosDisplayClasses(d.classes.contentWrap),c._wrapper.removeClass(d.classes.contentWrapClosed).addClass(c._contentWrapOpenClasses+" "+d.classes.contentWrapOpen),c._fixedToolbarOpenClasses=c._getPosDisplayClasses(d.classes.contentFixedToolbar),c._fixedToolbar.removeClass(d.classes.contentFixedToolbarClosed).addClass(c._fixedToolbarOpenClasses+" "+d.classes.contentFixedToolbarOpen),c._modalOpenClasses=c._getPosDisplayClasses(d.classes.modal)+" "+d.classes.modalOpen,c._modal&&c._modal.addClass(c._modalOpenClasses)},f=function(){c.element.add(c._wrapper).off(c._transitionEndEvents,f),c._page.addClass(d.classes.pagePanelOpen),c._bindFixListener(),c._trigger("open")};this.element.closest(".ui-page-active").length<0&&(b=!0),c._trigger("beforeopen"),"open"===c._page.jqmData("panel")?c._page.on("panelclose",function(){e()}):e(),c._open=!0}},close:function(b){if(this._open){var c=this.options,d=this,e=function(){!b&&a.support.cssTransform3d&&c.animate?d.element.add(d._wrapper).on(d._transitionEndEvents,f):setTimeout(f,0),d._page.removeClass(c.classes.pagePanelOpen),d.element.removeClass(c.classes.panelOpen),d._wrapper.removeClass(c.classes.contentWrapOpen),d._fixedToolbar.removeClass(c.classes.contentFixedToolbarOpen),d._modal&&d._modal.removeClass(d._modalOpenClasses)},f=function(){d.options.theme&&"overlay"!==d.options.display&&(d._page.removeClass("ui-body-"+d.options.theme).addClass(d._pageTheme),d._wrapper.css("min-height","")),d.element.add(d._wrapper).off(d._transitionEndEvents,f),d.element.addClass(c.classes.panelClosed),d._wrapper.removeClass(d._contentWrapOpenClasses).addClass(c.classes.contentWrapClosed),d._fixedToolbar.removeClass(d._fixedToolbarOpenClasses).addClass(c.classes.contentFixedToolbarClosed),d._fixPanel(),d._unbindFixListener(),a.mobile.resetActivePageHeight(),d._page.jqmRemoveData("panel"),d._trigger("close")};this.element.closest(".ui-page-active").length<0&&(b=!0),d._trigger("beforeclose"),e(),d._open=!1}},toggle:function(){this[this._open?"close":"open"]()},_transitionEndEvents:"webkitTransitionEnd oTransitionEnd otransitionend transitionend msTransitionEnd",_destroy:function(){var b=this.options.classes,c=this.options.theme,d=this.element.siblings("."+b.panel).length;d?this._open&&(this._wrapper.removeClass(b.contentWrapOpen),this._fixedToolbar.removeClass(b.contentFixedToolbarOpen),this._page.jqmRemoveData("panel"),this._page.removeClass(b.pagePanelOpen),c&&this._page.removeClass("ui-body-"+c).addClass(this._pageTheme)):(this._wrapper.children().unwrap(),this._page.find("a").unbind("panelopen panelclose"),this._page.removeClass(b.pagePanel),this._open&&(this._page.jqmRemoveData("panel"),this._page.removeClass(b.pagePanelOpen),c&&this._page.removeClass("ui-body-"+c).addClass(this._pageTheme),a.mobile.resetActivePageHeight())),this._panelInner.children().unwrap(),this.element.removeClass([this._getPanelClasses(),b.panelAnimate].join(" ")).off("swipeleft.panel swiperight.panel").off("panelbeforeopen").off("panelhide").off("keyup.panel").off("updatelayout"),this._closeLink.off("click.panel"),this._modal&&this._modal.remove(),this.element.off(this._transitionEndEvents).removeClass([b.panelUnfixed,b.panelClosed,b.panelOpen].join(" "))}}),a(c).bind("pagecreate create",function(b){a.mobile.panel.prototype.enhanceWithin(b.target)})}(a),function(a,b){a.widget("mobile.table",a.mobile.widget,{options:{classes:{table:"ui-table"},initSelector:":jqmData(role='table')"},_create:function(){var a=this;a.refresh(!0)},refresh:function(c){var d=this,e=this.element.find("thead tr");c&&this.element.addClass(this.options.classes.table),d.headers=this.element.find("tr:eq(0)").children(),d.allHeaders=d.headers.add(e.children()),e.each(function(){var f=0;a(this).children().each(function(){var g=parseInt(a(this).attr("colspan"),10),h=":nth-child("+(f+1)+")";if(a(this).jqmData("colstart",f+1),g)for(var i=0;g-1>i;i++)f++,h+=", :nth-child("+(f+1)+")";c===b&&a(this).jqmData("cells",""),a(this).jqmData("cells",d.element.find("tr").not(e.eq(0)).not(this).children(h)),f++})}),c===b&&this.element.trigger("refresh")}}),a.mobile.document.bind("pagecreate create",function(b){a.mobile.table.prototype.enhanceWithin(b.target)})}(a),function(a,b){a.mobile.table.prototype.options.mode="columntoggle",a.mobile.table.prototype.options.columnBtnTheme=null,a.mobile.table.prototype.options.columnPopupTheme=null,a.mobile.table.prototype.options.columnBtnText="Columns...",a.mobile.table.prototype.options.classes=a.extend(a.mobile.table.prototype.options.classes,{popup:"ui-table-columntoggle-popup",columnBtn:"ui-table-columntoggle-btn",priorityPrefix:"ui-table-priority-",columnToggleTable:"ui-table-columntoggle"}),a.mobile.document.delegate(":jqmData(role='table')","tablecreate refresh",function(c){var d,e,f,g,h=a(this),i=h.data("mobile-table"),j=c.type,k=i.options,l=a.mobile.ns,m=(h.attr("id")||k.classes.popup)+"-popup";"columntoggle"===k.mode&&("refresh"!==j&&(i.element.addClass(k.classes.columnToggleTable),d=a("<a href='#"+m+"' class='"+k.classes.columnBtn+"' data-"+l+"rel='popup' data-"+l+"mini='true'>"+k.columnBtnText+"</a>"),e=a("<div data-"+l+"role='popup' data-"+l+"role='fieldcontain' class='"+k.classes.popup+"' id='"+m+"'></div>"),f=a("<fieldset data-"+l+"role='controlgroup'></fieldset>")),i.headers.not("td").each(function(b){var c=a(this).jqmData("priority"),d=a(this).add(a(this).jqmData("cells"));c&&(d.addClass(k.classes.priorityPrefix+c),"refresh"!==j?a("<label><input type='checkbox' checked />"+a(this).text()+"</label>").appendTo(f).children(0).jqmData("cells",d).checkboxradio({theme:k.columnPopupTheme}):a("#"+m+" fieldset div:eq("+b+")").find("input").jqmData("cells",d))}),"refresh"!==j&&f.appendTo(e),g=f===b?a("#"+m+" fieldset"):f,"refresh"!==j&&(g.on("change","input",function(){this.checked?a(this).jqmData("cells").removeClass("ui-table-cell-hidden").addClass("ui-table-cell-visible"):a(this).jqmData("cells").removeClass("ui-table-cell-visible").addClass("ui-table-cell-hidden")}),d.insertBefore(h).buttonMarkup({theme:k.columnBtnTheme}),e.insertBefore(h).popup()),i.update=function(){g.find("input").each(function(){this.checked?(this.checked="table-cell"===a(this).jqmData("cells").eq(0).css("display"),"refresh"===j&&a(this).jqmData("cells").addClass("ui-table-cell-visible")):a(this).jqmData("cells").addClass("ui-table-cell-hidden"),a(this).checkboxradio("refresh")})},a.mobile.window.on("throttledresize",i.update),i.update())})}(a),function(a){a.mobile.table.prototype.options.mode="reflow",a.mobile.table.prototype.options.classes=a.extend(a.mobile.table.prototype.options.classes,{reflowTable:"ui-table-reflow",cellLabels:"ui-table-cell-label"}),a.mobile.document.delegate(":jqmData(role='table')","tablecreate refresh",function(b){var c=a(this),d=b.type,e=c.data("mobile-table"),f=e.options;if("reflow"===f.mode){"refresh"!==d&&e.element.addClass(f.classes.reflowTable);var g=a(e.allHeaders.get().reverse());g.each(function(){var b=a(this).jqmData("cells"),c=a(this).jqmData("colstart"),d=b.not(this).filter("thead th").length&&" ui-table-cell-label-top",e=a(this).text();if(""!==e)if(d){var g=parseInt(a(this).attr("colspan"),10),h="";g&&(h="td:nth-child("+g+"n + "+c+")"),b.filter(h).prepend("<b class='"+f.classes.cellLabels+d+"'>"+e+"</b>")}else b.prepend("<b class='"+f.classes.cellLabels+"'>"+e+"</b>")})}})}(a),function(a,b){function c(a){e=a.originalEvent,i=e.accelerationIncludingGravity,f=Math.abs(i.x),g=Math.abs(i.y),h=Math.abs(i.z),!b.orientation&&(f>7||(h>6&&8>g||8>h&&g>6)&&f>5)?j.enabled&&j.disable():j.enabled||j.enable()}a.mobile.iosorientationfixEnabled=!0;var d=navigator.userAgent;if(!(/iPhone|iPad|iPod/.test(navigator.platform)&&/OS [1-5]_[0-9_]* like Mac OS X/i.test(d)&&d.indexOf("AppleWebKit")>-1))return a.mobile.iosorientationfixEnabled=!1,void 0;var e,f,g,h,i,j=a.mobile.zoom;a.mobile.document.on("mobileinit",function(){a.mobile.iosorientationfixEnabled&&a.mobile.window.bind("orientationchange.iosorientationfix",j.enable).bind("devicemotion.iosorientationfix",c)})}(a,this),function(a,b){function d(){e.removeClass("ui-mobile-rendering")}var e=a("html"),f=(a("head"),a.mobile.window);a(b.document).trigger("mobileinit"),a.mobile.gradeA()&&(a.mobile.ajaxBlacklist&&(a.mobile.ajaxEnabled=!1),e.addClass("ui-mobile ui-mobile-rendering"),setTimeout(d,5e3),a.extend(a.mobile,{initializePage:function(){var b=a.mobile.path,e=a(":jqmData(role='page'), :jqmData(role='dialog')"),g=b.stripHash(b.stripQueryParams(b.parseLocation().hash)),h=c.getElementById(g);e.length||(e=a("body").wrapInner("<div data-"+a.mobile.ns+"role='page'></div>").children(0)),e.each(function(){var b=a(this);b.jqmData("url")||b.attr("data-"+a.mobile.ns+"url",b.attr("id")||location.pathname+location.search)}),a.mobile.firstPage=e.first(),a.mobile.pageContainer=a.mobile.firstPage.parent().addClass("ui-mobile-viewport"),a.mobile.navreadyDeferred.resolve(),f.trigger("pagecontainercreate"),a.mobile.showPageLoadingMsg(),d(),a.mobile.hashListeningEnabled&&a.mobile.path.isHashValid(location.hash)&&(a(h).is(':jqmData(role="page")')||a.mobile.path.isPath(g)||g===a.mobile.dialogHashKey)?a.event.special.navigate.isPushStateEnabled()?(a.mobile.navigate.history.stack=[],a.mobile.navigate(a.mobile.path.isPath(location.hash)?location.hash:location.href)):f.trigger("hashchange",[!0]):(a.mobile.path.isHashValid(location.hash)&&(a.mobile.urlHistory.initialDst=g.replace("#","")),a.event.special.navigate.isPushStateEnabled()&&a.mobile.navigate.navigator.squash(b.parseLocation().href),a.mobile.changePage(a.mobile.firstPage,{transition:"none",reverse:!0,changeHash:!1,fromHashChange:!0}))}}),a(function(){b.scrollTo(0,1),a.mobile.defaultHomeScroll=a.support.scrollTop&&1!==a.mobile.window.scrollTop()?1:0,a.mobile.autoInitializePage&&a.mobile.initializePage(),f.load(a.mobile.silentScroll),a.support.cssPointerEvents||a.mobile.document.delegate(".ui-disabled","vclick",function(a){a.preventDefault(),a.stopImmediatePropagation()})}))}(a,this)});
/*
 // sourceMappingURL=jquery.mobile-1.3.2.min.map
 */
////////////////////////////////////////
// SRC End --> libs/jquery/jquery.mobile-1.3.2.min.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/jquery/jquery.mobile-events.min.js
////////////////////////////////////////
(function(e){function d(){var e=o();if(e!==u){u=e;i.trigger("orientationchange")}}function E(t,n,r,i){var s=r.type;r.type=n;e.event.dispatch.call(t,r,i);r.type=s}e.attrFn=e.attrFn||{};var t=navigator.userAgent.toLowerCase(),n=t.indexOf("chrome")>-1&&(t.indexOf("windows")>-1||t.indexOf("macintosh")>-1||t.indexOf("linux")>-1)&&t.indexOf("chrome")<0,r={swipe_h_threshold:50,swipe_v_threshold:50,taphold_threshold:750,doubletap_int:500,touch_capable:"ontouchstart"in document.documentElement&&!n,orientation_support:"orientation"in window&&"onorientationchange"in window,startevent:"ontouchstart"in document.documentElement&&!n?"touchstart":"mousedown",endevent:"ontouchstart"in document.documentElement&&!n?"touchend":"mouseup",moveevent:"ontouchstart"in document.documentElement&&!n?"touchmove":"mousemove",tapevent:"ontouchstart"in document.documentElement&&!n?"tap":"click",scrollevent:"ontouchstart"in document.documentElement&&!n?"touchmove":"scroll",hold_timer:null,tap_timer:null};e.isTouchCapable=function(){return r.touch_capable};e.getStartEvent=function(){return r.startevent};e.getEndEvent=function(){return r.endevent};e.getMoveEvent=function(){return r.moveevent};e.getTapEvent=function(){return r.tapevent};e.getScrollEvent=function(){return r.scrollevent};e.each(["tapstart","tapend","tap","singletap","doubletap","taphold","swipe","swipeup","swiperight","swipedown","swipeleft","swipeend","scrollstart","scrollend","orientationchange"],function(t,n){e.fn[n]=function(e){return e?this.bind(n,e):this.trigger(n)};e.attrFn[n]=true});e.event.special.tapstart={setup:function(){var t=this,n=e(t);n.bind(r.startevent,function(e){n.data("callee",arguments.callee);if(e.which&&e.which!==1){return false}var i=e.originalEvent,s={position:{x:r.touch_capable?i.touches[0].screenX:e.screenX,y:r.touch_capable?i.touches[0].screenY:e.screenY},offset:{x:r.touch_capable?i.touches[0].pageX-i.touches[0].target.offsetLeft:e.offsetX,y:r.touch_capable?i.touches[0].pageY-i.touches[0].target.offsetTop:e.offsetY},time:(new Date).getTime(),target:e.target};E(t,"tapstart",e,s);return true})},remove:function(){e(this).unbind(r.startevent,e(this).data.callee)}};e.event.special.tapend={setup:function(){var t=this,n=e(t);n.bind(r.endevent,function(e){n.data("callee",arguments.callee);var i=e.originalEvent;var s={position:{x:r.touch_capable?i.changedTouches[0].screenX:e.screenX,y:r.touch_capable?i.changedTouches[0].screenY:e.screenY},offset:{x:r.touch_capable?i.changedTouches[0].pageX-i.changedTouches[0].target.offsetLeft:e.offsetX,y:r.touch_capable?i.changedTouches[0].pageY-i.changedTouches[0].target.offsetTop:e.offsetY},time:(new Date).getTime(),target:e.target};E(t,"tapend",e,s);return true})},remove:function(){e(this).unbind(r.endevent,e(this).data.callee)}};e.event.special.taphold={setup:function(){var t=this,n=e(t),i,s,o={x:0,y:0};n.bind(r.startevent,function(e){if(e.which&&e.which!==1){return false}else{n.data("tapheld",false);i=e.target;var s=e.originalEvent;var u=(new Date).getTime(),a={x:r.touch_capable?s.touches[0].screenX:e.screenX,y:r.touch_capable?s.touches[0].screenY:e.screenY},f={x:r.touch_capable?s.touches[0].pageX-s.touches[0].target.offsetLeft:e.offsetX,y:r.touch_capable?s.touches[0].pageY-s.touches[0].target.offsetTop:e.offsetY};o.x=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX;o.y=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY;r.hold_timer=window.setTimeout(function(){var l=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX,c=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY;if(e.target==i&&o.x==l&&o.y==c){n.data("tapheld",true);var h=(new Date).getTime(),p={x:r.touch_capable?s.touches[0].screenX:e.screenX,y:r.touch_capable?s.touches[0].screenY:e.screenY},d={x:r.touch_capable?s.touches[0].pageX-s.touches[0].target.offsetLeft:e.offsetX,y:r.touch_capable?s.touches[0].pageY-s.touches[0].target.offsetTop:e.offsetY};duration=h-u;var v={startTime:u,endTime:h,startPosition:a,startOffset:f,endPosition:p,endOffset:d,duration:duration,target:e.target};n.data("callee1",arguments.callee);E(t,"taphold",e,v)}},r.taphold_threshold);return true}}).bind(r.endevent,function(){n.data("callee2",arguments.callee);n.data("tapheld",false);window.clearTimeout(r.hold_timer)})},remove:function(){e(this).unbind(r.startevent,e(this).data.callee1).unbind(r.endevent,e(this).data.callee2)}};e.event.special.doubletap={setup:function(){var t=this,n=e(t),i,s,o,u;n.bind(r.startevent,function(e){if(e.which&&e.which!==1){return false}else{n.data("doubletapped",false);i=e.target;n.data("callee1",arguments.callee);u=e.originalEvent;o={position:{x:r.touch_capable?u.touches[0].screenX:e.screenX,y:r.touch_capable?u.touches[0].screenY:e.screenY},offset:{x:r.touch_capable?u.touches[0].pageX-u.touches[0].target.offsetLeft:e.offsetX,y:r.touch_capable?u.touches[0].pageY-u.touches[0].target.offsetTop:e.offsetY},time:(new Date).getTime(),target:e.target};return true}}).bind(r.endevent,function(e){var a=(new Date).getTime();var f=n.data("lastTouch")||a+1;var l=a-f;window.clearTimeout(s);n.data("callee2",arguments.callee);if(l<r.doubletap_int&&l>0&&e.target==i&&l>100){n.data("doubletapped",true);window.clearTimeout(r.tap_timer);var c={position:{x:r.touch_capable?u.touches[0].screenX:e.screenX,y:r.touch_capable?u.touches[0].screenY:e.screenY},offset:{x:r.touch_capable?u.touches[0].pageX-u.touches[0].target.offsetLeft:e.offsetX,y:r.touch_capable?u.touches[0].pageY-u.touches[0].target.offsetTop:e.offsetY},time:(new Date).getTime(),target:e.target};var h={firstTap:o,secondTap:c,interval:c.time-o.time};E(t,"doubletap",e,h)}else{n.data("lastTouch",a);s=window.setTimeout(function(e){window.clearTimeout(s)},r.doubletap_int,[e])}n.data("lastTouch",a)})},remove:function(){e(this).unbind(r.startevent,e(this).data.callee1).unbind(r.endevent,e(this).data.callee2)}};e.event.special.singletap={setup:function(){var t=this,n=e(t),i=null,s=null,o={x:0,y:0};n.bind(r.startevent,function(e){if(e.which&&e.which!==1){return false}else{s=(new Date).getTime();i=e.target;n.data("callee1",arguments.callee);o.x=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX;o.y=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY;return true}}).bind(r.endevent,function(e){n.data("callee2",arguments.callee);if(e.target==i){end_pos_x=e.originalEvent.changedTouches?e.originalEvent.changedTouches[0].pageX:e.pageX;end_pos_y=e.originalEvent.changedTouches?e.originalEvent.changedTouches[0].pageY:e.pageY;r.tap_timer=window.setTimeout(function(){if(!n.data("doubletapped")&&!n.data("tapheld")&&o.x==end_pos_x&&o.y==end_pos_y){var i=e.originalEvent;var u={position:{x:r.touch_capable?i.changedTouches[0].screenX:e.screenX,y:r.touch_capable?i.changedTouches[0].screenY:e.screenY},offset:{x:r.touch_capable?i.changedTouches[0].pageX-i.changedTouches[0].target.offsetLeft:e.offsetX,y:r.touch_capable?i.changedTouches[0].pageY-i.changedTouches[0].target.offsetTop:e.offsetY},time:(new Date).getTime(),target:e.target};if(u.time-s<r.taphold_threshold){E(t,"singletap",e,u)}}},r.doubletap_int)}})},remove:function(){e(this).unbind(r.startevent,e(this).data.callee1).unbind(r.endevent,e(this).data.callee2)}};e.event.special.tap={setup:function(){var t=this,n=e(t),i=false,s=null,o,u={x:0,y:0};n.bind(r.startevent,function(e){n.data("callee1",arguments.callee);if(e.which&&e.which!==1){return false}else{i=true;u.x=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX;u.y=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY;o=(new Date).getTime();s=e.target;return true}}).bind(r.endevent,function(e){n.data("callee2",arguments.callee);var a=e.originalEvent.targetTouches?e.originalEvent.changedTouches[0].pageX:e.pageX,f=e.originalEvent.targetTouches?e.originalEvent.changedTouches[0].pageY:e.pageY;if(s==e.target&&i&&(new Date).getTime()-o<r.taphold_threshold&&u.x==a&&u.y==f){var l=e.originalEvent;var c={position:{x:r.touch_capable?l.changedTouches[0].screenX:e.screenX,y:r.touch_capable?l.changedTouches[0].screenY:e.screenY},offset:{x:r.touch_capable?l.changedTouches[0].pageX-l.changedTouches[0].target.offsetLeft:e.offsetX,y:r.touch_capable?l.changedTouches[0].pageY-l.changedTouches[0].target.offsetTop:e.offsetY},time:(new Date).getTime(),target:e.target};E(t,"tap",e,c)}})},remove:function(){e(this).unbind(r.startevent,e(this).data.callee1).unbind(r.endevent,e(this).data.callee2)}};e.event.special.swipe={setup:function(){function f(t){n=e(t.target);n.data("callee1",arguments.callee);o.x=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX;o.y=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY;u.x=o.x;u.y=o.y;i=true;var s=t.originalEvent;a={position:{x:r.touch_capable?s.touches[0].screenX:t.screenX,y:r.touch_capable?s.touches[0].screenY:t.screenY},offset:{x:r.touch_capable?s.touches[0].pageX-s.touches[0].target.offsetLeft:t.offsetX,y:r.touch_capable?s.touches[0].pageY-s.touches[0].target.offsetTop:t.offsetY},time:(new Date).getTime(),target:t.target};var f=new Date;while(new Date-f<100){}}function l(t){n=e(t.target);n.data("callee2",arguments.callee);u.x=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX;u.y=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY;window.clearTimeout(r.hold_timer);var f;var l=n.data("xthreshold"),c=n.data("ythreshold"),h=typeof l!=="undefined"&&l!==false&&parseInt(l)?parseInt(l):r.swipe_h_threshold,p=typeof c!=="undefined"&&c!==false&&parseInt(c)?parseInt(c):r.swipe_v_threshold;if(o.y>u.y&&o.y-u.y>p){f="swipeup"}if(o.x<u.x&&u.x-o.x>h){f="swiperight"}if(o.y<u.y&&u.y-o.y>p){f="swipedown"}if(o.x>u.x&&o.x-u.x>h){f="swipeleft"}if(f!=undefined&&i){o.x=0;o.y=0;u.x=0;u.y=0;i=false;var d=t.originalEvent;endEvnt={position:{x:r.touch_capable?d.touches[0].screenX:t.screenX,y:r.touch_capable?d.touches[0].screenY:t.screenY},offset:{x:r.touch_capable?d.touches[0].pageX-d.touches[0].target.offsetLeft:t.offsetX,y:r.touch_capable?d.touches[0].pageY-d.touches[0].target.offsetTop:t.offsetY},time:(new Date).getTime(),target:t.target};var v=Math.abs(a.position.x-endEvnt.position.x),m=Math.abs(a.position.y-endEvnt.position.y);var g={startEvnt:a,endEvnt:endEvnt,direction:f.replace("swipe",""),xAmount:v,yAmount:m,duration:endEvnt.time-a.time};s=true;n.trigger("swipe",g).trigger(f,g)}}function c(t){n=e(t.target);var o="";n.data("callee3",arguments.callee);if(s){var u=n.data("xthreshold"),f=n.data("ythreshold"),l=typeof u!=="undefined"&&u!==false&&parseInt(u)?parseInt(u):r.swipe_h_threshold,c=typeof f!=="undefined"&&f!==false&&parseInt(f)?parseInt(f):r.swipe_v_threshold;var h=t.originalEvent;endEvnt={position:{x:r.touch_capable?h.changedTouches[0].screenX:t.screenX,y:r.touch_capable?h.changedTouches[0].screenY:t.screenY},offset:{x:r.touch_capable?h.changedTouches[0].pageX-h.changedTouches[0].target.offsetLeft:t.offsetX,y:r.touch_capable?h.changedTouches[0].pageY-h.changedTouches[0].target.offsetTop:t.offsetY},time:(new Date).getTime(),target:t.target};if(a.position.y>endEvnt.position.y&&a.position.y-endEvnt.position.y>c){o="swipeup"}if(a.position.x<endEvnt.position.x&&endEvnt.position.x-a.position.x>l){o="swiperight"}if(a.position.y<endEvnt.position.y&&endEvnt.position.y-a.position.y>c){o="swipedown"}if(a.position.x>endEvnt.position.x&&a.position.x-endEvnt.position.x>l){o="swipeleft"}var p=Math.abs(a.position.x-endEvnt.position.x),d=Math.abs(a.position.y-endEvnt.position.y);var v={startEvnt:a,endEvnt:endEvnt,direction:o.replace("swipe",""),xAmount:p,yAmount:d,duration:endEvnt.time-a.time};n.trigger("swipeend",v)}i=false;s=false}var t=this,n=e(t),i=false,s=false,o={x:0,y:0},u={x:0,y:0},a;n.bind(r.startevent,f);n.bind(r.moveevent,l);n.bind(r.endevent,c)},remove:function(){e(this).unbind(r.startevent,e(this).data.callee1).unbind(r.moveevent,e(this).data.callee2).unbind(r.endevent,e(this).data.callee3)}};e.event.special.scrollstart={setup:function(){function o(e,n){i=n;E(t,i?"scrollstart":"scrollend",e)}var t=this,n=e(t),i,s;n.bind(r.scrollevent,function(e){n.data("callee",arguments.callee);if(!i){o(e,true)}clearTimeout(s);s=setTimeout(function(){o(e,false)},50)})},remove:function(){e(this).unbind(r.scrollevent,e(this).data.callee)}};var i=e(window),s,o,u,a,f,l={0:true,180:true};if(r.orientation_support){var c=window.innerWidth||e(window).width(),h=window.innerHeight||e(window).height(),p=50;a=c>h&&c-h>p;f=l[window.orientation];if(a&&f||!a&&!f){l={"-90":true,90:true}}}e.event.special.orientationchange=s={setup:function(){if(r.orientation_support){return false}u=o();i.bind("throttledresize",d);return true},teardown:function(){if(r.orientation_support){return false}i.unbind("throttledresize",d);return true},add:function(e){var t=e.handler;e.handler=function(e){e.orientation=o();return t.apply(this,arguments)}}};e.event.special.orientationchange.orientation=o=function(){var e=true,t=document.documentElement;if(r.orientation_support){e=l[window.orientation]}else{e=t&&t.clientWidth/t.clientHeight<1.1}return e?"portrait":"landscape"};e.event.special.throttledresize={setup:function(){e(this).bind("resize",m)},teardown:function(){e(this).unbind("resize",m)}};var v=250,m=function(){b=(new Date).getTime();w=b-g;if(w>=v){g=b;e(this).trigger("throttledresize")}else{if(y){window.clearTimeout(y)}y=window.setTimeout(d,v-w)}},g=0,y,b,w;e.each({scrollend:"scrollstart",swipeup:"swipe",swiperight:"swipe",swipedown:"swipe",swipeleft:"swipe",swipeend:"swipe"},function(t,n,r){e.event.special[t]={setup:function(){e(this).bind(n,e.noop)}}})})(jQuery)

////////////////////////////////////////
// SRC End --> libs/jquery/jquery.mobile-events.min.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/jquery/jquery.pep.js
////////////////////////////////////////
/*      
 *         ________                                                            ________        
 *         ______(_)_____ ____  __________________  __ _____________________   ______(_)_______
 *         _____  /_  __ `/  / / /  _ \_  ___/_  / / / ___  __ \  _ \__  __ \  _____  /__  ___/
 *         ____  / / /_/ // /_/ //  __/  /   _  /_/ /____  /_/ /  __/_  /_/ /______  / _(__  ) 
 *         ___  /  \__, / \__,_/ \___//_/    _\__, /_(_)  .___/\___/_  .___/_(_)__  /  /____/  
 *         /___/     /_/                     /____/    /_/          /_/        /___/           
 *      
 *        http://pep.briangonzalez.org
 *        Kinetic drag for mobile/desktop.
 *        
 *        Copyright (c) 2013 Brian Gonzalez
 *        Licensed under the MIT license.
 *
 *        Title generated using "Speed" @ 
 *        http://patorjk.com/software/taag/#p=display&f=Speed&t=jquery.pep.js
 */
      
;(function ( $, window, undefined ) {

  "use strict";
  
  //  create the defaults once
  var pluginName = 'pep';
  var defaults   = {

    // Options
    // ----------------------------------------------------------------------------------------------
    // See ** https://github.com/briangonzalez/jquery.pep.js ** for fully documented options.
    // It was too hard to manage options here and in the readme.
    // ----------------------------------------------------------------------------------------------
    initiate:                       function(){},                                
    start:                          function(){},                                
    drag:                           function(){},                                
    stop:                           function(){},                                
    rest:                           function(){},
    startThreshold:                 [0,0],        
    grid:                           [1,1],                                                               
    debug:                          false,                                       
    activeClass:                    'pep-active',                                
    multiplier:                     1,                                           
    velocityMultiplier:             1.9,                                         
    shouldPreventDefault:           true,                                        
    allowDragEventPropagation:      true,                                        
    stopEvents:                     '',                                          
    hardwareAccelerate:             true,                                        
    useCSSTranslation:              true,                                        
    disableSelect:                  true,                                        
    cssEaseString:                  "cubic-bezier(0.190, 1.000, 0.220, 1.000)",  
    cssEaseDuration:                750,                                         
    shouldEase:                     true,                                        
    droppable:                      false,                                       
    droppableActiveClass:           'pep-dpa',                                   
    overlapFunction:                false,                                       
    constrainTo:                    false,                                       
    removeMargins:                  true,                                        
    place:                          true,                                        
    deferPlacement:                 false,                                       
    axis:                           null,                                        
    forceNonCSS3Movement:           false                                       
  };

  //  ---------------------------------
  //  -----  Our main Pep object  -----
  //  ---------------------------------
  function Pep( el, options ) {

    this.name = pluginName;

    // reference to our DOM object 
    // and it's jQuery equivalent.
    this.el  = el;
    this.$el = $(el);

    //  merge in defaults
    this.defaults   = defaults;
    this.options    = $.extend( {}, this.defaults, options) ;

    // store document/body so we don't need to keep grabbing them
    // throughout the code
    this.$document  = $(this.$el[0].ownerDocument);
    this.$body      = this.$document.find('body'); 

    //  Create our triggers based on touch/click device 
    this.moveTrigger  = "MSPointerMove touchmove mousemove";
    this.startTrigger = "MSPointerDown touchstart mousedown";
    this.stopTrigger  = "MSPointerUp touchend mouseup";

    this.stopEvents   = [ this.stopTrigger, this.options.stopEvents ].join(' ');

    if ( this.options.constrainTo === 'parent' ) {
      this.$container = this.$el.parent();
    } else if ( this.options.constrainTo === 'window' ) {
      this.$container = this.$document;
    }

    // IE need this
    if ( this.isPointerEventCompatible() )
      this.applyMSDefaults();

    this.CSSEaseHash    = this.getCSSEaseHash();
    this.scale          = 1;
    this.started        = false;
    this.disabled       = false;
    this.resetVelocityQueue();

    this.init();
  }

  //  init();
  //    initialization logic 
  //    you already have access to the DOM el and the options via the instance, 
  //    e.g., this.el and this.options
  Pep.prototype.init = function () {
    var self = this;

    if ( this.options.debug )
      this.buildDebugDiv();

    if ( this.options.disableSelect )
      this.disableSelect();

    // position the parent & place the object, if necessary.
    if ( this.options.place && !this.options.deferPlacement ) {
      this.positionParent();
      this.placeObject();
    }

    this.ev = {};       // to store our event movements
    this.pos = {};      // to store positions
    this.subscribe();
  };

  //  subscribe(); 
  //    useful in the event we want to programmatically 
  //    interact with our Pep object.
  //      e.g.:     $('#pep').trigger('stop')
  Pep.prototype.subscribe = function () {
    var self = this;

    // Subscribe to our start event 
    this.$el.bind( this.startTrigger, function(ev){
      self.handleStart(ev);
    });

    // Subscribe to our stop event  
    this.$document.bind( this.stopEvents, function(ev) {
      self.handleStop(ev);
    });

    // Subscribe to our move event  
    this.$document.bind( this.moveTrigger, function(ev){
      self.moveEvent = ev;
    });
  };

  //  handleStart();
  //    once this.startTrigger occurs, handle all of the logic
  //    that must go on. This is where Pep's heavy lifting is done. 
  Pep.prototype.handleStart = function(ev) {
    var self = this;

            // only continue chugging if our start event is a valid move event. 
            if ( this.isValidMoveEvent(ev) && !this.disabled ){

                    // IE10 Hack. Me not happy.
                    if ( this.isPointerEventCompatible() && ev.preventManipulation )
                      ev.preventManipulation();

                    // normalize event
                    ev = this.normalizeEvent(ev);

                    // position the parent & place the object, if necessary.
                    if ( this.options.place && this.options.deferPlacement ) {
                      this.positionParent();
                      this.placeObject();
                    }

                    // log it
                    this.log({ type: 'event', event: ev.type });

                    // hardware accelerate, if necessary.
                    if ( this.options.hardwareAccelerate && !this.hardwareAccelerated ) {
                      this.hardwareAccelerate();
                      this.hardwareAccelerated = true;
                    }

                    // fire user's initiate event.
                    this.options.initiate.call(this, ev, this);

                    // cancel the rest timeout
                    clearTimeout( this.restTimeout );

                    // add active class and reset css animation, if necessary
                    this.$el.addClass( this.options.activeClass );
                    this.removeCSSEasing();

                    // store x & y values for later use
                    this.startX = this.ev.x = ev.pep.x;
                    this.startY = this.ev.y = ev.pep.y;

                    // store the initial touch/click event, used to calculate the inital delta values.
                    this.startEvent = this.moveEvent = ev;

                    // make object active, so watchMoveLoop starts looping.
                    this.active     = true;

                    // preventDefault(), is necessary
                    if ( this.options.shouldPreventDefault )
                      ev.preventDefault();

                    // allow / disallow event bubbling
                    if ( !this.options.allowDragEventPropagation ) 
                      ev.stopPropagation();

                    // animation loop to ensure we don't fire 
                    // too many unneccessary repaints  
                    (function watchMoveLoop(){
                        if ( !self.active ) return;
                        self.handleMove();
                        self.requestAnimationFrame( watchMoveLoop );
                    })($, self);

            }
  };

  //  handleMove();
  //    the logic for when the move events occur 
  Pep.prototype.handleMove = function() {

            // setup our event object
            if ( typeof(this.moveEvent) === 'undefined' ) 
              return;

            // get our move event's x & y
            var ev      = this.normalizeEvent( this.moveEvent );
            var curX    = window.parseInt(ev.pep.x / this.options.grid[0]) * this.options.grid[0];
            var curY    = window.parseInt(ev.pep.y / this.options.grid[1]) * this.options.grid[1];

            // last in, first out (LIFO) queue to help us manage velocity
            this.addToLIFO( { time: ev.timeStamp, x: curX, y: curY } );

            // calculate values necessary to moving
            var dx, dy;

            if ( this.startTrigger.split(' ').indexOf(ev.type) > -1  ){
              dx = 0;
              dy = 0;
            } else{
              dx = curX - this.ev.x;
              dy = curY - this.ev.y;
            }

            this.dx   = dx;
            this.dy   = dy;
            this.ev.x = curX;
            this.ev.y = curY;

            // no movement in either direction -- so return
            if (dx === 0 && dy === 0){
              this.log({ type: 'event', event: '** stopped **' });
              return;
            }

            // check if object has moved past X/Y thresholds
            // if so, fire users start event
            var initialDx  = Math.abs(this.startX - curX);
            var initialDy  = Math.abs(this.startY - curY);
            if ( !this.started && ( initialDx > this.options.startThreshold[0] || initialDy > this.options.startThreshold[1] ) ){
              this.started = true;
              this.$el.addClass('pep-start');
              this.options.start.call(this, this.startEvent, this);
            }

            // Calculate our drop regions
            if ( this.options.droppable ) {
              this.calculateActiveDropRegions();
            }

            // fire user's drag event.
            var continueDrag = this.options.drag.call(this, ev, this);

            if ( continueDrag === false ) {
              this.resetVelocityQueue();
              return;
            }

            // log the move trigger & event position
            this.log({ type: 'event', event: ev.type });
            this.log({ type: 'event-coords', x: this.ev.x, y: this.ev.y });
            this.log({ type: 'velocity' });

            var hash = this.handleConstraint(dx, dy);

            // if using not using CSS transforms, move object via absolute position
            if ( !this.shouldUseCSSTranslation() ){  
              var xOp     = ( dx >= 0 ) ? "+=" + Math.abs(dx/this.scale)*this.options.multiplier : "-=" + Math.abs(dx/this.scale)*this.options.multiplier;
              var yOp     = ( dy >= 0 ) ? "+=" + Math.abs(dy/this.scale)*this.options.multiplier : "-=" + Math.abs(dy/this.scale)*this.options.multiplier;

              if ( this.options.constrainTo ) {
                xOp = (hash.x !== false) ? hash.x : xOp;
                yOp = (hash.y !== false) ? hash.y : yOp;
              }

              this.moveTo(xOp, yOp);
            }
            else {

              dx = (dx/this.scale)*this.options.multiplier;
              dy = (dy/this.scale)*this.options.multiplier;

              if ( this.options.constrainTo ) {
                dx = (hash.x === false) ? dx : 0 ;
                dy = (hash.y === false) ? dy : 0 ;
              }
              this.moveToUsingTransforms( dx, dy );
            }
  };

  //  handleStop();
  //    the logic for when the stop events occur
  Pep.prototype.handleStop = function(ev) {

            // no need to handle stop event if we're not active
            if (!this.active) 
              return;

            // log it
            this.log({ type: 'event', event: ev.type });

            // make object inactive, so watchMoveLoop returns
            this.active = false;

            // remove our start class
            this.$el.removeClass('pep-start')
                    .addClass('pep-ease');

            // Calculate our drop regions
            if ( this.options.droppable ) {
              this.calculateActiveDropRegions();
            }

            // ease the object, if necessary
            if (this.options.shouldEase)
              this.ease(ev);

            // fire user's stop event.
            this.options.stop.call(this, ev, this);

            // this must be set to false after 
            // the user's stop event is called, so the dev
            // has access to it. 
            this.started = false;

            // reset the velocity queue 
            this.resetVelocityQueue();

  };

  //  ease();
  //    used in conjunction with the LIFO queue 
  //    to ease the object after stop
  Pep.prototype.ease = function(ev){

            var pos       = this.$el.position();
            var vel       = this.velocity();
            var dt        = this.dt;
            var x         = (vel.x/this.scale) * this.options.multiplier;
            var y         = (vel.y/this.scale) * this.options.multiplier;

            var hash      = this.handleConstraint(x, y);

            // ✪  Apply the CSS3 animation easing magic  ✪
            if ( this.cssAnimationsSupported() )
              this.$el.css( this.getCSSEaseHash() );
            
            var xOp = ( vel.x > 0 ) ? "+=" + x : "-=" + Math.abs(x);
            var yOp = ( vel.y > 0 ) ? "+=" + y : "-=" + Math.abs(y);

            if ( this.options.constrainTo ) {
              xOp = (hash.x !== false) ? hash.x : xOp;
              yOp = (hash.y !== false) ? hash.y : yOp;
            }

            // ease it via JS, the last true tells it to animate.
            var jsAnimateFallback = !this.cssAnimationsSupported() || this.options.forceNonCSS3Movement;
                   this.moveTo(xOp, yOp, jsAnimateFallback);

            // when the rest occurs, remove active class and call
            // user's rest event.
            var self = this;
            this.restTimeout = setTimeout( function(){ 

              // Calculate our drop regions
              if ( self.options.droppable ) {
                self.calculateActiveDropRegions();
              }
              
              // call users rest event.
              self.options.rest.call(self, ev, self);

              // remove active class 
              self.$el.removeClass( [self.options.activeClass, 'pep-ease'].join(' ') ); 
                                        
            }, this.options.cssEaseDuration );
    
  }; 

  // normalizeEvent()
  Pep.prototype.normalizeEvent = function(ev) {
      ev.pep        = {};

      if ( this.isPointerEventCompatible() || !this.isTouch(ev) ) {
        ev.pep.x      = ev.originalEvent.pageX;
        ev.pep.y      = ev.originalEvent.pageY;
        ev.pep.type   = ev.type;
      } 
      else {
        ev.pep.x      = ev.originalEvent.touches[0].pageX;
        ev.pep.y      = ev.originalEvent.touches[0].pageY;
        ev.pep.type   = ev.type;
      }

       return ev;
   };

  // resetVelocityQueue()
  //    
  Pep.prototype.resetVelocityQueue = function() {
    this.velocityQueue = new Array(5);
  };

  //  moveTo();
  //    move the object to an x and/or y value
  //    using jQuery's .css function -- this fxn uses the 
  //    .css({top: "+=20", left: "-=30"}) syntax
  Pep.prototype.moveTo = function(x,y, animate) {

    animate = ( animate === false || typeof(animate) === 'undefined' ) ? 
      false : true; 

    if ( this.options.axis  === 'x' ){
      y = "+=0";
    } 
    else if ( this.options.axis  === 'y' ){
      x = "+=0";
    }

    var animateDuration = 300;
    this.log({ type: 'delta', x: x, y: y });
    if ( animate ) {
      this.$el.animate({ top: y, left: x }, animateDuration, 'easeOutCirc', {queue: false});
    } else{
      this.$el.stop(true, false).css({ top: y , left: x });
    } 

  };

  //  moveToUsingTransforms();
  //    move the object to an x and/or y value
  Pep.prototype.moveToUsingTransforms = function(x,y) {

    // only move along single axis, if necessary
    if ( this.options.axis  === 'x' )
      y = 0;
    
    if ( this.options.axis  === 'y' )
      x = 0;

    // Check for our initial values if we don't have them.
    var matrixArray  = this.matrixToArray( this.matrixString() );
    if ( !this.cssX )
      this.cssX = parseInt(matrixArray[4], 10);

    if ( !this.cssY )
      this.cssY = parseInt(matrixArray[5], 10);

    // CSS3 transforms are additive from current position
    this.cssX = this.cssX + x;
    this.cssY = this.cssY + y;

    this.log({ type: 'delta', x: x, y: y });

    matrixArray[4]    = this.cssX;
    matrixArray[5]    = this.cssY;
    
    this.translation  = this.arrayToMatrix( matrixArray );

    this.$el.css({ 
        '-webkit-transform': this.translation,
           '-moz-transform': this.translation,
            '-ms-transform': this.translation,
             '-o-transform': this.translation,
                'transform': this.translation  });
  };

  // 3 helper functions for working with the 
  // objects CSS3 transforms
  // matrixString
  // matrixToArray
  // arrayToMatrix
  Pep.prototype.matrixString = function() {

    var validMatrix = function(o){
      return !( !o || o === 'none' || o.indexOf('matrix') === -1);
    };

    var matrix = "matrix(1, 0, 0, 1, 0, 0)";

    if ( validMatrix( this.$el.css('-webkit-transform') ) )
      matrix = this.$el.css('-webkit-transform');

    if ( validMatrix( this.$el.css('-moz-transform') ) )
      matrix = this.$el.css('-moz-transform');

    if ( validMatrix( this.$el.css('-ms-transform') ) )
      matrix = this.$el.css('-ms-transform');

    if ( validMatrix( this.$el.css('-o-transform') ) )
      matrix = this.$el.css('-o-transform');

    if ( validMatrix( this.$el.css('transform') ) )
      matrix = this.$el.css('transform');

    return matrix;
  };

  Pep.prototype.matrixToArray = function(str) {
      return str.split('(')[1].split(')')[0].split(',');
  };

  Pep.prototype.arrayToMatrix = function(array) {
      return "matrix(" +  array.join(',')  + ")";
  };

  //  addToLIFO();
  //    a Last-In/First-Out array of the 5 most recent 
  //    velocity points, which is used for easing
  Pep.prototype.addToLIFO = function(val){
    // last in, first out
    var arr = this.velocityQueue;
    arr = arr.slice(1, arr.length);
    arr.push(val);
    this.velocityQueue = arr;
  };

  //  velocity();
  //    using the LIFO, calculate velocity and return
  //    velocity in each direction (x & y)
  Pep.prototype.velocity = function(){
    var sumX = 0;
    var sumY = 0;

    for ( var i = 0; i < this.velocityQueue.length -1; i++  ){
      if ( this.velocityQueue[i] ){
        sumX        += (this.velocityQueue[i+1].x - this.velocityQueue[i].x);
        sumY        += (this.velocityQueue[i+1].y - this.velocityQueue[i].y);
        this.dt     = ( this.velocityQueue[i+1].time - this.velocityQueue[i].time );
      }
    }

    // return velocity in each direction.
    return { x: sumX*this.options.velocityMultiplier, y: sumY*this.options.velocityMultiplier};
  };

  //  requestAnimationFrame();
  //    requestAnimationFrame Polyfill
  //    More info:
  //    http://paulirish.com/2011/requestanimationframe-for-smart-animating/
  Pep.prototype.requestAnimationFrame = function(callback) {
    return  window.requestAnimationFrame        && window.requestAnimationFrame(callback)         || 
            window.webkitRequestAnimationFrame  && window.webkitRequestAnimationFrame(callback)   || 
            window.mozRequestAnimationFrame     && window.mozRequestAnimationFrame(callback)      || 
            window.oRequestAnimationFrame       && window.mozRequestAnimationFrame(callback)      || 
            window.msRequestAnimationFrame      && window.msRequestAnimationFrame(callback)       || 
            window.setTimeout(callback, 1000 / 60);
  };

  //  positionParent();
  //    add the right positioning to the parent object
  Pep.prototype.positionParent = function() {

    if ( !this.options.constrainTo || this.parentPositioned )
      return;

    this.parentPositioned = true;

    // make `relative` parent if necessary
    if ( this.options.constrainTo === 'parent' ) {
      this.$container.css({ position: 'relative' });
    } else if ( this.options.constrainTo === 'window' && this.$container.get(0).nodeName !== "#document" &&
                this.$container.css('position') !== 'static' )
    {
      this.$container.css({ position: 'static' });
    }

  };

  //  placeObject();
  //    add the right positioning to the object
  Pep.prototype.placeObject = function() {

    if ( this.objectPlaced )
      return;

    this.objectPlaced = true;

    this.offset = (this.options.constrainTo === 'parent' || this.hasNonBodyRelative() ) ?
                    this.$el.position() : this.$el.offset();
    
    // better to leave absolute position alone if
    // it already has one.
    if ( parseInt( this.$el.css('left'), 10 ) )
      this.offset.left = this.$el.css('left');

    if ( parseInt( this.$el.css('top'), 10 ) )
      this.offset.top = this.$el.css('top');

    if ( this.options.removeMargins )
      this.$el.css({margin: 0});
    
    this.$el.css({
      position:   'absolute',
      top:        this.offset.top,
      left:       this.offset.left
    });

  };

  //  hasNonBodyRelative()
  //    returns true if any parent other than the body
  //    has relative positioning
  Pep.prototype.hasNonBodyRelative = function() {
    return this.$el.parents().filter(function() {  
        var $this = $(this);
        return $this.is('body') || $this.css('position') === 'relative';
    }).length > 1;
  };

  //  setScale()
  //    set the scale of the object being moved.
  Pep.prototype.setScale = function(val) {
    this.scale = val;
  };

  //  setMultiplier()
  //    set the multiplier of the object being moved.
  Pep.prototype.setMultiplier = function(val) {
    this.options.multiplier = val;
  };

  //  removeCSSEasing();
  //    remove CSS easing properties, if necessary
  Pep.prototype.removeCSSEasing = function() {
    if ( this.cssAnimationsSupported() )
      this.$el.css( this.getCSSEaseHash(true) );
  };

  //  disableSelect();
  //    add the property which causes the object
  //    to not be selected user drags over text areas
  Pep.prototype.disableSelect = function() {

    this.$el.css({ 
      '-webkit-touch-callout' : 'none',
        '-webkit-user-select' : 'none',
         '-khtml-user-select' : 'none',
           '-moz-user-select' : 'none',
            '-ms-user-select' : 'none',
                'user-select' : 'none'
    });

  };

  //  handleConstraint();
  //    returns a hash of where to move to
  //    when we constrain to parent/window
  Pep.prototype.handleConstraint = function(dx, dy) {
    var pos               = this.$el.position();
    this.pos.x            = pos.left;
    this.pos.y            = pos.top;
    var hash              = { x: false, y: false };

    var upperYLimit, upperXLimit, lowerXLimit, lowerYLimit;

    // log our positions
    this.log({ type: "pos-coords", x: this.pos.x, y: this.pos.y});

    if ( $.isArray( this.options.constrainTo ) ) {

      if ( this.options.constrainTo[3] !== undefined && this.options.constrainTo[1] !== undefined ) { 
        upperXLimit     = this.options.constrainTo[1];
        lowerXLimit     = this.options.constrainTo[3];
      }
      if ( this.options.constrainTo[0] !== false && this.options.constrainTo[2] !== false ) { 
        upperYLimit       = this.options.constrainTo[2];
        lowerYLimit       = this.options.constrainTo[0];
      }

      // is our object trying to move outside lower X & Y limits?
      if ( this.pos.x + dx < lowerXLimit)     hash.x = lowerXLimit; 
      if ( this.pos.y + dy < lowerYLimit)     hash.y = lowerYLimit;

    } else if ( typeof this.options.constrainTo === 'string' ) {
      upperXLimit       = this.$container.width()  - this.$el.outerWidth();
      upperYLimit       = this.$container.height() - this.$el.outerHeight();
      // is our object trying to move outside lower X & Y limits?
      if ( this.pos.x + dx < 0 )              hash.x = 0; 
      if ( this.pos.y + dy < 0 )              hash.y = 0;
    }
  
    // is our object trying to move outside upper X & Y limits?
    if ( this.pos.x + dx > upperXLimit )    hash.x = upperXLimit;
    if ( this.pos.y + dy > upperYLimit )    hash.y = upperYLimit;

    return hash;
  };

  //  getCSSEaseHash();
  //    returns a hash of params used in conjunction 
  //    with this.options.cssEaseString
  Pep.prototype.getCSSEaseHash = function(reset){    
    if ( typeof(reset) === 'undefined' ) reset = false;

    var cssEaseString;
    if (reset){
      cssEaseString = '';
    } else if ( this.CSSEaseHash ) {
      return this.CSSEaseHash;
    } else {
      cssEaseString = ['all', this.options.cssEaseDuration + 'ms', this.options.cssEaseString].join(' ');
    }

    return {
                  '-webkit-transition'   : cssEaseString,   // chrome, safari, etc.
                     '-moz-transition'   : cssEaseString,   // firefox
                      '-ms-transition'   : cssEaseString,   // microsoft
                       '-o-transition'   : cssEaseString,   // opera
                          'transition'   : cssEaseString    // future
          };
  };

  // calculateActiveDropRegions()
  //    sets parent droppables of this.
  Pep.prototype.calculateActiveDropRegions = function() {
    var self = this;
    this.activeDropRegions = [];

    $.each( $(this.options.droppable), function(idx, el){
      var $el = $(el);
      if ( self.isOverlapping($el, self.$el) ){
        $el.addClass(self.options.droppableActiveClass);
        self.activeDropRegions.push($el);
      } else {
        $el.removeClass(self.options.droppableActiveClass);
      }
    });

  };

  //  isOverlapping();
  //    returns true if element a over
  Pep.prototype.isOverlapping = function($a,$b) {

    if ( this.options.overlapFunction ) {
      return this.options.overlapFunction($a,$b);
    }

    var rect1 = $a[0].getBoundingClientRect();
    var rect2 = $b[0].getBoundingClientRect();

    return !( rect1.right   < rect2.left  || 
              rect1.left    > rect2.right || 
              rect1.bottom  < rect2.top   || 
              rect1.top     > rect2.bottom  );
  };

  //  isTouch();
  //    returns whether or not event is a touch event
  Pep.prototype.isTouch = function(ev){    
    return ev.type.search('touch') > -1;
  };

  // isPointerEventCompatible();
  //    return whether or note our device is pointer 
  //    event compatible; typically means where on a 
  //    touch Win8 device
  Pep.prototype.isPointerEventCompatible = function() {
    return ("MSPointerEvent" in window);
  };

  // applyMSDefaults();
  Pep.prototype.applyMSDefaults = function(first_argument) {
    this.$body.css({
        '-ms-touch-action' :    'none',
        'touch-action' :        'none',
        '-ms-scroll-chaining':  'none', 
        '-ms-scroll-limit':     '0 0 0 0', 
        'overflow':             'hidden'
    });
  };

  //  isValidMoveEvent();
  //    returns true if we're on a non-touch device -- or -- 
  //    if the event is a non-pinch event on a touch device
  Pep.prototype.isValidMoveEvent = function(ev){   
    if ( !this.isTouch(ev) || ( this.isTouch(ev) && ev.originalEvent.hasOwnProperty('touches') && ev.originalEvent.touches.length === 1 ) ){
      return true;
    } else{
      return false;
    }
  };

  //  shouldUseCSSTranslation();
  //    return true if we should use CSS transforms for move the object
  Pep.prototype.shouldUseCSSTranslation = function() {

    if ( typeof(this.useCSSTranslation) !== "undefined" )
      return this.useCSSTranslation;

    var useCSSTranslation = false;

    if ( !this.options.useCSSTranslation || ( typeof(Modernizr) !== "undefined" && !Modernizr.csstransforms)){
      useCSSTranslation = false;
    } 
    else{
      useCSSTranslation = true;
    }

    this.useCSSTranslation = useCSSTranslation;
    return useCSSTranslation;
  };

  //  cssAnimationsSupported():
  //    returns true if the browser supports CSS animations
  //    which are used for easing..
  Pep.prototype.cssAnimationsSupported = function() {

    if ( typeof(this.cssAnimationsSupport) !== "undefined" ){
      return this.cssAnimationsSupport;
    }

    // If the page has Modernizr, let them do the heavy lifting.
    if ( ( typeof(Modernizr) !== "undefined" && Modernizr.cssanimations) ){
      this.cssAnimationsSupport = true;
      return true;
    }

    var animation = false,
        elm = document.createElement('div'),
        animationstring = 'animation',
        keyframeprefix = '',
        domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),
        pfx  = '';
    
    if( elm.style.animationName ) { animation = true; }    
     
    if( animation === false ) {
      for( var i = 0; i < domPrefixes.length; i++ ) {
        if( elm.style[ domPrefixes[i] + 'AnimationName' ] !== undefined ) {
          pfx = domPrefixes[ i ];
          animationstring = pfx + 'Animation';
          keyframeprefix = '-' + pfx.toLowerCase() + '-';
          animation = true;
          break;
        }
      }
    }

    this.cssAnimationsSupport = animation;
    return animation;
  };

  //  hardwareAccelerate();
  //    add fool-proof CSS3 hardware acceleration.
  Pep.prototype.hardwareAccelerate = function() {
    this.$el.css({     
      '-webkit-perspective':          1000,
      'perspective':                  1000,
      '-webkit-backface-visibility':  'hidden',
      'backface-visibility':          'hidden'  
    });
   }; 

  //  getMovementValues();
  //    returns object pos, event position, and velocity in each direction.
  Pep.prototype.getMovementValues = function() {
    return { ev: this.ev, pos: this.pos, velocity: this.velocity() };
   }; 

  //  buildDebugDiv();
  //    Create a little div in the lower right corner of the window
  //    for extra info about the object currently moving
  Pep.prototype.buildDebugDiv = function() {

    // Build the debugDiv and it's inner HTML -- if necessary
    var $debugDiv;
    if ( $('#pep-debug').length === 0 ){
      $debugDiv = $('<div></div>');
      $debugDiv
        .attr('id', 'pep-debug')
        .append("<div style='font-weight:bold; background: red; color: white;'>DEBUG MODE</div>")
        .append("<div id='pep-debug-event'>no event</div>")
        .append("<div id='pep-debug-ev-coords'>event coords: <span class='pep-x'>-</span>, <span class='pep-y'>-</span></div>")
        .append("<div id='pep-debug-pos-coords'>position coords: <span class='pep-x'>-</span>, <span class='pep-y'>-</span></div>")
        .append("<div id='pep-debug-velocity'>velocity: <span class='pep-x'>-</span>, <span class='pep-y'>-</span></div>")
        .append("<div id='pep-debug-delta'>&Delta; movement: <span class='pep-x'>-</span>, <span class='pep-y'>-</span></div>")
        .css({
          position:   'fixed',
          bottom:     5,
          right:      5,
          zIndex:     99999,    
          textAlign:  'right',
          fontFamily: 'Arial, sans',
          fontSize:   10,
          border:     '1px solid #DDD',
          padding:    '3px',
          background: 'white',
          color:      '#333'
        });
    }

    var self = this;
    setTimeout(function(){
      self.debugElements = {
        $event:      $("#pep-debug-event"),
        $velocityX:  $("#pep-debug-velocity .pep-x"),
        $velocityY:  $("#pep-debug-velocity .pep-y"),
        $dX:         $("#pep-debug-delta .pep-x"),
        $dY:         $("#pep-debug-delta .pep-y"),
        $evCoordsX:  $("#pep-debug-ev-coords .pep-x"),
        $evCoordsY:  $("#pep-debug-ev-coords .pep-y"),
        $posCoordsX: $("#pep-debug-pos-coords .pep-x"),
        $posCoordsY: $("#pep-debug-pos-coords .pep-y")
      };
    }, 0);

    $('body').append( $debugDiv );
  };

  // log()
  Pep.prototype.log = function(opts) {
    if ( !this.options.debug ) return;

    switch (opts.type){
    case "event": 
      this.debugElements.$event.text(opts.event);
      break;
    case "pos-coords": 
      this.debugElements.$posCoordsX.text(opts.x);
      this.debugElements.$posCoordsY.text(opts.y);
      break;
    case "event-coords": 
      this.debugElements.$evCoordsX.text(opts.x);
      this.debugElements.$evCoordsY.text(opts.y);
      break;
    case "delta": 
      this.debugElements.$dX.text(opts.x);
      this.debugElements.$dY.text(opts.y);
      break;
    case "velocity": 
      var vel = this.velocity();
      this.debugElements.$velocityX.text( Math.round(vel.x) );
      this.debugElements.$velocityY.text( Math.round(vel.y) );
      break;
    }
  };

  // toggle()
  //  toggle the pep object
  Pep.prototype.toggle = function(on) {
    if ( typeof(on) === "undefined"){
      this.disabled = !this.disabled;
    }
    else {
      this.disabled = !on;
    }   
  };

  //  wrap it 
  //    A really lightweight plugin wrapper around the constructor, 
  //    preventing against multiple instantiations.
  $.fn[pluginName] = function ( options ) {
    return this.each(function () {
      if (!$.data(this, 'plugin_' + pluginName)) {
        var pepObj = new Pep( this, options );
        $.data(this, 'plugin_' + pluginName, pepObj);
        $.pep.peps.push(pepObj);
      }
    });
  };

  //  The   _   ___ ___ 
  //       /_\ | _ \_ _|
  //      / _ \|  _/| | 
  //     /_/ \_\_| |___|
  //
  $.pep = {};
  $.pep.peps = [];
  $.pep.toggleAll = function(on){
    $.each(this.peps, function(index, pepObj){
      pepObj.toggle(on);
    }); 
  };

  $.pep.unbind = function($obj){
    var pep = $obj.data('plugin_' + pluginName);

    if ( typeof pep === 'undefined' )
      return;

    pep.toggle(false);
    $obj.removeData('plugin_' + pluginName);
  };

}(jQuery, window));





////////////////////////////////////////
// SRC End --> libs/jquery/jquery.pep.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/slimscroll/jquery.slimScrollHorizontal.min.js
////////////////////////////////////////
(function($){jQuery.fn.extend({slimScrollHorizontal:function(options){var defaults={wheelStep:20,height:"auto",width:"250px",size:"7px",color:"#000",position:"bottom",distance:"1px",start:"left",opacity:0.4,alwaysVisible:false,disableFadeOut:false,railVisible:false,railColor:"#333",railOpacity:"0.2",railClass:"slimScrollRail",barClass:"slimScrollBar",wrapperClass:"slimScrollDiv",allowPageScroll:false,scroll:0,touchScrollStep:200};var o=$.extend(defaults,options);this.each(function(){var isOverPanel,isOverBar,isDragg,queueHide,touchDif,barWidth,percentScroll,lastScroll,divS="<div></div>",minBarWidth=30,releaseScroll=false;var me=$(this);if(me.parent().hasClass("slimScrollDiv")){if(o.scroll){bar=me.parent().find(".slimScrollBar");rail=me.parent().find(".slimScrollRail");scrollContent(me.scrollLeft()+parseInt(o.scroll),false,true);}return;}var wrapper=$(divS).addClass(o.wrapperClass).css({position:"relative",overflow:"hidden",width:o.width,height:o.height});me.css({overflow:"hidden",width:o.width,height:o.height});var rail=$(divS).addClass(o.railClass).css({width:"100%",height:o.size,position:"absolute",bottom:0,display:(o.alwaysVisible&&o.railVisible)?"block":"none","border-radius":o.size,background:o.railColor,opacity:o.railOpacity,zIndex:90});var bar=$(divS).addClass(o.barClass).css({background:o.color,height:o.size,position:"absolute",bottom:0,opacity:o.opacity,display:o.alwaysVisible?"block":"none","border-radius":o.size,BorderRadius:o.size,MozBorderRadius:o.size,WebkitBorderRadius:o.size,zIndex:99});var posCss=(o.position=="top")?{top:o.distance}:{bottom:o.distance};rail.css(posCss);bar.css(posCss);me.wrap(wrapper);me.parent().append(bar);me.parent().append(rail);bar.draggable({axis:"x",containment:"parent",start:function(){isDragg=true;},stop:function(){isDragg=false;hideBar();},drag:function(e){scrollContent(0,$(this).position().left,false);}});rail.hover(function(){showBar();},function(){hideBar();});bar.hover(function(){isOverBar=true;},function(){isOverBar=false;});me.hover(function(){isOverPanel=true;showBar();hideBar();},function(){isOverPanel=false;hideBar();});me.bind("touchstart",function(e,b){if(e.originalEvent.touches.length){touchDif=e.originalEvent.touches[0].pageX;}});me.bind("touchmove",function(e){e.originalEvent.preventDefault();if(e.originalEvent.touches.length){var diff=(touchDif-e.originalEvent.touches[0].pageX)/o.touchScrollStep;scrollContent(diff,true);}});var _onWheel=function(e){if(!isOverPanel){return;}var e=e||window.event;var delta=0;if(e.wheelDelta){delta=-e.wheelDelta/120;}if(e.detail){delta=e.detail/3;}scrollContent(delta,true);if(e.preventDefault&&!releaseScroll){e.preventDefault();}if(!releaseScroll){e.returnValue=false;}};function scrollContent(x,isWheel,isJump){var delta=x;if(bar.css("left")=="auto"){bar.css("left","0px");}if(isWheel){delta=parseInt(bar.css("left"))+x*parseInt(o.wheelStep)/100*bar.outerWidth();var maxLeft=me.outerWidth()-bar.outerWidth();delta=Math.min(Math.max(delta,0),maxLeft);bar.css({left:delta+"px"});}percentScroll=parseInt(bar.css("left"))/(me.outerWidth()-bar.outerWidth());delta=percentScroll*(me[0].scrollWidth-me.outerWidth());if(isJump){delta=x;var offsetLeft=delta/me[0].scrollWidth*me.outerWidth();bar.css({left:offsetLeft+"px"});}me.scrollLeft(delta);showBar();hideBar();}var attachWheel=function(){if(window.addEventListener){this.addEventListener("DOMMouseScroll",_onWheel,false);this.addEventListener("mousewheel",_onWheel,false);}else{document.attachEvent("onmousewheel",_onWheel);}};attachWheel();function getBarWidth(){barWidth=Math.max((me.outerWidth()/me[0].scrollWidth)*me.outerWidth(),minBarWidth);bar.css({width:barWidth+"px"});}getBarWidth();function showBar(){getBarWidth();clearTimeout(queueHide);if(percentScroll==~~percentScroll){releaseScroll=o.allowPageScroll;if(lastScroll!=percentScroll){var msg=(~~percentScroll==0)?"left":"right";me.trigger("slimscroll",msg);}}lastScroll=percentScroll;if(barWidth>=me.outerWidth()){releaseScroll=true;return;}bar.stop(true,true).fadeIn("fast");if(o.railVisible){rail.stop(true,true).fadeIn("fast");}}function hideBar(){if(!o.alwaysVisible){queueHide=setTimeout(function(){if(!(o.disableFadeOut&&isOverPanel)&&!isOverBar&&!isDragg){bar.fadeOut("slow");rail.fadeOut("slow");}},1000);}}if(o.start=="right"){bar.css({left:me.outerWidth()-bar.outerWidth()});scrollContent(0,true);}else{if(typeof o.start=="object"){scrollContent($(o.start).position().left,null,true);if(!o.alwaysVisible){bar.hide();}}}});return this;}});jQuery.fn.extend({slimscrollHorizontal:jQuery.fn.slimScrollHorizontal});})(jQuery);
////////////////////////////////////////
// SRC End --> libs/slimscroll/jquery.slimScrollHorizontal.min.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/mustache/mustache_0.7.0.js
////////////////////////////////////////
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */

/*global define: false*/

var Mustache;

(function (exports) {
  if (typeof module !== "undefined" && module.exports) {
    module.exports = exports; // CommonJS
  } else if (typeof define === "function") {
    define(exports); // AMD
  } else {
    Mustache = exports; // <script>
  }
}((function () {

  var exports = {};

  exports.name = "mustache.js";
  exports.version = "0.7.0";
  exports.tags = ["{{", "}}"];

  exports.Scanner = Scanner;
  exports.Context = Context;
  exports.Writer = Writer;

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var nonSpaceRe = /\S/;
  var eqRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  function testRe(re, string) {
    return RegExp.prototype.test.call(re, string);
  }

  function isWhitespace(string) {
    return !testRe(nonSpaceRe, string);
  }

  var isArray = Array.isArray || function (obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
  };

  function escapeRe(string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }

  var entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

  function escapeHtml(string) {
    return String(string).replace(/[&<>"'\/]/g, function (s) {
      return entityMap[s];
    });
  }

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  exports.escape = escapeHtml;

  function Scanner(string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function () {
    return this.tail === "";
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function (re) {
    var match = this.tail.match(re);

    if (match && match.index === 0) {
      this.tail = this.tail.substring(match[0].length);
      this.pos += match[0].length;
      return match[0];
    }

    return "";
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function (re) {
    var match, pos = this.tail.search(re);

    switch (pos) {
    case -1:
      match = this.tail;
      this.pos += this.tail.length;
      this.tail = "";
      break;
    case 0:
      match = "";
      break;
    default:
      match = this.tail.substring(0, pos);
      this.tail = this.tail.substring(pos);
      this.pos += pos;
    }

    return match;
  };

  function Context(view, parent) {
    this.view = view;
    this.parent = parent;
    this.clearCache();
  }

  Context.make = function (view) {
    return (view instanceof Context) ? view : new Context(view);
  };

  Context.prototype.clearCache = function () {
    this._cache = {};
  };

  Context.prototype.push = function (view) {
    return new Context(view, this);
  };

  Context.prototype.lookup = function (name) {
    var value = this._cache[name];

    if (!value) {
      if (name === ".") {
        value = this.view;
      } else {
        var context = this;

        while (context) {
          if (name.indexOf(".") > 0) {
            var names = name.split("."), i = 0;

            value = context.view;

            while (value && i < names.length) {
              value = value[names[i++]];
            }
          } else {
            value = context.view[name];
          }

          if (value != null) {
            break;
          }

          context = context.parent;
        }
      }

      this._cache[name] = value;
    }

    if (typeof value === "function") {
      value = value.call(this.view);
    }

    return value;
  };

  function Writer() {
    this.clearCache();
  }

  Writer.prototype.clearCache = function () {
    this._cache = {};
    this._partialCache = {};
  };

  Writer.prototype.compile = function (template, tags) {
    var fn = this._cache[template];

    if (!fn) {
      var tokens = exports.parse(template, tags);
      fn = this._cache[template] = this.compileTokens(tokens, template);
    }

    return fn;
  };

  Writer.prototype.compilePartial = function (name, template, tags) {
    var fn = this.compile(template, tags);
    this._partialCache[name] = fn;
    return fn;
  };

  Writer.prototype.compileTokens = function (tokens, template) {
    var fn = compileTokens(tokens);
    var self = this;

    return function (view, partials) {
      if (partials) {
        if (typeof partials === "function") {
          self._loadPartial = partials;
        } else {
          for (var name in partials) {
            self.compilePartial(name, partials[name]);
          }
        }
      }

      return fn(self, Context.make(view), template);
    };
  };

  Writer.prototype.render = function (template, view, partials) {
    return this.compile(template)(view, partials);
  };

  Writer.prototype._section = function (name, context, text, callback) {
    var value = context.lookup(name);

    switch (typeof value) {
    case "object":
      if (isArray(value)) {
        var buffer = "";

        for (var i = 0, len = value.length; i < len; ++i) {
          buffer += callback(this, context.push(value[i]));
        }

        return buffer;
      }

      return value ? callback(this, context.push(value)) : "";
    case "function":
      var self = this;
      var scopedRender = function (template) {
        return self.render(template, context);
      };

      return value.call(context.view, text, scopedRender) || "";
    default:
      if (value) {
        return callback(this, context);
      }
    }

    return "";
  };

  Writer.prototype._inverted = function (name, context, callback) {
    var value = context.lookup(name);

    // Use JavaScript's definition of falsy. Include empty arrays.
    // See https://github.com/janl/mustache.js/issues/186
    if (!value || (isArray(value) && value.length === 0)) {
      return callback(this, context);
    }

    return "";
  };

  Writer.prototype._partial = function (name, context) {
    if (!(name in this._partialCache) && this._loadPartial) {
      this.compilePartial(name, this._loadPartial(name));
    }

    var fn = this._partialCache[name];

    return fn ? fn(context) : "";
  };

  Writer.prototype._name = function (name, context) {
    var value = context.lookup(name);

    if (typeof value === "function") {
      value = value.call(context.view);
    }

    return (value == null) ? "" : String(value);
  };

  Writer.prototype._escaped = function (name, context) {
    return exports.escape(this._name(name, context));
  };

  /**
   * Calculates the bounds of the section represented by the given `token` in
   * the original template by drilling down into nested sections to find the
   * last token that is part of that section. Returns an array of [start, end].
   */
  function sectionBounds(token) {
    var start = token[3];
    var end = start;

    var tokens;
    while ((tokens = token[4]) && tokens.length) {
      token = tokens[tokens.length - 1];
      end = token[3];
    }

    return [start, end];
  }

  /**
   * Low-level function that compiles the given `tokens` into a function
   * that accepts three arguments: a Writer, a Context, and the template.
   */
  function compileTokens(tokens) {
    var subRenders = {};

    function subRender(i, tokens, template) {
      if (!subRenders[i]) {
        var fn = compileTokens(tokens);
        subRenders[i] = function (writer, context) {
          return fn(writer, context, template);
        };
      }

      return subRenders[i];
    }

    return function (writer, context, template) {
      var buffer = "";
      var token, sectionText;

      for (var i = 0, len = tokens.length; i < len; ++i) {
        token = tokens[i];

        switch (token[0]) {
        case "#":
          sectionText = template.slice.apply(template, sectionBounds(token));
          buffer += writer._section(token[1], context, sectionText, subRender(i, token[4], template));
          break;
        case "^":
          buffer += writer._inverted(token[1], context, subRender(i, token[4], template));
          break;
        case ">":
          buffer += writer._partial(token[1], context);
          break;
        case "&":
          buffer += writer._name(token[1], context);
          break;
        case "name":
          buffer += writer._escaped(token[1], context);
          break;
        case "text":
          buffer += token[1];
          break;
        }
      }

      return buffer;
    };
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have a fifth item: an array that contains
   * all tokens in that section.
   */
  function nestTokens(tokens) {
    var tree = [];
    var collector = tree;
    var sections = [];
    var token, section;

    for (var i = 0; i < tokens.length; ++i) {
      token = tokens[i];

      switch (token[0]) {
      case "#":
      case "^":
        token[4] = [];
        sections.push(token);
        collector.push(token);
        collector = token[4];
        break;
      case "/":
        if (sections.length === 0) {
          throw new Error("Unopened section: " + token[1]);
        }

        section = sections.pop();

        if (section[1] !== token[1]) {
          throw new Error("Unclosed section: " + section[1]);
        }

        if (sections.length > 0) {
          collector = sections[sections.length - 1][4];
        } else {
          collector = tree;
        }
        break;
      default:
        collector.push(token);
      }
    }

    // Make sure there were no open sections when we're done.
    section = sections.pop();

    if (section) {
      throw new Error("Unclosed section: " + section[1]);
    }

    return tree;
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens(tokens) {
    var token, lastToken;

    for (var i = 0; i < tokens.length; ++i) {
      token = tokens[i];

      if (lastToken && lastToken[0] === "text" && token[0] === "text") {
        lastToken[1] += token[1];
        lastToken[3] = token[3];
        tokens.splice(i--, 1); // Remove this token from the array.
      } else {
        lastToken = token;
      }
    }
  }

  function escapeTags(tags) {
    if (tags.length !== 2) {
      throw new Error("Invalid tags: " + tags.join(" "));
    }

    return [
      new RegExp(escapeRe(tags[0]) + "\\s*"),
      new RegExp("\\s*" + escapeRe(tags[1]))
    ];
  }

  /**
   * Breaks up the given `template` string into a tree of token objects. If
   * `tags` is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. ["<%", "%>"]). Of
   * course, the default is to use mustaches (i.e. Mustache.tags).
   */
  exports.parse = function (template, tags) {
    tags = tags || exports.tags;

    var tagRes = escapeTags(tags);
    var scanner = new Scanner(template);

    var tokens = [],      // Buffer to hold the tokens
        spaces = [],      // Indices of whitespace tokens on the current line
        hasTag = false,   // Is there a {{tag}} on the current line?
        nonSpace = false; // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace() {
      if (hasTag && !nonSpace) {
        while (spaces.length) {
          tokens.splice(spaces.pop(), 1);
        }
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var start, type, value, chr;

    while (!scanner.eos()) {
      start = scanner.pos;
      value = scanner.scanUntil(tagRes[0]);

      if (value) {
        for (var i = 0, len = value.length; i < len; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push(["text", chr, start, start + 1]);
          start += 1;

          if (chr === "\n") {
            stripSpace(); // Check for whitespace on the current line.
          }
        }
      }

      start = scanner.pos;

      // Match the opening tag.
      if (!scanner.scan(tagRes[0])) {
        break;
      }

      hasTag = true;
      type = scanner.scan(tagRe) || "name";

      // Skip any whitespace between tag and value.
      scanner.scan(whiteRe);

      // Extract the tag value.
      if (type === "=") {
        value = scanner.scanUntil(eqRe);
        scanner.scan(eqRe);
        scanner.scanUntil(tagRes[1]);
      } else if (type === "{") {
        var closeRe = new RegExp("\\s*" + escapeRe("}" + tags[1]));
        value = scanner.scanUntil(closeRe);
        scanner.scan(curlyRe);
        scanner.scanUntil(tagRes[1]);
        type = "&";
      } else {
        value = scanner.scanUntil(tagRes[1]);
      }

      // Match the closing tag.
      if (!scanner.scan(tagRes[1])) {
        throw new Error("Unclosed tag at " + scanner.pos);
      }

      tokens.push([type, value, start, scanner.pos]);

      if (type === "name" || type === "{" || type === "&") {
        nonSpace = true;
      }

      // Set the tags for the next time around.
      if (type === "=") {
        tags = value.split(spaceRe);
        tagRes = escapeTags(tags);
      }
    }

    squashTokens(tokens);

    return nestTokens(tokens);
  };

  // The high-level clearCache, compile, compilePartial, and render functions
  // use this default writer.
  var _writer = new Writer();

  /**
   * Clears all cached templates and partials in the default writer.
   */
  exports.clearCache = function () {
    return _writer.clearCache();
  };

  /**
   * Compiles the given `template` to a reusable function using the default
   * writer.
   */
  exports.compile = function (template, tags) {
    return _writer.compile(template, tags);
  };

  /**
   * Compiles the partial with the given `name` and `template` to a reusable
   * function using the default writer.
   */
  exports.compilePartial = function (name, template, tags) {
    return _writer.compilePartial(name, template, tags);
  };

  /**
   * Compiles the given array of tokens (the output of a parse) to a reusable
   * function using the default writer.
   */
  exports.compileTokens = function (tokens, template) {
    return _writer.compileTokens(tokens, template);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer.
   */
  exports.render = function (template, view, partials) {
    return _writer.render(template, view, partials);
  };

  // This is here for backwards compatibility with 0.4.x.
  exports.to_html = function (template, view, partials, send) {
    var result = exports.render(template, view, partials);

    if (typeof send === "function") {
      send(result);
    } else {
      return result;
    }
  };

  return exports;

}())));

////////////////////////////////////////
// SRC End --> libs/mustache/mustache_0.7.0.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> libs/lodash/lodash-2.2.1.js
////////////////////////////////////////
/**
 * @license
 * Lo-Dash 2.2.1 (Custom Build) lodash.com/license | Underscore.js 1.5.2 underscorejs.org/LICENSE
 * Build: `lodash modern -o ./dist/lodash.js`
 */
;(function(){function n(n,t,e){e=(e||0)-1;for(var r=n?n.length:0;++e<r;)if(n[e]===t)return e;return-1}function t(t,e){var r=typeof e;if(t=t.l,"boolean"==r||null==e)return t[e]?0:-1;"number"!=r&&"string"!=r&&(r="object");var u="number"==r?e:_+e;return t=(t=t[r])&&t[u],"object"==r?t&&-1<n(t,e)?0:-1:t?0:-1}function e(n){var t=this.l,e=typeof n;if("boolean"==e||null==n)t[n]=!0;else{"number"!=e&&"string"!=e&&(e="object");var r="number"==e?n:_+n,t=t[e]||(t[e]={});"object"==e?(t[r]||(t[r]=[])).push(n):t[r]=!0
}}function r(n){return n.charCodeAt(0)}function u(n,t){var e=n.m,r=t.m;if(e!==r){if(e>r||typeof e=="undefined")return 1;if(e<r||typeof r=="undefined")return-1}return n.n-t.n}function o(n){var t=-1,r=n.length,u=n[0],o=n[0|r/2],a=n[r-1];if(u&&typeof u=="object"&&o&&typeof o=="object"&&a&&typeof a=="object")return!1;for(u=f(),u["false"]=u["null"]=u["true"]=u.undefined=!1,o=f(),o.k=n,o.l=u,o.push=e;++t<r;)o.push(n[t]);return o}function a(n){return"\\"+G[n]}function i(){return g.pop()||[]}function f(){return y.pop()||{k:null,l:null,m:null,"false":!1,n:0,"null":!1,number:null,object:null,push:null,string:null,"true":!1,undefined:!1,o:null}
}function l(){}function c(n){n.length=0,g.length<d&&g.push(n)}function p(n){var t=n.l;t&&p(t),n.k=n.l=n.m=n.object=n.number=n.string=n.o=null,y.length<d&&y.push(n)}function s(n,t,e){t||(t=0),typeof e=="undefined"&&(e=n?n.length:0);var r=-1;e=e-t||0;for(var u=Array(0>e?0:e);++r<e;)u[r]=n[t+r];return u}function v(e){function g(n){if(!n||je.call(n)!=z)return!1;var t=n.valueOf,e=typeof t=="function"&&(e=ge(t))&&ge(e);return e?n==e||ge(n)==e:st(n)}function y(n,t,e){if(!n||!V[typeof n])return n;t=t&&typeof e=="undefined"?t:et(t,e,3);
for(var r=-1,u=V[typeof n]&&Ke(n),o=u?u.length:0;++r<o&&(e=u[r],false!==t(n[e],e,n)););return n}function d(n,t,e){var r;if(!n||!V[typeof n])return n;t=t&&typeof e=="undefined"?t:et(t,e,3);for(r in n)if(false===t(n[r],r,n))break;return n}function G(n,t,e){var r,u=n,o=u;if(!u)return o;for(var a=arguments,i=0,f=typeof e=="number"?2:a.length;++i<f;)if((u=a[i])&&V[typeof u])for(var l=-1,c=V[typeof u]&&Ke(u),p=c?c.length:0;++l<p;)r=c[l],"undefined"==typeof o[r]&&(o[r]=u[r]);return o}function J(n,t,e){var r,u=n,o=u;
if(!u)return o;var a=arguments,i=0,f=typeof e=="number"?2:a.length;if(3<f&&"function"==typeof a[f-2])var l=et(a[--f-1],a[f--],2);else 2<f&&"function"==typeof a[f-1]&&(l=a[--f]);for(;++i<f;)if((u=a[i])&&V[typeof u])for(var c=-1,p=V[typeof u]&&Ke(u),s=p?p.length:0;++c<s;)r=p[c],o[r]=l?l(o[r],u[r]):u[r];return o}function Q(n){var t,e=[];if(!n||!V[typeof n])return e;for(t in n)ye.call(n,t)&&e.push(t);return e}function Y(n){return n&&typeof n=="object"&&!Pe(n)&&ye.call(n,"__wrapped__")?n:new nt(n)}function nt(n,t){this.__chain__=!!t,this.__wrapped__=n
}function tt(n,t,e,r,u){if(e){var o=e(n);if(typeof o!="undefined")return o}if(!bt(n))return n;var a=je.call(n);if(!L[a])return n;var f=We[a];switch(a){case F:case T:return new f(+n);case q:case K:return new f(n);case P:return o=f(n.source,O.exec(n)),o.lastIndex=n.lastIndex,o}if(a=Pe(n),t){var l=!r;r||(r=i()),u||(u=i());for(var p=r.length;p--;)if(r[p]==n)return u[p];o=a?f(n.length):{}}else o=a?s(n):J({},n);return a&&(ye.call(n,"index")&&(o.index=n.index),ye.call(n,"input")&&(o.input=n.input)),t?(r.push(n),u.push(o),(a?It:y)(n,function(n,a){o[a]=tt(n,t,e,r,u)
}),l&&(c(r),c(u)),o):o}function et(n,t,e){if(typeof n!="function")return Gt;if(typeof t=="undefined")return n;var r=n.__bindData__||qe.funcNames&&!n.name;if(typeof r=="undefined"){var u=R&&he.call(n);qe.funcNames||!u||I.test(u)||(r=!0),(qe.funcNames||!r)&&(r=!qe.funcDecomp||R.test(u),ze(n,r))}if(true!==r&&r&&1&r[1])return n;switch(e){case 1:return function(e){return n.call(t,e)};case 2:return function(e,r){return n.call(t,e,r)};case 3:return function(e,r,u){return n.call(t,e,r,u)};case 4:return function(e,r,u,o){return n.call(t,e,r,u,o)
}}return Mt(n,t)}function rt(n,t,e,r){r=(r||0)-1;for(var u=n?n.length:0,o=[];++r<u;){var a=n[r];if(a&&typeof a=="object"&&typeof a.length=="number"&&(Pe(a)||ht(a))){t||(a=rt(a,t,e));var i=-1,f=a.length,l=o.length;for(o.length+=f;++i<f;)o[l++]=a[i]}else e||o.push(a)}return o}function ut(n,t,e,r,u,o){if(e){var a=e(n,t);if(typeof a!="undefined")return!!a}if(n===t)return 0!==n||1/n==1/t;if(n===n&&!(n&&V[typeof n]||t&&V[typeof t]))return!1;if(null==n||null==t)return n===t;var f=je.call(n),l=je.call(t);
if(f==B&&(f=z),l==B&&(l=z),f!=l)return!1;switch(f){case F:case T:return+n==+t;case q:return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case P:case K:return n==oe(t)}if(l=f==$,!l){if(ye.call(n,"__wrapped__")||ye.call(t,"__wrapped__"))return ut(n.__wrapped__||n,t.__wrapped__||t,e,r,u,o);if(f!=z)return!1;var f=n.constructor,p=t.constructor;if(f!=p&&!(_t(f)&&f instanceof f&&_t(p)&&p instanceof p))return!1}for(p=!u,u||(u=i()),o||(o=i()),f=u.length;f--;)if(u[f]==n)return o[f]==t;var s=0,a=!0;if(u.push(n),o.push(t),l){if(f=n.length,s=t.length,a=s==n.length,!a&&!r)return a;
for(;s--;)if(l=f,p=t[s],r)for(;l--&&!(a=ut(n[l],p,e,r,u,o)););else if(!(a=ut(n[s],p,e,r,u,o)))break;return a}return d(t,function(t,i,f){return ye.call(f,i)?(s++,a=ye.call(n,i)&&ut(n[i],t,e,r,u,o)):void 0}),a&&!r&&d(n,function(n,t,e){return ye.call(e,t)?a=-1<--s:void 0}),p&&(c(u),c(o)),a}function ot(n,t,e,r,u){(Pe(t)?It:y)(t,function(t,o){var a,i,f=t,l=n[o];if(t&&((i=Pe(t))||g(t))){for(f=r.length;f--;)if(a=r[f]==t){l=u[f];break}if(!a){var c;e&&(f=e(l,t),c=typeof f!="undefined")&&(l=f),c||(l=i?Pe(l)?l:[]:g(l)?l:{}),r.push(t),u.push(l),c||ot(l,t,e,r,u)
}}else e&&(f=e(l,t),typeof f=="undefined"&&(f=t)),typeof f!="undefined"&&(l=f);n[o]=l})}function at(e,r,u){var a=-1,f=pt(),l=e?e.length:0,s=[],v=!r&&l>=b&&f===n,h=u||v?i():s;if(v){var g=o(h);g?(f=t,h=g):(v=!1,h=u?h:(c(h),s))}for(;++a<l;){var g=e[a],y=u?u(g,a,e):g;(r?!a||h[h.length-1]!==y:0>f(h,y))&&((u||v)&&h.push(y),s.push(g))}return v?(c(h.k),p(h)):u&&c(h),s}function it(n){return function(t,e,r){var u={};e=Y.createCallback(e,r,3),r=-1;var o=t?t.length:0;if(typeof o=="number")for(;++r<o;){var a=t[r];
n(u,a,e(a,r,t),t)}else y(t,function(t,r,o){n(u,t,e(t,r,o),o)});return u}}function ft(n,t,e,r,u,o){var a=1&t,i=2&t,f=4&t,l=8&t,c=16&t,p=32&t,s=n;if(!i&&!_t(n))throw new ae;c&&!e.length&&(t&=-17,c=e=!1),p&&!r.length&&(t&=-33,p=r=!1);var v=n&&n.__bindData__;if(v)return!a||1&v[1]||(v[4]=u),!a&&1&v[1]&&(t|=8),!f||4&v[1]||(v[5]=o),c&&_e.apply(v[2]||(v[2]=[]),e),p&&_e.apply(v[3]||(v[3]=[]),r),v[1]|=t,ft.apply(null,v);if(!a||i||f||p||!(qe.fastBind||Ce&&c))g=function(){var v=arguments,h=a?u:this;return(f||c||p)&&(v=$e.call(v),c&&ke.apply(v,e),p&&_e.apply(v,r),f&&v.length<o)?(t|=16,ft(n,l?t:-4&t,v,null,u,o)):(i&&(n=h[s]),this instanceof g?(h=lt(n.prototype),v=n.apply(h,v),bt(v)?v:h):n.apply(h,v))
};else{if(c){var h=[u];_e.apply(h,e)}var g=c?Ce.apply(n,h):Ce.call(n,u)}return ze(g,$e.call(arguments)),g}function lt(n){return bt(n)?Oe(n):{}}function ct(n){return Le[n]}function pt(){var t=(t=Y.indexOf)===Wt?n:t;return t}function st(n){var t,e;return n&&je.call(n)==z&&(t=n.constructor,!_t(t)||t instanceof t)?(d(n,function(n,t){e=t}),typeof e=="undefined"||ye.call(n,e)):!1}function vt(n){return Me[n]}function ht(n){return n&&typeof n=="object"&&typeof n.length=="number"&&je.call(n)==B||!1}function gt(n,t,e){var r=Ke(n),u=r.length;
for(t=et(t,e,3);u--&&(e=r[u],false!==t(n[e],e,n)););return n}function yt(n){var t=[];return d(n,function(n,e){_t(n)&&t.push(e)}),t.sort()}function mt(n){for(var t=-1,e=Ke(n),r=e.length,u={};++t<r;){var o=e[t];u[n[o]]=o}return u}function _t(n){return typeof n=="function"}function bt(n){return!(!n||!V[typeof n])}function dt(n){return typeof n=="number"||je.call(n)==q}function wt(n){return typeof n=="string"||je.call(n)==K}function jt(n){for(var t=-1,e=Ke(n),r=e.length,u=Xt(r);++t<r;)u[t]=n[e[t]];return u
}function kt(n,t,e){var r=-1,u=pt(),o=n?n.length:0,a=!1;return e=(0>e?Re(0,o+e):e)||0,Pe(n)?a=-1<u(n,t,e):typeof o=="number"?a=-1<(wt(n)?n.indexOf(t,e):u(n,t,e)):y(n,function(n){return++r<e?void 0:!(a=n===t)}),a}function xt(n,t,e){var r=!0;t=Y.createCallback(t,e,3),e=-1;var u=n?n.length:0;if(typeof u=="number")for(;++e<u&&(r=!!t(n[e],e,n)););else y(n,function(n,e,u){return r=!!t(n,e,u)});return r}function Ct(n,t,e){var r=[];t=Y.createCallback(t,e,3),e=-1;var u=n?n.length:0;if(typeof u=="number")for(;++e<u;){var o=n[e];
t(o,e,n)&&r.push(o)}else y(n,function(n,e,u){t(n,e,u)&&r.push(n)});return r}function Ot(n,t,e){t=Y.createCallback(t,e,3),e=-1;var r=n?n.length:0;if(typeof r!="number"){var u;return y(n,function(n,e,r){return t(n,e,r)?(u=n,!1):void 0}),u}for(;++e<r;){var o=n[e];if(t(o,e,n))return o}}function It(n,t,e){var r=-1,u=n?n.length:0;if(t=t&&typeof e=="undefined"?t:et(t,e,3),typeof u=="number")for(;++r<u&&false!==t(n[r],r,n););else y(n,t);return n}function Nt(n,t,e){var r=n?n.length:0;if(t=t&&typeof e=="undefined"?t:et(t,e,3),typeof r=="number")for(;r--&&false!==t(n[r],r,n););else{var u=Ke(n),r=u.length;
y(n,function(n,e,o){return e=u?u[--r]:--r,t(o[e],e,o)})}return n}function Et(n,t,e){var r=-1,u=n?n.length:0;if(t=Y.createCallback(t,e,3),typeof u=="number")for(var o=Xt(u);++r<u;)o[r]=t(n[r],r,n);else o=[],y(n,function(n,e,u){o[++r]=t(n,e,u)});return o}function St(n,t,e){var u=-1/0,o=u;if(!t&&Pe(n)){e=-1;for(var a=n.length;++e<a;){var i=n[e];i>o&&(o=i)}}else t=!t&&wt(n)?r:Y.createCallback(t,e,3),It(n,function(n,e,r){e=t(n,e,r),e>u&&(u=e,o=n)});return o}function Rt(n,t){var e=-1,r=n?n.length:0;if(typeof r=="number")for(var u=Xt(r);++e<r;)u[e]=n[e][t];
return u||Et(n,t)}function At(n,t,e,r){if(!n)return e;var u=3>arguments.length;t=et(t,r,4);var o=-1,a=n.length;if(typeof a=="number")for(u&&(e=n[++o]);++o<a;)e=t(e,n[o],o,n);else y(n,function(n,r,o){e=u?(u=!1,n):t(e,n,r,o)});return e}function Dt(n,t,e,r){var u=3>arguments.length;return t=et(t,r,4),Nt(n,function(n,r,o){e=u?(u=!1,n):t(e,n,r,o)}),e}function Bt(n){var t=-1,e=n?n.length:0,r=Xt(typeof e=="number"?e:0);return It(n,function(n){var e=Jt(++t);r[t]=r[e],r[e]=n}),r}function $t(n,t,e){var r;t=Y.createCallback(t,e,3),e=-1;
var u=n?n.length:0;if(typeof u=="number")for(;++e<u&&!(r=t(n[e],e,n)););else y(n,function(n,e,u){return!(r=t(n,e,u))});return!!r}function Ft(e){var r=-1,u=pt(),a=e?e.length:0,i=rt(arguments,!0,!0,1),f=[],l=a>=b&&u===n;if(l){var c=o(i);c?(u=t,i=c):l=!1}for(;++r<a;)c=e[r],0>u(i,c)&&f.push(c);return l&&p(i),f}function Tt(n,t,e){var r=0,u=n?n.length:0;if(typeof t!="number"&&null!=t){var o=-1;for(t=Y.createCallback(t,e,3);++o<u&&t(n[o],o,n);)r++}else if(r=t,null==r||e)return n?n[0]:h;return s(n,0,Ae(Re(0,r),u))
}function Wt(t,e,r){if(typeof r=="number"){var u=t?t.length:0;r=0>r?Re(0,u+r):r||0}else if(r)return r=zt(t,e),t[r]===e?r:-1;return n(t,e,r)}function qt(n,t,e){if(typeof t!="number"&&null!=t){var r=0,u=-1,o=n?n.length:0;for(t=Y.createCallback(t,e,3);++u<o&&t(n[u],u,n);)r++}else r=null==t||e?1:Re(0,t);return s(n,r)}function zt(n,t,e,r){var u=0,o=n?n.length:u;for(e=e?Y.createCallback(e,r,1):Gt,t=e(t);u<o;)r=u+o>>>1,e(n[r])<t?u=r+1:o=r;return u}function Pt(n,t,e,r){return typeof t!="boolean"&&null!=t&&(e=(r=e)&&r[t]===n?null:t,t=!1),null!=e&&(e=Y.createCallback(e,r,3)),at(n,t,e)
}function Kt(){for(var n=1<arguments.length?arguments:arguments[0],t=-1,e=n?St(Rt(n,"length")):0,r=Xt(0>e?0:e);++t<e;)r[t]=Rt(n,t);return r}function Lt(n,t){for(var e=-1,r=n?n.length:0,u={};++e<r;){var o=n[e];t?u[o]=t[e]:o&&(u[o[0]]=o[1])}return u}function Mt(n,t){return 2<arguments.length?ft(n,17,$e.call(arguments,2),null,t):ft(n,1,null,null,t)}function Ut(n,t,e){function r(){c&&se(c),a=c=p=h,(g||v!==t)&&(s=me(),i=n.apply(l,o))}function u(){var e=t-(me()-f);0<e?c=de(u,e):(a&&se(a),e=p,a=c=p=h,e&&(s=me(),i=n.apply(l,o)))
}var o,a,i,f,l,c,p,s=0,v=!1,g=!0;if(!_t(n))throw new ae;if(t=Re(0,t)||0,true===e)var y=!0,g=!1;else bt(e)&&(y=e.leading,v="maxWait"in e&&(Re(t,e.maxWait)||0),g="trailing"in e?e.trailing:g);return function(){if(o=arguments,f=me(),l=this,p=g&&(c||!y),false===v)var e=y&&!c;else{a||y||(s=f);var h=v-(f-s);0<h?a||(a=de(r,h)):(a&&(a=se(a)),s=f,i=n.apply(l,o))}return c||t===v||(c=de(u,t)),e&&(i=n.apply(l,o)),i}}function Vt(n){if(!_t(n))throw new ae;var t=$e.call(arguments,1);return de(function(){n.apply(h,t)},1)
}function Gt(n){return n}function Ht(n,t){var e=n,r=!t||_t(e);t||(e=nt,t=n,n=Y),It(yt(t),function(u){var o=n[u]=t[u];r&&(e.prototype[u]=function(){var t=this.__wrapped__,r=[t];return _e.apply(r,arguments),r=o.apply(n,r),t&&typeof t=="object"&&t===r?this:(r=new e(r),r.__chain__=this.__chain__,r)})})}function Jt(n,t,e){var r=null==n,u=null==t;return null==e&&(typeof n=="boolean"&&u?(e=n,n=1):u||typeof t!="boolean"||(e=t,u=!0)),r&&u&&(t=1),n=+n||0,u?(t=n,n=0):t=+t||0,r=Be(),e||n%1||t%1?Ae(n+r*(t-n+parseFloat("1e-"+((r+"").length-1))),t):n+ve(r*(t-n+1))
}function Qt(){return this.__wrapped__}e=e?Z.defaults(H.Object(),e,Z.pick(H,D)):H;var Xt=e.Array,Yt=e.Boolean,Zt=e.Date,ne=e.Function,te=e.Math,ee=e.Number,re=e.Object,ue=e.RegExp,oe=e.String,ae=e.TypeError,ie=[],fe=re.prototype,le=e._,ce=ue("^"+oe(fe.valueOf).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/valueOf|for [^\]]+/g,".+?")+"$"),pe=te.ceil,se=e.clearTimeout,ve=te.floor,he=ne.prototype.toString,ge=ce.test(ge=re.getPrototypeOf)&&ge,ye=fe.hasOwnProperty,me=ce.test(me=Zt.now)&&me||function(){return+new Zt
},_e=ie.push,be=e.setImmediate,de=e.setTimeout,we=ie.splice,je=fe.toString,ke=ie.unshift,xe=function(){try{var n={},t=ce.test(t=re.defineProperty)&&t,e=t(n,n,n)&&t}catch(r){}return e}(),Ce=ce.test(Ce=je.bind)&&Ce,Oe=ce.test(Oe=re.create)&&Oe,Ie=ce.test(Ie=Xt.isArray)&&Ie,Ne=e.isFinite,Ee=e.isNaN,Se=ce.test(Se=re.keys)&&Se,Re=te.max,Ae=te.min,De=e.parseInt,Be=te.random,$e=ie.slice,Fe=ce.test(e.attachEvent),Te=Ce&&!/\n|true/.test(Ce+Fe),We={};We[$]=Xt,We[F]=Yt,We[T]=Zt,We[W]=ne,We[z]=re,We[q]=ee,We[P]=ue,We[K]=oe,nt.prototype=Y.prototype;
var qe=Y.support={};qe.fastBind=Ce&&!Te,qe.funcDecomp=!ce.test(e.a)&&R.test(v),qe.funcNames=typeof ne.name=="string",Y.templateSettings={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:N,variable:"",imports:{_:Y}},Oe||(lt=function(n){if(bt(n)){l.prototype=n;var t=new l;l.prototype=null}return t||{}});var ze=xe?function(n,t){U.value=t,xe(n,"__bindData__",U)}:l,Pe=Ie||function(n){return n&&typeof n=="object"&&typeof n.length=="number"&&je.call(n)==$||!1},Ke=Se?function(n){return bt(n)?Se(n):[]
}:Q,Le={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Me=mt(Le),Ue=ue("("+Ke(Me).join("|")+")","g"),Ve=ue("["+Ke(Le).join("")+"]","g"),Ge=it(function(n,t,e){ye.call(n,e)?n[e]++:n[e]=1}),He=it(function(n,t,e){(ye.call(n,e)?n[e]:n[e]=[]).push(t)}),Je=it(function(n,t,e){n[e]=t});Te&&X&&typeof be=="function"&&(Vt=function(n){if(!_t(n))throw new ae;return be.apply(e,arguments)});var Qe=8==De(w+"08")?De:function(n,t){return De(wt(n)?n.replace(E,""):n,t||0)};return Y.after=function(n,t){if(!_t(t))throw new ae;
return function(){return 1>--n?t.apply(this,arguments):void 0}},Y.assign=J,Y.at=function(n){for(var t=arguments,e=-1,r=rt(t,!0,!1,1),t=t[2]&&t[2][t[1]]===n?1:r.length,u=Xt(t);++e<t;)u[e]=n[r[e]];return u},Y.bind=Mt,Y.bindAll=function(n){for(var t=1<arguments.length?rt(arguments,!0,!1,1):yt(n),e=-1,r=t.length;++e<r;){var u=t[e];n[u]=ft(n[u],1,null,null,n)}return n},Y.bindKey=function(n,t){return 2<arguments.length?ft(t,19,$e.call(arguments,2),null,n):ft(t,3,null,null,n)},Y.chain=function(n){return n=new nt(n),n.__chain__=!0,n
},Y.compact=function(n){for(var t=-1,e=n?n.length:0,r=[];++t<e;){var u=n[t];u&&r.push(u)}return r},Y.compose=function(){for(var n=arguments,t=n.length;t--;)if(!_t(n[t]))throw new ae;return function(){for(var t=arguments,e=n.length;e--;)t=[n[e].apply(this,t)];return t[0]}},Y.countBy=Ge,Y.createCallback=function(n,t,e){var r=typeof n;if(null==n||"function"==r)return et(n,t,e);if("object"!=r)return function(t){return t[n]};var u=Ke(n),o=u[0],a=n[o];return 1!=u.length||a!==a||bt(a)?function(t){for(var e=u.length,r=!1;e--&&(r=ut(t[u[e]],n[u[e]],null,!0)););return r
}:function(n){return n=n[o],a===n&&(0!==a||1/a==1/n)}},Y.curry=function(n,t){return t=typeof t=="number"?t:+t||n.length,ft(n,4,null,null,null,t)},Y.debounce=Ut,Y.defaults=G,Y.defer=Vt,Y.delay=function(n,t){if(!_t(n))throw new ae;var e=$e.call(arguments,2);return de(function(){n.apply(h,e)},t)},Y.difference=Ft,Y.filter=Ct,Y.flatten=function(n,t,e,r){return typeof t!="boolean"&&null!=t&&(e=(r=e)&&r[t]===n?null:t,t=!1),null!=e&&(n=Et(n,e,r)),rt(n,t)},Y.forEach=It,Y.forEachRight=Nt,Y.forIn=d,Y.forInRight=function(n,t,e){var r=[];
d(n,function(n,t){r.push(t,n)});var u=r.length;for(t=et(t,e,3);u--&&false!==t(r[u--],r[u],n););return n},Y.forOwn=y,Y.forOwnRight=gt,Y.functions=yt,Y.groupBy=He,Y.indexBy=Je,Y.initial=function(n,t,e){var r=0,u=n?n.length:0;if(typeof t!="number"&&null!=t){var o=u;for(t=Y.createCallback(t,e,3);o--&&t(n[o],o,n);)r++}else r=null==t||e?1:t||r;return s(n,0,Ae(Re(0,u-r),u))},Y.intersection=function(e){for(var r=arguments,u=r.length,a=-1,f=i(),l=-1,s=pt(),v=e?e.length:0,h=[],g=i();++a<u;){var y=r[a];f[a]=s===n&&(y?y.length:0)>=b&&o(a?r[a]:g)
}n:for(;++l<v;){var m=f[0],y=e[l];if(0>(m?t(m,y):s(g,y))){for(a=u,(m||g).push(y);--a;)if(m=f[a],0>(m?t(m,y):s(r[a],y)))continue n;h.push(y)}}for(;u--;)(m=f[u])&&p(m);return c(f),c(g),h},Y.invert=mt,Y.invoke=function(n,t){var e=$e.call(arguments,2),r=-1,u=typeof t=="function",o=n?n.length:0,a=Xt(typeof o=="number"?o:0);return It(n,function(n){a[++r]=(u?t:n[t]).apply(n,e)}),a},Y.keys=Ke,Y.map=Et,Y.max=St,Y.memoize=function(n,t){function e(){var r=e.cache,u=t?t.apply(this,arguments):_+arguments[0];return ye.call(r,u)?r[u]:r[u]=n.apply(this,arguments)
}if(!_t(n))throw new ae;return e.cache={},e},Y.merge=function(n){var t=arguments,e=2;if(!bt(n))return n;if("number"!=typeof t[2]&&(e=t.length),3<e&&"function"==typeof t[e-2])var r=et(t[--e-1],t[e--],2);else 2<e&&"function"==typeof t[e-1]&&(r=t[--e]);for(var t=$e.call(arguments,1,e),u=-1,o=i(),a=i();++u<e;)ot(n,t[u],r,o,a);return c(o),c(a),n},Y.min=function(n,t,e){var u=1/0,o=u;if(!t&&Pe(n)){e=-1;for(var a=n.length;++e<a;){var i=n[e];i<o&&(o=i)}}else t=!t&&wt(n)?r:Y.createCallback(t,e,3),It(n,function(n,e,r){e=t(n,e,r),e<u&&(u=e,o=n)
});return o},Y.omit=function(n,t,e){var r=pt(),u=typeof t=="function",o={};if(u)t=Y.createCallback(t,e,3);else var a=rt(arguments,!0,!1,1);return d(n,function(n,e,i){(u?!t(n,e,i):0>r(a,e))&&(o[e]=n)}),o},Y.once=function(n){var t,e;if(!_t(n))throw new ae;return function(){return t?e:(t=!0,e=n.apply(this,arguments),n=null,e)}},Y.pairs=function(n){for(var t=-1,e=Ke(n),r=e.length,u=Xt(r);++t<r;){var o=e[t];u[t]=[o,n[o]]}return u},Y.partial=function(n){return ft(n,16,$e.call(arguments,1))},Y.partialRight=function(n){return ft(n,32,null,$e.call(arguments,1))
},Y.pick=function(n,t,e){var r={};if(typeof t!="function")for(var u=-1,o=rt(arguments,!0,!1,1),a=bt(n)?o.length:0;++u<a;){var i=o[u];i in n&&(r[i]=n[i])}else t=Y.createCallback(t,e,3),d(n,function(n,e,u){t(n,e,u)&&(r[e]=n)});return r},Y.pluck=Rt,Y.pull=function(n){for(var t=arguments,e=0,r=t.length,u=n?n.length:0;++e<r;)for(var o=-1,a=t[e];++o<u;)n[o]===a&&(we.call(n,o--,1),u--);return n},Y.range=function(n,t,e){n=+n||0,e=typeof e=="number"?e:+e||1,null==t&&(t=n,n=0);var r=-1;t=Re(0,pe((t-n)/(e||1)));
for(var u=Xt(t);++r<t;)u[r]=n,n+=e;return u},Y.reject=function(n,t,e){return t=Y.createCallback(t,e,3),Ct(n,function(n,e,r){return!t(n,e,r)})},Y.remove=function(n,t,e){var r=-1,u=n?n.length:0,o=[];for(t=Y.createCallback(t,e,3);++r<u;)e=n[r],t(e,r,n)&&(o.push(e),we.call(n,r--,1),u--);return o},Y.rest=qt,Y.shuffle=Bt,Y.sortBy=function(n,t,e){var r=-1,o=n?n.length:0,a=Xt(typeof o=="number"?o:0);for(t=Y.createCallback(t,e,3),It(n,function(n,e,u){var o=a[++r]=f();o.m=t(n,e,u),o.n=r,o.o=n}),o=a.length,a.sort(u);o--;)n=a[o],a[o]=n.o,p(n);
return a},Y.tap=function(n,t){return t(n),n},Y.throttle=function(n,t,e){var r=!0,u=!0;if(!_t(n))throw new ae;return false===e?r=!1:bt(e)&&(r="leading"in e?e.leading:r,u="trailing"in e?e.trailing:u),M.leading=r,M.maxWait=t,M.trailing=u,Ut(n,t,M)},Y.times=function(n,t,e){n=-1<(n=+n)?n:0;var r=-1,u=Xt(n);for(t=et(t,e,1);++r<n;)u[r]=t(r);return u},Y.toArray=function(n){return n&&typeof n.length=="number"?s(n):jt(n)},Y.transform=function(n,t,e,r){var u=Pe(n);return t=et(t,r,4),null==e&&(u?e=[]:(r=n&&n.constructor,e=lt(r&&r.prototype))),(u?It:y)(n,function(n,r,u){return t(e,n,r,u)
}),e},Y.union=function(){return at(rt(arguments,!0,!0))},Y.uniq=Pt,Y.values=jt,Y.where=Ct,Y.without=function(n){return Ft(n,$e.call(arguments,1))},Y.wrap=function(n,t){if(!_t(t))throw new ae;return function(){var e=[n];return _e.apply(e,arguments),t.apply(this,e)}},Y.zip=Kt,Y.zipObject=Lt,Y.collect=Et,Y.drop=qt,Y.each=It,Y.b=Nt,Y.extend=J,Y.methods=yt,Y.object=Lt,Y.select=Ct,Y.tail=qt,Y.unique=Pt,Y.unzip=Kt,Ht(Y),Y.clone=function(n,t,e,r){return typeof t!="boolean"&&null!=t&&(r=e,e=t,t=!1),tt(n,t,typeof e=="function"&&et(e,r,1))
},Y.cloneDeep=function(n,t,e){return tt(n,!0,typeof t=="function"&&et(t,e,1))},Y.contains=kt,Y.escape=function(n){return null==n?"":oe(n).replace(Ve,ct)},Y.every=xt,Y.find=Ot,Y.findIndex=function(n,t,e){var r=-1,u=n?n.length:0;for(t=Y.createCallback(t,e,3);++r<u;)if(t(n[r],r,n))return r;return-1},Y.findKey=function(n,t,e){var r;return t=Y.createCallback(t,e,3),y(n,function(n,e,u){return t(n,e,u)?(r=e,!1):void 0}),r},Y.findLast=function(n,t,e){var r;return t=Y.createCallback(t,e,3),Nt(n,function(n,e,u){return t(n,e,u)?(r=n,!1):void 0
}),r},Y.findLastIndex=function(n,t,e){var r=n?n.length:0;for(t=Y.createCallback(t,e,3);r--;)if(t(n[r],r,n))return r;return-1},Y.findLastKey=function(n,t,e){var r;return t=Y.createCallback(t,e,3),gt(n,function(n,e,u){return t(n,e,u)?(r=e,!1):void 0}),r},Y.has=function(n,t){return n?ye.call(n,t):!1},Y.identity=Gt,Y.indexOf=Wt,Y.isArguments=ht,Y.isArray=Pe,Y.isBoolean=function(n){return true===n||false===n||je.call(n)==F},Y.isDate=function(n){return n?typeof n=="object"&&je.call(n)==T:!1},Y.isElement=function(n){return n?1===n.nodeType:!1
},Y.isEmpty=function(n){var t=!0;if(!n)return t;var e=je.call(n),r=n.length;return e==$||e==K||e==B||e==z&&typeof r=="number"&&_t(n.splice)?!r:(y(n,function(){return t=!1}),t)},Y.isEqual=function(n,t,e,r){return ut(n,t,typeof e=="function"&&et(e,r,2))},Y.isFinite=function(n){return Ne(n)&&!Ee(parseFloat(n))},Y.isFunction=_t,Y.isNaN=function(n){return dt(n)&&n!=+n},Y.isNull=function(n){return null===n},Y.isNumber=dt,Y.isObject=bt,Y.isPlainObject=g,Y.isRegExp=function(n){return n?typeof n=="object"&&je.call(n)==P:!1
},Y.isString=wt,Y.isUndefined=function(n){return typeof n=="undefined"},Y.lastIndexOf=function(n,t,e){var r=n?n.length:0;for(typeof e=="number"&&(r=(0>e?Re(0,r+e):Ae(e,r-1))+1);r--;)if(n[r]===t)return r;return-1},Y.mixin=Ht,Y.noConflict=function(){return e._=le,this},Y.parseInt=Qe,Y.random=Jt,Y.reduce=At,Y.reduceRight=Dt,Y.result=function(n,t){if(n){var e=n[t];return _t(e)?n[t]():e}},Y.runInContext=v,Y.size=function(n){var t=n?n.length:0;return typeof t=="number"?t:Ke(n).length},Y.some=$t,Y.sortedIndex=zt,Y.template=function(n,t,e){var r=Y.templateSettings;
n||(n=""),e=G({},e,r);var u,o=G({},e.imports,r.imports),r=Ke(o),o=jt(o),i=0,f=e.interpolate||S,l="__p+='",f=ue((e.escape||S).source+"|"+f.source+"|"+(f===N?C:S).source+"|"+(e.evaluate||S).source+"|$","g");n.replace(f,function(t,e,r,o,f,c){return r||(r=o),l+=n.slice(i,c).replace(A,a),e&&(l+="'+__e("+e+")+'"),f&&(u=!0,l+="';"+f+";__p+='"),r&&(l+="'+((__t=("+r+"))==null?'':__t)+'"),i=c+t.length,t}),l+="';\n",f=e=e.variable,f||(e="obj",l="with("+e+"){"+l+"}"),l=(u?l.replace(j,""):l).replace(k,"$1").replace(x,"$1;"),l="function("+e+"){"+(f?"":e+"||("+e+"={});")+"var __t,__p='',__e=_.escape"+(u?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+l+"return __p}";
try{var c=ne(r,"return "+l).apply(h,o)}catch(p){throw p.source=l,p}return t?c(t):(c.source=l,c)},Y.unescape=function(n){return null==n?"":oe(n).replace(Ue,vt)},Y.uniqueId=function(n){var t=++m;return oe(null==n?"":n)+t},Y.all=xt,Y.any=$t,Y.detect=Ot,Y.findWhere=Ot,Y.foldl=At,Y.foldr=Dt,Y.include=kt,Y.inject=At,y(Y,function(n,t){Y.prototype[t]||(Y.prototype[t]=function(){var t=[this.__wrapped__],e=this.__chain__;return _e.apply(t,arguments),t=n.apply(Y,t),e?new nt(t,e):t})}),Y.first=Tt,Y.last=function(n,t,e){var r=0,u=n?n.length:0;
if(typeof t!="number"&&null!=t){var o=u;for(t=Y.createCallback(t,e,3);o--&&t(n[o],o,n);)r++}else if(r=t,null==r||e)return n?n[u-1]:h;return s(n,Re(0,u-r))},Y.sample=function(n,t,e){var r=n?n.length:0;return typeof r!="number"&&(n=jt(n)),null==t||e?n?n[Jt(r-1)]:h:(n=Bt(n),n.length=Ae(Re(0,t),n.length),n)},Y.take=Tt,Y.head=Tt,y(Y,function(n,t){var e="sample"!==t;Y.prototype[t]||(Y.prototype[t]=function(t,r){var u=this.__chain__,o=n(this.__wrapped__,t,r);return u||null!=t&&(!r||e&&typeof t=="function")?new nt(o,u):o
})}),Y.VERSION="2.2.1",Y.prototype.chain=function(){return this.__chain__=!0,this},Y.prototype.toString=function(){return oe(this.__wrapped__)},Y.prototype.value=Qt,Y.prototype.valueOf=Qt,It(["join","pop","shift"],function(n){var t=ie[n];Y.prototype[n]=function(){var n=this.__chain__,e=t.apply(this.__wrapped__,arguments);return n?new nt(e,n):e}}),It(["push","reverse","sort","unshift"],function(n){var t=ie[n];Y.prototype[n]=function(){return t.apply(this.__wrapped__,arguments),this}}),It(["concat","slice","splice"],function(n){var t=ie[n];
Y.prototype[n]=function(){return new nt(t.apply(this.__wrapped__,arguments),this.__chain__)}}),Y}var h,g=[],y=[],m=0,_=+new Date+"",b=75,d=40,w=" \t\x0B\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000",j=/\b__p\+='';/g,k=/\b(__p\+=)''\+/g,x=/(__e\(.*?\)|\b__t\))\+'';/g,C=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,O=/\w*$/,I=/^function[ \n\r\t]+\w/,N=/<%=([\s\S]+?)%>/g,E=RegExp("^["+w+"]*0+(?=.$)"),S=/($^)/,R=/\bthis\b/,A=/['\n\r\t\u2028\u2029\\]/g,D="Array Boolean Date Function Math Number Object RegExp String _ attachEvent clearTimeout isFinite isNaN parseInt setImmediate setTimeout".split(" "),B="[object Arguments]",$="[object Array]",F="[object Boolean]",T="[object Date]",W="[object Function]",q="[object Number]",z="[object Object]",P="[object RegExp]",K="[object String]",L={};
L[W]=!1,L[B]=L[$]=L[F]=L[T]=L[q]=L[z]=L[P]=L[K]=!0;var M={leading:!1,maxWait:0,trailing:!1},U={configurable:!1,enumerable:!1,value:null,writable:!1},V={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1},G={"\\":"\\","'":"'","\n":"n","\r":"r","\t":"t","\u2028":"u2028","\u2029":"u2029"},H=V[typeof window]&&window||this,J=V[typeof exports]&&exports&&!exports.nodeType&&exports,Q=V[typeof module]&&module&&!module.nodeType&&module,X=Q&&Q.exports===J&&J,Y=V[typeof global]&&global;!Y||Y.global!==Y&&Y.window!==Y||(H=Y);
var Z=v();typeof define=="function"&&typeof define.amd=="object"&&define.amd?(H._=Z, define(function(){return Z})):J&&Q?X?(Q.exports=Z)._=Z:J._=Z:H._=Z}).call(this);
////////////////////////////////////////
// SRC End --> libs/lodash/lodash-2.2.1.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/infra/lang_ext.js
////////////////////////////////////////
(function() {

    // The following code (inheritance) is taken from the book - Secrets of the JavaScript Ninja (John Resig).
    var initializing = false;

    // Determine if functions can be serialized
    var fnTest = /xyz/.test(function() { xyz; }) ? /\b_super\b/ : /.*/;

    // Create a new Class that inherits from this class
    Object.subClass = function(prop) {
        var _super = this.prototype;

        // Instantiate a base class (but only create the instance, don't run the init constructor)
        initializing = true;
        var proto = new this();
        initializing = false;

        var name;
        // Copy the properties over onto the new prototype
        for (name in prop) {
            // Check if we're overwriting an existing function
            var isAnExistingFunction =
                typeof prop[name] == "function" && typeof _super[name] == "function" && fnTest.test(prop[name]);

            proto[name] = isAnExistingFunction ?
                (function(name, fn) {
                    return function() {
                        var tmp = this._super;

                        // Add a new ._super() method that is the same method but on the super-class.
                        this._super = _super[name];

                        // The method only need to be bound temporarily, so we remove it when we're done executing.
                        var ret = fn.apply(this, arguments);
                        this._super = tmp;

                        return ret;
                    };
                })(name, prop[name]) :
                prop[name];
        }

        // The dummy class constructor
        function Class() {
            // All construction is actually done in the init method
            if (!initializing && this.ctor) this.ctor.apply(this, arguments);
        }

        // Handle static members
        for (name in this){
        	if (this.hasOwnProperty(name) && typeof(this[name]) != 'function')
                Class[name] = this[name];
        }

        // Populate our constructed prototype object
        Class.prototype = proto;

        // Enforce the constructor to be what we expect
        Class.constructor = Class;

        // And make this class extensible
        Class.subClass = arguments.callee;

        // Add behavior ability
        Class.addBehavior = function (behaviorAbstractClass, behaviorOverrides) {
            behaviorOverrides = behaviorOverrides || {};
            if (behaviorAbstractClass) {
                override(proto, behaviorOverrides, new behaviorAbstractClass());
            } else {
                throw 'behaviorAbstractClass must be a vaild behavior class';
            }
        };

        return Class;
    };
})();

/**
 * 1. This should be elsewhere.
 * 2. $.browser is going away in future versions of jQuery.
 */
jQuery.extend({
    xmlToString: function(xmlObj) {
        if (this.browser.msie) {
            return xmlObj.xml || xmlObj.outerHTML;
        } else {
            return (new XMLSerializer()).serializeToString(xmlObj);
        }
    }
});


////////////////////////////////////////
// SRC End --> t2k/infra/lang_ext.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/infra/namespaces.js
////////////////////////////////////////
var t2k = {
	host:{},
    compile: {
		results: {}
	},
    compilePlay:{
        results: {}
    },
    behavior: {},
    component: {
    	dialog: {},
    	answer: {},
        buttons: {},
        container: {},
        imageViewer: {},
        keyboard: {},
        mediaPlayer: {},
        select: {},
        textViewer: {},
        text: {},
        textarea: {},
        subAnswer: {},
        subQuestion: {},
        group: {},
        sharedarea: {},
        balloon: {},
        cloze: {},
        bank: {},
        mathField: {},
        tre: {},
        definition: {},
        mtq : {},
        options : {},
        table : {},
        thirdParty : {},
        modal:{},
        applet:{},
	    help:{}
    },
    controls: {},
    core: {
        layout: {}
    },
    io: {},
    model: {},
    player: {
        sequence: {},
        task: {
        	progress: {},
	        controls: {}
        }
    },
    util: {
        managers: {}
    }
};

////////////////////////////////////////
// SRC End --> t2k/infra/namespaces.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/host/SequenceFacade.js
////////////////////////////////////////
( function() {

	t2k.host.SequenceFacade = Object.subClass( {

	//////////////////////////////////////////////////////////////
	// public scope - start
	//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////
		// class members - start
		//////////////////////////////////////////////////////////

		// facade config
		settings: {
			// rebuild (new+state) player instead of recycle (state only) player.
			rebuildPlayerOnState: true,
			// set state from config or by setState method.
			injectionUseConfigState: false
		},
		
		crossApiConfig: {},
		
		// player future reference
		player: null,

		// host's callback to call when player done
		hostCallback: null,

		// flag to determine when host callback is needed
		callHostCallback: true,

		// flag to determine
		wasStateSet: false,
		
		// collection of functions to call on success
		successStack: [],
		
		//////////////////////////////////////////////////////////
		// class members - end
		//////////////////////////////////////////////////////////


		//////////////////////////////////////////////////////////
		// class functions - start
		//////////////////////////////////////////////////////////
		ctor: function( config ) {

			this.config = copy( {}, config ) ;

		},

		setPlayer: function( config, callback ) {
			
			var mergedConfig = $.extend( {}, config.initData, this.crossApiConfig )
			
			this.setCrossApiConfig( mergedConfig ) ;

			this.player = new t2k.player.SequencePlayer( config, callback );

		},

		resetPlayer: function() {

			Perf.reset() ;
			dndManager.reset();
			Mustache.clearCache();
			jQuery.cache = {};
			jQuery.fragments = {};

			if( this.player ) {
				this.player.destroy() ;
				delete this.player ;
			}

		},

		getPlayerID: function() {
			return this.player.cfg.data.id ;
		},
		
		//////////////////////////////////////////////////////////
		// INTERNAL - start
		//////////////////////////////////////////////////////////
		
		reload: function( overrideOptions, rejectCallback ) {
			
			if( !this.playParams.config.overrideOptions ) {
				this.playParams.config.overrideOptions = {} ;
			}
			
			var thi$ = this ;
			
			if( overrideOptions.reloadInitiator != this.playParams.config.overrideOptions.reloadInitiator ) {
				
				function reloadSequence() {
					
					$.extend( thi$.playParams.config.overrideOptions, overrideOptions ) ;
					
					thi$.playSequence( thi$.playParams.config, thi$.playParams.success, thi$.playParams.error, true ) ;
					
				} ;
				
				this.successStack.push( reloadSequence ) ;
				
			} else {
				
				rejectCallback() ;
				
			}
			
		},
		
		//////////////////////////////////////////////////////////
		// INTERNAL - end
		//////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////
		// incoming - start
		//////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////
		// Host API - start
		//////////////////////////////////////////////////////////

		api: function( config ) {

//			console.log( config ) ;
//			debugger;
			
			var thi$ = this ;
			
			var handler = this[ config.action ] ;
			if( handler ) {
				
				this.setCrossApiConfig( config.data ) ;
				
				function successWrapper( successData ) {
					while( thi$.successStack.length > 0 ) {
						var callTo = thi$.successStack[0] ;
						thi$.successStack.shift() ;
						callTo() ;
					}
					config.success( successData ) ;
				} ;
				
				handler.call(this, config.data, successWrapper, config.error ) ;
				
			} else {
				if( config.error ) {
					config.error() ;
				} else {
					throw new Error( "Unhandled api action --> " + config.action ) ;
				}
			}

		},

		setCrossApiConfig: function( data ) {
			
			if ( data ){
				
				if( typeof data.saveState != "undefined" ) {
					var saveState = !!data.saveState ;
					this.crossApiConfig.saveState = saveState ;
					ENV.saveState = saveState ;
					console.log( "[DL][API][Flag override] --> saveState --> " + saveState ) ;
				}
				
				if ( data && typeof data.gradualExposure != "undefined" ) {
					var gradualExposure = !!data.gradualExposure ;
					this.crossApiConfig.gradualExposure = gradualExposure ;
					ENV.overrideGradualExposure = gradualExposure ;
					console.log( "[DL][API][Flag override] --> gradualExposure --> " + gradualExposure ) ;
				}
				
				if ( data && typeof data.viewMode != "undefined" ) {
					this.crossApiConfig.viewMode = data.viewMode ;
					console.log( "[DL][API][Flag override] --> viewMode --> " + data.viewMode ) ;
				}
				
				if ( data && typeof data.role != "undefined" ) {
					this.crossApiConfig.role = data.role ;
					console.log( "[DL][API][Flag override] --> role --> " + data.role ) ;
				}
				
			}
		},

		//////////////////////////////////////////////////////////
		// Host API - end
		//////////////////////////////////////////////////////////

		playSequence: function( config, success, error, ignoreValidation ) {

			var thi$ = this ;
			
			this.playParams = {
					config: config,
					success: success,
					error: error
			} ;
			
			var playSeqFunc = function() {

				var successData = {
						mainElement: $("body")[0]
				} ;

				var successWrapper = function(){
					setTimeout( function() {
						success( successData )
					}, 0 ) ;
				} ;

				var newPlayerCallback = successWrapper ;

				var configAddition = config ; //{ data: config.data } ;

				thi$.resetPlayer() ;

				if( thi$.settings.injectionUseConfigState ) {

					configAddition.state = config.state ;

				} else {

					newPlayerCallback  = function(){

						thi$.player.setState( config.state, successWrapper ) ;

					} ;

				}

				var newConfig = copy( configAddition, copy( {}, thi$.config ) ) ;

				var newPlayerCallbackWrapper = function() {
					setTimeout( function() {
						newPlayerCallback() ;
					}, 0 ) ;
				} ;

				thi$.setPlayer( newConfig, newPlayerCallbackWrapper );

			}
			
			if( !ignoreValidation ) {
				////////////////////////////////////////////////////////
				// check play config validity
				////////////////////////////////////////////////////////
				var isDataValid = validatePlayData( config, error ) ;
				
				if( !isDataValid ) {
					
					var emptyDataString = getEmptySequenceData() ;
					var mustachedString = Mustache.render( emptyDataString, config )
					config.data = $( mustachedString )[0] ;
					
				} else if (typeof config.data == "string") {
					
					config.data = $(config.data)[0] ;
					
				} else if( typeof config.data[config.id].convertedData == "string" ) {
					
					config.data = $(config.data[config.id].convertedData)[0] ;
					
				}
			}
			
			playSeqFunc() ;
			
		},

		getState: function( config, success, error ) {
			this.player.getState( success ) ;
		},

		focusOnTask: function( config, success, error ) {
			var taskCid = config.taskCid ;
			!!this.player && this.player.focusOnTask( taskCid, true, success ) ;
		},

		overrideScores: function( config, success, error ) {
			if(this.player){
				this.player.setTasksScores( config ) ;
				success() ;
			}else{
				console.log("------> no palyer object");
			}
		},

		suspend: function ( config, success, error ) {
			this.player.suspend();
			success() ;
		},

		resume: function ( config, success, error ) {
			this.player.resume() ;
			success() ;
		},

		setVolume: function (  config, success, error  ) {
			this.player.setVolume( config );
			success() ;
		},

		terminateSequence: function ( config, success, error ) {

			var self = this ;

			var successWrapper = function(){

				self.resetPlayer() ;

				success() ;

			} ;

			if( this.player ) {
				this.player.suspend();
				if( ENV.saveState ) {
					var sendLogs = false ;
					this.player.fireState( successWrapper, error, sendLogs ) ;
				} else {
					successWrapper() ;
				}
			} else {
				success() ;
			}

		},

		terminate: function ( config, success, error ) {
			this.resetPlayer() ;
			success() ;
		},

		//////////////////////////////////////////////////////////
		// incoming - end
		//////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////
		// outgoing - start
		//////////////////////////////////////////////////////////
		
		onUIEvent: function( eventString ) {
			
			var playerID = this.getPlayerID() ;
			
			ENV.externalHost.api( {
				action: 'onUIEvent',
				id: playerID,
				data: eventString,
				success: function() {},
				error: function() { throw new Error("onUIEvent error callback") ; }
			} ) ;
		},
		
		taskChanged: function( taskCid, changedTo ) {
			ENV.externalHost.api( {
				action: 'taskChanged',
				id: this.getPlayerID(),
				data: {
					taskCid: taskCid,
					status: changedTo
				},
				success: function() {},
				error: function() { throw new Error("taskChanged error callback") ; }
			} ) ;
		},

		playMovie: function( src ) {
			ENV.externalHost.api( {
				action: 'playMovie',
				id: this.getPlayerID(),
				data: { src: src },
				success: function() {},
				error: function() { throw new Error("playMovie error callback") ; }
			} ) ;
		},

		playAudio: function( src, stopHandler, context ) {
			ENV.externalHost.api( {
				action: 'playAudio',
				id: this.getPlayerID(),
				data: {
					src 		: src,
					stopHandler	: stopHandler,
					context		: context
				},
				success: function() {},
				error: function() { throw new Error("playAudio error callback") ; }
			} ) ;
		},

		stopAudio: function() {
			ENV.externalHost.api( {
				action: 'stopAudio',
				id: this.getPlayerID(),
				data: {},
				success: function() {},
				error: function() { throw new Error("stopAudio error callback") ; }
			} ) ;
		},

		onSwipe: function( swipeDirection ) {
			ENV.externalHost.api( {
				action: 'onSwipe',
				id: this.getPlayerID(),
				data: { direction: swipeDirection },
				success: function() {},
				error: function() { throw new Error("onSwipe error callback") ; }
			} ) ;
		},

		onDone: function() {
			ENV.externalHost.api({
				action:'onEndSequence',
				id:this.getPlayerID(),
				data:null,
				success: function() {},
				error: function() { throw new Error("onEndSequence error callback") ; }
			});
		},

		saveState: function( state, logs, scores, success, error ) {

			var errorCallback = error || function() { throw new Error("saveState error callback") ; }

			if( ENV.saveState ) {

				ENV.externalHost.api( {
					action: 'saveState',
					id: this.getPlayerID(),
					data: {
						state: state,
						scores: scores,
						eventLog: logs
					},
					success: success || function() {},
					error: errorCallback
				} ) ;

			} else {

				errorCallback() ;

			}
		}

		//////////////////////////////////////////////////////////
		// outgoing - end
		//////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////
		// Assessment - start
		//////////////////////////////////////////////////////////
//		fetchResult: function () {
//			 return this.player.fetchResult() ;
//		},
//
//		updateRubrics: function ( staticDataString ) {
//			return this.player.updateRubrics( staticDataString ) ;
//		},
//
//		getScreenByRubric: function ( rubricId ) {
//			return this.player.getScreenByRubric( rubricId ) ;
//		},
//
//		setAssessmentStateInput: function ( atomsList ) {
//			return this.player.setAssessmentStateInput( atomsList ) ;
//		}
		//////////////////////////////////////////////////////////
		// Assessment - end
		//////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////
		// class functions - end
		//////////////////////////////////////////////////////////


	//////////////////////////////////////////////////////////////
	// public scope - end
	//////////////////////////////////////////////////////////////
	});

	//////////////////////////////////////////////////////////////
	// private scope - start
	//////////////////////////////////////////////////////////////
	
	function validatePlayData( config, error ) {
		
		var isDataValid = true ;
		var errMsgs = [] ;
		
		if( !config.id ){
			
			errMsgs.push( "missing \"id\" property" ) ;
			
		} 
		
		if( !config.data ){
			
			errMsgs.push( "missing \"data\" property" ) ;
			
		} else if( config.id && typeof config.data != "string" ) {
			
			if( !config.data[config.id] ) {
				
				errMsgs.push( "id not found in data content or missing sequence data in blob" ) ;
				
			} else {
				
				var converted = config.data[config.id].convertedData ;
				
				if( !converted || converted == "null" ) {
					
					errMsgs.push( "missing convertedData property in sequence blob" ) ;
				
				}
			}
			
		}
		
		if( errMsgs.length > 0 ) {
			var msgsStr = "" ;
			isDataValid = false ;
			for( var i = 0 ; i < errMsgs.length ; i++ ) {
				msgsStr += "\n" + errMsgs[ i ] ;
			}
			error( "playSequence data is invalid:" + msgsStr ) ;
		}
		
		return isDataValid ;
	}
	
	function getEmptySequenceData() {
		var data =
			"<sequence type='simple' id='{{id}}'>\
				<task exposureid='1' type='statement'>\
					<mode>nerrative</mode>\
					<question>\
						<textviewer style='texteditor'>\
							<p>\
								<span class='normal'>\
									There isn't any content in this sequence. You can click Next to continue to the following sequence.\
								</span>\
							</p>\
						</textviewer>\
					</question>\
				</task>\
			</sequence>" ;

		return data ;
	}

	//////////////////////////////////////////////////////////////
	// private scope - end
	//////////////////////////////////////////////////////////////


} )() ;

////////////////////////////////////////
// SRC End --> t2k/host/SequenceFacade.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/ObjectUtils.js
////////////////////////////////////////
(function() {

    /** A counter for auto-generated object ids. */
    var nextGenId = 0;

    /**
     * Class: t2k.util.ObjectUtils
     * Contains string manipulation/formatting/etc. utilities
     */
    t2k.util.ObjectUtils = {
        
        /**
         * Method: copy
         * Copy all members of a source object into a target object except for the already existing once.
         * Default values can be guaranteed by providing a third object containing these defaults.
         *
         * Params:
         *  target - {Object} The object into which the copy is made.
         *  source - {Object} The origin of the data to copy.
         *  defaults - {Object} Contains
         *
         * Returns:
         * {Object} the given target object.
         */
        copy: function copy(target, source, defaults) {
            // Apply from source to target only if the source doesn't already has a member with the same name.
            if (target && source && typeof source == 'object')
                for (var i in source) if (!!!target[i]) target[i] = source[i];
            // Apply the defaults.
            if (defaults) copy(target, defaults);
            return target;
        }, // End of copy
        
        /**
         * Method: merge
         * Copy all members of a source object into a target object except for the already existing once.
         * the existing members merged.
         * Default values can be guaranteed by providing a third object containing these defaults.
         *
         * Params:
         *  target - {Object} The object into which the copy is made.
         *  source - {Object} The origin of the data to copy.
         *  defaults - {Object} Contains
         *
         * Returns:
         * {Object} the given target object.
         */
        merge: function merge(target, source, defaults) {
        	 // Apply from source to target only if the source doesn't already has a member with the same name.
            if (target && source && typeof source == 'object'){
            	for (var i in source) if (!!!target[i]) target[i] = source[i];
            	if (source.events && target.events)
            		this.copy(target.events, source.events);
            }
            	
            // Apply the defaults.
            if (defaults) merge(target, defaults);
            return target;
        }, // End of copy

        /**
         * Method: override
         * Copy all members of a source object into a target object overriding existing members with the same name.
         * Default values can be guaranteed by providing a third object containing these defaults.
         *
         * Params:
         *  target - {Object} The object into which the copy is made.
         *  source - {Object} The origin of the data to copy.
         *  defaults - {Object} Contains
         *
         * Returns:
         *  {Object} the given target object.
         */
        override: function override(target, source, defaults) {
            // First apply the defaults.
            if (defaults) override(target, defaults);
            // Apply from source to target.
            if (target && source && typeof source == 'object')
                for (var i in source) target[i] = source[i];
            return target;
        }, // End of override

        /**
         * Method: genId
         * Generate an id for dom elements.
         *
         * Returns:
         *  {String} an auto-generated id.
         */
        genId: function() {
            return 'gen_id_' + nextGenId++;
        } // End of genId

    }; // End of t2k.util.ObjectUtils

    
    /**
     * Method: String.format
     * .Net style string format.
     * Example: "{0} will always be {0}, and {1} is his {2}".format("bart", "homer", "dad")
     *    will result in "bart will always be bart, and homer is his dad"
     *
     * Params:
     *  replacements in the string
     *
     * Returns:
     *  {String} Formatted string.
     */
    String.prototype.format = function() {
      var args = arguments;
      return this.replace(/{(\d+)}/g, function(match, number) {
        return typeof args[number] != 'undefined'
          ? args[number]
          : match
        ;
      });
    };
    
    /**
     * Method: capitalize
     * Capitalize the first letter of string
     * Example: "hello World"
     *    will result in "Hello World"
     *
     * Params:
     *  replacements in the string
     *
     * Returns:
     *  {String} Formatted string.
     */
    String.prototype.capitalize = function() {
        return this.charAt(0).toUpperCase() + this.slice(1);
    };
    
    /**
     * Method: String.px2int
     * Example: "18px".px2int()  ||  jQuery(element).css('font-size').px2int()
     *    will result 18 {int}
     *
     * Params:
     *  replacements in the string
     *
     * Returns:
     *  {int}
     */
    String.prototype.px2int = function() {
    	return parseInt(this.replace('px','')) || 0;
     };
    
     /**
      * Method: String.em2int
      * Example: "2em".px2int()  ||  jQuery(element).css('font-size').px2int()
      *    will result 2 {int}
      *
      * Params:
      *  replacements in the string
      *
      * Returns:
      *  {int}
      */
     String.prototype.em2int = function() {
    	 return parseFloat(this.replace('em','')) || 0;
     };
     
    /**
     * Method: splice
     * Example: "foo baz".splice( 4, 0, "bar " );
     *    will result in "foo bar baz"
     *
     * @param idx - index 
     * @param rem
     * @param s   - string
     * @returns {String} spliced string.
     */
    String.prototype.splice = function( idx, rem, s ) {
        return (this.slice(0,idx) + s + this.slice(idx + Math.abs(rem)));
    };

    // Add ability to select jquery using regex
    // http://james.padolsey.com/javascript/regex-selector-for-jquery/
    jQuery.expr[':'].regex = function(elem, index, match) {
        var matchParams = match[3].split(','),
            validLabels = /^(data|css):/,
            attr = {
                method: matchParams[0].match(validLabels) ?
                            matchParams[0].split(':')[0] : 'attr',
                property: matchParams.shift().replace(validLabels,'')
            },
            regexFlags = 'ig',
            regex = new RegExp(matchParams.join('').replace(/^\s+|\s+$/g,''), regexFlags);
        return regex.test(jQuery(elem)[attr.method](attr.property));
    }

})();

var copy = jQuery.proxy(t2k.util.ObjectUtils.copy, t2k.util.ObjectUtils);
var override = jQuery.proxy(t2k.util.ObjectUtils.override, t2k.util.ObjectUtils);
var merge = jQuery.proxy(t2k.util.ObjectUtils.merge, t2k.util.ObjectUtils);
var genId = jQuery.proxy(t2k.util.ObjectUtils.genId, t2k.util.ObjectUtils);

////////////////////////////////////////
// SRC End --> t2k/util/ObjectUtils.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/DataUtil.js
////////////////////////////////////////
(function() {

    t2k.util.data = Object.subClass({
           
           log : function (element) {
                console.log($(element).html());
           }, 

           logXcode : function () {
              return;
              if(window.top && window.top.console) {
                if(ENV && ENV.behaviors && ENV.behaviors.isIpad) {
                  window.top.console.log.apply(window.top.console,arguments);
                  //window.top.console(arguments[0]);
                }
                else{
                  console.log.apply(window.console,arguments);
                }
              }
           },

           logFunction : function (name) {
              console.log("Function Name : " + name); 
           },

           logEvent : function (eventName) {
              console.log("Event Name : " + eventName);
           } 
      

    });

})();

// single tone
var dataUtil = new t2k.util.data();
////////////////////////////////////////
// SRC End --> t2k/util/DataUtil.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/Environment.js
////////////////////////////////////////

(function() {

	t2k.util.Environment = {
			saveState: false,
			contentDirection: 'ltr',
			interfaceDirection: 'ltr',
			assetBasePath: '',
			taskIndexType: 'none',
			host: null,
			locale: 'en_US',
			language: 'en',
			debug: {},
			behaviors: getBehavior(),
			isProduction : false
		// add user data and modes here
		};
	
	function getBehavior() {
		console.log('dl-debug-version.1.1');
		var appstr = navigator.appVersion.toLowerCase(),
            version = '';
		
		
		
		
		var bhvName = 'Default' ;
		// currently handling default and Android
		// feel welcome to add more OS and/or browser types
		if( appstr.indexOf( 'android' ) != -1 ) {
			
			bhvName = 'Android';

            /** We treat Chrome for Android differently from the stock Android browser */
            if (appstr.indexOf('chrome') != -1 && appstr.indexOf('safari') != -1) {
                version = 'Chrome'
            }

            else if( appstr.indexOf( 'android 4.2' ) != -1 ) {
				version = '4.2.x';
			} else if( appstr.indexOf( 'android 4.1' ) != -1 ) {
				version = '4.1.x';
			} else if( appstr.indexOf( 'android 4.0' ) != -1 ) {
				version = '4.0.x';
			} else if( appstr.indexOf( 'android 3.2' ) != -1 ) {
				version = '3.2';
			} else if( appstr.indexOf( 'android 3.1' ) != -1 ) {
				version = '3.1';
			}
			bhvName = bhvName + version;
			window.onerror = function(message, url, lineNumber) {
        		var errorString = "Error: " +message +" in "+url+" at line " + lineNumber
        		console.error(errorString);
    		}
		} 
		else if( appstr.indexOf( 'ipad' ) != -1 ) {
			bhvName = 'iPad';
			var version = appstr.match(/(ipad)+;\scpu\sos\s([0-9])+_([0-9])+_?([0-9])?/);
			bhvName = bhvName + version[2];
			window.onerror = function(message, url, lineNumber) {
        		var errorString = "Error: "+message+" in "+url+" at line "+lineNumber
        		dataUtil.logXcode(errorString);
    		}
		} 
		else if (appstr.indexOf( 'msie' ) != -1) {

            bhvName = 'IE';
            if( appstr.indexOf( 'msie 9.' ) != -1 ) {
                version = '9';
            } else if( appstr.indexOf( 'msie 10.' ) != -1 ) {
                version = '10';
            }
            bhvName = bhvName + version;
        }
		
		var preparedBhv = prepareBhv( bhvName ) ;
		
		console.log( "device specific behavior --> " + bhvName + " --> " + JSON.stringify( preparedBhv, null, "\t" ) ) ;
		
		return preparedBhv ;
	}
	
	function prepareBhv( type ) {
		var bhvs = getBehaviors() ;
		var bhv = bhvs[ type ] ? copy( {}, bhvs[ type ] ) : undefined ;
		var merged = {} ;
		
		if( bhv ) {
			var inheritList = bhv.inherit ;
			if( inheritList ) {
				var len = inheritList.length ;
				for( var i = 0 ; i < len ; i++ ) {
					var inheritFrom = inheritList[ i ] ;					
					merged = override( merged, bhvs[ inheritFrom ] ) ;
				}
			}
		}
		
		merged = override( merged, bhv ) ;
		
		return merged ;
	}
	
	function getBehaviors() {
		return {
			
			'Default': {
				textEditorClass: 't2k.component.textarea.TextEditor',
				extraCSS: 'css/extras/style.css',
				touch: false,
				animate: true,
				allowBlowup: false,
				scrollControl : false,
				balloonButtonAnimateDuration : 400,
				fixBalloonTop : false,
                setBalloonView : false,
                disableAutoNarrationOfInstraction : false,
                bindButtonTouchStartAndEnd:false,
                textViewerMinReadable : '18',
                textViewerFontSizeInitializeFactor : '1',
                setMediaPlayerTouchBhv : false,
                setTouchEvents : false,
                dragAndDropBehaviorTablets : false,
                mediaPlayerShowEvent:  'mousemove',
                setSwipeEvents: false,
                allowMediaPlayerFullScreen: true,
                useMathfieldKBHack: false,
                use$Ajax: true,
                fireUIEvents: false
			},
			
			'Tablet': {
				inherit: [ 'Default' ],
//				textEditorClass: 't2k.component.textarea.MiniTextEditor',
				isTablet: true,
				touch: true,
				animate: false,
                allowBlowup: false,
				scrollControl : false,
				balloonButtonAnimateDuration : 0,
				fixBalloonTop : true,
                setBalloonView : true,
                disableAutoNarrationOfInstraction : true,
                bindButtonTouchStartAndEnd:true,
                textViewerMinReadable : '19',
                textViewerFontSizeInitializeFactor : '1',
                setMediaPlayerTouchBhv : true,
                setTouchEvents : true,
                dragAndDropBehaviorTablets : 'touchAndDrop',
                mediaPlayerShowEvent:  'touchstart',
                setSwipeEvents: false,
                allowMediaPlayerFullScreen: false,
                clickOnTask_makeTaskEnabled : false,
				overrideMathNativeKeyboard: true,
				useMathfieldKBHack: true
			},
			
			'iPad': {
				inherit: [ 'Default', 'Tablet' ],
				extraCSS: 'css/extras/tablet.css',
				overrideMathNativeKeyboard: true,
                fireUIEvents: true,
				isIpad: true,
				addKeyboardDelay: true
			},

			'iPad6' : {
				inherit: ['Default', 'Tablet', 'iPad'],
				autoScrollOnTextEditorFocus : false
			},

			'iPad7' : {
				inherit: ['Default', 'Tablet', 'iPad'],
				autoScrollOnTextEditorFocus : true
			},

            'IE9': {
                inherit: [ 'Default' ],
                extraCSS: [ 'css/extras/style.css', 'css/extras/ie9.css' ],
                isIE: true
            },

            'IE10': {
                inherit: [ 'Default', 'IE9' ]
            },

			'Android': {
				inherit: [ 'Default', 'Tablet' ],
				extraCSS: [ 'css/extras/tablet.css', 'css/extras/android.css', 'css/extras/android-native.css' ],
                fixBalloonTop: true,
                scrollControl : false,
				overrideMathNativeKeyboard: true,
				isAndroid: true,
                use$Ajax: true,
                autoScrollOnTextEditorFocus : true
			},

            'AndroidChrome': {
                inherit: [ 'Default', 'Tablet','Android'],
                extraCSS: [ 'css/extras/tablet.css', 'css/extras/android.css'],
                // This is questionable (kind of works, but not really usable).
                // textEditorClass: 't2k.component.textarea.TextEditor',
                scrollControl : false
            },

            'Android4.2.x': {
                inherit: [ 'Default', 'Tablet', 'Android' ]
            },

            'Android4.1.x': {
                inherit: [ 'Default', 'Tablet', 'Android' ]
            },

            'Android4.0.x': {
                inherit: [ 'Default', 'Tablet', 'Android' ]
            },

            'Android3.2': {
				inherit: [ 'Default', 'Tablet', 'Android' ]
			},
			
			'Android3.1': {
				inherit: [ 'Default', 'Tablet', 'Android' ]
			}
			
		} ;
	}
	
})() ;

//Shorthand.
var ENV = t2k.util.Environment;

////////////////////////////////////////
// SRC End --> t2k/util/Environment.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/LanguageUtil.js
////////////////////////////////////////


/**
 * _ = Identifier for localization
 * @usage _("textarea.tooltips.bold") - returns localized value
 * @param id
 * @returns translated string
 */
var _i18n = function(id) {
	return LanguageUtil.getString(id);
}; 



/**
 * Class t2k.util.LanguageUtil
 * Responsible for all translation
 */
t2k.util.LanguageUtil = function(){

	//config
	this.config = {};
	this.config.direction = 'ltr';

	this.strings = {};
	
	// navigation
	this.strings.sequence = {} ;
	
	//navigation bar
	this.strings.progressbar = {};

    //task toolbar defaults
    this.strings.tasktoolbar = {};
	
	// text area
	this.strings.textarea = {};
	this.strings.textarea.tooltips = {};


    // Media Player
    this.strings.mediaPlayer = {};
    this.strings.mediaPlayer.tooltips = {};
    this.strings.mediaPlayer.messages = {};

    // Math field
    this.strings.mathField = {};
    this.strings.mathField.symbols = {};
};

t2k.util.LanguageUtil.prototype = {
	/**
	 * getString
	 * @param identifier - string logical identifier
	 * 
	 * @returns - translated string
	 */
	getString : function(identifier) {		
		var ret;

		ret = eval('this.strings.' + identifier);
		if (!ret) {
			ret = "";
		}
		return ret;
	}
};

var LanguageUtil = new t2k.util.LanguageUtil();

////////////////////////////////////////
// SRC End --> t2k/util/LanguageUtil.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/LocaleUtil.js
////////////////////////////////////////
(function(){
	
	t2k.util.LocaleUtil = function(){
	};
	
	//////////////////////////////////////////////////////////////
	// private scope
	//////////////////////////////////////////////////////////////
//	var defaultLocale = 'en_US' ;
	//////////////////////////////////////////////////////////////
	
	t2k.util.LocaleUtil.prototype = {
			
			loadFiles: function( callback ) {
				
				var thi$ = this ;
				
				this.loadCustomPackConfigFile( _.bind ( function() {
					
					this.loadStyleFile( _.bind ( function() {
						
						this.loadLangFile( callback ) ;
						
					}, this ) ) ;
					
				}, this ) ) ;
				
			},
			
			loadLangFile : function( callback ) {
				
				function getLocaleFile( locale, success, fail ) {
					

					var url = ENV.customizationPackPath + '/' + 'strings.js' ;
					
					console.info( "[DL][Locale][Language] --> loading file: " + url );
					
					Compat.getScript( url, {}, success, fail ) ;
					
				}
				
				console.info( "[DL][Locale][Language] --> load file for defined locale" );
				
				getLocaleFile( ENV.locale, function() {
					
					console.info( "[DL][Locale][Language] --> defined language loaded successfully" );
					//console.log('***********1' + _i18n('task.progress.labels.check') );
					callback.call() ;
					
				} ) ;
				
			},

			getStyleFilePath: function() {
				return ENV.customizationPackPath + "/" + 'style.css' ;
			},
			
			getMathStyleFilePath: function() {
				return ENV.customizationPackPath + "/" + 'mathfield/mathfield.css' ;
			},

			getAccentsMap: function() {
				return this.customPackConfig ? this.customPackConfig.accentsMap : null ;
			},
			
			loadStyleFile: function( callback ) {
				
				var styleFilePath = this.getStyleFilePath() ;
				var mathStyleFilePath = this.getMathStyleFilePath() ;
				
				// load pack css files and force the loading of the default fonts
				console.log( "LocaleUtil => loadStyleFile :locale style -- loading  file: " + styleFilePath );
				
				$("head").append("<link rel='stylesheet' type='text/css' href="+ styleFilePath +" />");
				$("body").append('<div class="defaultTextFont" style="height: 0px; width: 0px;">123</div>');
				
				// TODO un-comment back when customization pack will support mathfield
				/*
				console.log( "LocaleUtil => loadMathStyleFile :locale math style -- loading  file: " + mathStyleFilePath );
				$("head").append("<link rel='stylesheet' type='text/css' href="+ mathStyleFilePath +" />");
				$("body").append('<div class="defaultMathFont" style="height: 0px; width: 0px;">123</div>');
				*/
				
				// TODO remove next lines when customization pack will support mathfield
				$("body").append('<div style="font-family:' + this.fontsMathMap[ENV.locale] + ';height: 0px; width: 0px;">123</div>');
				
				setTimeout(function() {
					callback.call();
				}, 100);
			},
			
			loadCustomPackConfigFile: function( callback ) {
				
				var url = ENV.customizationPackPath + "/" + "config.json" ;
				
				$.ajax( {
					
					url: url,
					
					dataType: "json",
					
					success: _.bind( function( data ) {
						
						this.customPackConfig = data ;
						
						callback() ;
						
					}, this ),
					
					error: function( request, textStatus, errorThrown ) {
						
						console.error( "[DL][CustomPack] --> loading failed: " + textStatus + ": " + this.url + " " + errorThrown ) ;
						
						callback() ;
						
					}
				} ) ;
			},

			// TODO remove next lines when customization pack will support mathfield
			fontsMathMap : {
				"en_US"	: 'MF_T2K_US-Regular',
				"iw_IL"	: 'MF_T2K_HE-Regular',
				"fr_FR"	: 'MF_T2K_FR-Regular',
				"nl_NL"	: 'MF_T2K_NL-Regular'
			}

	};

})() ;

var LocaleUtil = new t2k.util.LocaleUtil() ;
////////////////////////////////////////
// SRC End --> t2k/util/LocaleUtil.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/PerfUtil.js
////////////////////////////////////////
/**
 * Turbo utils.
 */
(function() {
    /**
     * jQuery cache.
     */
    var _cache_id = {};
    var _cache_jQuery = {};

    /**
     * Debug.
     */
    window.__perf_cache__hit = 0;
    window.__perf_cache__miss = 0;

    /**
     * Exported functions.
     */
    window.Perf = {
        /**
         * jQuery with cache. Takes string.
         */
        select: function(s, del) {
            // FIXME: next few lines should not get in production code.

            // ++window['__perf_cache__' + (_cache_jQuery[s]? 'hit': 'miss')];
            // console.log('[[ ' + (_cache_jQuery[s]? 'hit': 'miss') + ' ]] ' + s);

            if (del) {
                if (_cache_jQuery[s]) {
                    var ref = _cache_jQuery[s];
                    delete _cache_jQuery[s];
                    return ref;
                }
                return jQuery(s);
            }
            return _cache_jQuery[s] || (_cache_jQuery[s] = jQuery(s));
        },
        
        reset: function() {
			_cache_id = {};
			_cache_jQuery = {};
        },
        
        /**
         * getElementById with cache. Takes string.
         */
        getElementById: function(s, del) {
            if (del) {
                if (_cache_id[s]) {
                    var ref = _cache_id[s];
                    delete _cache_id[s];
                    return ref;
                }
                return document.getElementById(s);
            }
            return _cache_id[s] || (_cache_id[s] = document.getElementById(s));
        },

        /**
         * Efficiently create element.
         */
        create: function(name) {
            return jQuery(document.createElement(name));
        }
    };
})();

////////////////////////////////////////
// SRC End --> t2k/util/PerfUtil.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/Compat.js
////////////////////////////////////////
/**
 * Compatibility utils.
 * Functions below should work in (at least) recent Google Chrome and MSIE9+.
 */
(function() {
    /**
     * Check if browser supports modern DOM traversal.
     * XXX: use more reliable method,
     * see https://bugzilla.mozilla.org/show_bug.cgi?id=673790
     */
    var hasTraversal = typeof document
        .createElement('div')
        .childElementCount !== 'undefined';

    /**
     * Get first child with type=1 (elements only, no #Text nodes).
     * Like node.firstElementChild with MSIE fallback.
     */
    var getFirstChildType1 = hasTraversal? function(node) {
        return node && node.firstElementChild;
    }: function(node) {
        node = node && node.firstChild;
        while (node && node.nodeType != 1) node = node.nextSibling;
        return node;
    };

    /* is this stuff defined? */
    if (!document.ELEMENT_NODE) {
        document.ELEMENT_NODE = 1;
        document.ATTRIBUTE_NODE = 2;
        document.TEXT_NODE = 3;
        document.CDATA_SECTION_NODE = 4;
        document.ENTITY_REFERENCE_NODE = 5;
        document.ENTITY_NODE = 6;
        document.PROCESSING_INSTRUCTION_NODE = 7;
        document.COMMENT_NODE = 8;
        document.DOCUMENT_NODE = 9;
        document.DOCUMENT_TYPE_NODE = 10;
        document.DOCUMENT_FRAGMENT_NODE = 11;
        document.NOTATION_NODE = 12;
    }

    /**
     * MSIE-compatible importNode function.
     * This is from http://www.alistapart.com/articles/crossbrowserscripting/
     * by Anthony Holdener.
     * FIXME: this should be used only when needed, as it's performance-heavy
     * compared to the native implementation.
     */
    var importNode = function(node, allChildren) {
    	/* find the node type to import */
        switch (node.nodeType) {
            case document.ELEMENT_NODE:
                /* create a new element */
                var newNode = document.createElement(node.nodeName);
                /* does the node have any attributes to add? */
                if (node.attributes && node.attributes.length > 0)
                /* add all of the attributes */
                    for (var i = 0, il = node.attributes.length; i < il;)
                        newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));
                /* are we going after children too, and does the node have any? */
                if (allChildren && node.childNodes && node.childNodes.length > 0)
                /* recursively get all of the child nodes */
                    for (var j = 0, jl = node.childNodes.length; j < jl;)
                        newNode.appendChild(importNode(node.childNodes[j++], allChildren));
                return newNode;
            case document.TEXT_NODE:
            case document.CDATA_SECTION_NODE:
            case document.COMMENT_NODE:
                return document.createTextNode(node.nodeValue);
        }
    };

    /**
     * This is stupid.
     */
    var importNodeToDocument = function(document, node, allChildren) {
        /* find the node type to import */
        switch (node.nodeType) {
            case document.ELEMENT_NODE:
                /* create a new element */
                var newNode = document.createElement(node.nodeName);
                /* does the node have any attributes to add? */
                if (node.attributes && node.attributes.length > 0)
                /* add all of the attributes */
                    for (var i = 0, il = node.attributes.length; i < il;)
                        newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));
                /* are we going after children too, and does the node have any? */
                if (allChildren && node.childNodes && node.childNodes.length > 0)
                /* recursively get all of the child nodes */
                    for (var j = 0, jl = node.childNodes.length; j < jl;)
                        newNode.appendChild(importNode(node.childNodes[j++], allChildren));
                return newNode;
            case document.TEXT_NODE:
            case document.CDATA_SECTION_NODE:
            case document.COMMENT_NODE:
                return document.createTextNode(node.nodeValue);
        }
    };
    /**
     * Touch events.
     */
//    if ("ontouchend" in document) {
    if ( ENV.behaviors.touch ) {
        var jQueryOn = jQuery.fn.on,
            jQueryOff = jQuery.fn.off,
            eventsTr = {
                click: "touchend",
                mousedown: "touchstart",
                mouseup: "touchend",
                mouseenter: "touchstart",
                mouseleave: "touchend",
                mouseover: "touchstart",
                mouseout: "touchend",
                mousemove: "touchmove"
            };

        jQuery.fn.on = function() {
            var newArg0 = eventsTr[arguments[0]];
            typeof newArg0 === "undefined" || (arguments[0] = newArg0);
            return jQueryOn.apply(this, arguments);
        };

        jQuery.fn.off = function() {
            var newArg0 = eventsTr[arguments[0]];
            typeof newArg0 === "undefined" || (arguments[0] = newArg0);
            return jQueryOff.apply(this, arguments);
        };
    }

    /**
     * Clear text selection.
     * See http://stackoverflow.com/questions/3169786
     */
    function clearSelection(window) {
        if (window.getSelection) {
            if (window.getSelection().empty) {  // Chrome
                window.getSelection().empty();
            } else if (window.getSelection().removeAllRanges) {  // Firefox
                window.getSelection().removeAllRanges();
            }
        } else if (document.selection) {  // IE?
            document.selection.empty();
        }
    }

    /**
     * Create node next to another node. Apply jQuery if needed.
     */
    function createNodeNextTo(anotherNode, nodeName, applyjQuery) {
        var newNode = null;

        if (anotherNode.ownerDocument) {
            newNode = anotherNode.ownerDocument.createElement(nodeName);
        }
        /* in the event this is a document */
        else try {
            newNode = anotherNode.createElement(nodeName);
        }
        catch (notUsed) {}

        if (applyjQuery) return jQuery(newNode);
        else return newNode;
    }

    /**
     * Get jQuery object with children by tag name.
     * This may be redundant, as Olga fixed the loader behavior.
     */
    function getChildren(doc, nodeName) {
        return window.ENV && ENV.behaviors.isIE?
            jQuery(doc.getElementsByTagName(nodeName)):
            jQuery(doc).children(nodeName)
    }

	function getChildren2(child) {
		return window.ENV && ENV.behaviors.isIE?
			jQuery(child.childNodes):
			jQuery(child).children();
	}

    /**
     * actualWidth function
     * IE9 and FF have implemented sub pixel precision when it comes to dimensions.
     * The jQ width methods however return the int of the value instead of a float, so in case of IE9 we need to add 1 px to the offset width
     * @param $elem
     * @return width in px
     */
    function actualWidth($elem) {
        return ($elem.get(0) == null || $elem.get(0) == undefined ) ? 0 : Math.ceil($elem.get(0).offsetWidth + 1);
    }

	function fullOuterWidth($elem) {
		var elem = $elem.get(0);
		if (window.getComputedStyle) {
			var computedStyle = window.getComputedStyle(elem, null);
			return elem.offsetWidth
				+ (parseInt(computedStyle.getPropertyValue('margin-left'), 10) || 0)
				+ (parseInt(computedStyle.getPropertyValue('margin-right'), 10) || 0);
		} else {
			return elem.offsetWidth
				+ (parseInt(elem.currentStyle["marginLeft"]) || 0) + (parseInt(elem.currentStyle["marginRight"]) || 0);
		}
	}

    /**
     * actualHeight function
     * IE9 and FF have implemented sub pixel precision when it comes to dimensions.
     * The jQ width methods however return the int of the value instead of a float, so in case of IE9 we need to add 1 px to the offset height
     * @param $elem
     * @return height in px
     */
    function actualHeight($elem) {
		return ($elem.get(0) == null || $elem.get(0) == undefined ) ? 0 : Math.ceil($elem.get(0).offsetHeight + 1);
    }

	function hasClass(element, cls) {
		return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
	}

	function addClass(element, cls) {
		if(hasClass(element, cls)) {
			return;
		}

		element.className += ' ' + cls;
	}

	function removeClass(element, cls) {
		element.setAttribute("class", element.getAttribute("class").replace(cls, ""));
	}

    /**
     * getStyle function
     * @param el
     * @param styleProp
     * @return {*}
     */
    function getStyle(el,styleProp) {
        if (el.length) {
            el = el[0];
        }
        var style = '';
        if (el.currentStyle){
            style = el.currentStyle[styleProp];
        }else{
            if (window.getComputedStyle && el){
                style = document.defaultView.getComputedStyle(el,null).getPropertyValue(styleProp);
            }
        }

        return style;
    }

	function getActualPosition(el) {
		var top = el.offsetTop;
		var left = el.offsetLeft;

		while(el && el.offsetParent) {
			el = el.offsetParent;
			top += el.offsetTop;
			left += el.offsetLeft;
		}

		return {'top' : top, 'left' : left}
	}

	function elementInViewport(el, viewPortEl) {
		var elPosition = getActualPosition(el);
		var viewPortOffset = getActualPosition(viewPortEl);

		return ({
			'inTop':    elPosition.top >= viewPortEl.scrollTop,
			'inLeft':   elPosition.left >= viewPortEl.scrollLeft,
			'inBottom':(elPosition.top + el.offsetHeight) <= (viewPortOffset.top + viewPortEl.scrollHeight),
			'inRight': (elPosition.left + el.offsetWidth) <= (viewPortOffset.left + viewPortEl.scrollWidth)
		});
	}
	
	function getScript( url, options, success, fail ) {
		
		if( ENV.behaviors.use$Ajax ) {
			
			jQuery.cachedScript( url, options )
			.done( function() {
				
				var argz = arguments ;
				success && success.call( argz ) ;
				
			} ).fail( function() {
				
				var argz = arguments ;
				fail && fail.call( argz ) ;
				
			} ) ;
			
		} else {
			
			nativeXHR( url, options, success, fail ) ;
			
		}
		
	}
	
	jQuery.cachedScript = function( url, options ) {
		 
		  // allow user to set any option except for dataType, cache, and url
		  options = jQuery.extend( options || {}, {
		    dataType: "script",
		    cache: true,
		    url: url
		  } ) ;
		 
		  // Use $.ajax() since it is more flexible than $.getScript
		  // Return the jqXHR object so we can chain callbacks
		  return jQuery.ajax( options ) ;
	} ;
	
	function nativeXHR( url, options, success, fail ) {
		
	    var request = createXMLHTTPObject() ;
	    
	    if ( !request ) return ;
	    
	    var method = "GET" ;
	    
	    request.open( method, url, true ) ;
	    
	    request.onreadystatechange = function() {
	    	
	    	var argz = arguments ;
	    	
			if( request.readyState == 4 ) {
				
				if( request.status == 200 || request.status == 0 || request.status == 304 ) {
					
					success && success.call( argz ) ;
					
				} else {
					
					fail && fail.call( argz ) ;
					
				}
				
			}
			
		}
	    
		request.send();
	}

	var XMLHttpFactories = [
	    function () { return new XMLHttpRequest() ; },
	    function () { return new ActiveXObject("Msxml2.XMLHTTP") ; },
	    function () { return new ActiveXObject("Msxml3.XMLHTTP") ; },
	    function () { return new ActiveXObject("Microsoft.XMLHTTP") ; }
	];

	function createXMLHTTPObject() {
		
	    var xmlhttp = false ;
	    
	    for ( var i = 0 ; i < XMLHttpFactories.length ; i++ ) {
	        try {
	            xmlhttp = XMLHttpFactories[ i ]() ;
	        }
	        catch ( e ) {
	            continue ;
	        }
	        break ;
	    }
	    
	    return xmlhttp ;
	    
	}
	
    /**
     * Fix for missing console
     */
    window.console || (window.console = {
        log: function() {},
        debug: function() {},
        info: function() {},
        warn: function() {},
        error: function() {}
    });

    /**
     * Exported functions (Compat.*)
     */
    window.Compat = {
        getFirstChildType1: getFirstChildType1,
        importNode: importNode,
        importNodeToDocument: importNodeToDocument,
        clearSelection: clearSelection,
        createNodeNextTo: createNodeNextTo,
        getChildren: getChildren,
		getChildren2: getChildren2,
		timeSecondDifference:timeSecondDifference,
        actualWidth: actualWidth,
        actualHeight: actualHeight,
        getStyle: getStyle,
	    elementInViewport : elementInViewport,
	    fullOuterWidth: fullOuterWidth,
	    hasClass : hasClass,
	    addClass : addClass,
	    removeClass : removeClass,
	    getActualPosition : getActualPosition,
	    getScript: getScript
    };
})();


/**
 * Fix built-in objects
 * Reference: http://stackoverflow.com/questions/2790001/
 */
(function() {
    'use strict';

    // Add ECMA262-5 method binding if not supported natively
    //
    if (!('bind' in Function.prototype)) {
        Function.prototype.bind= function(owner) {
            var that= this;
            if (arguments.length<=1) {
                return function() {
                    return that.apply(owner, arguments);
                };
            } else {
                var args= Array.prototype.slice.call(arguments, 1);
                return function() {
                    return that.apply(owner, arguments.length===0? args : args.concat(Array.prototype.slice.call(arguments)));
                };
            }
        };
    }

    // Add ECMA262-5 string trim if not supported natively
    //
    if (!('trim' in String.prototype)) {
        String.prototype.trim= function() {
            return this.replace(/^\s+/, '').replace(/\s+$/, '');
        };
    }

    // Add ECMA262-5 Array methods if not supported natively
    //
    if (!('indexOf' in Array.prototype)) {
        Array.prototype.indexOf= function(find, i /*opt*/) {
            if (i===undefined) i= 0;
            if (i<0) i+= this.length;
            if (i<0) i= 0;
            for (var n= this.length; i<n; i++)
                if (i in this && this[i]===find)
                    return i;
            return -1;
        };
    }
    if (!('lastIndexOf' in Array.prototype)) {
        Array.prototype.lastIndexOf= function(find, i /*opt*/) {
            if (i===undefined) i= this.length-1;
            if (i<0) i+= this.length;
            if (i>this.length-1) i= this.length-1;
            for (i++; i-->0;) /* i++ because from-argument is sadly inclusive */
                if (i in this && this[i]===find)
                    return i;
            return -1;
        };
    }
    if (!('forEach' in Array.prototype)) {
        Array.prototype.forEach= function(action, that /*opt*/) {
            for (var i= 0, n= this.length; i<n; i++)
                if (i in this)
                    action.call(that, this[i], i, this);
        };
    }
    if (!('map' in Array.prototype)) {
        Array.prototype.map= function(mapper, that /*opt*/) {
            var other= new Array(this.length);
            for (var i= 0, n= this.length; i<n; i++)
                if (i in this)
                    other[i]= mapper.call(that, this[i], i, this);
            return other;
        };
    }
    if (!('filter' in Array.prototype)) {
        Array.prototype.filter= function(filter, that /*opt*/) {
            var other= [], v;
            for (var i=0, n= this.length; i<n; i++)
                if (i in this && filter.call(that, v= this[i], i, this))
                    other.push(v);
            return other;
        };
    }
    if (!('every' in Array.prototype)) {
        Array.prototype.every= function(tester, that /*opt*/) {
            for (var i= 0, n= this.length; i<n; i++)
                if (i in this && !tester.call(that, this[i], i, this))
                    return false;
            return true;
        };
    }
    if (!('some' in Array.prototype)) {
        Array.prototype.some= function(tester, that /*opt*/) {
            for (var i= 0, n= this.length; i<n; i++)
                if (i in this && tester.call(that, this[i], i, this))
                    return true;
            return false;
        };
    }

	NodeList.prototype.forEach = HTMLCollection.prototype.forEach = Array.prototype.forEach;
})();

/**
 *
 * Get the time difference between 2 dates in seconds
 *
 * @param endDate
 * @param startDate
 * @return {Number}
 */
function timeSecondDifference(endDate,startDate,message) {

	var difference = endDate.getTime() - startDate.getTime();
console.error('',message + ':   ');
console.log('startDate.getTime() : ',startDate.getTime());
console.log('difference in Sec : ',Math.floor(difference/1000));
console.log('difference in MillSec : ',Math.floor(difference));
console.error('===============================================');
	return Math.floor(difference/1000);
}


/**
 * CSS hack time!
 */
if( window.ENV ) {
	if( ENV.behaviors.isIE ) {
	    jQuery('html').addClass('ie9');
	}
		
		
	if( ENV.behaviors.extraCSS ){
	    var cssExtra = ENV.behaviors.extraCSS;
	
	    if (typeof cssExtra === 'string') {
	        cssExtra = [cssExtra];
	    }
	
	    for (var i = 0; i < cssExtra.length; ++i) {
	        document.write("<link rel='stylesheet' href='" + cssExtra[i] + "'>");
	    }
	}
}
////////////////////////////////////////
// SRC End --> t2k/util/Compat.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/ComponentFactory.js
////////////////////////////////////////
/**
 * Class t2k.util.ComponentFactory
 */

(function() {

    // Save component ctor functions for later usage
    var _ccache = {};

	t2k.util.ComponentFactory = Object.subClass({
		
		ctor: function() {

			// exe. text editor class
			if (ENV.behaviors.textEditorClass){
				this.setClassNameByCompName('texteditor', ENV.behaviors.textEditorClass);
			}
			
		},
		
		/**
		 * create
		 * @param config
		 * @returns component's object / null
		 */
		create : function (config) {
			if (!config || !config.data)
                return null;

            var compClassName = this.getClassName(config.data.nodeName),
                objRef = window;

            if (!compClassName)
                return null;

            if (typeof _ccache[compClassName] === 'function') {
                return new (_ccache[compClassName])(config);
            }

            compClassName.split('.').forEach(function(name) {
                objRef = objRef[name];

                if (typeof objRef === 'undefined')
                    return null;
            });

            _ccache[compClassName] = objRef;
            return new objRef(config);
		},

		/**
		 * getClassName
		 * @param name
		 * @returns className
		 */
		getClassName : function(name){
			return compNameToClassName[name.toLowerCase()];
		},

		/**
		 * isComposite
		 * @param name
		 * @returns true / false
		 */
		isComposite : function(name){
			var componentClass = this.getClassName(name);
			if (componentClass){
				return !!eval(componentClass).isComposite;
			} else {
				return false;
			}
		},
		
		/**
		 * isComponent
		 * @param name
		 * @returns true / false
		 */
		isComponent : function(name){
			name = name.toLowerCase();
			return !!compNameToClassName[name];
		},
		
		setClassNameByCompName : function(compName, className){
			compNameToClassName[compName] = className;
		}
		
	});

	//****************************************************************************
	//*************************** Private ****************************************
	//****************************************************************************

	/**
	 * compNameToClassName
	 * class name hash
	 */
	var compNameToClassName = {
		dialog : 't2k.component.dialog.Dialog',
		posts : 't2k.component.dialog.Posts',
		post : 't2k.component.dialog.Post',
		avatar : 't2k.component.dialog.Avatar',
		exposition : 't2k.component.dialog.Exposition',
		bubble : 't2k.component.dialog.Bubble',
		textviewer : 't2k.component.textViewer.TextViewer',
		option : 't2k.component.select.Option',
		imageviewer : 't2k.component.imageViewer.ImageViewer',
		mediaplayer : 't2k.component.mediaPlayer.MediaPlayer',
		texteditor: 't2k.component.textarea.TextEditor',
		subanswer: 't2k.component.subAnswer.SubAnswer',
		multisubanswer: 't2k.component.subAnswer.MultiSubAnswer',
		subquestion: 't2k.component.subQuestion.SubQuestion',
		group: 't2k.component.group.Group',
		sharedarea: 't2k.component.sharedarea.SharedArea',
		cloze: 't2k.component.cloze.Cloze',
        clozearea: 't2k.component.cloze.ClozeArea',
		bank: 't2k.component.bank.Bank',
		mathfield: 't2k.component.mathField.MathField',
        tre: 't2k.component.tre.Tre',
        layoutgroup: 't2k.component.LayoutGroup',
        questiongroup: 't2k.component.QuestionGroup',
    	question: 't2k.component.text.Question',
		helpitem: 't2k.component.help.HelpItem',
		help: 't2k.component.help.Help',
		answer: 't2k.component.answer.Answer',
        thirdparty: 't2k.component.ThirdParty',
        definition : 't2k.component.definition.Definition',
        mtqarea : 't2k.component.mtq.MtqArea',
        mtqsubquestion : 't2k.component.mtq.MtqSubQuestion',
        mtqmultisubquestion : 't2k.component.mtq.MtqMultiSubQuestion',
        mtqbank : 't2k.component.mtq.MtqBank',
    	options : 't2k.component.options.Options',
        tablecomp : 't2k.component.table.Table',
        row : 't2k.component.table.Row',
        cell : 't2k.component.table.Cell',
        thirdparty : 't2k.component.thirdParty.ThirdParty',
        applet : 't2k.component.applet.Applet'
	};

})();

// Component factory singleton
var componentFactory = new t2k.util.ComponentFactory();

////////////////////////////////////////
// SRC End --> t2k/util/ComponentFactory.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/ScrollControl.js
////////////////////////////////////////
/**
 * Class t2k.util.ScrollControl
 */

(function() {

	t2k.util.ScrollControl = Object.subClass({
		/**
		 * ctor
		 */
		ctor: function() {
			this.initMembers();
			this.bindDocumentEvents();
		},
		
		/**
		 * initMembers
		 */
		initMembers : function(){
			this.activeService = ENV.behaviors.scrollControl;
		},

        scrollToTouchStart : function(){
            this.forceScrollTop(-this.Y + 80);
        },
		
		/**
		 * bindDocumentEvents
		 */
		bindDocumentEvents : function(){
			// bind scroll events on active only
			if (!this.activeService) return;
			
			var thi$ = this, top, change;

            // bind touch start
            document.addEventListener('touchstart', function (e) {

	            if (!thi$.scrollElement)
	                return;

                thi$.Y = (e.changedTouches[0].screenY);
                thi$.marginTop = thi$.scrollElement.css('margin-top').px2int();
            }, true);
			
			// bind touch move
			document.addEventListener('touchmove',  function(e){
				//in mtq task prevent scrolling while dragging subAnswer
				if (($(e.srcElement).parents('.task.mtq .subAnswer').length > 0) || !thi$.scrollElement)
					return;

//				if (!thi$.scrollElement) return;

				e.preventDefault(); 
				e.stopPropagation();
	    		thi$.DELTA = (e.changedTouches[0].screenY) - thi$.Y;
	    		change = (thi$.DELTA * 1) + thi$.marginTop;
	    		thi$.scrollTop(change);
			}, true);
		},
		
		/**
		 * adjustMargin
		 * adjust margin val < 0 || val > maxMargin
		 * @param val
		 * @returns val
		 */
		adjustMargin : function(val){
			if (val > 0) return 0;
			return (val < this.maxMargin) ? this.maxMargin : val;
		},
		
		/**
		 * scrollTop
		 * scroll to val
		 * @param val
		 */
		scrollTop : function(val){
			val = this.adjustMargin(val);
			this.scrollElement.css( 'margin-top' , val);
		},

        forceScrollTop : function(val){
            this.scrollElement.css( 'margin-top' , val);
		},
		
		/**
		 * getMarginTop
		 * @returns {int} - margin top
		 */
		getMarginTop : function(){
            if (!this.scrollElement) return 0;

			return this.scrollElement.css('margin-top').px2int();
		},
		
		/**
		 * scrollTopAnimate
		 * @param val (margin)
		 * @param ms  (duration)
		 * @param callback
		 */
		scrollTopAnimate : function(val, ms, callback){
			val = this.adjustMargin(val);
			this.scrollElement.animate({'margin-top' : val} ,ms, callback);
		},
		
		/**
		 * initSequenceScrollControl
		 * @param $seq - sequence element
		 * @param flag {Boolean}
		 */
		initSequenceScrollControl : function($seq, flag){
			
			// init on active only
			if (!this.activeService) return;
			
			// on false, disable control
			if (!flag) {
				this.disableSequenceScrollControl();
				return;
			}
			
			// set auto height
			this.scrollElement = $seq.find('.scroll_enabled');
			this.scrollElement.height('');
			
			// get scrollable and sequence height
			var scrollElementHeight = this.scrollElement.height();
			var seqHeight = $seq.height();
			
			// set max margin
			this.maxMargin = -(scrollElementHeight - seqHeight);
		},
		
		/**
		 * disableSequenceScrollControl
		 */
		disableSequenceScrollControl : function(){
			this.scrollElement = null;
		}
		
	});

})();

// Scroll Control singleton
var ScrollControl = new t2k.util.ScrollControl();

////////////////////////////////////////
// SRC End --> t2k/util/ScrollControl.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/TabletUtil.js
////////////////////////////////////////
/**
 * Class t2k.util.TabletUtil
 */

(function () {

    t2k.util.TabletUtil = Object.subClass({

        bindButtonTouchStartAndEnd:function ($elem) {
            $elem.bind('touchstart', function () {
                $elem.addClass('selected');
            });

            $elem.bind('touchend', function () {
                $elem.removeClass('selected');
            });
        }


    });

})();

// Tablet Util singleton
var TabletUtil = new t2k.util.TabletUtil();

////////////////////////////////////////
// SRC End --> t2k/util/TabletUtil.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/TaskCheckingType.js
////////////////////////////////////////
t2k.player.task.TaskCheckingType = function() {
    var hash = [];
    hash['mc'] = "AUTOMATIC";
    hash['cloze'] = "AUTOMATIC";
	hash['shortAnswer'] = "AUTOMATIC_MANUAL";
    hash['matching'] = "AUTOMATIC";
    hash['opq'] = "MANUAL";
    hash['mtq'] = "AUTOMATIC";
    //hash['questionOnly'] = "MANUAL";
    //todo by def questionOnly should be MANUAL this makes no sense we set it to exposure need to check if it makes any other trouble
    hash['questionOnly'] = "EXPOSURE";
    hash['tre'] = "MANUAL";
    hash['statement'] = "EXPOSURE";
    hash['defaultValue'] = "EXPOSURE";

    return hash
    /*{
        mc:"AUTOMATIC",
        cloze:"AUTOMATIC",
        matching:"AUTOMATIC",
        opq:"MANUAL",
        questionOnly:"MANUAL",
        //TODO add tre checking types by tre type
        tre:"MANUAL",
        statement:"EXPOSURE",
        defaultValue:"EXPOSURE",

        NON_PEDAGOGICAL:"NON_PEDAGOGICAL",
        EXPOSURE:"EXPOSURE",
        MANUAL:"MANUAL",
        GAME:"GAME",
        DYNAMIC:"DYNAMIC",
        AUTOMATIC:"AUTOMATIC"

    }*/
}();

// Shorthand.
var TaskCheckingType = t2k.player.task.TaskCheckingType ;

////////////////////////////////////////
// SRC End --> t2k/player/task/TaskCheckingType.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/AssetUtils.js
////////////////////////////////////////
(function() {

	/**
	 * Class: t2k.util.StringUtils
	 * Contains string manipulation/formatting/etc. utilities
	 */
	t2k.util.AssetUtils = {
			
		getAbsolutePath: function( relativePath ) {
			
			var cleanedRelativePath = cleanPath( relativePath ) ;
			
			var abs = null ;
			
			var baseType = typeof ENV.assetBasePath ;
			
			if( baseType === "function" ) {
				
				abs = ENV.assetBasePath( cleanedRelativePath ) ;
				
			} else if ( baseType === "string" ) {
				
				abs = ENV.assetBasePath + cleanedRelativePath ;
				
			} else {
				
				throw new Error( "DL Error --> unhandled base path: " + baseType ) ;
				
			}
			
			abs = cleanPath( abs ) ;
			
			console.log( "[DL][Path][method: "+ baseType +"] --> request prefix for: \""+ cleanedRelativePath + "\", got full path: \"" + abs + "\"" ) ;
			
			return abs ;
			
		}

	};
	
	function cleanPath( path ) {
		
		// clean double //, replace with to /
		return path.replace( /([^:])\/\//g, "\$1/" ) ;
		
	}
	
})();

var AbsPath = t2k.util.AssetUtils.getAbsolutePath ;
////////////////////////////////////////
// SRC End --> t2k/util/AssetUtils.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/DynamicLayoutUtils.js
////////////////////////////////////////
(function() {
	
	// dev logger
	var layouterLog, devEnableDynamicLayout = true, devEnableLogger = false, layouterDone;


	var setLayouterLog = function(val) {
		if (!devEnableLogger) return;

		var layouterLog = Perf.select('#log');

		if (layouterLog.attr('id') != 'log') {
			layouterLog = Perf.create("div").
                attr('id', 'log').
                css({ border:      '1px solid black',
                     'font-size':  '30px',
                      left:        '300px',
                      position:    'absolute',
                     'text-align': 'center',
                      top: 0 }).
                width(200). height(40).
                appendTo(Perf.select('body'));
		}

		layouterLog.text(val);
	};


	var setLayouterLogBackground = function(){
		
		if (!devEnableLogger) return;
		
		var layouterLog = Perf.select('#log');
		if (!layouterDone) {
			layouterLog.css('background-color', 'red');
			layouterDone = 'compileDone';
		} else {
			layouterLog.css('background-color', '#66CD00');
		} 
		
	};

	t2k.util.DynamicLayoutUtils = {
		
		// taskArray declaration
		taskArray : {},
		activeLayoutingTask : '',
		vpHeight : null,
    	
		/**
		 * dynamicLayout (!)
		 * calls from sequenceCompoiler, onTaskRendered
		 * @param task (reference)
		 * @param vpHeight (viewPort height)
		 * @param layoutState (reduction, compact, loose)
		 */
    	dynamicLayout : function (task, vpHeight, layoutState, caller, onSequenceLayoutDone) {
    		
    		this.caller = caller ;
    		
    		// dev !
    		if (!devEnableDynamicLayout) return;
    		if (!this.onSequenceLayoutDone) this.onSequenceLayoutDone = onSequenceLayoutDone;
    		
    		if (!this.vpHeight) this.vpHeight = vpHeight;
    		if (!vpHeight) vpHeight = this.vpHeight;
    		
    		// reference
    		var thi$ = this;
    		
    		// register task on taskArray
    		this.registerTask(task);
    		
    		if (!this.isActiveLayoutingTask(task)) return false;
    		
//    		console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>> TIME: ' + new Date().getTime() ) ;
    		
    		// setTimeout for dom rendering
    		setTimeout(function(){
    			
    			// check if task enabled layouting
    			if (!thi$.taskArray || !thi$.isEnableLayouting(task)) return false;
    			
    			// if reduction - loose
    			if (layoutState == 'reduce'){
    				thi$.resetTaskQuestionRendered(task);
					thi$.resetTaskAnswerRendered(task);
					setLayouterLog('loose');
    				task.question.loose();
    				task.answer.loose();
    				
    			} else {
    				
    				// check if task is heigher than view port
    				if (!!thi$.heigherTask(task, vpHeight) && thi$.isEnableLayouting(task)){
    					
    					// on loose - compact
	    				if (layoutState == 'loose'){
	    					thi$.resetTaskQuestionRendered(task);
							thi$.resetTaskAnswerRendered(task);
							setLayouterLog('compact');
	    					task.question.compact();
	    					task.answer.compact();
	    					
	    				} else {
	    					
	    					// on compact - reduce
	    					if (layoutState == 'compact'){
	    					
	    						// if reduction available on q&a - reduce them both
		    					if (task.question.reductionAvailable() && task.answer.reductionAvailable()){
		    						
		    						thi$.resetTaskQuestionRendered(task);
		    						thi$.resetTaskAnswerRendered(task);
		    						setLayouterLog('reduction Q+A');
		    						task.question.reduce();
		    						task.answer.reduce();
		    						
		    					} else {
		    						
		    						var reduced = {};
		    						// reduce only question
		    						if (task.question.reductionAvailable()){
		    							thi$.resetTaskQuestionRendered(task);
		    							setLayouterLog('reduction Q');
		    							task.question.reduce();
		    							reduced.question = true;
		    						}
		    						
		    						// reduce only answer
		    						if (task.answer.reductionAvailable()){
		    							thi$.resetTaskAnswerRendered(task);
		    							setLayouterLog('reduction A');
		    							task.answer.reduce();
		    							reduced.answer = true;
		    						}
		    						
		    						// dont reduce - stop rec
		    						if (!!!reduced.answer && !!!reduced.question){
		    							thi$.setEnableLayouting(task, false);
		    						}
		    						
		    					}
	    					} 
	    					
	    				}
    				}  else {
    					// if task is smaller than view port, stop rec
    					thi$.setEnableLayouting(task, false);
    				}
    			}
    			
    		}, 10);
        	
        },

		dynamicHelpItemLayout : function (helpItem, vpHeight, layoutState, onHelpLayoutDone) {

			if (!this.vpHeight) this.vpHeight = vpHeight;
			if (!vpHeight) vpHeight = this.vpHeight;

			if (!this.onHelpLayoutDone) this.onHelpLayoutDone = onHelpLayoutDone;

			// reference
			var thi$ = this;

			// setTimeout for dom rendering
			setTimeout(function(){

				// check if help item enabled layouting
				if (!helpItem.enableLayouting) return false;

				// if reduction - loose
				if (layoutState == 'reduce'){
					thi$.helpRendered = false;
					setLayouterLog('loose');
					helpItem.loose();
				} else {

					// check if task is heigher than view port
					if (!!thi$.heigherTask(helpItem, vpHeight) && helpItem.enableLayouting){

						// on loose - compact
						if (layoutState == 'loose'){
							thi$.helpRendered = false;
							setLayouterLog('compact');
							helpItem.compact();


						} else {

							// on compact - reduce
							if (layoutState == 'compact') {
								if (helpItem.reductionAvailable()) {
									thi$.helpRendered = false;
									setLayouterLog('reduction Help item');
									helpItem.reduce();

								} else {
									helpItem.enableLayouting = false;
								}
							}

						}
					}  else {
						// if help Item is smaller than view port, stop rec
						helpItem.enableLayouting = false;
					}
				}

				if(!helpItem.enableLayouting) {
					thi$.onHelpLayoutDone.apply(helpItem);
					thi$.onHelpLayoutDone = null;
				}

			}, 10);

		},
        
        taskCounter : 0,
        
        resetTaskCounter : function(){
        	this.taskCounter = 0;
        },
        
        incrementTaskCounter : function(){
        	this.taskCounter++;
        },
        
        /**
         * registerTask
         * on taskArray
         * @param task
         */
        registerTask : function(task){
        	
        	var taskId = this.getTaskId(task);
        	
        	// check if task already registered
        	if (!this.taskArray.taskId){
        		this.taskArray[taskId] = {
        				'enableLayouting' : true,
        				'layoutDone' : false,
        				taskRef : task
        		};
        	}
        },
        
        unRegisterTask : function(task){
        	var taskId = this.getTaskId(task);
//        	this.taskArray = this.taskArray.splice(this.getTaskIndex(taskId),1); 
        },
        
        getTaskIndex : function(taskId){
        	
        	var index = 0;
        	
			for (var task in this.taskArray){
        		if (task == taskId) return index;
        		index++;
        	}

        },
        
        isActiveLayoutingTask : function(task){
        	
        	var taskId = this.getTaskId(task);
        	
        	// in case that on (activeTask.layoutDone = true) and the next task registered after layout done,
        	// set activeLayoutingTask='', for this function will return true and update activeLayoutingTask.
        	if (this.activeLayoutingTask != '' && !!this.activeLayoutingTask){
        		if (this.taskArray[this.activeLayoutingTask].layoutDone){
        			this.activeLayoutingTask = '';
        		}
        	}
        	
        	if (this.activeLayoutingTask == ''){
        		this.activeLayoutingTask = taskId;
        		return true;
        	} else if (this.activeLayoutingTask == taskId){
        		return true;
        	}
        	
        	return false;
        },
        
        /**
         * getTaskId
         * @param task
         * @returns task id
         */
        getTaskId : function(task){
	        //TODO:: check for the caught of the bug
        	return task.view.cfg ? task.view.cfg.id : 0;
        },
        
        /**
         * isEnableLayouting
         * @param task
         * @returns true / false
         */
        isEnableLayouting : function(task){
        	var taskId = this.getTaskId(task);
        	if (!this.taskArray[taskId]) return false;
        	return this.taskArray[taskId].enableLayouting;
        },
        
        /**
         * setEnableLayouting
         * @param task
         * @param flag - boolean 
         */
        setEnableLayouting : function(task, flag, stopAfterLoose){
        	var taskId = this.getTaskId(task);
        	this.taskArray[taskId].enableLayouting = flag;
        	
        	if (!flag){
        		
        		// dev
        		setLayouterLogBackground();
        		
        		this.taskArray[taskId].layoutDone = true;
        		this.taskArray[taskId].taskRef.taskGrading = this.heigherTask(this.taskArray[taskId].taskRef, this.vpHeight);
        		this.unRegisterTask(task);
        		this.activeNextTaskLayouting();
        	}
        },
        
        activeNextTaskLayouting : function(){
        	
        	var thi$ = this, taskArrayLength = 0;
        	var layoutTask, layoutTaskId ;
        	
        	for (var task in this.taskArray){
        		
        		// increment task array length
        		taskArrayLength++;
        		
        		if (!this.taskArray[task].layoutDone){
        			layoutTask = this.taskArray[task].taskRef;
        			layoutTaskId = this.getTaskId(layoutTask);
        			this.activeLayoutingTask = layoutTaskId;
        			this.dynamicLayout(layoutTask, null, 'loose', this.caller );
        			return false;
        		}
        	}
        	
        	if (taskArrayLength == this.taskCounter){
        		
        		this.activeLayoutingTask = '';
        		this.taskArray = [];
        		var retFnc = this.onSequenceLayoutDone;
        		this.onSequenceLayoutDone = null;
        		retFnc.call( this.caller );
        		
        	}
        },
        
        /**
         * resetTaskCompositesRendered
         * reset Q & A
         * @param task
         */
        resetTaskCompositesRendered : function(task){
        	this.resetTaskQuestionRendered(task);
        	this.resetTaskAnswerRendered(task);
        },
        
        /**
         * resetTaskQuestionRendered
         * reset Q
         * @param task
         */
        resetTaskQuestionRendered : function(task){
        	task.questionRendered = false;
        },
        
        /**
         * resetTaskAnswerRendered
         * reset A
         * @param task
         */
        resetTaskAnswerRendered : function(task){
        	task.answerRendered = false;
        },
        
        /**
         * heigherTask
         * check if task is heigher than view port
         * @param task
         * @param vpHeight
         * @returns {Boolean}
         */
        heigherTask : function(task, vpHeight){
            //add the task the height of the sequence_list_head height ( with header contains height + padding top+bottom, 
            //without contains padding botton to sparate task from top viewport )
	        var sequence_list_head_Addition = 0;
	        if(task.view._view.hasClass('first_task_in_sequence')) {
                sequence_list_head_Addition = task.view._view.parent().children('.sequence_list_head').outerHeight();
	        }

            return task.view._view.height() + sequence_list_head_Addition  > vpHeight ;
        }

    }; // End of DynamicLayoutUtils

})();

// Shorthands
var DynamicLayoutUtils = t2k.util.DynamicLayoutUtils;

////////////////////////////////////////
// SRC End --> t2k/util/DynamicLayoutUtils.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/CompilerUtils.js
////////////////////////////////////////
(function() {

	t2k.util.CompilerUtils = {
			
		/**
		 * setNumOfChildren - rec
		 * set the number of children attr on each composite
		 * @param xml
		 * @returns numbered xml
		 */
		setNumOfChildren : function(xml){
			
			// ref
			var thi$ = this;
			
			// valitation
			if (!xml || (jQuery(xml).children().length === 0)) return null;
			
			// if xml node is a composite
			// (otherwise it's doesn't have children)
			if (componentFactory.isComposite(xml.nodeName)){
				
				// reset num of composite's children
				var numOfChildren = 0;
	
				// start recursion for the composite's children and count composite's children
				jQuery(xml).children().each(function(index, child) {
					
					var childName = child.nodeName.toLowerCase();
					if (componentFactory.isComponent(childName)){
						numOfChildren++;
					}
					child = thi$.setNumOfChildren(child);
				});
	
				// add 'numOfChildren' attribute to the composite xml
				jQuery(xml).attr('numOfChildren', numOfChildren);
			}
			
			return xml;
		},

		/**
		 * groupData
		 * return the grouped xml
		 * @param xml
		 * @returns xml
		 */
		groupData : function (xml) {

			// if there is no xml, return
			if (!xml || (jQuery(xml).children().length === 0)) return null;

			// reference
			var thi$ = this;

			// start rec only for composite, except answer composite
			if (componentFactory.isComposite(xml.nodeName) && (xml.nodeName.toLowerCase() != 'answer')) {

				// clarify group type
				switch (this.groupBy(xml)) {

					case 'textViewer':
						xml = this.groupByTextViewer(xml);
						break;

					case 'similars':
						xml = this.groupBySimilars(xml);
						break;

					case 'questionGroupWrapper':
						xml = this.questionGroupWrapper(xml);
						break;

				} // end switch

				// reset num of composite's children
				var numOfChildren = 0;

				// start recursion for the composite's children and count composite's children
				jQuery(xml).children().each(function(index, child) {
					child = thi$.groupData(child);
					numOfChildren++;
				});

				// add 'numOfChildren' attribute to the composite xml
				jQuery(xml).attr('numOfChildren', numOfChildren);

			} // end if

			// return the grouped xml
			return xml;

		},

		/**
		 * questionGroupWrapper
		 * simply wrap the xml with <questionGroup/> tag
		 * @param xml
		 * @returns xml
		 */
		questionGroupWrapper: function(xml) {

			// reference
			var thi$ = this;

			// init groups and children arrays
			var groups = [];
			var children = [];

			// push composite's children to children arrary
			jQuery(xml).children().each(function(index, child) {
				children.push(child);
			});

			// reset xml
			jQuery(xml).empty();

			// create questionGroup tag and append it to xml
			var group = xml.ownerDocument.createElement('questionGroup');
			jQuery(xml).append(group);

			// append the original composite's children to group (questionGroup)
			jQuery(children).each(function(index, child) {
				jQuery(group).append(child);
			});

			// return xml
			return xml;

		},

		/**
		 * groupByTextViewer
		 * group xml with questionGroup, according to these rules:
		 * 1. every textViewer will start a new group
		 * 2. if the textViewer isn't the first component, group the first components also
		 * @param xml
		 * @returns xml
		 */
		groupByTextViewer : function(xml) {

			// init group and children arrays
			var groups = [];
			var children = [];
			var group;

			// push composite's children to children array
			jQuery(xml).children().each(function(index, child) {
				children.push(child);
			});

			// reset xml
			jQuery(xml).empty();

			// if textViewer isn't the first component, create questionGroup and append it to xml
			if (!this.tvFirst(jQuery(children))) {
				group = xml.ownerDocument.createElement(xml.nodeName.toLowerCase() === 'question'? 'questionGroup': 'layoutGroup');
				jQuery(xml).append(group);
			}

			// loop the children
			jQuery(children).each(function(index, child) {

				// if the current component is a textViewer, create questionGroup and append it to xml
				// else, do nothing. means that the current will append to the current group
				if (child.nodeName.toLowerCase() == 'textviewer') {
					group = xml.ownerDocument.createElement(xml.nodeName.toLowerCase() === 'question'? 'questionGroup': 'layoutGroup');
					jQuery(xml).append(group);
				}

				// append the current to group
				jQuery(group).append(child);
			});

			// return xml
			return xml;

		},

		/**
		 * groupBySimilars
		 * group similars tagNames with layoutGroup
		 * @param xml
		 * @returns xml
		 */
		groupBySimilars : function(xml) {

			// reference
			var thi$ = this, group;

			// init group and children arrays
			var groups = [];
			var children = [];

			// set groupFor as null.
			var groupFor = null;

			// push composite's children to children array
			jQuery(xml).children().each(function(index, child) {
				children.push(child);
			});

			// reset xml
			jQuery(xml).empty();

			// loop the children
			jQuery(children).each(function(index, child) {

				// if this tagName and the next tagName are similars..
				if (thi$.thisAndNextNeedsGroup(children, index)) {

					// if !groupFor, it's means that this is the first time similars are detected.
					// in that case, create layoutGroup and append it to xml,
					// and set groupFor with the tagName.
					// if groupFor, that means that the current group is the right group.
					if (!groupFor) {
						group = xml.ownerDocument.createElement('layoutGroup');
						jQuery(xml).append(group);
						groupFor = child.nodeName.toLowerCase();
					}

					// append the current tagName to group
					jQuery(group).append(child);

				} else {

					// if this tagName and the next tagName dont need to be group
					// and groupFor is not null, that means that this tagName is the last tagName
					// that need to be insert to group, because this tagName and the prev. tagName are similars
					// the the next one is not.
					if (groupFor) {
						// append the child to the group
						jQuery(group).append(child);
						// set groupFor = null, because this is the end of the current group
						groupFor = null;
					} else {
						// if we're not in the middle of group,
						// and this and next aren't similars,
						// simply append child to xml
						jQuery(xml).append(child);
					}
				}

			});

			// return xml
			return xml;

		},

		/**
		 * thisAndNextNeedsGroup
		 * check if index and index+1 are similars
		 * @param children
		 * @param index
		 * @returns {Boolean}
		 */
		thisAndNextNeedsGroup: function(children, index) {

			// if "this" is the last child, return false
			if (children.length == index + 1) {
				return false;
			}

			// if "this" and "next" are similar, return true
			if (children[index].nodeName.toLowerCase() == children[index + 1].nodeName.toLowerCase()) {
				return true;
			}

			// (else) return false
			return false;
		},

		/**
		 * groupBy
		 * this function clarified the group type.
		 * textViewer, similars or wrapper
		 * @param xml
		 * @returns xml
		 */
		groupBy: function(xml) {

			var result = null; // no need to group

			// count the textViewers in xml
			var countTv = this.countTv(xml);

			// if there is no need to group by textViewer
			// condition: if there is one TV and it's the first
			//			or if there is no TV, there is no neet to group by TV
			if ((this.tvFirst(jQuery(xml).children()) && (countTv == 1)) || (countTv === 0)) {

				// if this is the question composite, group anyway with question group
				if (xml.nodeName.toLowerCase() == 'question') {
					result = 'questionGroupWrapper';

					// check for similars existence
				} else if (this.isSimilars(xml) && !this.onlySimilars(xml)) {
					result = 'similars'; // group by similars
				}

			} else {
				// the 'else' means that there is a need to group by textViewer..
				result = 'textViewer'; // group by textViewer
			}

			return result;
		},

		/**
		 * tvFirst
		 * check if textViewer is the first element in xml
		 * @param xml
		 * @returns boolean
		 */
		tvFirst : function(xml) {
			return jQuery(xml)[0].nodeName.toLowerCase() == 'textviewer';
		},

		/**
		 * countTv
		 * count textViewers in xml
		 * @param xml
		 * @returns tvCounter - int
		 */
		countTv : function(xml) {
			var tvCounter = 0;

			jQuery(xml).children().each(function(index, child) {
				if (child.nodeName.toLowerCase() == 'textviewer') {
					tvCounter++;
				}
			});

			return tvCounter;
		},

		/**
		 * isSimilars
		 * check for similars and sequential nodes in xml
		 * @param xml
		 * @returns {Boolean}
		 */
		isSimilars : function(xml) {

			var currentNodeName;
			var result = false;

			jQuery(xml).children().each(function(index, child) {
				if (index === 0) {
					// on first index, init currentNodeName
					currentNodeName = child.nodeName.toLowerCase();
				} else {
					// if the last nodeName = currentNodeName, return true
					// else, update currentNodeName
					if (currentNodeName == child.nodeName.toLowerCase()) {
						result = true;
						return;
					} else {
						currentNodeName = child.nodeName.toLowerCase();
					}
				}
			});

			return result;
		},

		/**
		 * onlySimilars
		 * check if the tagNames in xml are all the same
		 * @param xml
		 * @returns {Boolean}
		 */
		onlySimilars : function(xml) {

			var currentNodeName;
			var result = true;

			jQuery(xml).children().each(function(index, child) {
				if (index === 0) {
					// on first index, init currentNodeName
					currentNodeName = child.nodeName.toLowerCase();
				} else {
					// if the last nodeName = currentNodeName, return true
					// else, update currentNodeName
					if (currentNodeName != child.nodeName.toLowerCase()) {
						result = false;
						return;
					} else {
						currentNodeName = child.nodeName.toLowerCase();
					}
				}
			});

			return result;
		},
		
		compileTaskHeight : function(taskWidth, $data){
			
			var taskToolbarHeight = 35 ;
			
			var totalHeight = taskToolbarHeight ;
			var taskComponents =[ 'instruction', 'title', 'question', 'answer' ] ;
			var currentCompSize = null ;
			var currentCompTag = null ;
			
			for( var i = 0 ; i < taskComponents.length ; i++ ) {
				currentCompTag = taskComponents[i] ;
				var additionalInformation = this.getTaskAdditionalInformation($data);
				currentCompSize= this.getCompiledHeight(taskWidth, 0, $data.find( currentCompTag ), null, additionalInformation) ;
				// this.cl(currentCompTag + ' - height: ' + currentCompSize.height + ' width: ' + currentCompSize.width);
				
				totalHeight += currentCompSize.height ;
			}
			
			return totalHeight ;
		},
		
		getCompiledHeight : function(taskWidth, taskHeight, $data, parentForcedAddDirection, additionalInformation, level){
			
			var $childData, tagName, compArray, singleCompSize, 
				thi$ = this, compSize, compositeSize = {width:0, height:0};
			
			var childrenForcedAddDirection = null ;
			
			var tagName = $data[0].tagName.toLowerCase();
			var compLevel = ( level == undefined ) ? -1 : level ;
			compLevel++ ;
			var groupName = tagName + "_level_" + compLevel //+ "_" + Math.random() ;
//			console.group( groupName ) ;
//			console.groupCollapsed( groupName ) ;
			
			// get children size
			var children = $data.children() ;
//			$data.children().each(function(index, childData){
			for( var index = 0 ; index < children.length ; index++ ) {
				
				var childData = children[index] ;
				
				$childData = jQuery(childData);
				tagName = childData.tagName.toLowerCase();
				
				// reset comp size
				compSize = {width:0, height:0};
				
				switch( tagName ) {
					
					case 'layoutgroup' : {
						
					}
					
					case 'textviewer' : {
						compSize = thi$.gettextviewerCompositeSize($childData, taskWidth);
						break;
					}
					
					case 'imageviewer' : {
						compSize = thi$.getimageviewerCompositeSize($childData, taskWidth)
						break;
					}
					case 'multisubanswer':{
						if (additionalInformation.type == 'mtq' && additionalInformation.hasBank){
							var functionName = "get"+ additionalInformation.answerType+"CompositeSize";
							if(thi$[functionName]){
								compSize = thi$[functionName]($childData, taskWidth);
								compSize.heightCaseVertical = {		height : (compSize.height * (additionalInformation.max_in_array+1)),
																	width: compSize.width
															  };
								compSize.widthCaseHorizontal = {	height: compSize.height,
																	width: (compSize.width * (additionalInformation.max_in_array+1))
																};
							}else{
								compSize = thi$.getCompiledHeight( taskWidth, taskHeight, $childData, childrenForcedAddDirection, additionalInformation, compLevel );
							}
						}else{
							compSize = thi$.getCompiledHeight( taskWidth, taskHeight, $childData, childrenForcedAddDirection, additionalInformation, compLevel );

						}
						break;


					}
					case 'subanswer':{
						if (additionalInformation.type == 'mtq' && additionalInformation.hasBank){
							var functionName = "get"+ additionalInformation.answerType+"CompositeSize";
							if(thi$[functionName]){
								compSize =thi$[functionName]($childData, taskWidth)
							}
						}else{
							compSize = thi$.getCompiledHeight( taskWidth, taskHeight, $childData, childrenForcedAddDirection, additionalInformation, compLevel );

						}
						break;
					}
					
					case 'texteditor': {
						// calc for modes: letter, word, sentence, pharagraph, fullText
						compSize = {width: taskWidth * 0.75, height: 150};
						break;
					}
					
					case 'dialog' : {
						
						var $post;
						
						$childData.find('post').each(function(index, post){
							
							$post = jQuery(post);
							
							var bubbleSize = thi$.plusMargins(thi$.getCompiledHeight(taskWidth, taskHeight, $post.find('bubble'),childrenForcedAddDirection, additionalInformation, compLevel ), 21);
							var imageSize = {height: 120, width: 120};
							compSize = thi$.addVertical(compSize, thi$.addHorizontal(bubbleSize, imageSize));
							
						});
						
						// thi$.cl('tagName: ' + tagName + ' width: ' + compSize.width + 'height: ' + compSize.height);
						
						break;
					}
						
					case 'mediaplayer' : {
						
						compSize = thi$.getmediaplayerCompositeSize();
						
						break;
					}
						
					case 'mathfield' : {
						
						compSize = {width: 75, height: 50};
						
						break;
					}
						
					case 'table' : {
						
						if( $childData.attr('mainContainer') == 'question' ) {
							
							compSize = {width: 190, height: 160};
							break ;
							
						} else {
							
							childrenForcedAddDirection = 'vertical' ;
							
							// no break - go to default anyways
							// - break;
							
						}
						
					}
						
					case 'row' : {
						
						childrenForcedAddDirection = 'horizontal' ;

						// no break - go to default anyways
						// - break;
					}
					
					default : {
						compSize = thi$.getCompiledHeight( taskWidth, taskHeight, $childData, childrenForcedAddDirection, additionalInformation, compLevel );
					}
					
				}
				
				if( parentForcedAddDirection ) {
					
					if( parentForcedAddDirection == 'horizontal' ) {
						
						compositeSize = thi$.addHorizontal(compositeSize, compSize.widthCaseHorizontal? compSize.widthCaseHorizontal: compSize);
						
					} else if( parentForcedAddDirection == 'vertical' ) {
						
						compositeSize = thi$.addVertical(compositeSize, compSize.heightCaseVertical? compSize.heightCaseVertical: compSize);
						
					}
					
				} else {

					
					var temp = thi$.addHorizontal(compositeSize, compSize.widthCaseHorizontal? compSize.widthCaseHorizontal: compSize);
					
					if (temp.width > taskWidth){
						compositeSize = thi$.addVertical(compositeSize, compSize.heightCaseVertical? compSize.heightCaseVertical: compSize);
					} else {
						compositeSize = temp;
					}
					
				}
				
				if (compositeSize.width > taskWidth){
					compositeSize.width = taskWidth;
				}
				
			}
//			}); // end .each
			
			if( $data.length > 0 ) {
				this.cl( tagName + '\t- height: ' + compositeSize.height.toFixed(0) + '\t width: ' + compositeSize.width.toFixed(0) ) ;
			}
			
//			console.group( groupName ) ;
//			console.groupEnd( groupName ) ;
			
			return compositeSize;
		},
		getimageviewerCompositeSize : function($childData, taskWidth){
			return  {width: 150, height: 150};
		},

		getmediaplayerCompositeSize : function($childData, taskWidth){
			return {width: 120, height: 120};
		},
						

		gettextviewerCompositeSize: function($childData, taskWidth){
			var compSize = {width:0, height:0};
			var tvText = $childData.text().trim(), 
			charSum = tvText.length,
			linesSum = 0;

			compSize.width = compSize.height = Math.sqrt(charSum * 220);

			$childData.find('h1, h2, h3, br, p, li, hr').each(function(){ linesSum++; });

			compSize.height += linesSum * 30;

			if (compSize.width < 50){
				compSize.width = 50;
				compSize.height = 30;
			} else if (compSize.width > taskWidth){
				compSize.width = taskWidth;
				compSize.height = (charSum * 300) / taskWidth;
			} else if (compSize.width < 250){
				compSize.width = 250;
				compSize.height = (charSum * 300) / 250;
			}

			return compSize;
		},
		
		getTaskAdditionalInformation: function(taskData){

			var additionalInformation = {};
			switch($(taskData).attr('type')){

				case 'mtq':{
					additionalInformation.type = 'mtq';

					var bank = $(taskData).find('mtqbank');
					if(bank.length){
						additionalInformation.hasBank =	 true;
						var subanswers =$(bank).find('subanswer');
						if(subanswers.length){
							additionalInformation.answerType = subanswers[0].children[0].tagName.toLowerCase();
						}

						var multisubanswer = $(taskData).find('multisubanswer');
						if(multisubanswer.length){
							var max_in_array = 0;
							$(multisubanswer).each(function(index, item){
								var setElement = $(item).find('set');
								if(setElement.length){
									var setList = $(setElement[0]).text();
									itemsCount =  setList.split(',').length;
									if(itemsCount > max_in_array){
										max_in_array = itemsCount;
									}
								}

							});
							additionalInformation.max_in_array = max_in_array;

						}
					}
					
					break;
				}
			}

			return additionalInformation;
		},
		
		plusMargins : function(size, margins){
			return this.mergeSizes(size, {width: margins, height: margins});
		},
		
		mergeSizes : function(size1, size2){
			return {width: (size1.width + size2.width), height: (size1.height + size2.height)};
		},
		
		addHorizontal : function(size1, size2){
			return {width : (size1.width + size2.width), height: (size1.height > size2.height ? size1.height : size2.height)};
		},
		
		addVertical : function(size1, size2){
			return {width : (size1.width > size2.width ? size1.width : size2.width), height: (size1.height + size2.height)};
		},
		
		cl : function(msg){
			console.log('[COMPILER LOG] ' + msg);
		},
		
		filterPermutations: function ( type, perms, config ) {
			
//			console.groupCollapsed( "filterPermutations" ) ;
			
			// accumulate filters definitions
			var filters = [] ;
			var filteredPerms = perms ;
			
			// get minimal task width by tasks type type
			var minTaskWidth = this.getMinTaskWidth( config ) ;
			
			// V or H
			var screenRatio = config.width / config.height ;
			
			// handle shared permutations
			if( type == "shared" ) {
				
				// ratio is horizontal --> remove horizontal
				if( screenRatio >= 1 ) {
					
					filters.push( { key: "type", func: function( t ) {
						console.log( " - type --> ", t, " remove --> horizontal" ) ;
						// keep when not horizontal
						return t != 'horizontal' ;
					} } ) ;
					
				}
				
				// ratio is vertical --> remove vertical
				else {
					
					filters.push( { key: "type", func: function( t ) {
						console.log( " - type --> ", t, " remove --> vertical" ) ;
						// keep when not vertical
						return t != 'vertical' ;
					} } ) ;
					
				}
				
				// remove when no width for min task
				filters.push( { key: "ratio", func: function( r, perm ) {
					// ignore filter when horizontal - no task width change
					if( perm.type == "vertical" ) {
						var overrideRatio = perm.overrideTasksRatio ;
						// r --> 1-100 value in string, representing shared area ratio
						// get task list part (1-x)
						var taskListRatio = ( overrideRatio ? overrideRatio : r*1 ) / 100 ;
						// get task list width from config and ratio
						var taskListWidth = taskListRatio * config.width ;
						console.log( " - ratio --> ", taskListRatio, " taskListWidth --> ", taskListWidth, " minTaskWidth --> ", minTaskWidth ) ;
						// keep when enough width
						return taskListWidth > minTaskWidth ;
					} else {
						return true ;
					}
				} } ) ;
			}

			// handle simple permutations
			if( type == "simple" ) {

				// remove when no width for min task
				filters.push( { key: "tasksWidth", func: function( em ) {
					// simple task list width is definded by em
					// convert to px
					var taskWidth = em * 14 ;
					console.log( " - taskWidth --> ", taskWidth, " minTaskWidth --> ", minTaskWidth, " config.width --> ", config.width ) ;
					// in case permutation fits config.width
					if( taskWidth < config.width ) {
						// keep when enough width for min task width
						return taskWidth > minTaskWidth ;
					} else {
						return false ;
					}
				} } ) ;
				
			}
			
			
			console.log( "initial permutations count --> " + perms.length) ;
			
			var self = this ;
			
			
			// apply filters collection on permutation list
			$(filters).each( function( index, filter ) {
				console.log( "perm filter by --> ", filter.key ) ;
				// get the filteres list
				filteredPerms = self.filterPermutationsBy( filteredPerms, filter.key, filter.func ) ;
				console.log( "current permutations count --> " + filteredPerms.length) ;
			} ) ;

//			console.groupEnd( "filterPermutations" ) ;
			
			return filteredPerms ;
		},
		
		filterPermutationsBy: function( perms, key, func ){
			
			// start with blank list
			var filtered = [] ;
			
			// on each permutation
			$(perms).each( function( index, perm ) {
				
				// get function valuefor deciding on keeping permutation
				if( func( perm[ key ], perm ) ) {
					
					// keep
					filtered.push( perm ) ;
					
				}
				
			} ) ;
			
			return filtered ;
			
		},
		
		getMinTaskWidth: function( config, sizeKey ) {
			
			var thi$ = this ;
			
			// array to contain minimal width for the different tasks within the sequence
			var minWidths = [] ;
			
			var $data = $( config.data ) ;
			
			// get tasks data
			var tasks = $data.find( 'task' ) ;
			
			var tasksSizesLog = "" ;
			
			tasks.each( function( index, task ) {
				
				var $task = $( task ) ;
				
				// get task type
				var taskType = $task.attr( 'type' ) ;
				
				// is using bank in task ?
				var hasBank = $task.find( "bank" ).length > 0;
				// is using table in task ?
				var hasTable = $task.find( "answer tablecomp" ).length > 0;
				// is using toolbar in task?
				
				var textEditor =  $task.find('texteditor');

				var taskTypeKey = taskType ;
				taskTypeKey += ( hasTable ? "_table" : "" ) ;
				taskTypeKey += ( hasBank ? "_bank" : "" ) ;
				if( $(textEditor).length > 0  &&  ['paragraph','FullText'].indexOf($(textEditor).attr('mode')) > -1){
					taskTypeKey += "_toolbar";
				}
				var taskSize = thi$.getTaskSizes( taskTypeKey, sizeKey ? sizeKey : "min" ) ;
				
				var wpx = 14 * taskSize.width ;
				
				tasksSizesLog += taskTypeKey + ":" + wpx + "px " ;
				
				// collect values
				minWidths.push( wpx ) ;
				
			} ) ;
			
			// get the max val from array
			var max_in_array = Math.max.apply(Math, minWidths);
			
			console.log( "[DL][Compiler] --> get tasks " + sizeKey + " width, max value: "+ max_in_array +"px from tasks: " + tasksSizesLog ) ;
			
			return max_in_array ;
		},
		
		getTaskSizes: function( taskKey, sizeKey ) {
			
			var taskSizes = this.tasksSizesMap[ taskKey ] ;
			var size ;
			
			if( taskSizes ) {
				size = taskSizes[ sizeKey ] ;
			} else {
				size = this.tasksSizesMap[ "default" ][ sizeKey ] ;
			}
			
			if( !size ) {
				console.error( "unmapped size key - use min/max etc..." ) ;
			}
			
			return size ;
		},
		
		// REM Sizes
		tasksSizesMap: {
			"default": {
				"min" : { width:	25,	height:			8 },
				"max" : { width:	55,	heightSubVP:	3 }
			},
			"applet" : {
				"min" : { width:	49,	height:			8 },
				"max" : { width:	65,	heightSubVP:	3 }
			},
			"mtq_bank" : {
				"min" : { width:	37,	height:			8 },
				"max" : { width:	65,	heightSubVP:	3 }
			},
			"cloze_bank" : {
				"min" : { width:	55,	height:			11 },
				"max" : { width:	65,	heightSubVP:	3 }
			},
			"cloze_table" : {
				"min" : { width:	49,	height:			11 },
				"max" : { width:	65,	heightSubVP:	3 }
			},
			"cloze_table_bank" : {
				"min" : { width:	55,	height:			11 },
				"max" : { width:	65,	heightSubVP:	3 }
			},
			"opq_toolbar" : {
				"min" : {width: 37, height:8},
				"max" : { width:	65,	heightSubVP:	3 }
			}
		},
		
		getCompilePermutations: function( type, config ) {

			var sharedGrades = t2k.compile.GradingConfig.sequence.shared;

			var colGrade = sharedGrades.collapsed.grade;
			var colDesc = sharedGrades.collapsed.description;
			var horizGrade = sharedGrades.horizontal.grade;
			var horizDesc = sharedGrades.horizontal.description;

			// "id" reffers to type and the task list share in %, "ratio" containes shared area share in %
			var compilePermutations = {
				base:
					[
						{ id: 'base' }
					],

				simple:
					[
					 	{ id: 'tasks_max',			hasMargin:true,		tasksWidth:65, factor:1 }
						,
						{ id: 'tasks_large',		hasMargin:true,		tasksWidth:55, factor:1 }
//						,
//						{ id: 'tasks_small',		hasMargin:true,	 tasksWidth:49, factor:1 }
					],


				shared:
					[
						{ id: 'Portrait_60',		type:"vertical",	ratio:"40",		collapse:false,	factor: 1,		gradeDescriptions: null,					baseGrades: null }
						,
						{ id: 'Portrait_50',		type:"vertical",	ratio:"50",		collapse:false,	factor: 1,		gradeDescriptions: null,					baseGrades: null }
						,
						{ id: 'Portrait_67',		type:"vertical",	ratio:"33",		collapse:false,	factor: 1,		gradeDescriptions: null,					baseGrades: null }
						,
						{ id: 'Portrait_33',		type:"vertical",	ratio:"67",		collapse:false,	factor: 1,		gradeDescriptions: null,					baseGrades: null }
						,
						{ id: 'Portrait_col',		type:"vertical",	ratio:"10",		collapse:true,	factor: 1.1,	overrideTasksRatio: 100,	gradeDescriptions: [colDesc],				baseGrades: [colGrade] }
						,
						{ id: 'Landscape_50',		type:"horizontal",	ratio:"50",		collapse:false,	factor: 1,		gradeDescriptions: [horizDesc],				baseGrades: [horizGrade] }
						,
						{ id: 'Landscape_67',		type:"horizontal",	ratio:"33",		collapse:false,	factor: 1,		gradeDescriptions: [horizDesc],				baseGrades: [horizGrade] }
						,
						{ id: 'Landscape_33',		type:"horizontal",	ratio:"67",		collapse:false,	factor: 1,		gradeDescriptions: [horizDesc],				baseGrades: [horizGrade] }
						,
						{ id: 'Landscape_col',		type:"horizontal",	ratio:"10",		collapse:true,	factor: 1.1,	overrideTasksRatio: 100,	gradeDescriptions: [horizDesc, colDesc],	baseGrades: [horizGrade, colGrade] }

					]
			};
			
			var filteredPermutations = CompilerUtils.filterPermutations( type, compilePermutations[ type ], config ) ;
			
			return filteredPermutations ;
		},
		
		getSequenceLayoutProps: function( config ) {
			
			var defaultProps = {
				hasMargin: true,
				creativeTasksWidth: 55
			} ;
			
			var props = {} ;
			
			switch( config.type ) {
				
				case "simple" :
					props = this.getSequenceLayoutSimpleProps( config ) ;
					break ;
					
				case "shared" :
					props = this.getSequenceLayoutSharedProps( config ) ;
					break ;
					
				default :
					console.error( "sequence type attribute is missing" ) ;
					break ;
			} ;
			
			var layoutProps = $.extend( {}, defaultProps, props ) ;
			
			return layoutProps ;
		},
		
		getSequenceLayoutSimpleProps: function( config ) {
			
			var cfgWidthNoMargin = config.width - 3.5*14 ;
			
			var maxPossibleTaskListWidth ;
			
			var maxTaskWidth = this.getMinTaskWidth( config, "max" ) ;
			var defaultTaskWidth = 14 * this.getTaskSizes( "default", "max" ).width ;
			var minTaskWidth = this.getMinTaskWidth( config, "min" ) ;
			
			var tasksWidths = [
			                   maxTaskWidth,
			                   defaultTaskWidth,
			                   minTaskWidth,
			                   cfgWidthNoMargin - 13 * 14,
			                   cfgWidthNoMargin - 37 * 14,
			                   cfgWidthNoMargin - 54 * 14
			] ;
			
			// sort + remove duplicates
			tasksWidths.sort() ;
			tasksWidths.reverse() ;
			for ( var i = 1; i < tasksWidths.length; i++ ) {
				if ( tasksWidths[i] === tasksWidths[ i - 1 ] ) {
					tasksWidths.splice( i--, 1 );
				}
			}
			
//			
//			////////////////////////////////////////////////////////
//			// TDOD instead all the mess next (array stuff)
//			////////////////////////////////////////////////////////
//			// put all possible values in an array
//			// sort the array
//			// remove duplicated from array
//			// choose the largest value that fits VP to start with
//			////////////////////////////////////////////////////////
//			
//			addWidthToArray( defaultTaskWidth ) ;
//			addWidthToArray( minTaskWidth ) ;
//			addWidthToArray( cfgWidthNoMargin ) ;
//			
//			function addWidthToArray( width ){
//				
//				var addAtEnd = true ;
//				var useValue = true ;
//				
//				// helper function to add width to an array in a specific index
//				function addToArrayAt( addInto ) {
//					tasksWidths.splice( addInto, 0, width ) ;
//					addAtEnd = false ;
//				}
//				
//				// find the right place for config.width to be added
//				var i, w ;
//				for( i = 0 ; i < tasksWidths.length ; i++ ) {
//					var w = tasksWidths[ i ] ;
//					if( w < cfgWidthNoMargin ) {
//						addToArrayAt( i ) ;
//						break ;
//					}
//					else if( w == width ) {
//						addAtEnd = false ;
//						useValue = false ;
//						break ;
//					}
//				}
//				// in case it was not added yet, add at the end
//				if( addAtEnd && useValue ) {
//					addToArrayAt( tasksWidths.length ) ;
//				}
//				
//			}
//			
//			
			
			if( maxTaskWidth <= cfgWidthNoMargin ) {
				
				maxPossibleTaskListWidth = maxTaskWidth ;
				
			} else if( defaultTaskWidth <= cfgWidthNoMargin ) {
				
				maxPossibleTaskListWidth = defaultTaskWidth ;
				
			} else if( minTaskWidth <= cfgWidthNoMargin ) {
				
				maxPossibleTaskListWidth = minTaskWidth ;
				
			} else {
				
				console.warn( "[DL][Compiler] --> using task width below minimum" ) ;
				maxPossibleTaskListWidth = cfgWidthNoMargin ;
				
			}
			
			var selectedWidth = maxPossibleTaskListWidth ;
			
			var $creativeData = $( config.data ).children( "creativeset" ) ;
			var hasCreative = !!( $creativeData[0] ) ;
			var hasCreativeMargin = $creativeData.children( "asset[name='margin']" ).length > 0 ;
			
			if( hasCreative && hasCreativeMargin ) {
								
				var spaceForMargin ;
				
				console.log( "[DL][Compiler] --> try max task width of: " + selectedWidth + "px" ) ;
				
				spaceForMargin =  ( cfgWidthNoMargin - selectedWidth ) / 14 ;
				
				var currentWidthIndex = tasksWidths.indexOf( maxPossibleTaskListWidth ) ;
				var canUseLower = currentWidthIndex < ( tasksWidths.length - 1 ) ;
				
				var marginFit = spaceForMargin > 13 ;
				console.log( "[DL][Compiler] --> margin fit ? --> " + ( marginFit ? "yes" : "no" ) ) ;
				
				if( !marginFit && canUseLower ) {
					
					var lowerWidthIndex = currentWidthIndex + 1 ;
					var lowerWidth = tasksWidths[ lowerWidthIndex ] ;
					
					spaceForMargin =  ( cfgWidthNoMargin - lowerWidth ) / 14 ;
					marginFit = spaceForMargin > 13 ;
					
					console.log( "[DL][Compiler] --> try lower task width of: " + lowerWidth + "px" ) ;
					
					if( marginFit ) {
						
						console.log( "[DL][Compiler] --> margin fits in lower width" ) ;
						
						var isOverflowing = this.hasOverflowingTask( lowerWidth, config ) ;
						// check overflow
						if( !isOverflowing ) {
							selectedWidth = lowerWidth ;
							console.log( "[DL][Compiler] --> no overflow" ) ;
						} else {
							console.log( "[DL][Compiler] --> overflow, go back to: " + selectedWidth + "px" ) ;
						}
					}
					else {
						console.log( "[DL][Compiler] --> margin does not fit in lower width" ) ;
					}
				}
			}
			else {
				console.log( "[DL][Compiler] --> no margin or any creative wrapper" ) ;
			}
			
			
			console.log( "[DL][Compiler] --> using max task width of: " + selectedWidth + "px" ) ;
			
			var tasksWidthEM =  selectedWidth / 14 ;
			
			return {
				creativeTasksWidth: tasksWidthEM,
				hasMargin: true,
				
				// props here, else it's won't work properly
				ratio: 100,
				isVertical:true,
				isHorizontal:false,
				orientation: "vertical",
				isReadingDirection:  false,
				isCollapse: false,
				isShared: false,
				sharedPosition: "right",
				sharedContentDiffWidth: 0,
				sharedContentDiffHeight: 0	
				
			} ;
		},
		
		getSequenceLayoutSharedProps: function( config ) {
			
			// check task list widths [ max(65/55), between(vp.w-shared.w), min(37-25) ]
			// X
			// with shared content [ max, min ] (depending on shared content type)
			
			var COLLAPSED_SHARED_RATIO = 10 ;
			
			var cfgWidthNoMargin = config.width - 2 * 14 ;
			
			var maxTaskWidth = this.getMinTaskWidth( config, "max" ) ;
			
			var defaultTaskWidth = 14 * this.getTaskSizes( "default", "max" ).width ;
			
			var minTaskWidth = this.getMinTaskWidth( config, "min" ) ;
			
			var tasksWidths = [ maxTaskWidth, defaultTaskWidth, minTaskWidth ] ;
			
			var $sharedComponent = $( config.data ).children( "shared" ).children( "sharedarea" ).children().get( 0 ) ;
			
			var componentName = $sharedComponent.localName ;
			
			var sharedContentMax = this.getSharedComponentSize( componentName, $sharedComponent, "max" ).width ;
			
			var sharedContentMin = this.getSharedComponentSize( componentName, $sharedComponent, "min" ).width ;
			
			var sharedBefore = $( config.data ).children("layout").attr("sharedbefore") === "true";

			var sharedWidth = 0 ;
			
			var collapse = false ;
			
			var reduceSharedWidthBy = 0 ;
			
			function setSharedValues() {
				console.log( "[DL][Compiler] --> collapse" ) ;
				sharedWidth = sharedContentMax ;
				collapse = true ;
				reduceSharedWidthBy = Math.floor( ( config.width * ( 100 - COLLAPSED_SHARED_RATIO ) / 100 - sharedWidth ) )
				console.log( "[DL][Compiler] --> collapse shared optimize by reducing: " + reduceSharedWidthBy + "px" ) ;
			}
			
			if( config.forceCollapsedShared ){
				
				setSharedValues() ;
				
			} else {
				
				if( ( maxTaskWidth + sharedContentMax ) <= cfgWidthNoMargin ) {
					console.log( "[DL][Compiler] --> maxTaskWidth + sharedContentMax" ) ;
					sharedWidth = sharedContentMax ;
				}
				else if( ( maxTaskWidth + sharedContentMin ) <= cfgWidthNoMargin ) {
					console.log( "[DL][Compiler] --> maxTaskWidth + sharedContentMin" ) ;
					sharedWidth = sharedContentMin ;
				}
				else if( ( defaultTaskWidth + sharedContentMax ) <= cfgWidthNoMargin ) {
					console.log( "[DL][Compiler] --> defaultTaskWidth + sharedContentMax" ) ;
					sharedWidth = sharedContentMax ;
				}
				else if( ( defaultTaskWidth + sharedContentMin ) <= cfgWidthNoMargin ) {
					console.log( "[DL][Compiler] --> defaultTaskWidth + sharedContentMin" ) ;
					sharedWidth = sharedContentMin ;
				}
				else if( ( minTaskWidth + sharedContentMax ) <= cfgWidthNoMargin ) {
					console.log( "[DL][Compiler] --> minTaskWidth + sharedContentMax" ) ;
					sharedWidth = sharedContentMax ;
				}
				else if( ( minTaskWidth + sharedContentMin ) <= cfgWidthNoMargin ) {
					console.log( "[DL][Compiler] --> minTaskWidth + sharedContentMin" ) ;
					sharedWidth = sharedContentMin ;
				} else {
					setSharedValues() ;
				}
				
			}
			
			var sharedRatio = Math.ceil( 100 * sharedWidth / config.width ) ;
			var ratio = collapse ? COLLAPSED_SHARED_RATIO : 100 - sharedRatio ;
			
			console.log( "[DL][Compiler] --> shared percent from VP : " + sharedRatio + "%" ) ;
			
			return {
				ratio: ratio,
				hasMargin: false,
				isVertical:true,
				isHorizontal:false,
				orientation: "vertical",
				isReadingDirection: sharedBefore,
				isCollapse: collapse,
				isShared: true,
				sharedPosition: "right",
				sharedContentDiffWidth: reduceSharedWidthBy,
				sharedContentDiffHeight: 0	
			} ;
		},
		
		getSharedComponentSize: function( componentKey, componentData, sizeKey ) {
				
			var size ;
			var key ;
				
			if( componentKey ) {
				
				switch( componentKey ) {
					
					case "applet" : {
						var appPath =  $(componentData).attr( "path" ) ;
						var appID = this.extractGuid( appPath ).toLowerCase() ;
						size = this.getAppletSizeFromMap( appID ) ;
						break ;
					}
					
					case "imageviewer" : {
						var imgWidth = 1 * $(componentData).attr( "width" ) ;
						imgPaddingInShared = 2*2*14; //(in rem)
						
						if( sizeKey == "max" ) {
							size = { width: imgWidth } ;
						} else if ( sizeKey == "min" ) {
							var imgMinRead = 1 * $(componentData).attr( "minimumreadable" ) ;
							size = { width: imgWidth * imgMinRead + imgPaddingInShared} ;
						}
						break ;
					}
					
					case "mediaplayer" : {
						var mediaType = $(componentData).attr( "type" ) ;
						key = componentKey + "_" + mediaType + "_" + sizeKey ;
						size = this.getSharedComponentSizeFromMap( key ) ;
						break ;
					}
						
					default : {
						key = componentKey + "_" + sizeKey ;
						size = this.getSharedComponentSizeFromMap( key ) ;
						if( !size ) {
							console.log( "[DL][Compiler] --> can't find size for component : " + key ) ;
							key = componentKey + "_" + "max" ;
							console.log( "[DL][Compiler] --> trying max component size as default : " + key ) ;
							size = this.getSharedComponentSizeFromMap( key ) ;
						}
						if( !size ) {
							size = this.getCompiledHeight( 10000, 10000, $(componentData) ) ;
						}
						if( !size ) {
							console.warn( "[DL][Compiler] --> unhandled component size : " + componentKey + "_" + sizeKey ) ;
						}
						break ;
					}
				}
			}
			
			if( !size ) {
				size = this.getSharedComponentSizeFromMap( "default" ) ;
				console.error( "[DL][Compiler] --> can't match component size, using default" ) ;
			}

			size.width += 1*14 // add shared border
			
			console.log( "[DL][Compiler] --> "+ sizeKey +" \""+ componentKey +"\" component size : " + size.width + "px" ) ;
			
			return size ;
		},
		
		getSharedComponentSizeFromMap: function( key ) {
			var size = this.sharedComponentSizesMap[ key ] ;
			var extended =  $.extend( true, {}, size ? size : {} ) ;
			return size ? extended : null ;
		},
		
		sharedComponentSizesMap: {
			"default": {
				width: 350 + 2*1.5*14
			},
			"mediaplayer_video_max": {
				width: 640 + (2*2*14)
			},
			"mediaplayer_video_min": {
				width: 450 + (2*2*14)
			},
			"mediaplayer_audio_max": {
				width: 250 + (2*2*14)
			},
			"mediaplayer_audio_min": {
				width: 250 + (2*2*14)
			},
			"mediaplayer_soundButton_max": {
				width: 50 + (2*2*14)
			},
			"mediaplayer_soundButton_min": {
				width: 50 + (2*2*14)
			},
			"textviewer_max": {
				width: 500 + ((3+4 + 1)*14) //scroll+paddings
			},
			"textviewer_min": {
				width: 300 + ((2*3+1)*14)
			},
			"dialog_max": {
				width: 550 + (5*14)
			},
		},
		
		getAppletSizeFromMap: function( appID ) {
			var size = this.appletsSizeMap[ appID ] ;
			if( !size ) {
				console.warn( "[DL][Compiler] --> unmapped applet : " + appID ) ;
				size = this.appletsSizeMap[ "default" ] ;
			}
			
			size = $.extend( {}, size ) ;
			
			size.width += 2*2*14 ;
			
			return size ;
		},
		
		// finds first occurrence of a GUID within square brackets in a string
		extractGuid: function( value ) {    
			var re = /([a-z0-9]{8}(?:-[a-z0-9]{4}){3}-[a-z0-9]{12})/i;
		    // the RegEx will match the first occurrence of the pattern
		    var match = re.exec(value);
		    
		    // result is an array containing:
		    // [0] the entire string that was matched by our RegEx
		    // [1] the first (only) group within our match, specified by the
		    // () within our pattern, which contains the GUID value
		    return match ? match[1] : null ;
		},
		
		appletsSizeMap: {
			"default" : {  width: 650, height: 650 },
			"ca4920e5-2cb3-4e81-b18e-bf0ffa427c09" : { width: 630, height: 590 },
			"37f6eb06-e485-11e2-9909-f7f76188709b" : { width: 646, height: 606 },
			"d8c53f84-311e-4312-83a8-33a9821170ac" : { width: 630, height: 590 },
			"fbfafb43-4c3a-4c99-b5fb-5fef3193cdd5" : { width: 630, height: 590 },
			"aed3db81-8075-4cc4-ae01-9c2e6781cbe5" : { width: 630, height: 590 },
			"76651ce2-4dc3-4732-940d-434b850aa8ee" : { width: 630, height: 590 },
			"44467be7-8255-4765-83ae-30d64db52f57" : { width: 630, height: 590 },
			"83e38345-3f28-453d-9cdd-7a5a2402f3fb" : { width: 630, height: 590 },
			"f7ff8abe-ef10-4042-a963-bab8d5a0a144" : { width: 630, height: 432 },
			"6aa8392e-524e-4fc4-bb2e-ecc050c2dc0a" : { width: 618, height: 590 },
			"3e684854-b163-11e2-957f-47566188709b" : { width: 618, height: 560 },
			"7ee92a74-99ee-11e2-935c-337d6188709b" : { width: 618, height: 560 },
			"685c0ca4-99ee-11e2-b908-2d7d6188709b" : { width: 560, height: 560 },
			"ee97adf0-8edb-11e2-bfd2-2ca76188709b" : { width: 550, height: 560 },
			"43a85a09-812e-488e-9adf-43eb92c8b4b9" : { width: 407, height: 490 },
			"0b8fd662-0cde-40a9-8cd9-81af538d7e9f" : { width: 365, height: 460 },
			"0c4b69e4-ae4b-49b7-be6f-a422bbc3e435" : { width: 359, height: 151 },
			"7db50320-2a72-11e3-8224-0800200c9a66" : { width: 794, height: 416 }
		},
		
		hasOverflowingTask: function( testWidth, config ) {
			
			var $tasks = $( config.data ).find( "tasks" ).find( "task" ) ;
			
			var isOverflowing = false ;
			
			for( var i = 0 ; i < $tasks.length ; i++ ) {
				
				var $taskData = $( $tasks[i] ) ;
				
				var extraHeight = 0 ;
				var taskGuestimatedHeight = this.compileTaskHeight( testWidth, $taskData ) ;
				
				if( i == 0 ) {
					var header = $( config.data ).children( "header" )[0] ;
					var instruction = $( config.data ).children( "instruction" )[0] ;
					extraHeight += header ? 100 : 0 ;
					extraHeight += instruction ? 100 : 0 ;
					extraHeight && console.log( "[DL][Compiler] --> calc 1st task with sequence header/instruction extra: " + extraHeight + "px" ) ;
				
				}
				
				extraHeight += 3*14 ;
				
				var totalHeight = taskGuestimatedHeight + extraHeight ;
				extraHeight && console.log( "[DL][Compiler] --> task[" + ( i + 1 ) + "] --> guesstimated height (+3rem): " + totalHeight + "px" ) ;
				
				if( totalHeight > config.height ) {
					var overflowPercent = parseInt( 100 * ( totalHeight / config.height - 1 ) ) ;
					console.log( "[DL][Compiler] --> detected overflow: " + overflowPercent + "%" ) ;
					isOverflowing = true ;
					break ;
				}
			}
			
			return isOverflowing ;
		},
		
		enhanceConfigForLayouting: function( config ) {
			var jqXml = jQuery(config.data);
			var tasks = jqXml.find('task');

			var sharedArea = jqXml.find('sharedArea').get(0);
			sharedArea = (CompilerUtils.setNumOfChildren(sharedArea));

			jQuery(tasks).each(function(index, task) {
				var task = jQuery(task);
				var question = task.find('question').get(0);
				var answer = task.find('answer').get(0);
				var help = task.find('help').get(0);

				// group xml data
				question = (CompilerUtils.groupData(question));
				answer = (CompilerUtils.setNumOfChildren(answer));
				help = (CompilerUtils.groupData(help));
			});

			return config;
		}

	}; // End of t2k.util.CompilerUtils

} )();

// Shorthands
var CompilerUtils = t2k.util.CompilerUtils;

////////////////////////////////////////
// SRC End --> t2k/util/CompilerUtils.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/StringUtils.js
////////////////////////////////////////
(function() {

    /**
     * Class: t2k.util.StringUtils
     * Contains string manipulation/formatting/etc. utilities
     */
    t2k.util.StringUtils = {
        /**
         * Method: formatNumber
         *
         * Params:
         *  number - the number to format.
         *  format - the format to follow.
         */
        formatNumber: function(number, format) {
            var ret = '';
            if (format != 'none') {
                var charCode = String(format).charCodeAt(0) + parseInt(number) - 1;
                if (format != 'a'&& format != 'A') {
                    if (number >= 10 && format == '1') { // numbers
                        decades = String(format).charCodeAt(0) + (Math.floor(number / 10)) - 1;
                        singles = String(format).charCodeAt(0) + (Math.round(number % 10)) - 1;
                        ret = String.fromCharCode(decades) + String.fromCharCode(singles) ;
                    } else if (number >= 10){ // hebrew
                        if (number == 14) { // tet vav
                            singles = String(format).charCodeAt(0) + 5;
                            decades = String(format).charCodeAt(0) + 8;

                        } else if (number == 15) {
                            singles = String(format).charCodeAt(0) + 6;
                            decades = String(format).charCodeAt(0) + 8;
                        } else {
                            singles = String(format).charCodeAt(0) + (Math.round(number % 10));
                            decades = String(format).charCodeAt(0) + (Math.floor(number / 10)) + 8;

                        }
                        ret = String.fromCharCode(decades) + String.fromCharCode(singles);
                    }
                    else {
                        ret = String.fromCharCode(charCode);
                    }
                } else {
                    ret = String.fromCharCode(charCode);
                }
            }
            
            ret = ret + ( format =="1" ? "." : "" ) ;
            
			return ret;
        }

	};

})();


////////////////////////////////////////
// SRC End --> t2k/util/StringUtils.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/managers/MediaManager.js
////////////////////////////////////////
/**
 * @class t2k.util.managers.MediaManager
 *
 *
 */

t2k.util.managers.MediaManager = function (controlType) {

    /**
     * This is a reference to the custom controlbar element
     * incase null we use the built in control
     */
    this.control;
    this.controlType = controlType;

    this.currentItem; //the current media dom element (audio or video)

    this.volume = 1;
    //this.flashItems = [];
    //this.mediaItems = {};
    //this.playbackQueue = {};
    this.preloadQueue = {};

    //Initialize control bar
    if (this.controlType != undefined) {
        templatesLoader.loadComponentTemplate(this.controlType, this, this.attachControl);
    }

};
t2k.util.managers.MediaManager.prototype = {
    init:function () {
        //setters

    },

    /**
     * Having loaded the control bar we can now utilize and show it
     * wherever a media interaction occurs, play, pause
     */
    attachControl:function () {
        //jQuery(Mustache.to_html(this.controlType, this.mediaConfig)).appendTo( "#" + this.currentItem.id );
        jQuery(this.control).bind('onclick', this.togglePlay);
    },

    setMedia:function (media, isObject) {
        //pause the current media (the old one)
        if (this.currentItem) {
            if (this.currentItem != media) {
                this.pause();
            }

        }

        //change currentItem to the new one
        if (this.currentItem != media) {
            if (isObject) {
                //in this case mediaItem is an object
                this.currentItem = media;
                this.currentItem.volume = this.volume;
            } else {
                //the mediaItem is not an object its a div, than media is actually Id
                this.currentItem = Perf.select("#" + media)[0];
                this.currentItem.volume = this.volume;
            }
        }
    },
    /*register : function(mediaId, mediaConfig){

     this.mediaItems[mediaId] = mediaConfig;
     },*/

    /*registerFlash : function(flashInstance){
     console.log('flash registered');
     this.flashItems.push(flashInstance);
     },*/

    canPlayType:function (type) {
        return this.currentItem.canPlayType(type);
    },

    /*pauseAll : function(){
     for(var mediaId in this.mediaItems){
     jQuery("#" + mediaId).pause();
     }

     //2 different ways of doing the same thing
     jQuery.each(this.flashItems, function (i,flash) {
     flash.pause();
     })

     for(var flash in this.flashItems){
     this.flashItems[flash].pauseFlashSound();
     }
     },*/
    load:function () {
        this.currentItem.load();
    },
    loadAll:function () {
        for (var mediaId in this.mediaItems) {
            Perf.select("#" + mediaId).load();
        }
    },

    play:function () {
        if (this.currentItem) {
            this.currentItem.play();
        }
    },
    togglePlay:function () {
        if (this.currentItem) {
            if (this.currentItem.paused) {
                this.currentItem.play();
            } else {
                this.currentItem.pause();
            }
        }

    },
    pause:function () {
        if (this.currentItem && this.currentItem.readyState > 0) {
            this.currentItem.pause();
        }

    },
    pauseAll:function () {
//        for (var mediaId in this.mediaItems) {
//            Perf.select("#" + mediaId).pause();
//        }
        if(this.currentItem){this.currentItem.pause();}
    },
    addVideo:function (parentId, vidURL) {
        var vid, makevid;
        vid = document.createElement('video');
        vid.src = vidURL;
        vid.setAttribute('autoplay', true);
        Perf.select("#" + parentId).append(vid);
    },

    setVolume:function (volume) {
    	
    	if( volume !== 0 && !volume ) {
    		volume = 1 ;
    	}
    	
        //todo decide on volume range (0,1) or (0,100) and coordinate with dtp
        //right now we support both this code need to be deleted when decision is made
        while (volume > 1) {
            volume = volume/100;
        }

        if (this.currentItem) {
            this.currentItem.volume = volume;
        }

    },

    getVolume:function () {
        return this.volume;
    }

};
//initializations
var mediaManager = new t2k.util.managers.MediaManager();



////////////////////////////////////////
// SRC End --> t2k/util/managers/MediaManager.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/managers/AssessmentManager.js
////////////////////////////////////////
/**
 * @class t2k.util.managers.AssessmentManager
 *
 *
 */

t2k.util.managers.AssessmentManager = function(controlType) {

	this.rubricedSequences = {} ;
    this.AssessableTasksArray = [];
    this.answerViewMode = '';
};


t2k.util.managers.AssessmentManager.prototype = {

    /*
     this function should help create the assessment
     */
    parseAssessmentData : function (config) {
        var thi$ = this;
        jQuery(config.sequencesConfig).each(function(seqIndex, sequenceCfg) {

            var tasksConfig = jQuery(sequenceCfg.data).find("task");
            var seqArrayOfTasks = [];


            jQuery(tasksConfig).each(function(taskIndex, taskCfg) {
                var info = {};
                //TODO change names to sequence , task .
                info.screenId = seqIndex;
                info.template = null; // will get value when task is created
                if(TaskCheckingType[jQuery(taskCfg).attr('type')] != "EXPOSURE" ){
                	info.path = jQuery( taskCfg ).find('progress rubric').attr('id') ;
                    if(TaskCheckingType[jQuery(taskCfg).attr('type')] == 'AUTOMATIC'){
                        info.score = 0;
                    }

                    if(TaskCheckingType[jQuery(taskCfg).attr('type')] == 'MANUAL'){
                        info.manCheck = true;
                    }
                    
                    thi$.rubricedSequences[ seqIndex ] = info.path ;
                    
                }else{
//                    info.path = '';
                }
                    info.isAssessable = false //will be updated after task is created

                //just for test
                //info.score = null;
                //info.rubricId = taskCfg.baseURI + '/' + jQuery(taskCfg).attr('id');
                seqArrayOfTasks[taskIndex] = info;
            });

            thi$.AssessableTasksArray[seqIndex] = seqArrayOfTasks;
        });

    },

    //test

    /*getAssessmentState:function() {
        var arr = [];
        var thi$ = this;
        for (var i = 0 ; i < this.AssessableTasksArray.length; i++) {
            for (var j = 0; j<thi$.AssessableTasksArray[i].length; j++) {
                var o = thi$.AssessableTasksArray[i][j]
                arr.push(o);
            }
        }
        return arr
    },*/

    fetchResult:function() {
        //going over all the data in this.AssessableTasksArray and parse it for the wanted result structuer
        var resArray = [];
        jQuery(this.AssessableTasksArray).each(function(seqIndex, seqAssessableTasks) {
            jQuery(seqAssessableTasks).each(function(taskIndex, assessmentTaskInfo) {

                if( assessmentTaskInfo.path ) {
	                var aInfo = {};
	                aInfo.atomId = assessmentTaskInfo.atomId;
	                aInfo.rubricId = assessmentTaskInfo.path;
	                if ( assessmentTaskInfo.isAssessable ) {
	                	aInfo.score = assessmentTaskInfo.template.getAnswerAssessmentScore();
	                } else {
	                	aInfo.score = 0 ;

	                }

                    if(assessmentTaskInfo.manCheck){
                        aInfo.manCheck = true;
                    }
//	                else if(assessmentTaskInfo.score == 0 /* default for auto*/){
//	                    aInfo.score = 0;
//	                }else{
//	                    aInfo.score = null;
//	                }
	                resArray.push(aInfo);
                }
            }) ;
        });

        return resArray;
    },



    addRealTaskInstanceToArray:function(seqIndex, taskIndex, taskObject) {
    	var assTask = (this.AssessableTasksArray[seqIndex])[taskIndex] ;
    	assTask.template = taskObject;
    	assTask.isAssessable = taskObject.isAssessable();
    	assTask.path = taskObject.getRubricPath() ;
    },

    getSequenceByRubricId : function (rubric) {
        var screenId = null;
        jQuery(this.AssessableTasksArray).each(function(seqIndex, seqAssessableTasks) {
            jQuery(seqAssessableTasks).each(function(taskIndex, assessmentTaskInfo) {
                if (assessmentTaskInfo.path == rubric) {
                    screenId = seqIndex;
                    return
                }
            });

            if (screenId != null) return //this is just to break jQuery each
        });

        return screenId;
        //should return the sequence


    },


    getRubricFromIndex:function(seqIndex, taskIndex, atomId) {
        var infoObj = (this.AssessableTasksArray[seqIndex])[taskIndex];
        if (infoObj) {
            infoObj.atomId = atomId;
            return infoObj.path;
        }
    },

    updateSequenceRubric: function( seqIndex ) {
    	
    	var seqRub = this.rubricedSequences[ seqIndex ] ;
    	
		if( ENV.host.onRubricSwapped ) {
			
    		ENV.host.onRubricSwapped( seqRub ? seqRub : null ) ;
    		
    	}
    	
    }
    

};




////////////////////////////////////////
// SRC End --> t2k/util/managers/AssessmentManager.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/managers/CreativeLayoutManager.js
////////////////////////////////////////
(function () {

    var FULL_FOOTER = 'full_footer';
    var FOOTER = 'footer';
    var SMALL_MARGIN = 'small_margin';
    var LARGE_MARGIN = 'large_margin';
    var NO_MARGIN = 'no_margin';
    var HUGE_MARGIN = 'huge_margin' // only to know how to center the margin.
    var NO_FOOTER = 'no_footer';
    var NO_CREATIVE = 'no_creative';
    var OVERLAY = 'no_margin';
    var MANUAL = 'manual';
    var AUTOMATIC = 'automatic';
    var MARGIN_HEIGHT = 831;
    var MARGIN_WIDTH = 516;
    var FOOTER_WIDTH = 1024;
    var SMALL_MARGIN_UPPER_BOUND = 37;
    var SMALL_MARGIN_AUTO_LOWER_BOUND = 13;
    var SMALL_MARGIN_MANUAL_LOWER_BOUND = 19.143;
    var SMALL_MARGIN_PENALTY_LOWER_BOUND = 19.143;
    var LARGE_MARGIN_UPPER_BOUND = 54;
    var FOOTER_LOWER_BOUND = 14;
    var FOOTER_UPPER_BOUND = 24.5;
    var FULL_FOOTER_LOWER_BOUND = 24.5;


    t2k.util.managers.CreativeLayoutManager = Object.subClass({

        ctor:function (config, footerDiv, marginDiv, setCfg, gridService) {
            this.footerDiv = footerDiv;
            this.marginDiv = marginDiv;
            this.cfg = config
            this.gs = gridService;
            
            this.layoutStatus = {} ;
            
            this.footerLayout = NO_FOOTER;
            this.marginLayout = NO_MARGIN;
            this.showCreative = true;

            this.parseSetCfg(config.data); //apply properties from set xml element
            
            console.log( "[DL][Creative] --> creative-set type: " + this.setType ) ;
            if (this.setType == AUTOMATIC) {
                this.decideAutoMarginLayout();
                this.decideAutoFooterLayout();
            } else {
                this.decideManualMarginLayout();
                if (this.marginLayout != NO_MARGIN) {
                    this.decideManualFooterLayout();
                }
            }
            
            if( this.marginLayout == NO_MARGIN ){
                
                //penalty
                this.layoutStatus.noMargin = true ;
                
                if(this.footerLayout == NO_FOOTER){
                    //penalty
                    this.layoutStatus.noCreative = true ;
                    
                }
                
            }

            this.placeComponents();
        },

        decideAutoFooterLayout:function () {
//	        this.footerLayout = NO_FOOTER;
//	        return;
        	var footerDivHeight = this.footerDiv.height() ;
            var footerRealEstate = this.gs.getEm(footerDivHeight) ;
            
            console.log( "[DL][Creative] --> footer RE: " + footerDivHeight ) ;

            if (footerRealEstate >= FULL_FOOTER_LOWER_BOUND) {
            	console.log( "[DL][Creative] --> enough RE for full footer, skip margin" ) ;
                this.footerLayout = FULL_FOOTER;
                //change the margin layout back
                this.marginLayout = NO_MARGIN;

                return
            } else {
                if (footerRealEstate >= FOOTER_LOWER_BOUND && footerRealEstate < FOOTER_UPPER_BOUND) {
                	console.log( "[DL][Creative] --> enough RE for small footer" ) ;
                    this.footerLayout = FOOTER;
                    return
                } else {
                    this.footerLayout = NO_FOOTER;
                }

            }

        },

        decideAutoMarginLayout:function () {
            var marginRealEstate = this.gs.getEm(this.marginDiv.width());

            if (marginRealEstate < SMALL_MARGIN_AUTO_LOWER_BOUND) {
            	console.log( "[DL][Creative] --> no RE for margin" ) ;
                this.marginLayout = NO_MARGIN;
            } else {
                if (marginRealEstate >= SMALL_MARGIN_UPPER_BOUND && marginRealEstate < LARGE_MARGIN_UPPER_BOUND) {
                	console.log( "[DL][Creative] --> enough RE for large margin" ) ;
                    this.marginLayout = LARGE_MARGIN;
                } else {
                    if (marginRealEstate >= LARGE_MARGIN_UPPER_BOUND) {
                    	console.log( "[DL][Creative] --> enough RE for huge margin" ) ;
                        this.marginLayout = HUGE_MARGIN;
                    } else {
                        if (marginRealEstate >= SMALL_MARGIN_AUTO_LOWER_BOUND && marginRealEstate < SMALL_MARGIN_UPPER_BOUND) {
                        	console.log( "[DL][Creative] --> enough RE for small margin" ) ;
                            this.marginLayout = SMALL_MARGIN;
                            //penalty for very small "small margin" place
                            if(marginRealEstate < SMALL_MARGIN_PENALTY_LOWER_BOUND){
                                this.layoutStatus.smallMargin = true ;
                            }
                        }
                    }
                }

            }
        },

        decideManualFooterLayout:function () {
            var footerRealEstate = this.gs.getEm(this.footerDiv.height());

            if (footerRealEstate >= FOOTER_LOWER_BOUND && footerRealEstate < FOOTER_UPPER_BOUND) {
                this.footerLayout = FOOTER;
                return
            }

        },

        decideManualMarginLayout:function () {
            var marginRealEstate = this.gs.getEm(this.marginDiv.width());

            if (marginRealEstate < SMALL_MARGIN_MANUAL_LOWER_BOUND) {
                this.marginLayout = OVERLAY; //for now still no_margin
                //penalty for displaying overlay
                this.layoutStatus.overlay = true ;
            } else {
                if (marginRealEstate >= SMALL_MARGIN_UPPER_BOUND && marginRealEstate < LARGE_MARGIN_UPPER_BOUND) {
                    this.marginLayout = LARGE_MARGIN;
                } else {
                    if (marginRealEstate >= LARGE_MARGIN_UPPER_BOUND) {
                        this.marginLayout = HUGE_MARGIN;
                    } else {
                        if (marginRealEstate >= SMALL_MARGIN_MANUAL_LOWER_BOUND && marginRealEstate < SMALL_MARGIN_UPPER_BOUND) {
                            this.marginLayout = SMALL_MARGIN;

                        }
                    }
                }
            }


        },


        parseSetCfg:function (setXml) {
            var pathObject = {};
            jQuery(setXml).find('asset').each(function (index, asset) {
                var relativeSrc = jQuery(asset).attr('src') || jQuery(asset).attr('path') ;
                pathObject[ jQuery(asset).attr('name') ] = AbsPath( relativeSrc ) ;
            });

            this.assetsPath = pathObject;
            this.setType = jQuery(setXml).attr('type');
        },

        placeComponents:function () {
            //added for samsung demo due to bugs in footer
            //todo remove immediately after demo
//            this.footerLayout = NO_FOOTER;

            switch (this.footerLayout) {
                case FULL_FOOTER:
                    var footer = jQuery('<img/>');
                    jQuery(footer).attr('src', this.assetsPath[FULL_FOOTER]);
                    jQuery(footer).css( this.cfg.direction == 'ltr' ? 'left' : 'right', (this.footerDiv.width() - FOOTER_WIDTH  ) / 2);
                    jQuery(footer).addClass(FULL_FOOTER);
                    this.footerDiv.append(footer);
                    break;

                case FOOTER:
                    var footer = jQuery('<img/>');
                    jQuery(footer).attr('src', this.assetsPath[FOOTER]);
                    jQuery(footer).addClass(FOOTER);
                    this.footerDiv.append(footer);
                    break;
            }

            switch (this.marginLayout) {
                case LARGE_MARGIN:
                    var margin = jQuery('<img/>');
                    jQuery(margin).attr('src', this.assetsPath['margin']);
                    // horizontal align margin to the right of the screen
                    // vartical align margin to the
                    if (this.marginDiv.height() >= MARGIN_HEIGHT) {
                        jQuery(margin).css('top', 0);
                    } else {
                        jQuery(margin).css('top', (this.marginDiv.height() - MARGIN_HEIGHT ) / 2);
                    }

                    jQuery(margin).addClass(LARGE_MARGIN);

                    this.marginDiv.append(margin);
                    break;

                case SMALL_MARGIN:
                    var margin = jQuery('<img/>');
                    jQuery(margin).attr('src', this.assetsPath['margin']);
                    if (this.marginDiv.height() >= MARGIN_HEIGHT) {
                        jQuery(margin).css('top', 0);
                    } else {
                        jQuery(margin).css('top', (this.marginDiv.height() - MARGIN_HEIGHT ) / 2);
                    }
                    //align margin to the laft of it's div
                    jQuery(margin).addClass(SMALL_MARGIN);
                    this.marginDiv.append(margin);
                    break;

                case HUGE_MARGIN:
                    var margin = jQuery('<img/>');
                    jQuery(margin).attr('src', this.assetsPath['margin']);

                    if (this.marginDiv.height() >= MARGIN_HEIGHT) {
                        jQuery(margin).css('top', 0);
                    } else {
                        jQuery(margin).css('top', (this.marginDiv.height() - MARGIN_HEIGHT ) / 2);
                    }

                    jQuery(margin).css( this.cfg.direction == 'ltr' ? 'left' : 'right', (this.marginDiv.width() - MARGIN_WIDTH ) / 2);
                    //align margin to the laft of it's div
                    jQuery(margin).addClass(HUGE_MARGIN);
                    this.marginDiv.append(margin);
                    break;

            }
        },

        placeAssetInsideLayout:function () {

        },
        
        getLayoutStatus: function() {
            return this.layoutStatus ;
        }


    })

    t2k.util.creativeWrapperConsts = {


    };
})();









////////////////////////////////////////
// SRC End --> t2k/util/managers/CreativeLayoutManager.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/GridService.js
////////////////////////////////////////
/**
 * Class t2k.util.grid
 */
(function() {
    t2k.util.GridService = Object.subClass({
        ctor:function (view) {
            this.view = view;
            this.cfg = copy(view.cfg, t2k.util.gridConfig);
            this.em = this._px(this.cfg.em);

            this._calcScale();
            this._temp();
        },

        /**
         * Method: Define
         *
         * define the measures of the passed section
         *
         * Parameters:
         *  type - {String} section type like taskArea or sharedArea.
         *
         * Returns:
         *  {Object} returns object with width and height properties.
         */
        define:function (type) {
            return this[jQuery.camelCase('define-' + type)]();
        },

        /**
         * Method: defineTasksArea
         *
         * define the measures of task area section
         *
         * Returns:
         *  {Object} returns object with width and height properties.
         */
        defineTasksArea:function () {
            var taskAreaWidth = this._getTasksWidth(),
                taskAreaHeight = this._getTasksHeight(),
                gutterWidth = this._px('1em'),
                container = this.view._content,
                tasks = this.view._content_inner,
                wrapper = container.find('.sequence_content_wrapper'),
                marginLeft = container.find('.sequence_margin_left'),
                marginRight = container.find('.sequence_margin_right'),
                taskWidth, taskHeight, marginLeftWidth, marginRightWidth,
                type = ((this.cfg.type == 'shared' && this.cfg.isCollapse) || this.cfg.isHorizontal) ? 'simple' : this.cfg.type;
            if (taskAreaWidth < 800) {
                type = 'shared'; // if we're less than 800px, go to shared mode
            }

            //in case we are in shared that is very big and the task area gets really small we want to reduce margins to be as  little as possible
            if (taskAreaWidth < 518) {
                var gutterLeftWidth = this._px('1em');
            } else {
                var gutterLeftWidth = this._px('1em') * (type == 'shared' && !this.cfg.isCollapse ? 2 : 1);
            }

            //calc initial margin sizes if defined
            //in case we are in shared that is very big and the task area gets really small we want to reduce margins to be as  little as possible
            if (taskAreaWidth < 518 && type == 'shared' && !this.cfg.isCollapse) {
                marginLeftWidth = this._px(this.cfg[type].tasksArea.margins.left.min);
                marginRightWidth = this._px(this.cfg[type].tasksArea.margins.right.optimal);
            } else {
                marginLeftWidth = this._px(this.cfg[type].tasksArea.margins.left.optimal);
                marginRightWidth = this._px(this.cfg[type].tasksArea.margins.right.optimal);
            }
            
            var totalMargins = marginLeftWidth + marginRightWidth + this.orphanX ;
            
            // simple sequence tasks should get the full grid columns width
            if( !this.cfg.isShared ) {
            	taskAreaWidth += totalMargins ;
            }

            //calc tasks width / height
            taskWidth = taskAreaWidth - totalMargins ;
            //remove left margin if no available space
            if (taskWidth > taskAreaWidth - totalMargins) marginLeftWidth = this._px(this.cfg[this.cfg.type]['tasksArea'].margins.left.min);

            //give the margin right all the leftovers
            marginRightWidth = taskAreaWidth - taskWidth - marginLeftWidth;

            //set container (scroll)
            if(this.cfg.hasMargin){
                container.width(this.cfg.width).height(taskAreaHeight);
            }else{
                container.width(taskAreaWidth).height(taskAreaHeight);
            }

            //set wrapper (what holds the content and margins)
            wrapper.width(taskAreaWidth).css('min-height', taskAreaHeight + 'px');

            //set task area
            tasks.width(taskWidth).css('min-height', taskAreaHeight + 'px');

            //set margins
            //in case we are in shared that is very big and the task area gets really small we want to reduce margins to be as  little as possible 
            if (taskAreaWidth < 518 && type == 'shared' && !this.cfg.isCollapse) {
                marginLeft.width(marginLeftWidth - gutterLeftWidth).css('margin-right', gutterLeftWidth);
                marginRight.width(marginRightWidth - gutterWidth).css('margin-left', gutterWidth);
            } else {
                marginLeft.width(marginLeftWidth - gutterLeftWidth).css('margin-right', gutterLeftWidth);
                marginRight.width(marginRightWidth - gutterWidth).css('margin-left', gutterWidth);
            }
            return this.measures = {
                width:taskWidth,
                height:taskAreaHeight
            };
        },

        /**
         * Method: defineSharedArea
         *
         * define the measures of shared area section
         *
         * Parameters:
         *  options - {Object} options to override default behavior.
         *
         * Returns:
         *  {Object} returns object with width and height properties.
         */
        defineSharedArea:function () {
            var sharedWidth = this._getSharedWidth(),
                sharedHeight = this._getSharedHeight(),
                shared = this.view._shared;

            shared.outerWidth(sharedWidth);
            shared.outerHeight(sharedHeight);

            return {
                width:sharedWidth,
                height:sharedHeight
            };
        },

        defineCreativeMargin:function () {
            var CWWidth = this._getSharedWidth(),
                CWHeight = this._getSharedHeight(),
                cw = this.view._creative_margin;

            cw.width(CWWidth);
            cw.height(CWHeight);

            return {
                width:CWWidth,
                height:CWHeight
            };
        },

        /**
         * Method: definePositionItem
         *
         * define the measures and position for an absolute position object
         *
         * Parameters: to be defined
         *
         */
        definePositionItem:function (el, x, y, w, h) {
            return el.css({
                'position':'absolute',
                'top':(y * this.em) + 'px',
                'left':(x * this.em) + 'px',
                'width':w,
                'height':h
            }).appendTo(this.view._body);
        },

        getEm:function (width) {
            return width / this.em;
        },

        _em:function (width) {
            return this.getEm(width);
        },

        _calcScale:function () {
            this.scaleX = Math.floor(this.cfg.width / this.em);
            this.scaleY = Math.floor(this.cfg.height / this.em);

            this.orphanX = this.cfg.width - this.scaleX * this.em;
            this.orphanY = this.cfg.height - this.scaleY * this.em;

            this.gridX = this.scaleX * this.em;
            this.gridY = this.scaleY * this.em;
        },

        _px:function (width) {
            var unit = width.replace(/^\d+/i, ''),
                width = parseInt(width);

            switch (unit) {
                case '%':
                    return Math.floor(((this.scaleX * width) / 100)) * this.em;
                    break;

                case 'em':
                    return width * this.em;
                    break;

                case 'px':
                    return width;
                    break;
            }
        },

        _getSharedWidth:function () {
        	////////////////////////////////////////////
        	// reduce collapse as much as possible
        	////////////////////////////////////////////
            var reduced ;
            reduced = this.cfg.isCollapse ? this.cfg.sharedContentDiffWidth : 0;
            reduced = reduced > 0 ? reduced : 0 ;
            ////////////////////////////////////////////
            return this.cfg.isVertical ? this._px((100 - this.cfg.ratio) + '%') - reduced : this.cfg.width;
        },

        _getSharedHeight:function () {
        	////////////////////////////////////////////
        	// reduce collapse as much as possible
        	////////////////////////////////////////////
            var reduced ;
            reduced = this.cfg.isCollapse ? this.cfg.sharedContentDiffHeight : 0;
            reduced = reduced > 0 ? reduced : 0 ;
            ////////////////////////////////////////////
            return this.cfg.isVertical ? this.cfg.height : this.cfg.height * (100 - this.cfg.ratio) / 100 - reduced;
        },

        _getTasksWidth:function () {
            var width;

            if(this.cfg.isVertical){
                if(this.cfg.isShared && this.cfg.isCollapse){
                    width = this.cfg.width;
                }else{
                    if(this.cfg.isShared){
                        width = this.cfg.width - this._getSharedWidth();
                    }else{
                        if(this.cfg.hasMargin){
                            var creativeTaskWidth = this._px(this.cfg.creativeTasksWidth.toString() + 'em');
                            if(this.cfg.width > creativeTaskWidth ){
                                width = creativeTaskWidth
                            }else{
                                width = this.cfg.width;
                            }
                        }else{
                            width = this.cfg.width;
                        }
                    }
                }
            }else{
                width = this.cfg.width;
            }


           /* if (this.cfg.isVertical) {
                if (this.cfg.isShared && this.cfg.isCollapse) width = this.cfg.width;
                else if (this.cfg.isShared) width = this.cfg.width - this._getSharedWidth();
                else width = this.cfg.width;
            }
            else width = this.cfg.width;*/

            return width;
        },

        _getTasksHeight:function () {
            var height;

            if (this.cfg.isVertical || this.cfg.isCollapse) height = this.cfg.height;
            else height = this.cfg.height * this.cfg.ratio / 100;

            return height;
        },

        _temp:function () {
            /*
             var thi$ = this;

             parent.jQuery('#vertical_arch').click(function () {
             thi$.drawGrid('vertical_arch', this.checked);
             });

             parent.jQuery('#horizontal_arch').click(function () {
             thi$.drawGrid('horizontal_arch', this.checked);
             });

             parent.jQuery('#vertical_essential').click(function () {
             thi$.drawGrid('vertical_essential', this.checked);
             });

             parent.jQuery('#horizontal_essential').click(function () {
             thi$.drawGrid('horizontal_essential', this.checked);
             });
             */
        },

        drawGrid:function (type, show) {
            var zIndex = this.drawZIndex = this.drawZIndex ? ++this.drawZIndex : 10000,
                el, i;

            switch (type) {
                case 'vertical_arch':
                    if (show) {
                        for (i = 4; i <= this.scaleX; i += 4) {
                            el = Perf.create("div").addClass('grid_service_vertical_arch').css({'background':'#FF5500','z-index':zIndex});

                            this.definePositionItem(el, i, 0, '1px', '1000%');
                        }
                    }
                    else jQuery('div.grid_service_vertical_arch').hide();
                    break;

                case 'horizontal_arch':
                    if (show) {
                        for (i = 4; i <= this.scaleY; i += 4) {
                            el = Perf.create("div").addClass('grid_service_horizontal_arch').css({'background':'#FF5500','z-index':zIndex});

                            this.definePositionItem(el, 0, i, '1000%', '1px');
                        }
                    }
                    else jQuery('div.grid_service_horizontal_arch').hide();
                    break;

                case 'vertical_essential':
                    if (show) {
                        for (i = 1; i <= this.scaleX; i++) {
                            el = Perf.create("div").addClass('grid_service_vertical_essential').css({'background':'#002AFF','z-index':zIndex});

                            this.definePositionItem(el, i, 0, '1px', '100%');
                        }
                    }
                    else jQuery('div.grid_service_vertical_essential').hide();
                    break;

                case 'horizontal_essential':
                    if (show) {
                        for (i = 1; i <= this.scaleY; i++) {
                            el = Perf.create("div").addClass('grid_service_horizontal_essential').css({'background':'#002AFF','z-index':zIndex});

                            this.definePositionItem(el, 0, i, '100%', '1px');
                        }
                    }
                    else jQuery('div.grid_service_horizontal_essential').hide();
                    break;
            }
        }
    });

    t2k.util.gridConfig = {
        em:'14px',

        simple:{
            tasksArea:{
                tasksMax:'59em',

                margins:{
                    left:{
                        min:'1em',
                        optimal:'2em'
                    },

                    right:{
                        min:'2em',
                        optimal:'3em'
                    }
                }
            }
        },

        shared:{
            tasksArea:{
                tasksMax:'59em',

                margins:{
                    left:{
                        min:'1em',
                        optimal:'2em'

                    },

                    right:{
                        min:'2em',
                        optimal:'3em'
                    }
                }
            }
        }
    };

    /**
     * Private:
     * Function: getScrollOffset
     *
     * returns scroll width.
     *
     * Parameters:
     * el - {HTMLElement} element to check it scroll width.
     * width - {Int} originat element width without scroll.
     */
    function getScrollWidth(el, width) {
        var div = el.prepend('<div class="scroll-tester" />').find('.scroll-tester'),
            width = width - div.width();

        div.remove();

        return width;
    }

    /**
     * Private:
     * Function: getRatio
     *
     * returns adjusted tasks ratio.
     *
     * Parameters:
     * cfg - {Object} config object.
     */
    function getRatio(cfg) {
        return cfg.isCollapse ? 100 : cfg.ratio;
    }

    /**
     * Private:
     * Function: getTasksWidth
     *
     * returns adjusted tasks ratio.
     *
     * Parameters:
     * cfg - {Object} config object.
     */
    function getTasksWidth(cfg) {
        var ratio = getRatio(cfg),
            ratioWidth = this._px(ratio + '%'),
            maxWidth = this._px(this.cfg[this.cfg.type].tasksArea.tasksMax);

        return Math.min(ratioWidth, maxWidth);
    }
})();

var gridService = t2k.util.GridService;
var GridService = t2k.util.GridService;
////////////////////////////////////////
// SRC End --> t2k/util/GridService.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/DNDManager.js
////////////////////////////////////////
/**
 * @class t2k.util.DNDManager	
 */
	t2k.util.DNDManager = function(){
		
			/** a hash to hold all draggable components by DOM id (key = id, value = componentObject)*/
			this.draggables = {};
			
			/** a hash to hold all droppable components by DOM id (key = id, value = componentObject)*/
			this.droppables = {};
			
			/** a hash to hold bank subAnswers*/
			this.bankItems = {};
			
			/** a hash to hold answer area subAnswers*/
			this.answerAreaItems = {};

			/* a hash to hold all subAnswers */
			this.allItems = {};

			/** an array of elements that needs to be removed*/
			this.recycleBin = [];
			
			/** a reference to the draggable component is now being dragged. If null- no drag takes place now*/
			this.inDragObject = null;

            /** current subAnswer that draggable element is over it */
            this.overObject = null;

            /** ready to drop {Boolean */
			this.readyToDropFlag = false;

            /** after drop flag */
			this.afterDropFlag = false;

            /** dragged element is over bank */
            this.isOverBank = false;

            /** Draggable is being animated. */
            this.isAnimated = false;
	};
	
	t2k.util.DNDManager.prototype = {
		init : function (){
			
				
		},
		/**
		 * reset
		 * do reset to DNDManager when a new task is inited 
		 */
		reset : function(){
			delete this.draggables;
			this.draggables = {};

			delete this.droppables;
			this.droppables = {};

			delete this.bankItems;
			this.bankItems = {};

			delete this.answerAreaItems;
			this.answerAreaItems = {};

			delete this.allItems;
			this.allItems = {};

            delete this.recycleBin;
			this.recycleBin = [];

			delete this.inDragObject;
            delete this.overObject;
			this.readyToDropFlag = false;
            this.afterDropFlag = false;
            this.isOverBank = false;
		},

		removeSubAnswer: function(elementId, removeFromAllList) {
			dndManager.removeDraggable(elementId);
			dndManager.removeDroppable(elementId);
			dndManager.removeAnswerAreaItem(elementId);
			dndManager.removeBankItem(elementId);

			if(removeFromAllList) {
				dndManager.removeItem(elementId);
			}
		},

		cloneObject:function (clonedObject) {
			var tmpObj;

			tmpObj = _.cloneDeep(clonedObject);
			tmpObj.view = _.cloneDeep(clonedObject.view);
			tmpObj.view.markAsDroppable = _.cloneDeep(clonedObject.view.markAsDroppable);
			tmpObj.view.markAsNotDroppable = _.cloneDeep(clonedObject.view.markAsNotDroppable);

			tmpObj.view._view = jQuery(clonedObject.view._view).clone();
			tmpObj.cfg.data = jQuery(clonedObject.cfg.data).clone().get(0);

			if(clonedObject.cfg.ownerObject) {
				tmpObj.cfg.ownerObject = this.cloneObject(clonedObject.cfg.ownerObject);
				tmpObj.cfg.ownerObject.dispatchEvent = _.cloneDeep(clonedObject.cfg.ownerObject.dispatchEvent);
				tmpObj.cfg.ownerObject.removeChild = _.cloneDeep(clonedObject.cfg.ownerObject.removeChild);
			}

			if (clonedObject.children && clonedObject.children.length) {
				tmpObj.children = [];
				tmpObj.children[0] = _.cloneDeep(clonedObject.children[0]);
				tmpObj.children[0].view = _.cloneDeep(clonedObject.children[0].view);
				tmpObj.children[0].view._view = jQuery(clonedObject.children[0].view._view).clone();
				tmpObj.children[0].cfg.data = jQuery(clonedObject.children[0].cfg.data).clone().get(0);
			}
			return tmpObj;
		},

		/**
		 * addItem
		 * add a component object (subanswer) to all Items hash
		 * @param elementId
		 * @param componentObject
		 */
		addItem : function(elementId, componentObject){
			if(this.allItems[elementId]) {
				return;
			}

			this.allItems[elementId] = this.cloneObject(componentObject);
		},

		/**
		 * addBankItem
		 * add a component object (subanswer) to bankItems hash
		 * @param elementId
		 * @param componentObject
		 */
		addBankItem : function(elementId, componentObject){
			this.bankItems[elementId] = componentObject;
		},
		/**
		 * addAnswerAreaItem
		 * add a component object (subanswer) to answerAreaItems hash
		 * @param elementId
		 * @param componentObject
		 */
		addAnswerAreaItem : function(elementId, componentObject){
			this.answerAreaItems[elementId] = componentObject;
		},

		/**
		 * removeItem
		 * remove a component object from allItems hash
		 * @param elementId
		 */
		removeItem : function(elementId){
			delete this.allItems[elementId];
		},

		/**
		 * removeBankItem
		 * remove a component object from bankItems hash
		 * @param elementId
		 */
		removeBankItem : function(elementId){			  
			delete this.bankItems[elementId];
		},
		/**
		 * removeAnswerAreaItem
		 * remove a component object from answerAreaItems hash
		 * @param elementId
		 */
		removeAnswerAreaItem : function(elementId){
			delete this.answerAreaItems[elementId];
		},

		/**
		 * get subAnswer with wanted answerId
		 * @param answerId
		 */
		getItem : function(answerId){
			for (var elemId in this.allItems){
				if(this.allItems[elemId].answerId == answerId){
					return this.allItems[elemId];
				}
			}
		},

		/**
		 * get subAnswer with dndContainer = 'bank' and wanted answerId
		 * @param answerId
		 */
		getBankItem : function(answerId){
			for (var elemId in this.bankItems){
        		if(this.bankItems[elemId].initAnswerId == answerId){
        			return this.bankItems[elemId];
        		}
        	}
		},
        /**
		 * get subAnswer from answerAreaItems Array and initAnswerId == answerId
		 * @param answerId
		 */
		getAnswerAreaItemByInitAnswerId : function(answerId){
			for (var elemId in this.answerAreaItems){
        		if(this.answerAreaItems[elemId].initAnswerId == answerId){
        			return this.answerAreaItems[elemId];
        		}
        	}
		},
        /**
		 * get subAnswer from answerAreaItems Array and AnswerId == answerId
		 * @param answerId
		 */
		getAnswerAreaItemByAnswerId : function(answerId){
			for (var elemId in this.answerAreaItems){
        		if(this.answerAreaItems[elemId].initAnswerId == answerId){
        			return this.answerAreaItems[elemId];
        		}
        	}
		},
		/**
		 * addDraggable
		 * add a component object (subanswer) to draggables hash
		 * @param elementId
		 * @param componentObject
		 */
		addDraggable : function(elementId, componentObject){
			this.draggables[elementId] = componentObject;
		},
		/**
		 * addDroppable
		 * add a component object (subanswer) to droppables hash
		 * @param elementId
		 * @param componentObject
		 */
		addDroppable : function(elementId, componentObject){
			this.droppables[elementId] = componentObject;
		},
		/**
		 * removeDraggable
		 * remove a component object from draggables hash
		 * @param elementId
		 */
		removeDraggable : function(elementId){			  
			delete this.draggables[elementId];
		},
		/**
		 * removeDroppable
		 * remove a component object from droppables hash
		 * @param elementId
		 */
		removeDroppable : function(elementId){
			delete this.droppables[elementId];
		},			
		/**
		 * canDrag
		 * says if the object can be dragged
		 * @param elementId
		 * @returns {Boolean}
		 */
		canDrag : function(elementId) {
            return !this.inDragObject && !!this.draggables[elementId] && !this.isAnimated;
		},
		/**
		 * canDrop 
		 * says if the object can be dropped
		 * @param elementId
		 * @returns {Boolean}
		 */
		canDrop : function(elementId) {
            return !!this.inDragObject && !!this.droppables[elementId];
		},
		/**
		 * isInDragMode
		 * is drag happened now?
		 * @returns {Boolean}
		 */
		isInDragMode:function () {

			//check for critical error - dragged element exists but there is no value in this.inDragObject
			var draggElement = document.getElementsByClassName(this.draggElementClass);
			if (draggElement.length && !this.inDragObject) {
				var draggAnswerId = draggElement[0].getAttribute('answerid');
				if (draggAnswerId) {
					var sourceItem = this.getItem(draggAnswerId);
					if(sourceItem) {
						 this.inDragObject = this.cloneObject(sourceItem);
					}
				}
			}

			return !!this.inDragObject;
		},
		/**
		 * set inDragObject by parameter elementId
		 * @param elementId
		 */
		startDrag : function(elementId){
            if (this.canDrag(elementId)) {
                this.inDragObject = this.cloneObject(this.draggables[elementId]);
            }
		},
		/**
		 * get/set readyToDropFlag
		 * @param flag
		 * @returns {Boolean} flag
		 */
		readyToDrop : function(flag){
			if (flag === true || flag === false) {
				this.readyToDropFlag = flag;
			}

			return this.readyToDropFlag;
		},
        /**
         * get/set afterDropFlag
         * @param flag
         * @returns {Boolean} flag
         */
        afterDrop : function(flag){
            if (flag === true || flag === false) {
                this.afterDropFlag = flag;
            }

            if (flag === true) {
                this.emptyRecycleBin();
            }

            return this.afterDropFlag;
        },
        /**
         * get/set isAnimated
         * @param flag
         * @returns {Boolean} flag
         */
        animated : function(flag){
            if (flag === true || flag === false) {
                this.isAnimated = flag;
            }
            return this.isAnimated;
        },

        /**
         * insertIntoRecycleBin
         * @param elem
         */
        insertIntoRecycleBin : function(elem) {
            this.recycleBin.push(elem);
            elem.hide();
        },

        /**
         * emptyRecycleBin
         */
        emptyRecycleBin : function() {
            jQuery(this.recycleBin).each(function(){
               this.remove();
            });

            this.recycleBin = [];
        }

	};

	//initializations
	var dndManager = new t2k.util.DNDManager();
////////////////////////////////////////
// SRC End --> t2k/util/DNDManager.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/DOMUtils.js
////////////////////////////////////////
/**
 * @class t2k.util.DNDManager
 */
t2k.util.DOMUtils = function () {
    this.parentByElem = {};
    this.lastScrollTopOffsetByElem = {};
};

t2k.util.DOMUtils.prototype = {


    registerToScroll:function (jqueryElem, ref) {
        var scrollableParent = this.parentByElem[jqueryElem.attr('id')];

        if (!!scrollableParent) {
            jQuery(scrollableParent).bind('scroll', {thi$:this, ref:ref, elem:jqueryElem}, this.scrollHandler);
            this.lastScrollTopOffsetByElem[jqueryElem] = scrollableParent.scrollTop();
        }

    },

    unRegisterToScroll:function (jqueryElem, ref) {
        var scrollableParent = this.parentByElem[jqueryElem.attr('id')];
        jQuery(scrollableParent).unbind('scroll', this.scrollHandler);
        delete this.parentByElem[jqueryElem];
    },

    reparentOnceAndRepositionElement:function (jQueryElem, newOffset) {
        var scrollEnabledParent = jQueryElem.parents('.scroll_enabled');
        if (!!!this.parentByElem[jQueryElem.attr('id')]) {
            this.parentByElem[jQueryElem.attr('id')] = scrollEnabledParent;
        }
        //jQueryElem.parent().append(jQuery('<div/>').height(jQueryElem.height()).width(jQueryElem.width()))
        if (jQueryElem.parent().attr('id') != scrollEnabledParent.attr('id')) {
            jQueryElem.appendTo(scrollEnabledParent);
        }

        jQueryElem.offset(newOffset);
    },

    /**
     * horizontalFitToViewport
     * fit keyboard horizontal position according to the viewport width
     * @param jQueryElem
     */
    horizontalFitToViewport:function (jQueryElem) {

        var viewport_width = Perf.select('.player').width(), elem_width = jQueryElem.outerWidth(true),
            elem_left_offset = jQueryElem.offset().left;

        // check jQueryElem's offset vs. viewport
        // left offset
        if (elem_left_offset < 0) {
            jQueryElem.css('left', 0);
        }

        //right offset
        if (elem_left_offset + elem_width > viewport_width) { // move [left] to viewportWidth - jQueryElem.width()
            jQueryElem.css('left', (viewport_width - elem_width));
        }

    },

    /**
     * verticalFitToViewport_scrollDown
     * fit keyboard vertical position according to the viewport height
     * @param jQueryElem
     */
    verticalFitToViewport_scrollDown:function (jQueryElem, ownerEl) {

        var viewport_height = Perf.select('.player').height(),
            ownerTop = ownerEl.offset().top + ownerEl.outerHeight(true);

        // check if we need scrolling for owner element
        if (ownerTop > viewport_height){
            var scrollEnabledParent = jQuery('.scroll_enabled'),
                scrollCheck = (ownerEl.offset().top - ownerEl.outerHeight(true));

            scrollEnabledParent.get(0).scrollTop += scrollCheck; // scroll to owner element Height
	        scrollEnabledParent = null;
        }

        var elem_top = jQueryElem.offset().top,
            elem_height = jQueryElem.outerHeight(true);

        // check if we need up the element
        if (elem_top + elem_height > viewport_height) {
            jQueryElem.show(true);
	        var paddingAddition = (jQueryElem.css('padding-top').px2int() * 2);
            jQueryElem.css('top', jQueryElem.offset().top - elem_height - ownerEl.height() - paddingAddition);
        }

	    //check if we need down the element
	    if (elem_top < 0) {
		    jQueryElem.show(true);
		    jQueryElem.css('top', Math.abs(jQueryElem.offset().top) + elem_height + ownerEl.height());
	    }
    },

    /**
     * centerBlowUp
     * fit keyboard vertical position according to the viewport height
     * @param jQueryElem
     */
    centerBlowUp:function (jQueryElem) {

        var viewport_height = Perf.select('.player').height(), viewport_width = Perf.select('.player').width(), elem_top = jQueryElem.offset().top,
            elem_height = jQueryElem.outerHeight(true), elem_width = jQueryElem.outerWidth(true);

        if (elem_top + elem_height > viewport_height) {
            var delta = elem_height - (viewport_height - elem_top);

            jQueryElem.css('top', (viewport_height - elem_height) / 2);
            jQueryElem.css('left', (viewport_width - elem_width) / 2);
        }

    },

    scrollHandler:function (event) {
        var ref = event.data.ref;
        var thi$ = event.data.thi$;
        var movingElement = event.data.elem;
        var delta = thi$.lastScrollTopOffsetByElem[movingElement] - this.scrollTop;

        thi$.lastScrollTopOffsetByElem[movingElement] = this.scrollTop;
        var offsetObj = {
            top:movingElement.offset().top + delta,
            left:movingElement.offset().left
        };

        movingElement.offset(offsetObj);
    }

};

//initializations
var domUtils = new t2k.util.DOMUtils();
////////////////////////////////////////
// SRC End --> t2k/util/DOMUtils.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/LogEventsService.js
////////////////////////////////////////
(function() {

    /**
     * Class: t2k.util.LogEventsService
     * Formats and sends log event to host
     */
    t2k.util.LogEventsService = Object.subClass({
    	ctor: function ( sendLogs ) {
			this.sendLogs = sendLogs ;
		},
		/**
		    checkData is optional only comes with CHECK_PRESSED EVENT
            check data is an object
            {
            checkValue:string,
             attempt:number
              }
		*/
		sendLoggingEvent: function(type, atomId, checkData) {
			if( this.sendLogs ) {
				var evt = new t2k.util.LogEvent(type,atomId,checkData);
//				ENV.host.onLogEvent( { data: evt.getEventXml() } );
			}
		}
    });
    
    t2k.util.LogEvent = Object.subClass({
    	ctor: function (eventType, atomId,checkData) {

            if(!!checkData){
                if(!!checkData.checkedValue){
                    this.checkedValue = checkData.checkedValue;
                }else{
                    this.checkedValue = '';
                }

                if(!!checkData.currentAttempt){
                    this.currentAttempt = checkData.currentAttempt;
                }else{
                    this.currentAttempt = -1;
                }

            }else{
                this.checkedValue = '';
                this.currentAttempt = -1;
            }

	    	this.eventType = eventType;
	    	this.eventTime = new Date().getTime();
	    	this.atomId = atomId;
	    	this.loId = ENV.loId;
		},
    	getEventXml : function() {
    		var outCheckType = checkValueMap[ this.checkedValue ] || checkValueMap.none ;
    		
    		var xml = 	'<Event><atomId>' + this.atomId + 
    					'</atomId><eventType>' + this.eventType + 
    					'</eventType><eventTime>' + this.eventTime + 
    					'</eventTime><checkedValue>' + outCheckType +
    					'</checkedValue><currentAttempt>' + this.currentAttempt +
    					'</currentAttempt><loId>' + this.loId +
    					'</loId></Event>';
    		return xml;    		
    	}
    });

    checkValueMap = {} ;

    checkValueMap.allCorrect = 						"ALL_RIGHT" ;
    checkValueMap.allIncorrect = 					"ALL_WRONG" ;
    checkValueMap.allCorrectPartIncorrect = 		"ALL_RIGHT_PART_WRONG" ;
    checkValueMap.allCorrectPartMissing = 			"ALL_RIGHT_PART_WRONG" ;
    checkValueMap.partCorrect = 					"PART_RIGHT" ;
    checkValueMap.partCorrectMoreThan80Percent = 	"PART_RIGHT" ;
    checkValueMap.partCorrectLessThan80Percent = 	"PART_WRONG" ;
    checkValueMap.partCorrectPartIncorrect = 		"PART_WRONG" ;
    checkValueMap.partCorrectPartMissing = 			"PART_WRONG" ;
    checkValueMap.misplacedSequence = 				"ALL_WRONG" ;
    
    checkValueMap.generic = 						"GENERIC" ;
    checkValueMap.none = 							"NONE" ;
    

    t2k.util.LogEventsService.CHECK_PRESSED 			= 1001; // used - v
    t2k.util.LogEventsService.CLUE_PRESSED 				= 1002; // used - v
    t2k.util.LogEventsService.AID_PRESSED				= 1003; // used - v
    t2k.util.LogEventsService.LINGUA_NAVIGATOR_PRESSED	= 1004; // 
    t2k.util.LogEventsService.TOOL_USED					= 1005; // 
    t2k.util.LogEventsService.OBJECT_WITHDRAWN			= 1006; // 
    t2k.util.LogEventsService.ATOM_START			    = 1007; // used - v
    t2k.util.LogEventsService.ATOM_END					= 1008; // used - v
    t2k.util.LogEventsService.ATOM_GRADE				= 1009; //
    t2k.util.LogEventsService.SHOW_ANSWER				= 1010; // used - v
    
})();
   

////////////////////////////////////////
// SRC End --> t2k/util/LogEventsService.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/FeedbackUtils.js
////////////////////////////////////////
(function() {
	
    t2k.util.FeedbackUtils = {} ;

    t2k.util.FeedbackUtils.FeedbackService = Object.subClass({
    	
    	ctor: function () {
		},
		
    	createMessage : function( type, icon, specificName ) {
    		if( !icon ) {

                switch (type) {
                    case t2k.util.FeedbackUtils.TYPE_ALL_CORRECT :
                        icon = t2k.util.FeedbackUtils.ICON_CORRECT;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_PART_CORRECT_PART_INCORRECT :
                        icon = t2k.util.FeedbackUtils.ICON_PART;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_PART_CORRECT :
                        icon = t2k.util.FeedbackUtils.ICON_PART;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_ALL_CORRECT_PART_INCORRECT :
                        icon = t2k.util.FeedbackUtils.ICON_PART;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_ALL_INCORRECT :
                        icon = t2k.util.FeedbackUtils.ICON_INCORRECT;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_PART_CORRECT_PART_MISSING :
                        icon = t2k.util.FeedbackUtils.ICON_PART;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_ALL_CORRECT_PART_MISSING :
                        icon = t2k.util.FeedbackUtils.ICON_PART;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_PART_CORRECT_MORE_80_PERCENT :
                        icon = t2k.util.FeedbackUtils.ICON_PART;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_PART_CORRECT_LESS_80_PERCENT :
                        icon = t2k.util.FeedbackUtils.ICON_PART;
                        break;
                    case t2k.util.FeedbackUtils.TYPE_MISPLACED_SEQUENCE :
                        icon = t2k.util.FeedbackUtils.ICON_PART;
                        break;
                }
    		}
            
    		return new t2k.util.FeedbackUtils.MessageData( type, icon, specificName ) ;    		
    	}
		
    });
    
    
    t2k.util.FeedbackUtils.MessageData = Object.subClass({
    	
    	ctor: function ( type, icon, specificName ) {
    		this.data = { type: type, icon: icon, name: specificName } ;
		},
		
    	getData : function() {
    		return this.data ;    		
    	}
		
    });
    
    
    t2k.util.FeedbackUtils.ICON_CORRECT 	= 'correct' ;
    t2k.util.FeedbackUtils.ICON_INCORRECT 	= 'incorrect' ;
    t2k.util.FeedbackUtils.ICON_PART	 	= 'part' ;

    t2k.util.FeedbackUtils.TYPE_ALL_CORRECT 					= 'allCorrect' ;
    t2k.util.FeedbackUtils.TYPE_ALL_INCORRECT 					= 'allIncorrect' ;
    t2k.util.FeedbackUtils.TYPE_ALL_CORRECT_PART_INCORRECT 		= 'allCorrectPartIncorrect' ;
    t2k.util.FeedbackUtils.TYPE_ALL_CORRECT_PART_MISSING 		= 'allCorrectPartMissing' ;

    t2k.util.FeedbackUtils.TYPE_PART_CORRECT 					= 'partCorrect' ;

    t2k.util.FeedbackUtils.TYPE_PART_CORRECT_MORE_80_PERCENT	= 'partCorrectMoreThan80Percent' ;
    t2k.util.FeedbackUtils.TYPE_PART_CORRECT_LESS_80_PERCENT	= 'partCorrectLessThan80Percent' ;

    t2k.util.FeedbackUtils.TYPE_PART_CORRECT_PART_INCORRECT 	= 'partCorrectPartIncorrect' ;
    t2k.util.FeedbackUtils.TYPE_PART_CORRECT_PART_MISSING 	    = 'partCorrectPartMissing' ;

    t2k.util.FeedbackUtils.TYPE_MISPLACED_SEQUENCE 	            = 'misplacedSequence' ;
    
    FeedbackService = new t2k.util.FeedbackUtils.FeedbackService() ;
    
})();
////////////////////////////////////////
// SRC End --> t2k/util/FeedbackUtils.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/AssessmentENV.js
////////////////////////////////////////
(function() {

	t2k.util.AssessmentENV = {
        
		setModes: function( flag, mode ) {
			AssessmentENV.assessmentMode = mode ;
        	AssessmentENV.isAssessmentMode = flag ;
        	
        	AssessmentENV.isAssessmentModeTest = 		mode == ASSESSMENT_MODE_TEST ;
        	AssessmentENV.isAssessmentModeReadOnly = 	mode == ASSESSMENT_MODE_READ_ONLY ;
        	AssessmentENV.isAssessmentModeReview = 		mode == ASSESSMENT_MODE_REVIEWED ;
        	
        	AssessmentENV.isNotAssessmentModeTest = 	flag && mode != ASSESSMENT_MODE_TEST ;
        	AssessmentENV.isNotAssessmentModeReadOnly = flag && mode != ASSESSMENT_MODE_READ_ONLY ;
        	AssessmentENV.isNotAssessmentModeReview = 	flag && mode != ASSESSMENT_MODE_REVIEWED ;
        },
        
        assessmentMode:null,
        
		isAssessmentMode: false,
		
		isAssessmentModeTest: false,
		isAssessmentModeReadOnly: false,
		isAssessmentModeReview: false,
		
		isNotAssessmentModeTest: false,
		isNotAssessmentModeReadOnly: false,
		isNotAssessmentModeReview: false

	};

	var ASSESSMENT_MODE_TEST = 'ASSESSMENT_MODE_TEST' ;
	var ASSESSMENT_MODE_READ_ONLY = 'ASSESSMENT_MODE_READ_ONLY' ;
	var ASSESSMENT_MODE_REVIEWED = 'REVIEWED' ;
})();

var AssessmentENV = t2k.util.AssessmentENV ;
////////////////////////////////////////
// SRC End --> t2k/util/AssessmentENV.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/StateUtil.js
////////////////////////////////////////
(function() {
	
	t2k.util.StateUtil = function() {
		
		this.reset() ;
		
	};

	t2k.util.StateUtil.prototype = {
			
			reset: function() {
				
				this.stateCallbacks = {} ;
				this.rootObject = null ;
				this.stateXML = null ;
				this.callbacksTotal = 0 ;
				this.callbacksDone = 0 ;
				this.collectCallback = null ;
				this.isCollecting = false ;
				
			},
			
			// called to get state from root element, both sync/async
			collectState: function( rootObject, callback ) {
				
				this.reset() ;
				
				// save state collecting params
				this.rootObject = rootObject ;
				this.collectCallback = callback ;
				
				// flag on for collecting
				this.isCollecting = true ;
				
				// start the recursive getState
				//get state with place holders dummies elements
				var rootState = this.rootObject.getState() ;
				
				// save copy on instance (single)
				this.stateXML = rootState ;
				
				// in case no async requests
				if( this.callbacksTotal == 0 ) {
					
					this.reset() ;
					
					// call collecting done callback
					callback( rootState ) ;
					
				}
			},
			
			// get async object with callback and dummy xml tag
			// (keeping most system sync )
			getStateCallback: function( objectKey ) {
				
				var utilCallback = null ;
				
				// generate unique id to register the request
				var uniqueID = objectKey + '_' + ( new Date() ).getTime() ;
				
				// create dummy tag with unique name
				var $dummyTag = $( "<" + uniqueID + "/>" ) ;
				
				// many times getState is requested without state collection request
				// in case state collecting started by this util
				if( this.isCollecting ) {
					
					var thi$ = this ;
					
					// generate callback,
					// must called with state as parameter
					utilCallback = function( finalState ) {
						
						// rout to util handler with id and final state
						thi$.stateCallbackHandler( uniqueID, finalState ) ;
						
					} ;
					
					// register request in collection 
					this.stateCallbacks[ uniqueID ] = {
						callback: utilCallback,
						state: null
					} ;
					
					// increment total
					this.callbacksTotal++ ;
					
				} else {
					
					console.warn( "asking for state callback when not collecting" ) ;
					
				}
				
				// return request data
				return {
					callback: utilCallback,
					dummyTag: $dummyTag
				} ;
				
			},
			
			// handles callbacks registered by async state requests
			stateCallbackHandler: function( uniqueID, state ) {

				if(!this.stateCallbacks[ uniqueID ]) {
					return;
				}
				
				// increment done
				this.callbacksDone++ ;
				
				// save final state to registered object
				this.stateCallbacks[ uniqueID ].state = state ;
				
				// when all done
				if( this.callbacksDone == this.callbacksTotal ) {

					// do stuff on done 
					this.onAllStatesDone() ;
					
				}
				
			},
			
			// handle states when collecting done
			onAllStatesDone: function() {
				
				var thi$ = this ;
				
				// loop on all async requests
				$.each( this.stateCallbacks, function( key, object ) {
					
					// find the matching dummy tag
					var $dummyTag = thi$.stateXML.find( key ) ;
					
					// insert the final data at the same place
					$( object.state ).insertAfter( $dummyTag ) ;

					// remove dummy, and actually replace dummy with final
					$dummyTag.remove() ;
					
				} ) ;
				
				// save objects for resetting
				var doneCallback = this.collectCallback ;
				var completeState = this.stateXML ;
				
				// reset, keep this clean from references
				this.reset() ;
				
				// call done with complete state
				doneCallback( completeState ) ;
				
			},
			
	};

})();

var StateUtil = new t2k.util.StateUtil() ;

////////////////////////////////////////
// SRC End --> t2k/util/StateUtil.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/Sound.js
////////////////////////////////////////

/**
 * Class t2k.util.Beep
 */
(function() {

    t2k.util.sound = Object.subClass({
    	
    	beepPath: "assets/audio/beep.mp3",
    	
        /**
         * ctor
         * create beep audio element
         */
        create : function () {

            this.beepElement = jQuery('<audio id="beep" />').attr('src', this.beepPath);
            Perf.select('body').append(this.beepElement);
        },

        /**
         * beep..
         */
        beep : function(){
            try {

                var audio = document.createElement("audio");
                audio.src = this.beepPath ;
                audio.play();

            } catch(e){};
        }



    });

})();

// single tone
var SOUND = new t2k.util.sound();
////////////////////////////////////////
// SRC End --> t2k/util/Sound.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/Services.js
////////////////////////////////////////

/**
 * Class t2k.util.services
 */
(function() {

    t2k.util.services = Object.subClass({
        
        /**
         * ctor
         */
        ctor : function () {
            this.reset();
        },

        /**
         * add
         */
        add : function(itemName, item){
           this._item[itemName] = item;
        },

        /**
         * get
         */
        get : function(itemName){
            return this._item[itemName] || function(){};
        },

        reset : function(){
            this._item = [];
        }

    });

})();

// single tone
var EXT_SERVICES = new t2k.util.services();
////////////////////////////////////////
// SRC End --> t2k/util/Services.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/behavior/checkable.js
////////////////////////////////////////
(function() {

    // checkResultDefaults
    var checkResultDefaults = {
        correct: 0,
        partiallyCorrect: 0,
        predictedIncorrect: 0,
        incorrect: 0,
        expected: 0,
        checked: 0,
        empty: 0
    };

    /**
     * Checkable behavior
     * Provides interface and common functionality of all checkable objects
     */
    t2k.behavior.checkable = Object.subClass({

        /**
         * check - Check object correctness
         * Run check, merge it with checkResultDefaults and return it
         * @return runCheckResult (Object)
         */
        check: function(applyFeedback) {
            var runCheckResult = this.runCheck(applyFeedback);
            var checkResult = override({}, runCheckResult, checkResultDefaults);

            return checkResult;
        }, // End of check

        /**
         * runCheck - implemented in classes which implement the checkable behavior
         * Run the check and return check result as outlined in the checkResultDefaults above
         */
        runCheck: function() {
            throw 'checkable class must override runCheck()';
        }, // End of runCheck

        /**
         * getValue - get value without checking
         */
        getValue: function() {
            throw 'checkable class must override getValue()';
        }, // End of getValue

        /**
         * isEmpty - check if checkable instance value is empty
         */
        isEmpty: function() {
            throw 'checkable class must override isEmpty()';
        }, // End of isEmpty

        /**
         * setLocalFeedback - set the checkable instance local feedback
         */
        setLocalFeedback: function(feedbackType) {
            throw 'checkable class must override setLocalFeedback(type)';
        }, // End of setLocalFeedback
        /**
         * reset component after applying try again
         */
        resetOnTryAgain : function(){
           throw 'checkable class must override resetOnTryAgain()';
        },  //end of resetOnTryAgain
        /**
         * apply after pressing show answer
         */
        markOnShowAnswer : function(){
            throw 'checkable class must override showAnswer()'
        }

    }); // End of t2k.behavior.checkable


})();
////////////////////////////////////////
// SRC End --> t2k/component/behavior/checkable.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/behavior/checkableMath.js
////////////////////////////////////////
(function() {

    /**
     * Checkable math behavior
     * Provides interface and common functionality of all Math checkable objects
     */
    t2k.behavior.checkableMath = t2k.behavior.checkable.subClass({

        /**
         * getMarkupValue - get the markup value inside checkableMath instance
         */
        getMarkupValue: function() {
            throw 'checkableMath class must override getMarkupValue()';
        }, // End of getMarkupValue

        /**
         * getMathCorrectness - get math correctness inside checkableMath instance
         */
        getMathCorrectness: function() {
            throw 'checkableMath class must override getMathCorrectness()';
        } // End of getMathCorrectness
    }); // End of t2k.interface.checkable


})();


////////////////////////////////////////
// SRC End --> t2k/component/behavior/checkableMath.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/behavior/subAnswerTiling.js
////////////////////////////////////////
(function() {
    /**
     * subAnswerTiling behavior
     * Provides interface and common functionality of all subAnswerTiling objects
     */
    t2k.behavior.subAnswerTiling = Object.subClass({

            getElementSize: function(elementsSizes){
                 var childElementsSizes = {'width': 0, 'height' : 0};
                 this.children.forEach(function(child) {
                    if(child.getElementSize){
                        childElementsSizes = child.getElementSize(elementsSizes);
                        elementsSizes.width = (childElementsSizes.width > elementsSizes.width) ? childElementsSizes.width : elementsSizes.width;
                        elementsSizes.height = (childElementsSizes.height > elementsSizes.height) ? childElementsSizes.height : elementsSizes.height;
                    }
                 });

                return elementsSizes;
            },

            setElementSize: function(elementSizes){
                var thi$ = this;
                if (!!!elementSizes) {
                    if (this.resetSubAnswerSizes) {
                        this.resetSubAnswerSizes();
                    }

                    elementSizes = this.getElementSize({'width': 0, 'height' : 0});
                }

                if ((elementSizes.width > 0) && (elementSizes.height > 0)) {
                    thi$.children.forEach(function(child) {
                        if (child.setElementSize) {
                            child.setElementSize(elementSizes);
                        }
                    });
                }
            }
    }); // End of t2k.behavior.subAnswerTiling


})();
////////////////////////////////////////
// SRC End --> t2k/component/behavior/subAnswerTiling.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/model/Configuration.js
////////////////////////////////////////
(function() {

    /**
     * Class: t2k.model.Configuration
     * A player configuration.
     *
     * Properties:
     *  sequencesConfig - {Array[Object]} The sequence configurations list.
     */
    t2k.model.Configuration = Object.subClass({
            
            ctor: function() {
                parseParamsXML(paramsXML);
            }

        }); // End of t2k.model.Configuration

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    function parseParamsXML(xml) {
        // Wrap the xml with jQuery.
        var $params = jQuery(xml);


        ENV.contentDirection = LanguageUtil.config.direction;
        
        ENV.interfaceDirection = LanguageUtil.config.direction;
        
        // root language
        ENV.interfaceLanguage = ENV.locale.split('_')[0] ; //$params.find('language').text();
        
        // root autoplayFeedbackNarration
        ENV.autoplayFeedbackNarration = $params.find('autoplayFeedbackNarration').text() == 'true' ;
        ENV.navigationData = $params.find('navigation')[0] ;

        var taskNavMode = null, taskIndexPerSeq = true, taskIndexType = null ;
        var taskNavData = $params.find('taskNavigation')[0] ;
        if( taskNavData ) {
        	taskNavMode =  jQuery( taskNavData ).attr( 'mode' ) ;
        	taskIndexPerSeq = jQuery( taskNavData ).attr( 'indexPerSequence' ) == 'true' ;
        	taskIndexType = jQuery( taskNavData ).attr( 'labelType' ) ;
        }
        ENV.taskNavigationMode = taskNavMode ? taskNavMode : "strict" ;
        ENV.taskIndexPerSeq = taskIndexPerSeq ;
        ENV.taskIndexType = taskIndexType ? taskIndexType : ENV.taskIndexType ;
        
        // parse root xml - text viewer default configuration - ENV
        var textViewerElem = $params.find('textViewer');
        ENV.textViewer = {
        	style: textViewerElem.find('style').text(),
        	useSideBar: textViewerElem.find('useSideBar').text(),
        	enableTextSelection: textViewerElem.find('enableTextSelection').text(),
        	baloonStyle: textViewerElem.find('baloonStyle').text(),
        	lineHeightConfig: textViewerElem.find('lineHeightConfig').text()
        };
        
        ENV.defaultTaskProgress = $params.find('defaultTaskProgress');
        
        // parse root xml for dragAndDrop Behavior
        ENV.dragAndDropBehavior = $params.find('subAnswer dragAndDropBehavior').text();
    } // End of parseParamsXML
    
    var paramsXML = "<params> \
        <direction>ltr</direction> \
        <language>en</language> \
        <locale>us</locale> \
        <navigation labelType='1' mode='open'/> \
        <taskNavigation labelType='1'/> \
        <subAnswer> \
            <dragAndDropBehavior>dragAndDrop</dragAndDropBehavior> \
        </subAnswer> \
        <textViewer> \
            <baloonStyle>baloonStyle</baloonStyle> \
            <style>textViewerStyle</style> \
            <useSideBar>false</useSideBar> \
            <lineHeightConfig>compact</lineHeightConfig> \
            <enableTextSelection>false</enableTextSelection> \
        </textViewer> \
        <defaultTaskProgress> \
            <attempts>2</attempts> \
            <autoCheck>false</autoCheck> \
            <taskButton label='Check' type='check'/> \
            <taskButton label='Continue' type='progress'/> \
            <taskButton label='Try Again' type='tryagain'/> \
            <taskButton label='Show Answer' type='showanswer'/> \
        </defaultTaskProgress> \
        <autoplayFeedbackNarration>true</autoplayFeedbackNarration> \
    </params>" ;

})();


////////////////////////////////////////
// SRC End --> t2k/model/Configuration.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/UiComponent.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.core.UiComponent
     * The super-class of all UI classes. Contains common functionality.
     *
     * Properties:
     *  cfg - {Object} The component's configuration.
     */
    t2k.core.UiComponent = Object.subClass({

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor: function(config) {
            // Set the configuration.
            this.cfg = config;
            // Init the children array.
            this.children = [];
            // Validation.
            this.validate();
        }, // End of ctor

        /**
         * Method: add
         * Add a child component to this one.
         *
         * Parameters:
         *  child - {t2k.core.UiComponent} A child element to add to this.
         */
        add: function(child) {
            // If child is 'nothing' then do nothing.
            if (!child) return;
            // Add the component to the children array.
            this.children.push(child);
        }, // End of add.
        /**
         * Method: remove
         * Remove a child from children array
         * @param child
         */
        remove: function(child) {
            // If child is 'nothing' then do nothing.
            if (!child) return;

            var count;
            for(count = 0; count < this.children.length; count++) {
                if(this.children[count] == child) {
                    this.children.splice(count, 1);
                    break;
               }
            }
        }, //End of remove

	    /**
	     * Method: removeChildByIndex
	     * Remove a child from children array
	     * @param index
	     */
	    removeChildByIndex: function(index) {
		    if (index < 0) return;
		    if (this.children.length == 0) return;

		    this.children.splice(index, 1);
	    }, //End of removeChildByIndex

	    /**
	     * Method: removeChildren
	     */
	    removeChildren: function() {
		    for (var count = 0; count < this.children.length; count++) {
			    this.removeChildByIndex(count);
		    }
		    this.children.length = 0;
	    },

        /**
         * Method: insert
         * Insert a child into children array
         * @param child, index
         */
        insert: function(child, index) {
            // If child is 'nothing' then do nothing.
            if (!child) return;

            this.children.splice(index, 0, child);
            
        }, //End of insert

        /**
         * Method : orderChildren
         * order children array based on order array of indexes
         * @param order_array
         */
        orderChildren : function(order_array) {
            if(!this.children) return;

            var tmp_array = [], thi$ = this;

            jQuery(order_array).each(function(index, value) {
                tmp_array[index] = thi$.children[value];
            });

            this.children = tmp_array;
        },

        /**
         * Method: validate
         * A place for components to validate itself. Called at construction time.
         */
        validate: function() {
            /* null implementation */
        }, // End of validate

        /**
         * Method: setEnabled
         * De/Activates the ui-component.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
            this.cfg.enabled = flag;
        }, // End of setEnabled
        
        /**
         * Method: isEnabled
         * Indicates the ui-component active state.
         */
        isEnabled: function() {
            return this.cfg.enabled;
        },

        /**
         * Method: setVisible
         * 
         * Parameters:
         *  flag - {Boolean} True for visible, false otherwise.
         */
        setVisible: function(flag) {
        	this.cfg.visible = flag;
        }, // End of setVisible

        /**
         * Method: isEnabled
         * Indicates the ui-component visibility state.
         */
        isVisible: function() {
            return this.cfg.visible;
        },

        /**
         * Method: dispose
         * A place for components to handle deletion.
         */
        dispose: function() {
	        for (var key in this) {
		        if (this.hasOwnProperty(key)) {
			        if ((["children", "view", "destroy", "dispose", "_super"].indexOf(key) < 0) && this[key]) {
				        delete this[key];
			        }
		        }
	        }
	        // commented out - is failing the minification 
//	        delete this;
        }, // End of dispose

        /**
         * Method: dispatchEvent
         * Call callback methods that are passed inside the 'events' object of the configuration. If a callback with the
         * given name doesn't exist then an error is thrown.
         *
         * Parameters:
         *  name - {String} The name of the event (callback).
         *  args - {Array[Object]} The arguments to pass the event callback.
         */
        dispatchEvent: function(name, args) {
            // Reference the configuration object.
            var cfg = this.cfg;

            var argz = (args instanceof Array) ? args : [args];
            // Dispatch the event or throw an error if an  event with the given name isn't registered.
            if (cfg && cfg.events && cfg.events[name]) cfg.events[name].apply(this, argz);
        }, // End of dispatchEvent

        /**
         * Method: registerEvent
         * Registers an event with this ui-component.
         *
         * Parameters:
         *  name - {String} The name of the event.
         *  callback - {Function} The function to call when the event is dispatched.
         */
        registerEvent: function(name, callback) {
            if (!this.cfg.events) this.cfg.events = [];
            this.cfg.events[name] = callback;
        } // End of registerEvent

    }); // End of t2k.core.UiComponent


})();


////////////////////////////////////////
// SRC End --> t2k/core/UiComponent.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/layout/BaseLayout.js
////////////////////////////////////////

t2k.core.layout.BaseLayout = t2k.core.UiComponent.subClass({

    /**
     * Constructor: ctor
     * The constructor
     */
    ctor: function(config) {
        // Delegate.
        this._super(config);
        
    }, // End of ctor

    /**
     * Method: validate
     * Makes sure the parent view is set.
     */
    validate: function() {
        // Delegate()
        this._super();
        // Reference the configuration object.
        var cfg = this.cfg;
        // Check for template.
        if (cfg.view == null || cfg.view == 'undefined')
            throw "no owning view specified for this layout.";
    }, // End of validate

    /**
     * layout
     */
    layout: function() {
    	// reset layout w&h
    	this.cfg.view.children.forEach(function(child){
            if(child._view){
                child._view.height('').width('');
            }
    	});
        /* null implementation */
    },

    /**
     * scroll
     * @param index
     * @param callback
     * @param offset
     */
    scroll: function(index, callback, offset) {
        /* null implementation */
    }
});

////////////////////////////////////////
// SRC End --> t2k/core/layout/BaseLayout.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/layout/HorizontalLayout.js
////////////////////////////////////////

t2k.core.layout.HorizontalLayout = t2k.core.layout.BaseLayout.subClass({

    layout: function() {
        // Delegate.
        //this._super();
        // Reference the view.
        var view = this.cfg.view;
        // Sum the children width.
        var totalWidth = 0;

        view.children.forEach(function(child) {
            totalWidth += parseInt(child.cfg.width);
        });
        // Update the view's content to have the width that is the sum of its children width.
        // TODO: check why does this at all happen.
        // view._content.width(totalWidth);

    }, // End of layout

    scroll: function(index, callback) {
        // Reference the view.
        var view = this.cfg.view;
        // Sum the total scroll.
        var i,totalScroll = 0;
        for (i=0; i<index; i++) {
            totalScroll += parseInt(view.children[i].cfg.width);
        }

        view._view.animate({scrollLeft: totalScroll}, 250, callback);
    } // End of scroll
    
});

////////////////////////////////////////
// SRC End --> t2k/core/layout/HorizontalLayout.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/layout/InlineLayout.js
////////////////////////////////////////

t2k.core.layout.InlineLayout = t2k.core.layout.BaseLayout.subClass({

    layout: function() {
        // Delegate.
        this._super();
        // Reference the view.
        var view = this.cfg.view;
        // Layout.
        view.children.forEach(function(child) {
            child._view && child._view.length && (child._view[0].style.display = 'inline-block');
        });
    } // End of layout

});

////////////////////////////////////////
// SRC End --> t2k/core/layout/InlineLayout.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/layout/VerticalLayout.js
////////////////////////////////////////

t2k.core.layout.VerticalLayout = t2k.core.layout.BaseLayout.subClass({

    scroll: function(index, callback, offset) {
        // Reference the view.
        var view = this.cfg.view;
        var id = view._view.attr('id') + '_content';
        var totalScroll = view.children[index]._view.offset().top + view._content.scrollTop() ;     
        
        totalScroll = totalScroll - ( offset ? offset : 0 ) ;

        if ( ENV.behaviors.scrollControl ) {
        	var absScroll = view.children[index]._view.offset().top - ScrollControl.getMarginTop() - 15;
        	ScrollControl.scrollTopAnimate(-absScroll, 500, callback);
        } else {
        	Perf.select('#' + id).animate({scrollTop: totalScroll}, 250, callback);
        }

    } // End of scroll

});

////////////////////////////////////////
// SRC End --> t2k/core/layout/VerticalLayout.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/layout/TileLayout.js
////////////////////////////////////////

t2k.core.layout.TileLayout = t2k.core.layout.InlineLayout.subClass({

    layout: function() {
        // Delegate.
        this._super();
        // Reference the view.
        var view = this.cfg.view;
        // Sum the children width.
        var maxWidth = 0;
		var maxHeight = 0;
        view.children.forEach(function(child) {
            var currWidth = parseInt(child._view.innerWidth());
            maxWidth = (maxWidth > currWidth) ? maxWidth : currWidth;
			var currHeight = parseInt(child._view.innerHeight());
			maxHeight = (maxHeight > currHeight) ? maxHeight : currHeight;
        });
        view.children.forEach(function(child) {
            child._view.width(maxWidth);
			child._view.height(maxHeight);
        });
    } // End of layout

});

////////////////////////////////////////
// SRC End --> t2k/core/layout/TileLayout.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/Presenter.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//  add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.core.Presenter
     * The base presenter class. Contains common presenter functionality.
     *
     * Properties:
     *  view - {t2k.core.View} The view that is handled by the presenter.
     */
    t2k.core.Presenter = t2k.core.UiComponent.subClass({

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor: function(config) {
            // Delegate.
            this._super(config);
            // isComposite (true/false) composite indicator
            
            // TODO: remove
            this.isComposite = false;
        }, // End of ctor

        /**
         * Method: add
         * Add a child presenter to this one. This method assumes that this presenter already has a view set
         * (if not then an error is thrown).
         *
         * Parameters:
         *  child - {t2k.core.Presenter} A child presenter to add to this.
         */
        add: function(child) {
            // Check for view first.
            if (!this.view) throw "child components cannot be added before the view is set";
            // Delegate.
            this._super(child);
            // Add the child's view to the array of children in this presenter's view.
            this.view.add(child.view);
        }, // End of add.

        /**
         * Method: getState
         * Exports the presenters' state as a XML object.
         *
         * Returns:
         *  {XML} The presenters' state.
         */
        getState: function() {
            return '';
        }, // End of getState

        /**
         * Method: setState
         * Sets the player state as described in the provided XML string.
         *
         * Parameters:
         * state - {String} a string XML.
         */
        setState: function(state) {
            // null implementation.
            this.stateValue = state;
        },

        /**
         * Method: setEnabled
         * De/Activates the presenter. This method sets the view's active state.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
//            if (!flag && this.isEnabled()) {
//                this.intermediateState = this.getState();
//            }
            this._super(flag);
            this.view.setEnabled(flag);
        }, // End of setEnabled

//        loadInterMediateState: function() {
//            if (this.intermediateState) {
//                this.setState(this.intermediateState,true);
//            }
//        },

        /**
         * Method: setVisible
         *
         * Parameters:
         *  flag - {Boolean} True for visible, false otherwise.
         */
        setVisible: function(flag) {
            this._super(flag);
            this.view.setVisible(flag);
        }, // End of setVisible

        /**
         * Method: orderChildren
         * @param order_array - {Array} of indexes
         */
        orderChildren : function(order_array){
            this._super(order_array);

            this.view.orderChildren(order_array);
        },

	    disposeChildren:function () {
		    var child;
		    for (var ind = this.children.length - 1; ind >= 0; ind--) {
			    child = this.children[ind];
			    !!child.view && child.view.dispose();
			    child.dispose();
		    }
	    },

	    dispose: function() {

		    !!this.children && this.disposeChildren();

		    !!this.view && this.view.dispose();

		    this._super();
	    }

    }); // End of t2k.core.Presenter


})();

////////////////////////////////////////
// SRC End --> t2k/core/Presenter.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/FlowPresenter.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.core.FlowPresenter
     * Extends the base presenter class with flow related functionality. Flow presenters provides both progress related
     * functionality. The 'Player' and 'Sequence' are examples of flow-presenters.
     */
    t2k.core.FlowPresenter = t2k.core.Presenter.subClass({

        /**
         * Method: progress
         * Instructs the presenter to move to the next step in its progress. If the presenter cannot proceed to the next
         * step an error is thrown.
         */
        progress: function() {
            /* null implementation */
        } // End of progress

    }); // End of t2k.core.FlowPresenter


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/core/FlowPresenter.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/core/View.js
////////////////////////////////////////
(function() {

    /**
     * Class: t2k.core.View
     * The base view class. Contains common view functionality.
     *
     * Properties:
     *  template - {String} The Mustache template used for rendering the view. Sub-classes must provide their templates.
     */
    t2k.core.View = t2k.core.UiComponent.subClass({

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} configuration details.
         *  [config.parent] - {String|Object} the parent element for the pane.
         */
        ctor: function(config) {
            // Delegate:
            // If no configuration provided or if the configuration doesn't specify the parent use the
            // document's body as the default one. Also auto-generate an id if non provided.
            this._super(copy({}, config, { id:genId() , parent: document.body }));

            // Reference the configuration object.
            var thi$ = this;
            var cfg = this.cfg;

            // If the parent is a view and it uses layout management then call the layout's 'layout' method after
            // rendering.
            if (cfg.parent instanceof t2k.core.View) {
                // Render the view.
                this.render('#' + cfg.parent.cfg.id + '_content', cfg.template, cfg);
                if (cfg.parent.layout) cfg.parent.layout.layout(); // TODO: delete
            } else {
                var parent = typeof cfg.parent == "object" ? cfg.parent : "#" + cfg.parent;
                // Render the view.
                this.render(parent, cfg.template, cfg);
            }

            // Handle optional layout management.
            if (cfg.layout) {
                // Get the layout class
                var LayoutClass = getLayoutClass(cfg.layout);
                // Override the layout name with a layout object.
                cfg.layout = new LayoutClass({view: this});
            }

            // Keep reference to the view's DOM element.
            this._view = Perf.select('#' + cfg.id);
	
            // Keep reference to all DOM elements with id suffix.
            jQuery(this._view).find('[id^=' + cfg.id + '_]').each(function(index, elem) {
                thi$[jQuery(elem).attr('id').substring(cfg.id.length)] = jQuery(elem);
            });

            // Apply trivial settings.
            if (cfg.width) this._view.outerWidth(this.cfg.width);
            if (cfg.height) this._view.outerHeight(this.cfg.height);
            
        }, // End of ctor

        /**
         * Method: render
         * Renders the view.
         *
         * Parameters:
         *  element - {Object/String} The element/id into which the view's markup will be rendered (jQuery normalized).
         *  template - {String} The mustache template to apply.
         *  context - {Object } The data to supply to mustache.
         */
        render : function(element, template, context) {
            jQuery(element).append(Mustache.to_html(template, context));
        }, // End of render

        /**
         * Method: add
         * Add a child view to this one. this method assumes that the view has a layout set for maneging sub-views
         * (if not then an error is thrown).
         *
         * Parameters:
         *  child - {t2k.core.View} A child view to add to this.
         */
        add: function(child) {
            // Reference the configuration object.
            var cfg = this.cfg;
            // Check for layout.
            if (!cfg.layout || !(cfg.layout instanceof t2k.core.layout.BaseLayout))
                throw "not layout is set for this view. sub-views cannot be added";
            // Check for content div.
            if (!this._content)
                throw "not content element is set for this view. sub-views cannot be added";
            // Delegate.
            this._super(child);
            
            // Layout
            this.cfg.layout.layout();
            
        }, // End of add.

        /**
         * Method: validate
         * Makes sure a template is set.
         */
        validate: function() {
            // Delegate()
            this._super();
            // Reference the configuration object.
            var cfg = this.cfg;
            // Check for template.
            if (cfg.template == null || cfg.template == 'undefined')
                throw "no template specified for this view.";
        }, // End of validate

        /**
         * Method: scroll
         * Scrolls to the child with the provided index.
         *
         * Parameters:
         *  index - {Number} The array location of the child. First child is at index 0.
         */
        scroll: function(index, callback, offset) {
            if (this.cfg.layout) this.cfg.layout.scroll(index, callback, offset);
        },

        /**
         * Method: setEnabled
         * De/Activates the view. This method adds/removes the 'disabled' CSS class to the view.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
            this._super(flag);
            if (flag) this._view.removeClass('disabled');
            else this._view.addClass('disabled');
        }, // End of setEnabled
        
        /**
         * Method: setVisible
         * 
         * Parameters:
         *  flag - {Boolean} True for visible, false otherwise.
         */
        setVisible: function(flag) {
        	this._super(flag);
        	if (!flag){
        		// hidden
        		this._view.addClass('visibleHidden');
        	} else {
        		// show
        		this._view.removeClass('visibleHidden');
        	}
        } // End of setVisible
        
    }); // End of t2k.core.View

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    function getUnderscoredChildren(baseId, parent) {
        jQuery(parent).find('[id^=' + baseId + '_]').each(function(index, elem) {
            console.log(jQuery(elem).attr('id').substring(baseId.length));
//            this['_' + jQuery(elem).attr('id')] = elem;
        });
//        var elems = jQuery(parent).find('[id^=' + baseId + '_]');
//        debugger
/*
        jQuery(parent).children().each(function(index, child) {
            alert(index + ' - ' + child);
        });
*/
    }

    /**
     * Private:
     * Method: getLayoutClass
     * constructs a layout management class that corresponds to the given name. This process makes use of a naming
     * convention (much like the creation of tasks). The layout name's first character is uppercased and the name is
     * appended with the 'Layout' suffix. The result is the name of the layout class under the 't2k.core.layout'
     * namespace.
     *
     * Parameters:
     *  name - {String} The name of the layout to create.
     */
    function getLayoutClass(name) {
        var layoutClassName = name.charAt(0).toUpperCase() + name.substring(1) + "Layout";
        return t2k.core.layout[layoutClassName];
    }

})();

////////////////////////////////////////
// SRC End --> t2k/core/View.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/BaseComponent.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.BaseComponent
     * A base class for all components.
     */
    t2k.component.BaseComponent = t2k.core.Presenter.subClass({

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy({}, config));

	        this.dataTagName = (this.cfg.data && this.cfg.data.tagName && this.cfg.data.tagName.toLowerCase());
            
            this.setParent();

            // init layout object
            this.layout = {};

            // init compiled xml obj.
            this.initWriteCompiled();
            
            // read compiled
            this.readCompiled();

            // init 'canReduce' as true
            // if the reduction will get to it's end, canReduce will be false
            this.layout.canReduce = true;

            // insert 'onRendered' function from the configuration to layout object
            if (this.cfg.onRendered) {
                this.layout.onRendered = this.cfg.onRendered;
            } else {
                console.error("{0}:\nonRendered() not found in cfg. You must provide onRendered() function in your cfg.".format(this.name));
                // throw "onRendered not found. You must provide onRendered function in your cfg";
            }

            // del 'onRendered' function from configuration
            delete this.cfg.onRendered;

        }, // End of ctor
        
        setParent : function(){
        	
    		if (typeof(this.cfg.parent) == 'string' ){
    			
    			if (this.cfg.parent.indexOf('#') == -1){
    				this.cfg.parent = '#' + this.cfg.parent;
    			} 
    			
    			this.cfg.parent = jQuery(this.cfg.parent)
    		}
        	
        },

        /**
         * createNewView
         * every composite / component must use this function to create it's view
         * this function will merge the 'onRendered' event and 'cantReduce' event to config.event,
         * and apply the componentViewCerified = true
         *
         * @param classObj
         * @param config
         * @returns {classObj}
         */
        createNewView : function(classObj, config) {
            // reference
            var thi$ = this;

            return new classObj(merge(config, {
            	
            events : {
                onRendered : function() {
                	
                    thi$.layout.onRendered();
                },

                cantReduce : function() {
                    thi$.layout.canReduce = false;
                }
            }, // end of 'events'

            viewCerified : true,
            
            dummyMode : thi$.cfg.dummyMode,
            
            compiledLayoutRes : thi$.compiledLayoutRes

            }));

        },
        
        /**
         * reductionAvailable
         * @returns {Boolean}
         */
        reductionAvailable : function() {
            return this.layout.canReduce;
        },
        
        /**
         * reduce
         * @param val
         */
        reduce : function(val) {
            if (typeof this.view.reduce === "function") {
	            this.view.reduce(val);
                this.writeCompiled('reduction', this.getReductionStep());
            } else {
	            this.dispatchEvent('cantReduce');
	            this.dispatchEvent('onRendered');
            }
        },

        /**
         * getReductionStep
         * @return {*}
         */
        getReductionStep : function(){
        	return !!this.view.getReductionStep ? this.view.getReductionStep() : 0;
        },

        /**
         * initWriteCompiled
         */
        initWriteCompiled : function(){
        	if (!!this.cfg.dummyMode  && !!this.cfg.data){
                this.compiledLayout = Compat.createNodeNextTo(this.cfg.data, 'compiled_layout', true);
                this.compiledLayout.attr({'reduction' : 0, 'type' : 'loose'});

                //this.compiledLayout.appendTo(jQuery(this.cfg.data));
                jQuery(this.cfg.data).append(this.compiledLayout.detach());
                this.compiledLayout.remove();
        	}
        },

        /**
         * writeCompiled
         * @param key
         * @param val
         */
        writeCompiled : function(key, val){
        	if (!!this.cfg.dummyMode){
        		this.compiledLayout.attr(key, val);
        	}
        },

        /**
         * readCompiled
         */
        readCompiled:function () {
            if (!this.cfg.dummyMode && !!this.cfg.data) {

                var compiledElement = jQuery(this.cfg.data).children('compiled_layout');
                this.compiledLayoutRes = {
                    reduction:compiledElement.attr('reduction'),
                    type:compiledElement.attr('type')
                };

                this.readCompiled_Private(compiledElement);

            /*    try {
                    console.log('comp: ' + this.cfg.data.tagName + ' reduction: ' + this.compiledLayoutRes.reduction + ' type: ' + this.compiledLayoutRes.type)
                } catch (e) {
                }*/

            }
        },

        /**
         * readCompiled_Private
         */
        readCompiled_Private : function(compiledElement){
        	
        },
        
        /**
         * Method: setEnabled
         * De/Activates the component.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
            // Delegate.
            this._super(flag);

            this.children.forEach(function(child) {
	            !!child.setEnabled && child.setEnabled(flag);
            });
        },

        /**
         * loadInterMediateState
         */
//        loadInterMediateState: function() {
//            // Delegate.
//            this._super();
//
//            this.children.forEach(function(child) {
//                child.loadInterMediateState();
//            });
//        },
        
        /**
         * compact
         * compact and rendered
         */
        compact : function() {
	        this.layoutStatus = 'compact';
        	this.writeCompiled('type', 'compact');
            this.view.compact();
            this.layout.onRendered();
        },
		
        /**
         * resize
         * resize and rendered
         * @param size
         */
		resize : function(size){
			this.view.resize(size);
			this.layout.onRendered();
		},

        /**
         * setWidth
         * @param newWidth
         */
        setWidth : function(newWidth) {
            this.view.setWidth(newWidth);
			this.layout.onRendered();
        },

	    setMaxWidth : function(newWidth) {
		    if(typeof this.view.setMaxWidth == 'function') {
		        this.view.setMaxWidth(newWidth);
		    }
	    },

        /**
         * setHeight
         * @param newHeight
         */
        setHeight : function(newHeight) {
            this.view.setHeight(newHeight);
			this.layout.onRendered();
        },
        
		/**
		 * loose
		 * loose and rendered
		 */
        loose : function() {
			this.layoutStatus = 'loose';
        	this.writeCompiled('type', 'loose');
            this.view.loose();
            this.layout.onRendered();
        },

        /**
         * setState - parse state of current component
         * @param state - {jQuery} State xml
         */
        setState:function (state) {
        	//this.resetState();
            this.setMyState(state);
        },
        
        /**
         * resetState
         * place holder
         */
        resetState : function(){
        	// place holder
        },
        
        /**
         * getSize
         * @returns size
         */
        getSize : function(){
        	return this.view.getSize();
        },
        
        /**
         * looseHeight
         * loose view's height (tile prop.)
         */
        looseHeight: function(){
        	this.view.looseHeight();
        },
        
        /**
         * setHeight
         * @param val
         */
        setHeight : function(val){
        	this.view.setHeight(val);
        },

        /**
         * looseWidth
         */
        looseWidth : function(){
        	this.view.looseWidth();
        },

        /**
         * setWidth
         * @param val
         * @param overwriteLaydownSize- ignore the value in laydownsize and use the new value (used in text viewer)
         */
        setWidth : function(val, overwriteLaydownSize){
        	this.view.setWidth(val, overwriteLaydownSize);
        },

        /**
         * spaceEatingAvailable
         */
		spaceEatingAvailable : function(){
        	return false;
        },

        /**
         * resetTile
         */
        resetTile : function(){
        	this.view.resetTile();
        },

        /**
         * getHorizontalSize
         */
        getHorizontalSize : function(){
          return null;
        },

        /**
         * setVerticalLayout
         */
        setVerticalLayout : function(){
          // mtq place holder
        },

        /**
         * getState - create state of current component
         * @return state - {jQuery} State xml
         */
        getState:function () {
            var state = this.addMyState();
            if (state) {
                var children = state.children();
                return this.getStateTag().append(children);
            }
            return null;
        },
        
        /**
         * getTagName - get current component node name to use in state XML
         * @return nodeName - string
         */
        getTagName : function() {
            var nodeName;
            if (!!this.name) {
                nodeName = this.name.slice(this.name.lastIndexOf('.') + 1);
            } else {
                // 'Component without name';
                throw('Please provide Components name');
            }

            return nodeName;
        },
        
        /**
         * getStateTag - creates component state root node
         */
        getStateTag: function() {
            var stateTag = jQuery('<' + this.getTagName() + '/>', {
                enabled: !!this.isEnabled()
            });
            return stateTag;
        },

        /**
         * addMyState
         * adds component data to state, placeholder - will be overridden in derived classes
         * @return state - jQuery xml
         */
        addMyState : function() {
            return null;
        },
        
        /**
         * sets current component state, placeholder - will be overridden in derived classes
         * @param state
         */
        setMyState : function(state) {
        	// place holder
        },

        /**
         * Method: remove
         * Remove a child presenter from this children. This method assumes that this presenter already has a view set
         * (if not then an error is thrown).
         *
         * Parameters:
         *  child - {t2k.core.Presenter} A child presenter to be removed
         */
        remove: function(child) {
            // Check for view first.
            if (!this.view) throw "child components cannot be removed before the view is set";
            // Delegate.
            this._super(child);
            // Add the child's view to the array of children in this presenter's view.
            this.view.remove(child.view);
        }, // End of add.
        
        /**
         * Method: insert
         * Insert a child presenter into specified index in children array. This method assumes that this presenter already has a view set
         * (if not then an error is thrown).
         *
         * Parameters:
         *  child - {t2k.core.Presenter} A child presenter to be inserted
         *  index - Integer
        */
        insert : function(child, index){
            // Check for view first.
            if (!this.view) throw "child components cannot be removed before the view is set";
            // Delegate.
            this._super(child, index);
            // Add the child's view to the array of children in this presenter's view.
            this.view.insert(child.view, index);
        }, // End of insert.
        
        getReductionReport: function(){
        	return this.view.getReductionReport() ;
        },

        /**
         * addToSpecialConfiguration
         * @param addCfg
         */
        addToSpecialConfiguration:function (addCfg) {
            this.cfg.specialConfiguration = override(copy({}, this.cfg.specialConfiguration), addCfg);
        },
        removeSpecificFeedback: function(){
            this.view.removeSpecificFeedback();
        }

    }); // End of t2k.component.BaseComponent

})();
////////////////////////////////////////
// SRC End --> t2k/component/BaseComponent.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/BaseComponentView.js
////////////////////////////////////////
(function() {
	
	/**
	 * BaseComponentView
	 * every component will inherit BaseComponentView
	 */
	
	t2k.component.BaseComponentView = t2k.core.UiComponent.subClass({

			/** The class' name (for debugging purpose). */
			name : 't2k.component.BaseComponentView',

			/**
			 * @constructor
			 */
			ctor : function(config) {
				
				// delegate with genId()
				this._super(copy({}, config, { id:genId() }));
				
				// Reference the configuration object.
	            var thi$ = this;
	            var cfg = this.cfg;

	            // If the parent is a view and it uses layout management then call the layout's 'layout' method after
	            // rendering.
	            if (cfg.parent instanceof t2k.core.View) {
	                // Render the view.
	                this.render('#' + cfg.parent.cfg.id + '_content', cfg.template, cfg, cfg.partials);
	                if (cfg.parent.layout) cfg.parent.layout.layout(); // TODO: delete
	            } else {
	                this.cfg.parent = typeof cfg.parent == "object" ? cfg.parent : "#" + cfg.parent;
	                // Render the view.
	                this.render(this.cfg.parent, cfg.template, cfg, cfg.partials);
	            }


	            // Keep reference to the view's DOM element.
                this._view = Perf.select('#' + cfg.id);

                // Keep reference to all DOM elements with id suffix.
                this._view.find('[id^=' + cfg.id + '_]').each(function(index, elem) {
                    thi$[jQuery(elem).attr('id').substring(cfg.id.length)] = jQuery(elem);
                });
                
                // Apply trivial settings.
                if (cfg.width) this._view.outerWidth(this.cfg.width);
                if (cfg.height) this._view.outerHeight(this.cfg.height);
                
				// validate correct view creation
				// BaseComponent presenter (createNewView()) merge 'onRendered' event to config.events
				// and set componentViewCerified = true.
				// if !!!componentViewCerified, it's means that the 'new view' wasn't created by createNewView()
				if (!!!this.cfg.viewCerified){
					throw('componentViewCerified failure. Use createNewView() to create a view');
				}
				
				// delete validation param 
				delete this.cfg.componentViewCerified;
				
				// BaseComponentView will automatic dispatch 'onRendered' event to prevent dead lock
				// if you want to achieve a full control about the rendering order, 
				// simply override onViewRendered() function with an empty function
				this.onViewRendered();
				
			}, // end of ctor
			
			/**
			 * onViewRendered
			 * dispatch onRendered event
			 * this function may be override by (any) component / composite view,
			 * to achieve rendering correct order
			 */
			onViewRendered : function(){
				this.dispatchEvent('onRendered');
			}, // end of onViewRendered
			
			/**
	         * Method: render
	         * Renders the view.
	         *
	         * Parameters:
	         *  element - {Object/String} The element/id into which the view's markup will be rendered (jQuery normalized).
	         *  template - {String} The mustache template to apply.
	         *  context - {Object } The data to supply to mustache.
	         *  partials - {Object } Hash of partial mustache templates.
	         */
	        render : function(element, template, context, partials) {
	            jQuery(element).append(Mustache.to_html(template, context, partials));
				template = null;
	        }, // End of render
	        
	        /**
	         * compact
	         * set display inline-block
	         */
	        compact : function() {
                if (this._view && this._view.length) {
                    this._view[0].style.display = 'inline-block';
                    this._view[0].style.verticalAlign = 'top';
	                this._view.removeClass('loose').addClass('compact');
                }
	        },
	        
	        /**
	         * loose
	         * set display block
	         */
	        loose : function() {
                if(this._view.length) {
					this._view[0].style.display = 'block';
					this._view.removeClass('compact').addClass('');
                }
	        },
	        
	        /**
	         * getSize
	         * @returns size
	         */
	        getSize : function(){
	        	return {'width': Compat.actualWidth(this._view), 'height': Compat.actualHeight(this._view)};
	        },

	        /**
	         * getInnerSize
	         * place holder for flow
	         * @returns null
	         */
	        getInnerSize : function(){
	        	return null;
	        },
	        
	        /**
	         * resize
	         * resize dom
	         * @param size
	         */
	        resize : function(size){
	        	if (size){
	        		this.setWidth(size.width);
	        		this.setHeight(size.height);
	        	}
	        },

            /**
             * setWidth
             * @param newWidth
             */
            setWidth : function(newWidth) {
                this._view.outerWidth(newWidth);
                this.dispatchEvent('onRendered');
            },
        
			setMaxWidth : function (newWidth) {
				this._view.css('max-width', newWidth + 'px');
			},

            /**
             * setHeight
             * @param newHeight
             */
            setHeight : function(newHeight) {
                this._view.outerHeight(newHeight);
                this.dispatchEvent('onRendered');
            },

            /**
             * resetSize
             */
            resetSize : function() {
                this._view.width('').height('');
            },

	        /**
	         * looseHeight
	         * set height = '' (tile)
	         */
	        looseHeight: function(){
	        	this._view.height('');
	        },
	        
	        setHeight : function(val){
	        	this._view.outerHeight(val);
	        },
	        
	        looseWidth : function(){
	        	this._view.width('');
	        },
	        
	        setWidth : function(val){
	        	this._view.outerWidth(val);
	        },
	        
	        getReductionStep : function(){
	        	return this.reductionStep ? this.reductionStep : 0;
	        },

	        /**
             * resetTile
             * set height and width = ''
             */
            resetTile : function(){
                this._view.width('').height('');
            },
	        
	        /**
	         * Method: add
	         * Add a child view to this one. this method assumes that the view has a layout set for maneging sub-views
	         * (if not then an error is thrown).
	         *
	         * Parameters:
	         *  child - {t2k.core.View} A child view to add to this.
	         */
	        add: function(child) {
	            // Reference the configuration object.
	            var cfg = this.cfg;
//	            // Check for layout.
//	            if (!cfg.layout || !(cfg.layout instanceof t2k.core.layout.BaseLayout))
//	                throw "not layout is set for this view. sub-views cannot be added";
	            // Check for content div.
	            if (!this._view)
	                throw "not content element is set for this view. sub-views cannot be added";
	            // Delegate.
	            this._super(child);
	            
	        }, // End of add.

	        /**
	         * Method: validate
	         * Makes sure a template is set.
	         */
	        validate: function() {
	            // Delegate()
	            this._super();
	            // Reference the configuration object.
	            var cfg = this.cfg;
	            // Check for template.
	            if (cfg.template == null || cfg.template == 'undefined')
	                throw "no template specified for this view.";
	        }, // End of validate
	        
	        /**
	         * Method: dispose
	         * Removes the player's view element.
	         */
	        dispose: function() {
		        this._view && this._view.remove();
		        delete this._view;
		        this._super();
	        }, // End of dispose

            /**
             * Method: orderChildren
             * @param order_array - {Array} of indexes
             */
            orderChildren: function (order_array) {
                var thi$ = this;

                jQuery(order_array).each(function (index, value) {
                    if(!!thi$.children[value]) {
                        thi$.children[value]._view.insertAfter(thi$._view.children().last());
                    }
                });

                this._super();
            },

	        /**
	         * Method: setEnabled
	         * De/Activates the view. This method adds/removes the 'disabled' CSS class to the view.
	         *
	         * Parameters:
	         *  flag - {Boolean} True for active, false otherwise.
	         */
	        setEnabled: function(flag) {
	            this._super(flag);
	            if (flag) this._view.removeClass('disabled');
	            else this._view.addClass('disabled');
	        }, // End of setEnabled
	        
	        /**
	         * Method: setVisible
	         * 
	         * Parameters:
	         *  flag - {Boolean} True for visible, false otherwise.
	         */
	        setVisible: function(flag) {
	        	this._super(flag);
	        	if (!flag){
	        		// hidden
	        		this._view.addClass('visibleHidden');
	        	} else {
	        		// show
	        		this._view.removeClass('visibleHidden');
	        	}
	        }, // End of setVisible
	        
	        /**
	         * domRandomize
	         */
	        domRandomize : function(){
	        	
	        	var countOfChildren = this.children.length;
	        	
	        	// don't random if there is less than 2 children
	        	if (countOfChildren < 2) return;
	        	
	        	// map spacer
	        	var spacerMap = [];
	        	this._content.children().each(function(index, child){
	        		spacerMap[index] = !!(jQuery(child).attr('class') == 'spacer');
	        		if (spacerMap[index]) jQuery(child).remove();
	        	});
	        	
	            this.xmlRanDomInsert = Perf.create('randominsert');  //log of actions to make random movement (insertBefore/insertAfter) of children
	            this.xmlRandomRevert = Perf.create('randomrevert');  //log of actions in order to revert random movement of children (return to feeding order)

	            for(var i=0; i<=Math.floor(countOfChildren/2); i++){
	                var ranDomArray = this.getRandomArray(countOfChildren);

	                var lineRandomInsert = Perf.create('line');
	                lineRandomInsert.attr('firstindex',ranDomArray[0]);
	                lineRandomInsert.attr('secondindex',ranDomArray[1]);

	                var lineRandomRevert = Perf.create('line');

	                lineRandomRevert.attr('firstindex',ranDomArray[0]);

	                if(ranDomArray[0] < (countOfChildren-1)){
	                    this.children[ranDomArray[0]]._view.insertBefore(this.children[ranDomArray[1]]._view);
	                    lineRandomInsert.attr('action', 'insertBefore');
	                    lineRandomRevert.attr('secondindex',parseInt(ranDomArray[0]) + 1);
	                    lineRandomRevert.attr('action', 'insertBefore');

	                } else {
	                    this.children[ranDomArray[0]]._view.insertAfter(this.children[ranDomArray[1]]._view);
	                    lineRandomInsert.attr('action', 'insertAfter');
	                    lineRandomRevert.attr('secondindex',parseInt(ranDomArray[0]) - 1);
	                    lineRandomRevert.attr('action', 'insertAfter');
	                }

	                this.xmlRanDomInsert.append(lineRandomInsert);
	                this.xmlRandomRevert.append(lineRandomRevert);
	            }
	            
	            // set spacers
	            var spacerMapIdx = 0;
	            this._content.children().each(function(index, child){
	            	if (spacerMap[spacerMapIdx]){
                        Perf.create("div").attr('class','spacer').insertBefore(jQuery(child));
	            		spacerMapIdx++;
	            	}
	            	spacerMapIdx++;
	        	});

	        },
	        
	         /**
	          * getRandomArray - return 2 indexes from children array - child to move and child to move after
	          * @param countOfChildren
	          */
	        getRandomArray : function(countOfChildren){
	            var indexArray = new Array(countOfChildren);

	            for(var i=0 ; i < countOfChildren ; i++) {
	              indexArray[i] = i;
	            }

	            var resultArray = [];
	            resultArray.push(indexArray.splice(Math.random()*indexArray.length,1));
	            resultArray.push(indexArray.splice(Math.random()*indexArray.length,1));

	            return resultArray;
	        },

            /**
             * getReductionReport
             */
	        getReductionReport: function() {
	        	return { percent: 100, belowRead: false, belowAbs: false } ;
	        },

	        setSpecificFeedback: function(message, parentClass){
	            var parentDomObj = this._view.find('.status_icon').parent();
	            
	            this.SpecificFeedbackBalloon = new t2k.player.task.controls.SpecificFeedbackBalloon(copy({
	                data : message[0],
	                parent: parentDomObj,
	                parentClass: parentClass,
	                onRendered: function() {
	                }
	            }));

	        },
	        removeSpecificFeedback: function(){
	        	this.SpecificFeedbackBalloon && this.SpecificFeedbackBalloon.remove();
	        }
			
		});
	
})();

////////////////////////////////////////
// SRC End --> t2k/component/BaseComponentView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/CompositeConstants.js
////////////////////////////////////////
/*
 * Composite constants (layout sequence definitions).
 * Valid sections are: init, reduce, loose, compact
 */
t2k.component.CompositeConstants = {
    tileSequence: {
        init: [
            {inlineChildren: null},
            {resetTile: null},
            {tile: null},
            {squeezeComposite: false}
        ],
        compact: [
            {resetTile: null},
            {compactChildren: null},
            {tile: null},
            {squeezeComposite: false},
            {spaceEater: 'all'},
            {looseHeight: null},
            {tileHeight: null}
        ],
        loose: [
            {resetTile: null},
            {tile: null},
            {squeezeComposite: false}
        ],
        reduce: []
    }
};

////////////////////////////////////////
// SRC End --> t2k/component/CompositeConstants.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/Composite.js
////////////////////////////////////////
(function() {

    var constants = t2k.component.CompositeConstants;

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Class Declaration.
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.Composite A base class for all composites.
     */
    t2k.component.Composite = t2k.component.BaseComponent.subClass({

        /**
         * Constructor: ctor The constructor
         *
         * Parameters: config - {Object} Configuration details.
         */
        ctor : function(config) {
            // Delegate.
            this._super(config);
            this.initCompositeLayouter();
            this.layout.setLayoutSequence('init');
        }, // End of ctor
        
        /**
         * initCompositeLayouter
         * init composite layouter declarations and functions
         */
        initCompositeLayouter : function() {

            // ref
            var thi$ = this;

            // get numOfChildren from xml
            this.layout.compiledNumOfChildren = jQuery(this.cfg.data).attr('numOfChildren') || 0;

            try {
                if (!!!this.layout.compiledNumOfChildren || this.layout.compiledNumOfChildren == 0)
                    this.layout.onRendered();
            } catch(e) {
                // do nothing
            }


            /**
             * Initialize layout sequence (layout sequence is an array that provides layouting commands).
             */
            if (!jQuery.isArray(thi$.layout.layoutSequence)) {
                thi$.layout.layoutSequence = [];
            }

            /**
             * Initialize layout sequence handlers, if none defined in subclass,
             * or get layout sequence by name (see CompositeConstants).
             */
            if (typeof thi$['layoutSequenceDef'] === 'undefined') {
                thi$.layoutSequenceDef = {};
            } else if (typeof thi$['layoutSequenceDef'] === 'string') {
                thi$.layoutSequenceOriginal =thi$.layoutSequenceDef;
                thi$.layoutSequenceDef = copy({}, constants[thi$.layoutSequenceDef]);
            }

            /** Initialize layout sequence handlers (sections). */
            ['init', 'loose', 'compact', 'reduce'].forEach(function(section) {
                if (!jQuery.isArray(thi$.layoutSequenceDef[section])) {
                    thi$.layoutSequenceDef[section] = [];
                }
            });

            /** Add call to inline() to the front of layout sequence. */
            if (thi$.initInlineLayout) {
                thi$.layoutSequenceDef['init'].splice(0, 0, {inline: null});
            }

            /** Activate layout sequence. */
            thi$.layout.setLayoutSequence = function(section) {
                thi$.layout.layoutSequence = copy([], thi$.layoutSequenceDef[section]);
                thi$.layout.layoutSequenceCounter = 0;
            };


            // default for disable spaceEating
            this.layout.disableSpaceEating = function() {
                return null;
            };

            /**
             * .layout.command
             * handle composite layout commabd
             * @param command
             */
            this.layout.command = function(command) {

                // get command's key & value
                for (var value in command) {
                    command.com = value;
                    command.args = command[value];
                }

                // handle command
                switch (command.com) {
                    case 'tile':
                        var maxSize = thi$.getChildrenMaxSize();
                        thi$.resizeChildren(maxSize);
                        break;

                    case 'resetTile':
                        thi$.view._view.find('.spacer').remove();
                        thi$.resetChildrenTile();
                        thi$.compositeRenderComplete();
                        break;

                    case 'looseHeight':
                    	thi$.looseChildrenHeight();
                    	thi$.compositeRenderComplete();
                    break;
                        
                    case 'tileHeight':

                    	var maxHeight = 0, childHeight;
                    	
                    	jQuery(thi$.children).each(function(index, child){
                    		childHeight = child.view._view.outerHeight();
                    		maxHeight = maxHeight > childHeight ? maxHeight : childHeight;
                    	});
                    	
                    	jQuery(thi$.children).each(function(index, child){
                    		child.setHeight(maxHeight);
                    	});
                    	
                    	thi$.compositeRenderComplete();
                    break;

                    case 'adjustHeight' :
                        thi$.adjustHeight();
                        thi$.compositeRenderComplete();
                        break;

                    default :
                        if (typeof thi$[ command.com ] === "function")
                    	thi$[ command.com ]( command.args );
                    	break;
                }

            };

            /**
             * resetRenderedCounter
             */
            this.layout.resetRenderedCounter = function() {
                thi$.layout.onRenderedCounter = 0;
            };

        },

        /**
         * createNewView
         * @param classObj
         * @param config
         * @returns view object
         */
        createNewView : function(classObj, config) {
            return new classObj(merge(config, {
            	viewCerified : true,
            	dummyMode : this.cfg.dummyMode
            }));
        },

        /**
         * Method: startComposite Add children from a data xml.
         *
         * Parameters: cfg - {Object} a configuration object that holds
         * the data. tagName - {String} the name of the XML element to
         * parse for children.
         *
         * @returns {Boolean} - xml validation
         */
        startComposite2 : function(cfg, tagName) {

            // reset rendered counter
            this.layout.resetRenderedCounter();

            // declarations
            var newComponent, thi$ = this, ret = false, xml = jQuery(this.cfg.data), specialConfiguration = null;

            // xml validation
            if (tagName)
                xml = xml.find(tagName).get(0);
            else
                xml = xml.get(0);

            if (xml) {
                ret = true;
                this.isComposite = true;

                // parse the first childNodes
                jQuery(xml).children().each(function(index, element) {

                    // delete the provided rendered function
                    // (the original function saves as layout.onRendered()
                    delete cfg.onRendered;

                    if (thi$.cfg.specialConfiguration){
                        specialConfiguration = thi$.cfg.specialConfiguration;
                        delete specialConfiguration.parent;
                        delete specialConfiguration.data;
                        delete specialConfiguration.container;
                    }

                    // create child component, and merge composite's onRendered
                    newComponent = componentFactory.create(copy({
                        data : element,
                        container: cfg.container || thi$.cfg.container,
                        specialConfiguration: specialConfiguration,
                        // init components with dummyMode (Boolean)
                        dummyMode : thi$.cfg.dummyMode
                    }, merge(cfg, {onRendered : function() {

                        // set rendered counter
                        thi$.layout.onRenderedCounter++;

                        // on full composite rendered, call compositeRenderComplete()
                        if (thi$.layout.onRenderedCounter == thi$.layout.compiledNumOfChildren) {
                            // if rendered happens before all children added
                            if (thi$.children.length == thi$.layout.compiledNumOfChildren) {
                                thi$.compositeRenderComplete();
                            }
                        }
                    }
                    })));

                    if (newComponent) {
                        // add child
                        thi$.add(newComponent);

                        // if rendered happens before all children added
                        if (thi$.layout.onRenderedCounter == thi$.layout.compiledNumOfChildren) {
                            thi$.compositeRenderComplete();
                        }

                    } else {

                        // if !newComponent
                        //thi$.layout.onRenderedCounter--;
                    }

                });
            }

            return ret;
        }, // End of startComposite

        /**
         * compositeRenderComplete
         * this functions calls on full composite's rendering
         */
        compositeRenderComplete : function() {

            // reference
            var thi$ = this;

            // if all the children can't reduce, canReduce will stay 'false'
            // if one of the children is reductionAvailable, set composite's canReduce flag as true
            this.layout.canReduce = this.children.some(function(child) {
                return child.reductionAvailable();
            });

            // reset layout counter
            this.layout.resetRenderedCounter();

            // on composite's layoutSequence, start layout command.
            // on done || if (!layoutSequence), call on composite rendered
            if (this.layout.layoutSequence.length > this.layout.layoutSequenceCounter) {
                this.layout.layoutSequenceCounter++;
                this.layout.command(copy({}, this.layout.layoutSequence[this.layout.layoutSequenceCounter - 1]));
            } else {
                this.layout.layoutSequenceCounter = 0;
                this.layout.layoutSequence = [];
                this.layout.onRendered();
            }

        },

        /**
         * getChildrenMaxSize
         * @returns {childrenMaxWidth, childrenMaxHeight}
         */
        getChildrenMaxSize : function() {

            var childrenSize, maxWidth = 0, maxHeight = 0;

            jQuery(this.children).each(function(index, child) {
                childrenSize = child.getSize();
                maxHeight = Math.max(childrenSize.height, maxHeight);
                maxWidth = Math.max(childrenSize.width, maxWidth);
            });
            // return max size
            return {'width' : maxWidth, 'height' : maxHeight};
        },

        /**
         * resizeChildren
         * @param size
         */
        resizeChildren : function(size) {
            jQuery(this.children).each(function(index, child) {
                child.resize(size);
            });
        },

        /**
         * resizeChildrenWidth
         * @param width
         */
        resizeChildrenWidth : function(width){
        	jQuery(this.children).each(function(index, child) {
                child.setWidth(width);
            });
        },

        /**
         * setHeight
         * @param val
         */
/*
        setHeight : function(val){
        	this._super();
        	var innerHeight = 0, maxInnerHeight = 0, innerSize;
        	
        	// max inner height
        	jQuery(this.children).each(function(index, child) {
        		innerSize = child.view.getInnerSize();
        		if (innerSize) innerHeight = innerSize.height;
        		maxInnerHeight = maxInnerHeight > innerHeight ? maxInnerHeight : innerHeight;
        	});
        	
        	
        	jQuery(this.children).each(function(index, child) {
        		child.setHeight(maxInnerHeight ? maxInnerHeight : val);
        	});
        },
*/

        /**
         * resize
         * @param size
         * @param widthOnly
         */
        resize : function(size, widthOnly) {
            // ref
            var thi$ = this;
            // resize me
            this.view.resize(size);
            // reset rendered counter
            this.layout.resetRenderedCounter();
            // get composite inner size
            var innerSize = this.view.getInnerSize();
            // resize children with composite's innerSize (else, set size)
            jQuery(this.children).each(function(index, child) {
                child.resize(innerSize ? innerSize : size);
            });
        },
        
        /**
         * setWidth
         * @param newWidth
         * @param overwriteLaydownSize- ignore the value in laydownsize and use the new value (used in text viewer)
         */
        setWidth : function(newWidth, overrideLaydownSize) {
            // ref
            var thi$ = this;
            // set new width
            this.view.setWidth(newWidth);
            // reset rendered counter
            this.layout.resetRenderedCounter();
            // get composite inner size
            var innerSize = this.view.getInnerSize();
            // resize children with composite's innerSize (else, set size)
            jQuery(this.children).each(function(index, child) {
                child.setWidth(innerSize ? innerSize.width : newWidth, overrideLaydownSize);
            });
        },
        
	    setMaxWidth: function(newWidth) {
		    this._super(newWidth);

		    this.children.forEach(function(child, index){
			    child.setMaxWidth(newWidth);
		    });
	    },

        /**
         * setHeight
         * @param newHeight
         */
        setHeight : function(newHeight) {
            // ref
            var thi$ = this;
            // set new Height
            this.view.setHeight(newHeight);
            // reset rendered counter
            this.layout.resetRenderedCounter();
            // get composite inner size
            var innerSize = this.view.getInnerSize();
            // resize children with composite's innerSize (else, set size)
            jQuery(this.children).each(function(index, child) {
                child.setHeight(innerSize ? innerSize.height : newHeight);
            });
        },

        /**
         * compact
         */
        compact : function() {
	        this.layoutStatus = 'compact';
            this.layout.setLayoutSequence('compact');

            // compact me
            this.view.compact();

            if (this.children == 0) {
                this.layout.onRendered();
                return;
            }
            // resetRenderedCounter
            this.layout.resetRenderedCounter();

            if (this.layoutSequenceOriginal == 'tileSequence') {
                this.compositeRenderComplete();
            } else {
                this.compactChildren();
            }
        },

        /**
         * compactChildren
         */
        compactChildren : function() {
            /*
            jQuery(this.children).each(function(index, child) {
                child.compact();
            });
            */
            for (var i = 0, j = this.children.length; i < j; ++i) {
                this.children[i].compact();
            }
        },

        /**
         * inline
         * Called if initInlineLayout is set on child.
         */
        inline : function() {
            this.view.compact();
            this.compositeRenderComplete();
        },

        /**
         * inlineChildren
         * css inline-block
         */
        inlineChildren : function() {
            this.children.forEach(function(child) {
                child.view._view.length && (child.view._view[0].style.display = 'inline-block');
            });
            this.compositeRenderComplete();
        },

        /**
         * loose
         */
        loose : function() {
	        this.layoutStatus = 'loose';
            this.layout.setLayoutSequence('loose');

            // loose me
            this.view.loose();

            if (this.children == 0) {
                this.layout.onRendered();
                return;
            }

            // resetRenderedCounter
            this.layout.resetRenderedCounter();

            if (this.layoutSequenceOriginal == 'tileSequence') {
                this.compositeRenderComplete();
            } else {
                this.looseChildren();
            }
        },

        /**
         * looseChildren
         */
        looseChildren : function() {
            jQuery(this.children).each(function(index, child) {
                child.loose();
            });
        },

        /**
         * reduce
         * @param val
         */
        reduce : function(val) {
            this.layout.setLayoutSequence('reduce');

            if (this.children == 0) {
                this.layout.canReduce = false;
                this.layout.onRendered();
                return;
            }
            // resetRenderedCounter
            this.layout.resetRenderedCounter();

            this.children.forEach(function(child) {
                child.reduce();
            });
        },
        
        getReductionStep : function(){
        	return 0;
        },

        /**
         * looseComposite
         */
        looseComposite: function() {
            this.view._view.width('');
        },

        /**
         * resetChildrenTile
         */
        resetChildrenTile : function(){
        	this.children.forEach(function(child) {
                child.resetTile();
            });
        },

        /**
         * resetTile
         * css width & height reset
         * and return to compositeRenderComplete
         */
        resetTile : function() {
        	this._super();
        	this.layout.resetRenderedCounter();        	
        	
        	this.view._view.find('.spacer').remove();
        	
            this.children.forEach(function(child) {
                child.resetTile();
            });
            
//            this.compositeRenderComplete();
        },

        /**
         * squeezeComposite
         * @param domSqueeze {Boolean}
         */
        squeezeComposite: function(domSqueeze, afterState) {

            if (this.children.length < 1) {
                return;
            }
            if (!!!this.squeeze)  this.squeeze = {};

            this.squeeze.looseWidth = this.view._view.width();

            this.view._view.find('.spacer').each(function(index, child) {
                jQuery(child).remove();
            });

            if (!!!domSqueeze) {
                this.view._view.width('');
            }

            this.squeeze.compositeMap = [];
            this.squeeze.compositeLines = 1;
            this.squeeze.compositeWidth = this.view._view.width();

            var widthCounter = 0;

            var domChildren = this.view._content.children();

            for (var index = 0; index < domChildren.length; index++) {

                var childId = jQuery(domChildren[index]).attr('id');
                if (!childId) continue;

                var childIndex = this.getChildIndexById(childId),
                    jQ = jQuery(this.children[childIndex].view._view),
                    item = {
                        'jQ'        : jQ,
                        'index'     : index,
                        'width'     : Compat.fullOuterWidth(jQ),
                        'height'    : jQ.outerHeight(true)
                    };
                this.squeeze.compositeMap.push(item);

                widthCounter += item.width;

                if (widthCounter > this.squeeze.compositeWidth) {
                    this.squeeze.compositeWidth = widthCounter - item.width;
                    this.squeeze.compositeLines++;

                    widthCounter = 0;
                }
            }


            if (this.children.length > 1) {

                if (this.squeeze.compositeMap[0].jQ.offset().left == this.squeeze.compositeMap[1].jQ.offset().left) {
                    if (!!!afterState) {
                        this.compositeRenderComplete();
                    }
                    return;
                }



                var newWidth = this.getSqueezedWidth();
                if (newWidth > 0) {

                    //in order to get real width we need to add element borders width + side padding
                    var widthAddition =
                        (parseInt(this.view._view.css('borderLeftWidth'))  || 0) +
                        (parseInt(this.view._view.css('borderRightWidth')) || 0) +
                        (parseInt(this.view._view.css('paddingLeft'))      || 0) +
                        (parseInt(this.view._view.css('paddingRight'))     || 0);
                    newWidth += widthAddition;
                    this.view._view.width(newWidth);

                    if (!domSqueeze) {
                        var firstChildLeft = this.squeeze.compositeMap[0].jQ.offset().left;

                        this.squeeze.maxElementInOneLine = 1;
                        var tempMax = 1;

                        for (var index = 1; index < this.squeeze.compositeMap.length; ++index) {
                            ++tempMax;
                            if (this.squeeze.compositeMap[index].jQ.offset().left == firstChildLeft) {
                                Perf.create("div").attr('class','spacer').insertBefore(this.squeeze.compositeMap[index].jQ);

                                if (tempMax > this.squeeze.maxElementInOneLine) {
                                    this.squeeze.maxElementInOneLine = tempMax - 1;
                                }

                                tempMax = 0;
                            }
                        }

                        this.squeeze.squeezedWidth = this.view._view.width();
                        this.view._view.width(this.squeeze.looseWidth + widthAddition);

                    }

                }
            }


            // return to render function for more commands or rendered
            if(!!!afterState) {
                this.compositeRenderComplete();
            }

        },

        /**
         * getChildIndexById
         * @param childId
         */
        getChildIndexById : function(childId) {
            var ret;
            jQuery(this.children).each(function(index, child) {
                if (child.view.cfg.id == childId) {
                    ret = index;
                }
            });

            if (ret < 0) throw ('getChildIndexById error');
            return ret;
        },

        /**
         * getSqueezedWidth
         * @returns squeezedWidth
         */
        getSqueezedWidth: function() {
            this.squeeze.widthSimulation = this.squeeze.compositeWidth;
            return this.simulateSqueezedComposite() ? this.squeeze.compositeWidth : '';
        },

        /**
         * simulateSqueezedComposite
         * recursive function
         */
        simulateSqueezedComposite: function() {

            this.squeeze.widthSimulation--;
            var widthCounter = 0;
            var simulateLines = 1;
            this.squeeze.maxWidthSimulation = 0;

            for (var index = 0; index < this.squeeze.compositeMap.length; index++) {

                widthCounter += this.squeeze.compositeMap[index].width;
                if (widthCounter > this.squeeze.widthSimulation) {
                    var lineWidth = widthCounter - this.squeeze.compositeMap[index].width;
                    this.squeeze.maxWidthSimulation = this.squeeze.maxWidthSimulation < lineWidth ? lineWidth : this.squeeze.maxWidthSimulation;
                    widthCounter = this.squeeze.compositeMap[index].width;
                    simulateLines++;
                }
            }

            this.squeeze.widthSimulation = this.squeeze.maxWidthSimulation;

            if (simulateLines > this.squeeze.compositeLines) {
                return true;
            } else {
                this.squeeze.compositeWidth = this.squeeze.widthSimulation;
                return this.simulateSqueezedComposite();
            }
        },

        /**
         * simulateSizeByWidth - simulate component width according to given width
         * @param width
         */
        simulateSizeByWidth : function(avilable_width){
            
            this.createSqueezeMap();

	        var obj_view = this.view._view, 
                totalMarginWidth = obj_view.css("margin-left").px2int() + obj_view.css("margin-right").px2int(),
                totalBorderWidth = obj_view.css("borderLeftWidth").px2int() + obj_view.css("borderRightWidth").px2int(),
                width  = avilable_width - (totalMarginWidth + totalBorderWidth );
                heightAddition = 0,
	            size = {'width' : 0, 'height' : 0},
                line = {'width' : 0, 'height' : 0},
                lines = [],
                maxLineWidth = 0, 
                maxLineHeight = 0;
                lastChecked_newLine = undefined, 
                largerChild = false;
            
            heightAddition += obj_view.css("margin-top").px2int() + obj_view.css("margin-bottom").px2int(); //Total Margin Height
            heightAddition += obj_view.css("borderTopWidth").px2int() + obj_view.css("borderBottomWidth").px2int(); //Total Border Height


            _.each(this.squeeze.compositeMap,function(child){
                if ((maxLineWidth + child.width) > width){

                    // stop rec. on child width is larger than width
                    if (child.width > width) {
                        largerChild = true;
                        return false;
                    }

                    line.height = (maxLineHeight > child.height) ? maxLineHeight : child.height;
                    line.width = maxLineWidth;

                    lines.push({'width' : line.width, 'height' : line.height});

                    maxLineWidth = child.width;
                    maxLineHeight = child.height;
                    lastChecked_newLine = true;

                } else {

                    maxLineWidth += child.width;
                    maxLineHeight = (maxLineHeight > child.height) ? maxLineHeight : child.height;
                    lastChecked_newLine = false;
                }
            });

            if (largerChild) return null;

            line.height = maxLineHeight;
            line.width = maxLineWidth;
            lines.push(line);
            

            // sum up lines to set size
            _.each(lines,function(line){
                size.height += line.height;
            });
            if(lines.length > 1) {
                size.width = this.squeeze.compositeMap[0].width * Math.ceil(this.squeeze.compositeMap.length / lines.length);
            }
            else{
                size.width = this.squeeze.compositeMap[0].width * this.squeeze.compositeMap.length;
            }

            size.width = (size.width + (totalMarginWidth + totalBorderWidth ));
            size.height = (size.height + heightAddition);

            return size;

        },

        /**
         * setVerticalLayout
         */
        setVerticalLayout : function(){
            this._super();
            jQuery(this.children).each(function(index, child){
                child.setVerticalLayout();
            });
        },

        /**
         * createSqueezeMap
         */
        createSqueezeMap : function(){

            if (!!!this.squeeze)
                this.squeeze = {};

            this.squeeze.compositeMap = [];

            var domChildren = this.view._content.children();

            for (var index = 0; index < domChildren.length; index++) {

                var childId = jQuery(domChildren[index]).attr('id');
                if (!childId) continue;

                var childIndex = this.getChildIndexById(childId);
                var item = {};
                var jQ = jQuery(this.children[childIndex].view._view);
                item.jQ = jQ;
                item.index = index;

                if (this.children[childIndex].getVerticalSize) {
                    var sizeV = this.children[childIndex].getVerticalSize(true);
                    item.width = sizeV.width;
                    item.height = sizeV.height;
                } else {
                    item.width = jQ.outerWidth(true);
                    item.height = jQ.outerHeight(true);
                }

                this.squeeze.compositeMap.push(item);
            }
        },

        /**
         * spaceEater
         * @param type
         */
        spaceEater: function(type) {
        	
        	var thi$ = this;
        	var direction = thi$.view._view.css('direction');
        	
        	/**
        	 * spaceEater functions [start]
        	 */ 
        	
				var getTextViewer = function(){
	        		
	        		var componentName, ret = null;
	        		jQuery(thi$.children).each(function(index, child){
	        			componentName = child.name.toLowerCase().split('.');
	        			componentName = componentName[componentName.length - 1];
	        			if (componentName == 'textviewer'){
	        				ret = child;
	        			}
	        		});
	        		return ret;
	        	};
	        	
	        	var getFirstLineRemainder = function(firstLineComponentsArray){
	        		
	        		var firstLineComponentsWidth = 0;
	        		
	        		jQuery(firstLineComponentsArray).each(function(index, child){
						if(child && child.view && child.view._view.length){
							firstLineComponentsWidth += child.view._view.outerWidth() + child.view._view.css('margin-right').px2int() + child.view._view.css('margin-left').px2int();
						}
	        		});
	        		
	        		var remainder = thi$.view._view.width() - firstLineComponentsWidth;
	        		return  remainder;
	        		
	        	};
	        	
	        	var getFirstLineComponentsArray = function(){
	        		var firstLineComponentsArray = [];
	        		var firstOffset = getOffset(thi$.children[0]);
	        		var ret;
	        			
	        		jQuery(thi$.children).each(function(index, child){
	        			
	        			if (index == 0){
	        				
	        				firstLineComponentsArray.push(child);
	        				
	        			} else {
	        				
	        				if (getOffset(child) != firstOffset && !ret){
	        					firstLineComponentsArray.push(child);
	        				} else {
	        					ret = true;
	        				}
	        			}
	        			
	        		});
	        		
	        		return firstLineComponentsArray;
	        		
	        	};
	        	
	        	var getOffset = function(child){
					var tmpOffset = 0;
					if(child && child.view && child.view._view.length){
						tmpOffset = child.view._view.offset().left + (direction == 'rtl' ? child.view._view.width() : 0);
					}
	        		return tmpOffset;
	        	};
        	
        	/**
        	 * spaceEater functions [end]
        	 */
            switch(type){

                case 'all':
                    // get remainder value
                    var remainder = (this.squeeze.looseWidth - this.squeeze.squeezedWidth) / this.squeeze.maxElementInOneLine;
                    if (this.spaceEatingAvailable()) this.expandChildrenWidth(remainder);

                    this.compositeRenderComplete();
                    
                break;

                case 'mtqArea':

                    // TODO: not finished. - wating for QA and more PRD
                    var remainder = (this.mtqArea.squeeze.looseWidth - this.mtqArea.squeeze.squeezedWidth) / this.mtqArea.squeeze.maxElementInOneLine;
//                    if (this.mtqArea.spaceEatingAvailable()){
//                        console.log('mtqSpaceEater reminder: ' + remainder)
//                    }

                    //this.expandChildrenWidth(remainder);
                    this.compositeRenderComplete();

                break;

                default:

                    var textViewer = getTextViewer();

                    // if textViewer doesn't exist, do nothing
                    if (!textViewer){

                        this.compositeRenderComplete();

                    } else {
                        var firstLineRemainder = getFirstLineRemainder(getFirstLineComponentsArray());
                        textViewer.spaceEaterAddWidth(firstLineRemainder);
                        thi$.compositeRenderComplete();
                    }

                break;

            }



        },
        
        spaceEatingAvailable : function(){
        	var ret = false;
        	
        	jQuery(this.children).each(function(index, child){
        		if (child.spaceEatingAvailable()) ret = true;
        	});
        	
        	return ret;
        },

        /**
         * expandChildrenWidth
         * @param addWidth
         */
        expandChildrenWidth : function(addWidth) {

            if (!!!this.layout.disableSpaceEating()) {

                var expendedChildWidth = this.children[0].view._view.width() + addWidth;
                this.resizeChildrenWidth(expendedChildWidth);
            }

        },

        /**
         * looseChildrenWidth
         */
        looseChildrenWidth : function() {
            jQuery(this.children).each(function(index, child) {
                child.looseWidth();
            });
        },

        /**
         * looseChildrenHeight
         */
        looseChildrenHeight: function() {
            jQuery(this.children).each(function(index, child) {
                child.looseHeight();
            });
        },

        /**
         * looseHeight
         */
        looseHeight : function() {
            // delegate
            this._super();
            jQuery(this.children).each(function(index, child) {
                child.looseHeight();
            });
        },

        /**
         * getState - creates state of composite component and it's children
         * @return state
         */
        getState : function() {
            var childState;
            var childrenState = Perf.create('children');  //children state
            this.children.forEach(function(child, index) {

                childState = child.getState();

                if (childState && childState.jquery) {
                    childState.attr('index', index);
                    childrenState.append(childState);
                }
            });

            var mystate = this.addMyState();  //component state

            var state;

            if (mystate == null && childrenState.children().length == 0) {
                return null;
            } else {
                state = this.getStateTag();

                if (mystate) {
                    state.append(jQuery(mystate).children());
                }

                if (childrenState.children().length > 0) {
                    state.append(jQuery(childrenState));
                }
            }

            return state;
        },
        /**
         * setState - parse state of composite component and it's children
         * @param state - xml
         */
        setState : function(state) {
            this._super(state);

            state = jQuery(state);

            if ((state.length > 0) && (state.children('children').length > 0)) {
                var thi$ = this;
                var childIndex;

	            function setChildState(index, childState) {
		            childState = jQuery(childState);
		            childIndex = parseInt(childState.attr('index'));

		            thi$.children[childIndex] && thi$.children[childIndex].setState(childState);
	            }

                state.children('children').children().each(setChildState);
            }
        },

        /**
         * getChildrenByClass return array of children with specific class
         * @param className String
         */
        getChildrenByClass : function(className) {
            var arrChildren = [];

            this.children.forEach(function(child) {
                if (Object.getPrototypeOf(child).name == (className)) {
                    arrChildren.push(child);
                }
            });
            return arrChildren;
        }


    }); // End of t2k.component.Composite

    t2k.component.Composite.isComposite = true;

})();
////////////////////////////////////////
// SRC End --> t2k/component/Composite.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/CompositeView.js
////////////////////////////////////////
(function() {
	
	/**
	 * CompositeView
	 * every composite will inherit CompositeView
	 */
	
	t2k.component.CompositeView = t2k.component.BaseComponentView.subClass({

			/** The class' name (for debugging purpose). */
			name : 't2k.component.CompositeView',

			/**
			 * @constructor
			 */
			ctor : function(config) {
				// delegate 
				this._super(config);
			}, // end of ctor
			
			/**
			 * onViewRendered
			 * override
			 */
			onViewRendered : function(){
				// do nothing
			}, // end of onViewRendered
			
	        compact : function(){
	        	this._view.css('display','inline-block');
	        },
	        
	        loose : function(){
	        	this._view.css('display','block');
	        }//,
	        
//	        /**
//	         * Method: add
//	         * Add a child view to this one. this method assumes that the view has a layout set for maneging sub-views
//	         * (if not then an error is thrown).
//	         *
//	         * Parameters:
//	         *  child - {t2k.core.View} A child view to add to this.
//	         */
//	        add: function(child) {
//	            // Reference the configuration object.
//	            var cfg = this.cfg;
////	            // Check for layout.
////	            if (!cfg.layout || !(cfg.layout instanceof t2k.core.layout.BaseLayout))
////	                throw "not layout is set for this view. sub-views cannot be added";
//	            // Check for content div.
//	            if (!this._content)
//	                throw "not content element is set for this view. sub-views cannot be added";
//	            // Delegate.
//	            this._super(child);
//	            
//	        } // End of add.

		});
	
})();

////////////////////////////////////////
// SRC End --> t2k/component/CompositeView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/options/Options.js
////////////////////////////////////////
(function() {

    t2k.component.options.Options = t2k.component.Composite.subClass({
    	
    	/** The class' name (for debugging purpose). */
        name: 't2k.component.options.Options',

        layoutSequenceDef: 'tileSequence',

        ctor: function(config) {
            // Delegate
            this._super(config);
            var thi$ = this;
            
            this.view = this.createNewView(t2k.component.options.OptionsView, this.cfg);
            this.startComposite2(copy({parent: this.view.cfg.id + '_content'}, config));
            
            this.layout.disableSpaceEating = function(){
            	return thi$.children[0].layout.disableSpaceEating();
            };
            
            if (jQuery(this.cfg.data).attr('random') == 'true'){
            	this.view.domRandomize();
            }
        },
        
        /**
         * setMyState
         * override - set state of component
         * @param state
         */
        setMyState : function(state){
        	// reference
        	var thi$ = this;

        	if(state.length > 0){
                this.setEnabled(jQuery(state).attr('enabled') === 'true');
                
                //apply reverse random order of bank subAnswers from state
                jQuery(state).find('randominsert').children().each(function(index, line){

                    var firstElement = thi$.view.children[parseInt(jQuery(line).attr('firstindex'))];
                    var secondElement = thi$.view.children[parseInt(jQuery(line).attr('secondindex'))];

                    try {
                        if(jQuery.trim(jQuery(line).attr('action')) == 'insertBefore'){
                            firstElement._view.insertBefore(secondElement._view);
                        } else {
                            firstElement._view.insertAfter(secondElement._view);
                        }

                    } catch(e){
                    }

                });

                this.squeezeComposite(true, true);
            }
        },	
        
        /**
         * addMyState
         * override - get state of component
         * @returns state
         */
        addMyState : function(){
            var state = Perf.create('state');
            state.append(this.view.xmlRanDomInsert);
            return state;
        },
        
        /**
         * resetState
         * revert children randomize
         */
        resetState : function(){
        	
        	var thi$ = this;
        	
            //reverse current random order of bank subAnswers
            jQuery(this.view.xmlRandomRevert).children().each(function(index, line){

                var firstElement = thi$.view.children[parseInt(jQuery(line).attr('firstindex'))];
                var secondElement = thi$.view.children[parseInt(jQuery(line).attr('secondindex'))];

                try {
                    if(jQuery.trim(jQuery(line).attr('action')) == 'insertBefore'){
                        firstElement._view.insertBefore(secondElement._view);
                    } else {
                        firstElement._view.insertAfter(secondElement._view);
                    }

                } catch(e){
                }

            });
        }
    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/options/Options.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/options/OptionsView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div class='options' id='{{id}}'>\
        <div class='options_content' id={{id}}_content></div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'tile',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.options.OptionsView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(override(config, defaultConfig));
        }
        
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/options/OptionsView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/applet/AppletConfig.js
////////////////////////////////////////
t2k.component.applet.AppletConfigParams = {
		
		paths: {
			main: "/data/index.html",
			icon: "/data/media/icon.png"
		},
		
		apiVersion					: '1.0',
		enabled						: true,
		editMode					: false,
	    playerSelector          	: 'div.player_content',
	    thumbNailWidth              : 124,
	    thumbNailHeight             : 124,
	    thumbNailImgWidth	        : 120,
	    thumbNailImgHeight	        : 120,
	    
        classes: {
			hidden: 'hidden',
       }
	    
} ;

////////////////////////////////////////
// SRC End --> t2k/component/applet/AppletConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/applet/AppletView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div id='{{id}}' class='appletWrapper_content not_selectable'>\
    		<iframe id='{{id}}_frame' name='applet_{{id}}' class='appletFrame {{appletVisabilityClass}}'/>\
	    	<div id='{{id}}_thumbnail' class='{{thumbnailVisabilityClass}} thumbnail'  style='width:{{thumbnailWidth}}px; height:{{thumbnailHeight}}px'>\
    			<img id='{{id}}_thumbnailImg' class='thumbnailImg'  style='width:{{thumbnailImgWidth}}px; height:{{thumbnailImgHeight}}px'></img>\
	    	    <div id='{{id}}_zoomGlass' class='zoomGlass'>!</div>\
	    	</div>\
        </div>";

	var appletConfig = t2k.component.applet.AppletConfigParams;
    
    
    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
        template: TEMPLATE,
        //appletVisabilityClass: appletConfig.classes.hidden,
        thumbnailVisabilityClass: appletConfig.classes.hidden,
        thumbnailWidth: appletConfig.thumbNailWidth,
        thumbnailHeight: appletConfig.thumbNailHeight,
        thumbnailImgWidth: appletConfig.thumbNailImgWidth,
        thumbnailImgHeight: appletConfig.thumbNailImgHeight,
        
    }; // End of defaultConfig.

    t2k.component.applet.AppletView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(override(config, defaultConfig));
            
            var id = this.cfg.id; 
            this._view = this._appletWrapperContent = jQuery('#' + id);
            this._applet = jQuery('#' + id + '_applet');
            this._thumbnail = jQuery('#' + id + '_thumbnail'); 
            this._thumbnailImg = jQuery('#' + id + '_thumbnailImg'); 
            this.initEvents();
                       
        },
	    
	    dispose: function() {
	    	this.setFrameURL( "" );
	    	this.setBlowupState( null );
	    	this.readyToBeCheckedCallback && delete this.readyToBeCheckedCallback ;
	    	this._super() ;
	    },
        
        onViewRendered : function(){
        	
		}, 
        
        updateFrameSize: function( size ) {
        	$( this._frame ).css( size ) ;
        },
        
        setFrameURL: function( url ) {
        	this._frame && this._frame.attr( "src", url ) ;
        },
        
        readyToBeChecked : function(callback){
        	this.readyToBeCheckedCallback = callback;
        },
        
        setThumbnailImg:function(url){
        	this._thumbnailImg.attr('src', url);
        },
        
        getRootElement:function(){
        	
        	return this._applet;
        },
        
        initEvents:function(){
            var thi$ = this;
            
            this._thumbnail.click(function(){
            	thi$.showBlowup();
            });
        },
        
        setBlowupState: function( state ) {
    		this.blowupState = state ;
        },
        
        showBlowup:function () {
        	var thi$ = this ;
            //ENV.Modal.show(copy(this.cfg, {clonedContent: this._applet.clone()}));
        	
        	var modalConfig = $.extend( {
        		state: this.blowupState
        	}, this.cfg ) ;
			
        	ENV.Modal.show( modalConfig );
        },
        
//        onClose: function( state ) {
//        	this.config.onClose && this.config.onClose( state ) ;
//        },
        
        reduce : function(fullscreenOnly) {
        	
        	$(this._frame).parent().get(0).removeChild(this.$frame[0]);
        	
            var path = $(this.cfg.data).attr('path');
        	
        	this.setThumbnailImg( AbsPath( path + appletConfig.paths.icon ) ) ;
        	
            this._thumbnail.removeClass(appletConfig.classes.hidden);
            if(fullscreenOnly){
                this._view.addClass('fullScreen');
            }
            this.dispatchEvent('cantReduce');
            this.dispatchEvent('onRendered');

            /*
            // Make sure onRendered gets called only once.
            var onRenderedFunction = this.cfg.presenter.layout.onRendered;

            this.cfg.presenter.layout.onRendered = function() {
                onRenderedFunction();
                onRenderedFunction = function() {};
            };
            */

            this.readyToBeCheckedCallback && this.readyToBeCheckedCallback() ;
        },
       
        
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/applet/AppletView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/applet/Applet.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.applet.Applet
     * @desc A textViewer Presenter component class
     * @namespace t2k.component.applet
     * @extends t2k.component.BaseComponent
     * @type {Object}
     */
	var appletConfig = t2k.component.applet.AppletConfigParams;
	
    t2k.component.applet.Applet = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.applet.Applet',

	    /**
	     * applet - ctor
	     * @param config
	     */
	    ctor: function(config) {
		    var thi$ = this;

		    config = $.extend( { onClose: function( state ) {

			    thi$.onModalClose( state ) ;

		    } }, config ) ;

		    // Delegate
            this._super(config);
            
            this.hasApplet = true ;
            
            this.initView();

			this.initApplet();
	    },
        
        /**
         * initView
         * init view and register view presenter events
         */
        initView : function(){
            this.view = this.createNewView(t2k.component.applet.AppletView, this.cfg);
        },

	    initApplet:function (){
		    var container = this.cfg.container || this.cfg.parent.parents('.task_container');
		    var viewPortContainer = jQuery(appletConfig.playerSelector);
		    
		    var appletDataString = $(this.cfg.data).find('data').html() ;
		    var appletData = appletDataString ? appletDataString.replace(/&lt;/ig,"<").replace(/&gt;/ig,">") : "" ;

		    var jsonData = null ;
		    try {
			    jsonData = JSON.parse( appletData);
		    } catch( e ) {
			    jsonData = null ;
		    }

		    appletData = jsonData ? jsonData : appletData ;
		    
		    var appletLocale = ENV.locale.toLowerCase() ;
		
			// hebrew supported applets expects locale to be "iw"
			if( appletLocale == "he_il" ) {
				appletLocale = "iw_il" ;
			}
			
		    this.appletParams = {
			    data         : appletData,
			    apiVersion   : appletConfig.apiVersion,
			    maxSize      : {width : container.width(),height : viewPortContainer.height()},
			    locale       : appletLocale,
			    enable       : appletConfig.enabled,
			    volume       : mediaManager.getVolume(),
			    editMode     : appletConfig.editMode,
			    device       : ENV.behaviors.isTablet ? 'tablet':'pc'
		    };

		    // Applet assets
		    var self = this;
		    this.appletFiles = {};

		    $.each($(this.cfg.data).find('files appletFile'), function(elem) {
			    self.appletFiles[$(this).attr('assetId')] = $(this).attr('path');
		    });

		    this.view.updateFrameSize( this.appletParams.maxSize ) ;

		    var thi$ = this;

		    var id = this.view.cfg.id ;
		    var path = $(this.cfg.data).attr('path');

		    var appletFrame = window.frames[ "applet_" + id ] || window.frames[0] ;

		    thi$.messageMenager = new PostMessageManager( window, appletFrame, appletAPI, thi$ ) ;

		    var relativePath = path + appletConfig.paths.main ;
		    var absolutePath = AbsPath( relativePath ) ;
            
		    thi$.view.setFrameURL( absolutePath ) ;
	    },
	    
	    dispose: function() {
	    	this.messageMenager.destroy() ;
	    	this._super() ;
	    },
        
        compact : function(){
        	this._super();
        },
        
        loose : function(){
        	this._super();
        },
        
        reduce : function(fullscreenOnly){
	        if(this.cfg.dontEnableBlowup) {
		        this.dispatchEvent('cantReduce');
		        this.dispatchEvent('onRendered');
		        return;
	        }

        	this.hasApplet = false ;
        	this._super(fullscreenOnly);
        },
        
        onModalClose: function( state ) {
    		this.keepModalState( state ) ;
        },
        
        keepModalState: function( state ) {
    		this.modalState = state ;
        	this.view.setBlowupState( state ) ;
        },
        
        setMyState:function (state) {
            
        	this.keepModalState( state ) ;

	        var $state = jQuery(state);
            
            if( this.hasApplet ) {
                console.debug( "applet.js - has applet" ) ;
                
                var $appletState = $state.find( "appletState" ) ;
                
                if( $appletState ) {

                    var appletStateStringRaw = $appletState.html() ;
                    var appletStateString = appletStateStringRaw ? appletStateStringRaw.replace(/&lt;/ig,"<").replace(/&gt;/ig,">") : "" ;
                    
                    var appletState = null ;
                    
                    try {
                        
                        appletState = JSON.parse(appletStateString) ;
                        
                    } catch( e ) {
                        
                        appletState = appletStateString;
                        
                    }
                    //save applet state to use inside setStatetoAppletFunction
                    this.appletState = appletState;

	                var thi$ = this;
	                var callback = function () {
		                thi$.setEnabled($state.attr('enabled') === 'true');
		                $appletState = null;
		                $state = null;
	                };

                    //after ready function is fired we can set the state,
                    //otherwise, we need to wait untill it is fired and than set the state
	                if (this.readyToSetState) {
		                this.setStatetoAppletFunction(callback);
	                } else {
		                //save the set state function to later
		                this.setStateFunction = jQuery.proxy(this.setStatetoAppletFunction, this, callback);
	                }
                    
                }

            }
        },

        setStatetoAppletFunction  : function(callback){
            this.callApplet( "setState", this.appletState, callback ) ;
        },

        addMyState:function () {
            dataUtil.logFunction ('addMyState');
        	var state = null ;
        	
        	var $stateTag = Perf.create( "state" ) ;
        	
        	if( this.hasApplet ) {
				
	        	// get async state request ( callback + dummy $tag )
	        	var stateUtilData = StateUtil.getStateCallback( this.view.cfg.id ) ;
	        	
	        	// if state is needed
		        if (stateUtilData.callback) {

			        // communicate with applet to get it's state
			        this.callApplet("getState", null, _.bind( function (state) {
				        // handle Json/String data
				        var isJson = ( typeof state != "string" );
				        var stateString = isJson ? JSON.stringify(state, null, '\t') : state;

				        // applet state wrapper
				        var $final = Perf.create("appletState");
				        $final.attr('enabled', !!this.isEnabled());

				        // add state to wrapper
				        $final.html(stateString ? stateString.replace(/</ig,"&lt;").replace(/>/ig,"&gt;") : '');

				        // update state util with real state from applet
				        stateUtilData.callback($final);

				        $final = null;

			        }, this ) ) ;

		        }
	        	
	        	// prepare dummy
	        	$stateTag.append( stateUtilData.dummyTag ) ;
	        	
        	} else {
        		
        		if( this.modalState ) {
            		$stateTag =  $(this.modalState).clone();
        		}
        	}
        	
        	// return state with dummy to be replace later upon applet callback
        	return $stateTag ;
        },
        
        setEnabled:function( flag ){
	        this.cfg.enabled = flag;
            this.callApplet("setEnabled", flag);
        },
        
        tryAgain:function(){
            this.callApplet( "tryAgain" ) ;
            this.setEnabled(true);
        },
        
        showAnswer:function(){
            this.callApplet( "showAnswer" ) ;
            this.setEnabled(false);
        },
        
        getScore:function( callback ){
        	this.callApplet( "getScore", null, callback ) ;
        },
        
        check:function(setEnabled, callback ){
            dataUtil.logFunction ("Applet.js check");
            var thi$ = this;
            var continueCallback = function(result){
                callback(result);
	            thi$.setEnabled(setEnabled);
            };

        	this.callApplet( "check", null, continueCallback ) ;
        },
        
        readyToBeChecked:function(callback){
        	this.view.readyToBeChecked(callback);
        },

	    checkWidthVsContainer: function(size) {
	    	if( size ) {
	    		this.view.updateFrameSize(size);
	    	}

		    if ( (!this.cfg.isBlowup) && (!size || size.width > this.appletParams.maxSize.width)) {  //applet size doesn't fit, need to be reduced
			    this.reduce();
		    }
	    },
	    
	    callApplet: function( method, config, callback, options ) {
	    	
	    	if( this.hasApplet ) {
	    		
	    		this.messageMenager.send( method, config, callback, options ) ;
	    		
	    	} else {
	    		
	    		console.log( "[DL][APPLET] --> in reduction, no applet instance, calling callback( null )" ) ;
	    		
	    		callback && callback( null ) ;
	    		
	    	}
	    }
    });
    
    
    /**
     * Applet API - start       
     * this = t2k.component.applet.Applet
     * @type {Object}
     */
    var appletAPI = {
    	
        ready: function( config ) {
            dataUtil.logFunction ("appletAPI.ready");
        	var apiVersion ;
        	
            if( config ) {
            	apiVersion = config.apiVersion ;
                this.fullscreenOnly = config.fullscreenOnly ;
            }
            
            this.apiFlags = getAPIFlags( apiVersion ) ;
            
            
            if( this.fullscreenOnly && !this.cfg.isBlowup ){
                
                this.reduce(this.fullscreenOnly);
                this.layout.onRendered(this.fullscreenOnly);

			} else {
			
				var options = {} ;
				
				if( this.cfg.isBlowup ) {
					options.timeout = 10 * 1000 ;
				} else {
					options.timeout = 60 * 1000 ;
				}
				this.callApplet( "init", this.appletParams, appletAPI.rendered.bind(this), options ) ;
			}
		},

        rendered: function( size ) {
            //check if size is bigger then this.appletParams.maxSize
            this.checkWidthVsContainer(size);

        	this.layout.onRendered(this.fullscreenOnly);

            //after ready we can set the applet state (if exists)
            this.readyToSetState = true;
            if(this.setStateFunction){
                this.setStateFunction();
            }
        },

        getAssetUrl: function( config, callback ) {
        	
            if (typeof callback == 'function'){
            	
            	var url = this.appletFiles[ config.assetId ] ;
                callback( {
                	assetUrl: AbsPath( url )
                } ) ;
            }
        },
        
        statusChanged: function( config ) {
        	
        	switch( config.status ) {
        	case "answered":
        		this.cfg.onReadyToBeChecked( true ) ;
        		break ;
        	case "cleared":
        		this.cfg.onReadyToBeChecked( false ) ;
        		break ;
        	default:
        		console.warn( "[DL][APPLET] --> unsupported status: "+ config.status ) ;
        		break ;
        	}
        }
        
    } ;
 
    /**
     * API versions - start
     * @param  {[type]} apiVersion [description]
     * @return {[type]}            [description]
     */
    function getAPIFlags( apiVersion ) {
    	
    	var versionToUse = apiVersion,
    		defaultVersion = "1.0" ;
    	
    	if( !versionToUse ) {
    		console.warn( "[DL][APPLET] --> API version is not defined by applet, using default --> " + defaultVersion ) ;
    		versionToUse = defaultVersion ;
    	}
    	
    	var versionFlags = apiVersionsFlagsMap[ versionToUse ] ;
    	if( !versionFlags ) {
    		console.error( "[DL][APPLET] --> unsupported API version, using default --> " + defaultVersion ) ;
    		versionToUse = defaultVersion ;
    		versionFlags = apiVersionsFlagsMap[ versionToUse ] ;
    	}
    	
    	return versionFlags ;
    }
    
    var apiVersionsFlagsMap = {
    		
    		"1.0" : {
    			progressAlwaysEnabled: true,
    		},
    		
    		"2.0" : {
    			progressAlwaysEnabled: false,
    			waitForStatusChange: true,
    			getScore: true
    		}
    } ;
    
})();
////////////////////////////////////////
// SRC End --> t2k/component/applet/Applet.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/help/HelpView.js
////////////////////////////////////////
(function() {

	var TEMPLATE =
		"<div class='question' id='{{id}}'>\
			<div id={{id}}_content></div>\
		</div>";

	/**
	 * Private: defaultConfig
	 * Hold sensible defaults for the help's view to use.
	 */
	var defaultConfig = {
		layout: 'inline',
		/** The mustache template to render. */
		template: TEMPLATE
	}; // End of defaultConfig.

	t2k.component.help.HelpView = t2k.component.CompositeView.subClass({

		/**
		 * @constructor
		 * @see superclass documentation
		 */
		ctor: function(config) {
			// Delegate.
			this._super(copy(config, defaultConfig));
		},

		onViewRendered : function(){

		}

	});

})();


////////////////////////////////////////
// SRC End --> t2k/component/help/HelpView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/help/Help.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.help.Help
     * @desc A Help Presenter component class
     * @namespace t2k.component.help
     * @extends t2k.component.Composite
     * @type {Object}
     */

    t2k.component.help.Help = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.help.Help',
        
        /**
         * help - ctor
         * @param config
         */
        ctor: function(config) {
        	
            // Delegate            	
            this._super(config);

            this.initView();

	        this.startComposite2({parent: this.view.cfg.id + '_content'});
            
        },
        
        /**
         * initView
         * init view and register view presenter events
         */
        initView : function(){
            this.view = this.createNewView(t2k.component.help.HelpView, this.cfg);
        },

	    /**
	     * setState
	     * Set the question and its children to the specified state xml
	     * @param state - {jQuery} State xml
	     */
	    setState:function (state) {
		    this._super(state);
	    },

	    /**
	     * getState
	     * Get the question state xml
	     * @return state - {jQuery} State xml
	     */
	    getState:function () {
		    return this._super();
	    }
        
    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/help/Help.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/help/HelpItemView.js
////////////////////////////////////////
(function () {

	var TEMPLATE =
		"<div class='question' id='{{id}}' style='visibility: hidden;' >\
			<div id={{id}}_content></div>\
		</div>";

	/**
	 * Private: defaultConfig
	 * Hold sensible defaults for the help item view to use.
	 */
	var defaultConfig = {
		layout:'inline',
		/** The mustache template to render. */
		template:TEMPLATE
	}; // End of defaultConfig.

	t2k.component.help.HelpItemView = t2k.component.CompositeView.subClass({

			/**
			 * @constructor
			 * @see superclass documentation
			 */
			ctor:function (config) {
				// Delegate.
				this._super(copy(config, defaultConfig));
			},

			show: function(flag) {
				this.cfg.container.find('.question').css('visibility', flag ? 'visible' : 'hidden');
			}


		}
	);

})();


////////////////////////////////////////
// SRC End --> t2k/component/help/HelpItemView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/help/HelpItem.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.help.HelpItem
     * @desc A Help Presenter component class
     * @namespace t2k.component.help
     * @extends t2k.component.Composite
     * @type {Object}
     */
	
    t2k.component.help.HelpItem = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.help.HelpItem',
        
        /**
         * help - ctor
         * @param config
         */
        ctor: function(config) {

	        var thi$ = this;

	        var cfgOnRendered = config.onRendered;

	        config.onRendered = function () {
		        thi$.helpRendered = true;
		        if (thi$.helpRendered) {
			        thi$.onHelpItemRendered(thi$, cfgOnRendered);
		        }
	        }

            // Delegate            	
            this._super(config);

            this.initView();

	        this.startComposite2({	parent: this.view.cfg.id + '_content', 
	        						dontEnableBlowup: true,
	        						isInsideModal: true});

	        this.enableLayouting = true;

        },

	    onHelpItemRendered : function(helpItem, cfgOnRendered) {
		    var thi$ = this;
		    helpItem.layoutState = thi$.setLayoutState(helpItem.layoutState);

//		    console.log("onHelpItemRendered - start");
//		    console.time("layouter");

		    var renderedWrapper = function () {
//			    console.log("onHelpItemRendered - done");
//			    console.timeEnd("layouter");

			    globalEvents.run();
			    cfgOnRendered();

			    thi$.view.show(true);
		    };

		    helpItem.enableLayouting = true;

		    var containerHeight = helpItem.cfg.container.height() - (helpItem.cfg.parent.offset().top * 2);

		    DynamicLayoutUtils.dynamicHelpItemLayout(helpItem, containerHeight, helpItem.layoutState, renderedWrapper, helpItem);
	    },

	    setLayoutState: function(state) {

		    var result;

		    switch (state) {

			    case 'compact':
				    result = 'reduce';
				    break;

			    case 'loose':
				    result = 'compact';
				    break;

			    case 'reduce':
				    result = 'loose';
				    break;

			    default: // on first time
				    result = 'loose';
				    break;

		    }

		    return result;
	    },

	    compact : function() {
		  //don't compact me
		    this.compositeRenderComplete();
	    },
        
        /**
         * initView
         * init view and register view presenter events
         */
        initView : function(){
            this.view = this.createNewView(t2k.component.help.HelpItemView, this.cfg);
        },

	    /**
	     * setState
	     * Set the question and its children to the specified state xml
	     * @param state - {jQuery} State xml
	     */
	    setState:function (state) {
		    this._super(state);
	    },

	    /**
	     * getState
	     * Get the question state xml
	     * @return state - {jQuery} State xml
	     */
	    getState:function () {
		    this.state = this._super();
		    return this.state;
	    }
        
    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/help/HelpItem.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/table/TableViewConfig.js
////////////////////////////////////////

// table Viewer constant values
t2k.component.table.TableViewConstants = {

	bordersToClasses : {
		fullGrid : 'boxBorder horizontalGrid verticalGrid',
        verticalGrid : 'boxBorder verticalGrid',
        horizontalGrid : 'boxBorder horizontalGrid'
	},

    MinNumberRowsForViewZebraHorizontal : 4,

    MinNumberCellsForViewZebraVertical  : 4,

    ZebraClasses : {
        'true' : 'dark',
        'false': 'light'
    },

    minimumReadableFontSize	: 16,

    playerSelector          : 'div.player_content',

    reduction : {
        reductionScaleSteps : 10,
        absMinTableWidth : 200
    },

    fadeSpeed : 200,

    zoomTableCssProperty : {
        'marginTop':10,
        'marginRight':30,
        'marginBottom':10,
        'marginLeft':10,
        'paddingTop':16,
        'paddingRight':16,
        'paddingBottom':16,
        'paddingLeft':16,

        'heightX' : 10,
        'notActiveClass' : 'tableMascReductionError',
        'notActiveText' : 'The system can not process the data <br>Please change the data entered. <br>Possible reasons for this: <br> 1. very large volume of data <br> 2. too much is not decreasing components such as graphics, media players, etc.'
    }

};
////////////////////////////////////////
// SRC End --> t2k/component/table/TableViewConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/table/Table.js
////////////////////////////////////////
(function() {

    // copy all tableViewe constants from TableViewConstants to be readable
    var constants = t2k.component.table.TableViewConstants;

    t2k.component.table.Table = t2k.component.Composite.subClass({

        /** The class' name (for debugging and state tag name purpose). */
        name: 't2k.component.table.TableComponent',

        /**
         * Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef: {
            init: [
	            {checkWidthVsContainer: null}
            ],
            reduce: [
                {checkWidthVsContainer: null}
            ],
            loose: [
                {checkWidthVsContainer: null}
            ],
            compact: [
                {checkWidthVsContainer: null}
            ]
        },

        /**
         *  ctor
         * @param config
         */
        ctor: function(config) {
            // Delegate
            this._super(config);

            this.initMembers(config);

            this.view = this.createNewView(t2k.component.table.TableView, override(this.cfg, {
                container       : this.container,
                mainContainer   : this.mainContainer
            }));

            this.initLayout();

	        if (this.cfg.isInsideModal) {
		        this.view._view.parents('.modal_content').css('min-width', '90%');
		        this.view._view.parents('.modal_content').parent().css('min-width', '90%');
	        }

            this.startComposite2({parent: this.view.cfg.id + '_content'});

	        this.compositeCellsChildren();

            this.initZebra();
            
            if(this.cfg.isInsideModal){
                this.view._view.parents('.modal_content').parent().css('min-width', '0');
                this.view._view.parents('.modal_content').parent().css('width', 'auto');
                this.view._view.parents('.modal_content').css('min-width', '0');
                this.view._view.parents('.modal_content').css('width', 'auto');
            }

	        this.view._content.css('width', 'auto');
        },

        /**
         * initLayout
         * init layout vars
         */
        initLayout : function(){
            this.layout.reductionStep = 0;
        },

        /**
         * initMembers
         */
        initMembers : function(config){
            // table text, means that all components inside the table are textViewer
            this.isTableText = jQuery(config.data).attr('tableText') == 'true';
            // mainContainer determines table place
            // and accordingly it : how to perform a reduced ( "question/answer/nothing" ( nothing = '' ) )
            this.mainContainer = jQuery(config.data).attr('mainContainer');

            // init container, if container recieved from configuration, use it (shared, sequence buffer etc..)
            // else, search task container
            this.container = config.container || Perf.select('#' + config.parent).parents('.task_container');

            this.scale = 1;
            this.scaleAvailable = true;
        },

        /**
         * initZebra
         */
        initZebra : function(){
            // on table text [true], start zebra
	        if (this.isTableText) {
		        this.zebraType = this.getZebraType();
		        if (this.zebraType) this.setZebra();
	        }
        },

	    compositeCellsChildren: function() {
		    this.children.forEach(function(row){ //rows
			    row.children.forEach(function(cell){ //cells
				    cell.compositeConfig && cell.startComposite2(cell.compositeConfig);
			    })
		    });
	    },

	    looseWidthCellsChildren: function() {
		    this.children.forEach(function(row){ //rows
			    row.children.forEach(function(cell){ //cells
				    cell.view.looseWidth();
			    })
		    });
	    },

        /**
         * compact
         * on table compact, just set whole table view (inline-block), and return
         * dont compact table's children
         */
        compact : function() {
            this.view.compact();
            this.layout.onRendered();
        },

        /**
         * loose
         * on table loose, just set whole table view (block), and return
         * dont loose table's children
         */
        loose : function() {
            this.view.loose();
            this.layout.onRendered();
        },

        /**
         * checkWidthVsContainer
         * table mathod
         * calls on table rendered
         */
        checkWidthVsContainer : function(){
	        this.looseWidthCellsChildren();

            var containerWidth = this.container.width(),
                tableWidth = this.view._content.width() * this.scale;

            if ((containerWidth < tableWidth) && this.reductionAvailable()){
                this.reduce(1, true);
            } else {
                this.compositeRenderComplete();
            }
        },

        /**
         * reductionAvailable
         * override
         * table reduction, first reduce internal components,
         * and after that scale
         * @return {Boolean}
         */
        reductionAvailable:function () {
	        // check for max. scale reduction
	        if (this.layout.reductionStep < constants.reduction.reductionScaleSteps) {
		        return true;
	        } else {
		        return false;

	        }
        },

        /**
         * reduce
         * override
         * @param val
         */
        reduce : function(val, scale) {
	        if (this.layout.canReduce){
		        this._super(val);
	        } else {
		        this.layout.reductionStep++;
		        this.view.reduce(val);
		        this.compositeRenderComplete();
		        this.dispatchEvent('cantReduce');
	        }
        },

        /**
         * getZebraType
         * @return String - 'zebra-horizontal' || 'zebra-vertical' || null
         */
        getZebraType : function(){

            var rowCount = 0,
                cellCount = 0,
                zebraType = null;

            // loop table row
            jQuery(this.children).each(function (index, row){
                if (row.internalType == 'body') {
                    rowCount++;
                    if (cellCount == 0) {
                        cellCount =  row.bodyCellSum();
                    }
                }
            });

            // check the condition if need zebraType
            if ( (cellCount >= constants.MinNumberCellsForViewZebraVertical) 
                    || (rowCount >= constants.MinNumberRowsForViewZebraHorizontal) ) {
                // check zebraType
                if ( (cellCount > rowCount) || 
                        (cellCount == rowCount && this.view._content.outerWidth() > this.view._content.outerHeight()) ) {
                   zebraType = 'ZebraVertical';
                } else {
                    zebraType = 'ZebraHorizontal';
                }
            }

            return zebraType;
        },

        /**
         * setZebra
         * pass row class by Zebra type and
         */
         setZebra :function(){

             var thi$ = this, dark = false;

             jQuery(this.children).each(function(index, row){
                 if (row.type == 'body'){
                     row['set' + thi$.zebraType](dark);
                     dark = !dark;
                 }
             });

        }
    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/table/Table.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/table/TableView.js
////////////////////////////////////////
(function () {

    var TEMPLATE =
        "<div class='table {{bordersClasses}} {{tableDirection}}' id='{{id}}'>\
        	<div id='{{id}}_content' class='table_content' />\
        </div>";

    // copy all tableViewe constants from TableViewConstants to be readable
    var constants = t2k.component.table.TableViewConstants;

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
        layout:'inline',
        /** The mustache template to render. */
        template:TEMPLATE
    }; // End of defaultConfig.

    /**
     *TableView
     */
    t2k.component.table.TableView = t2k.component.CompositeView.subClass({

        name:'t2k.component.table.TableView',

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config) {
            //  init members
            this.initMembers(config);
            this._super(copy(config, defaultConfig));
        },

        /**
         * initMembers
         * @param config
         */
        initMembers:function (config) {
            this.container = config.container;
            this.mainContainer = config.mainContainer;
            this.borders = jQuery(config.data).attr('borders');
            config.bordersClasses = constants.bordersToClasses[this.borders];
            config.tableDirection = jQuery(config.data).attr('direction');
        },

	    reduce:function() {

		    if(ENV.behaviors.isTablet) {
			    var content_height = this._content.outerHeight(false);

			    this._view.slimScrollHorizontal && this._view.slimScrollHorizontal({
				    height: content_height+12,
				    width: '100%',
				    alwaysVisible: true,
				    start: (ENV.contentDirection === 'ltr' ? 'left' : 'right'),
				    position: 'bottom',
				    size: '10px'
			    }).css({ background: 'transparent', paddingBottom: '10px' });
		    } else {
			    this._view.css({'overflow': 'auto',
				    'max-width': this.cfg.parent.width()
			    });

		    }

	    }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/table/TableView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/table/Row.js
////////////////////////////////////////
(function () {

    // copy all tableViewe constants from TableViewConstants to be readable
    var constants = t2k.component.table.TableViewConstants;

    t2k.component.table.Row = t2k.component.Composite.subClass ( {

        /** The class' name (for debugging purpose). */
        name:'t2k.component.table.Row',

        ctor:function ( config ) {
            // Delegate
            this._super ( config );
            this.initMembers ( config );

	        this.view = this.createNewView(t2k.component.table.RowView, config);
	        this.startComposite2({  parent:this.view.cfg.id,
		                            minimumReadableFontSize:constants.minimumReadableFontSize,
		                            numOfColumns:this.cfg.data.children.length
	                             });

	        this.setInternalType();
        },

        /**
         * initMembers
         * @param config
         */
        initMembers:function(config) {

            // this.type recieved from xml.
            // if there is no type on the xml, set (row) type = body
            // options: body, copyrights, title
            this.type = config.type = !!jQuery (config.data).attr('type') ? jQuery(config.data).attr('type') : 'body';
        },

        /**
         * setInternalType
         * set internal type of row for calculation Zebra Type in table.getZebraType()
         */
        setInternalType:function () {

            // if type is copyrights or title, set it type and return
            if (this.type != 'body'){
                this.internalType = this.type;
                return;
            }

            // if type is body, internal type will be determine by it's cell
            // options: body, difinition, summary
            var thi$ = this,
                counter = {
                    definition      : 0,
                    summary         : 0,
                    intersection    : 0,
                    body            : 0
                };

            // count cell types
            jQuery(this.children).each(function(index, cell) {
                counter[cell.type]++;

                // if one cell type counter is 2, set this type for the whole row
                if (counter[cell.type] > 1) {
                    thi$.internalType = cell.type;
                    return;
                }
            });
        },

        /**
         *  bodyCellSum
         *  count body cell
         *  [ for calculation Zebra Type in table.getZebraType() ]
         *  @return bodyCellSum {int}
         */
        bodyCellSum : function() {

            var bodyCellSum = 0;

            jQuery(this.children).each(function(index, cell) {
                if (cell.type == 'body') bodyCellSum++;
            });

            return bodyCellSum;
        },

        /**
         * setZebraHorizontal
         * passed current zebra class to cell.setZebra()
         * is called from table.setZebra()
         * @param dark
         */
        setZebraHorizontal : function(dark) {
            jQuery(this.children).each(function(index, cell) {
                cell.setZebra(dark);
            });
        },

        /**
         * setZebraVertical
         * passed current zebra class to cell.setZebra()
         * is called from table.setZebra()
         */
        setZebraVertical : function() {

            var dark = false;

            jQuery(this.children).each(function(index, cell) {
                cell.setZebra(dark);
                dark = !dark;
            });
        }

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/table/Row.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/table/RowView.js
////////////////////////////////////////
(function() {

	var TEMPLATE =
        "<div class='row {{type}}' id='{{id}}'>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
        layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

	/**
	 *TableView
	 */
	t2k.component.table.RowView = t2k.component.CompositeView.subClass({

				/** The class' name (for debugging purpose). */
				name : 't2k.component.table.RowView',

				/**
				 * @constructor
				 * @see superclass documentation
				 */
				ctor : function(config){
                    this._super(copy(config, defaultConfig));
				}

			});

	})();
////////////////////////////////////////
// SRC End --> t2k/component/table/RowView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/table/Cell.js
////////////////////////////////////////
(function() {

    // copy all tableViewe constants from TableViewConstants to be readable
    var constants = t2k.component.table.TableViewConstants;

    t2k.component.table.Cell = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.table.Cell',

        /**
         * ctor
         * @param config
         */
        ctor: function(config) {
            // Delegate
            this._super(config);
            this.initMembers(config);

            this.view = this.createNewView(t2k.component.table.CellView, config);
	        this.compositeConfig = {
		        parent: this.view.cfg.id,
		        container: this.view._view,
		        minimumReadableFontSize: constants.minimumReadableFontSize,
		        maxReduction_minReadable : true,
		        setMaxWidth : this.cfg.container.outerWidth()
	        };
        },

        /**
         * initMembers
         * @param config
         */
        initMembers:function(config){
            var type = jQuery(config.data).attr('type');
            this.type = config.type = !!type ? type : 'body';
        },

        /**
         * setZebra
         * set zebra class to current cell
         * is called from Row.setZebraVertical() or Row.setZebraHorizontal()
         * @param dark
         */
        setZebra : function(dark) {
            this.view.addClass(constants.ZebraClasses[dark.toString()]);
         }
    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/table/Cell.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/table/CellView.js
////////////////////////////////////////
(function() {

	var TEMPLATE =
        "<div class='cell {{type}} {{zebraClass}}' id='{{id}}' style='width: {{cellWidth}}' >\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
        layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

	/**
	 *TableView
	 */
	t2k.component.table.CellView = t2k.component.CompositeView.subClass({

        /** The class' name (for debugging purpose). */
        name : 't2k.component.table.CellView',

        /**
         * @constructor
         * @see superclass documentation
         */

        ctor:function (config) {
	        config.cellWidth = config.numOfColumns ? (100 / config.numOfColumns) + '%' : '100%';

	        this._super(copy(config, defaultConfig));
        },

        /**
         * append current Zebra class to DOM (div.cell)
         * @param ClassName
         */
        addClass:function(ClassName){
            this._view.addClass(ClassName);
        }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/table/CellView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/LayoutGroup.js
////////////////////////////////////////
(function() {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//  add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.LayoutGroup
     */
    t2k.component.LayoutGroup = t2k.component.Composite.subClass({

    	/** The class' name (for debugging purpose). */
        name: 't2k.component.LayoutGroup',

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor: function(config) {
            this._super(config);
            this.view = this.createNewView(t2k.component.LayoutGroupView, this.cfg);
            delete this.cfg.template;
            this.startComposite2(merge({parent: this.view.cfg.id + '_content'}, config));
        }, // End of ctor
        
        compact: function(){
        	this._super();
        	this.squeezeComposite();
        },
        
        loose: function(){
        	this._super();
        	this.looseComposite();
        }
        
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
})();

////////////////////////////////////////
// SRC End --> t2k/component/LayoutGroup.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/LayoutGroupView.js
////////////////////////////////////////
(function() {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    var TEMPLATE =
        "<div id='{{id}}' class='layoutGroup'>\
            <div id={{id}}_content></div>\
        </div>";

    var defaultConfig = {
    	 layout: 'vertical',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.AnswerView
     * The view for the answer part of tasks.
     */
    t2k.component.LayoutGroupView = t2k.component.CompositeView.subClass({

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        } // End of ctor

    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/LayoutGroupView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/QuestionGroup.js
////////////////////////////////////////
(function() {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//  add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.QuestionGroup
     */
    t2k.component.QuestionGroup = t2k.component.Composite.subClass({

    	/** The class' name (for debugging purpose). */
        name: 't2k.component.QuestionGroup',

        /**
         * Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef: {
            compact: [
                {spaceEater: 'textOnly'}
            ]
        },

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor: function(config) {
            this._super(config);
            this.view = this.createNewView(t2k.component.QuestionGroupView, this.cfg);
            delete this.cfg.template;
            this.startComposite2(merge({parent: this.view.cfg.id + '_content'}, config));
        } // End of ctor

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
})();

////////////////////////////////////////
// SRC End --> t2k/component/QuestionGroup.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/QuestionGroupView.js
////////////////////////////////////////
(function() {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    var TEMPLATE =
        "<div id='{{id}}' class='questionGroup'>\
            <div id={{id}}_content></div>\
        </div>";

    var defaultConfig = {
    	 layout: 'vertical',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.QuestionGroup
     * The view for the answer part of tasks.
     */
    t2k.component.QuestionGroupView = t2k.component.CompositeView.subClass({

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        }, // End of ctor
        
        compact : function(){
        	var width = this._view.width();
        	this._view.width(width);
        	// don't compact my view
        }

    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/QuestionGroupView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/buttons/ButtonView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div id='{{id}}' class='{{style}} disabled {{currState}} not_selectable'>\
            <div id='{{id}}_content' class='{{style}}_content'>\
                <div id='{{id}}_icon' class='{{style}}_icon'></div>\
                <div id='{{id}}_title' class='{{style}}_text'></div>\
            </div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.buttons.ButtonView = t2k.core.View.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.buttons.ButtonView',

        /**
         * 2d0 - complete doc
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

            this.setMode(this.cfg.currMode);
            this.setReduced( !!this.cfg.isReduced ) ;

            // Closure ref.
            var thi$ = this;

            // handle click + prevent fast second click (300ms delay)
            function clickHandler() {
                if (thi$.isEnabled()) {
                    mediaManager.pauseAll();
                    thi$.dispatchEvent(thi$.cfg.currMode);
                }
                setTimeout( function() {
                	thi$._view && thi$._view.one( 'click', clickHandler ) ;
                }, ENV.behaviors.isTablet ? 600 : 300 ) ;
            };

	        if (ENV.behaviors.bindButtonTouchStartAndEnd) {
		        TabletUtil.bindButtonTouchStartAndEnd(this._view);
		        this._view.one('touchstart', clickHandler);
	        } else {
		        this._view.one('click', clickHandler);
	        }
        },

        setMode: function(name) {
            this._view.click(null);
            Perf.select('#' + this.cfg.id).removeClass(this.cfg.currMode);
            this.cfg.currMode = name;
            Perf.select('#' + this.cfg.id).addClass(this.cfg.currMode);
            var state = this.cfg.states[this.cfg.currMode];
            Perf.select('#' + this.cfg.id + '_title').text(state? state.title: '');
            // or set tooltip, if we're reduced
            if (this.cfg.isReduced) {
            	this.setTooltip(this.cfg.states[this.cfg.currMode].title);
            }
        },

        setText: function(label) {
             Perf.select('#' + this.cfg.id + '_title').text(label);
        },

        getText:function(){
          return Perf.select('#' + this.cfg.id + '_title').text();
        },

        setReduced: function( value ) {
        	var title = Perf.getElementById(this.cfg.id + '_title');
        	if (this.cfg.isReduced != value) {
	        	if (value) {
	            	title.style.display = 'none';
	            	this._view.addClass('reduced');
	            	this.setTooltip(this.cfg.states[this.cfg.currMode].title);
	        	}
                else {
                    title.style.display = 'inline';
	        		this._view.removeClass('reduced');
	        	}
	        	this.cfg.isReduced = value ;
        	}
        },

        setTooltip: function(value) {
            Perf.getElementById(this.cfg.id + '_icon').title = value;
        }
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/buttons/ButtonView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/buttons/Button.js
////////////////////////////////////////
(function() {

    t2k.component.buttons.Button = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.buttons.Button',

        ctor: function(config) {
            // Delegate
            this._super(config);
            // Create the view
            this.initView() ;
            // Start in disabled mode.
            this.cfg.enabled = false ;
            this.setEnabled( false ) ;
        },
        
        initView: function() {
        	this.view = new t2k.component.buttons.ButtonView(this.cfg) ;
        },

        setClickHandler: function(mode, callback) {
        	
            // make the triggered callback be delayed to run after focus-out events  
        	function delayedCallback() {
                var argz = arguments ;
				var funcThis = this ;
				function applyFunc() {
					callback.apply( funcThis, argz ) ;
	            } ;
				setTimeout( applyFunc, 10 ) ;
            } ;
            
//            this.view.registerEvent(mode, callback);
            this.view.registerEvent(mode, delayedCallback);
        },

        setMode: function(name) {
            this.cfg.currMode = name;
            this.view.setMode(name);
        },

        setText: function(label) {
            this.view.setText(label);
        },

        getText:function(){
          return this.view.getText();
        },

        getMode: function() {
            return this.cfg.currMode;
        },
        
        setReduced: function( value ) {
        	if( this.cfg.isReduced != value ) {
	        	this.cfg.isReduced = value ;
	        	this.view.setReduced( value ) ;
        	}
        },

        getState: function() {
            var state = jQuery('<button/>');
            jQuery(state).attr("enabled", !!this.isEnabled());
            jQuery(state).attr("visible", !!this.isVisible());
            jQuery(state).attr("mode", this.cfg.currMode);
            jQuery(state).attr("text" , this.getText());
            return state;
        },

        setState: function(xml) {
            this._super(xml);
            var jqXml = jQuery(xml);
            if (jqXml.length <= 0) return;
            this.setEnabled(jqXml.attr('enabled') === 'true');
            this.setVisible(jqXml.attr('visible') === 'true');
            this.setMode(jqXml.attr('mode'));
            this.setText(jqXml.attr('text'));
        },

        setEnabled: function(flag) {
            this.prevEnabledState = this.isEnabled();
            this._super(flag);
        },

        setPrevEnabledState: function(){
            this.setEnabled(this.prevEnabledState);
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/buttons/Button.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/buttons/ProgressButtonView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div id='{{id}}' class='{{style}} disabled {{currState}} not_selectable'>\
            <div id='{{id}}_content' class='{{style}}_content'>\
                <div id='{{id}}_icon' class='{{style}}_icon'><span id='check'>8</span><span id='tryagain'>=</span><span id='showanswer'>9</span><span id='progress'>4</span></div>\
                <div id='{{id}}_title' class='{{style}}_text'></div>\
            </div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.buttons.ProgressButtonView = t2k.component.buttons.ButtonView.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.buttons.ProgressButtonView',

        /**
         * 2d0 - complete doc
         */
        ctor: function(config) {
            // Delegate.
            this._super(override(config, defaultConfig));
        }

    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/buttons/ProgressButtonView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/buttons/ProgressButton.js
////////////////////////////////////////
(function() {

    t2k.component.buttons.ProgressButton = t2k.component.buttons.Button.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.buttons.ProgressButton',

        initView: function() {
        	this.view = new t2k.component.buttons.ProgressButtonView(this.cfg) ;
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/buttons/ProgressButton.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/buttons/ToggleButtonView.js
////////////////////////////////////////
(function() {

    t2k.component.buttons.ToggleButtonView = t2k.component.buttons.ButtonView.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.buttons.ToggleButtonView',

        ctor: function(config) {
            // Delegate.
            this._super(config);
            // Closure ref.
            var thi$ = this;
            
            this._view.click( function(){
            	thi$.dispatchEvent('toggle');
            } ) ;
        },
        
        setToggled: function( flag ){
        	this.toggled = flag ;
        	if( flag ) {
        		this._view.addClass( 'toggled' ) ;
        	} else {
        		this._view.removeClass( 'toggled' ) ;
        	}
        }
        
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/buttons/ToggleButtonView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/buttons/ToggleButton.js
////////////////////////////////////////
(function() {

    t2k.component.buttons.ToggleButton = t2k.component.buttons.Button.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.buttons.ToggleButton',

        ctor: function(config) {
            // Delegate
            this._super(config);
            this.toggled = this.cfg.toggled ;
            
            var thi$ = this ;
            
            // register view events
            this.view.registerEvent( 'toggle', function() {
                thi$.toggled = !thi$.toggled ;
                thi$.view.setToggled( thi$.toggled ) ;
                thi$.cfg.clickCallback( thi$.toggled ) ;
            } ) ;
        },

        initView: function() {
            this.view = new t2k.component.buttons.ToggleButtonView( this.cfg ) ;
        },

        getState: function() {
            var state = _super.getState() ;
            jQuery(state).attr( 'toggled', !!this.cfg.toggled ) ;
            return state ;
        },

        setState: function(xml) {
            this._super(xml);
            var jqXml = jQuery( xml ) ;
            if ( jqXml.length <= 0 ) return ;
            this.setToggled( jqXml.attr( 'toggled' ) );
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/buttons/ToggleButton.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/buttons/PushButtonView.js
////////////////////////////////////////
(function() {

    t2k.component.buttons.PushButtonView = t2k.component.buttons.ButtonView.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.buttons.PushButtonView',

        ctor: function(config) {
            // Delegate.
            this._super(config);
            // Closure ref.
            var thi$ = this;

            // set push and release callbacks
	        function onMouseDown(e) {
		        e.stopPropagation();
		        if (thi$.isEnabled()) {
			        thi$.dispatchEvent('push');
		        }

		        jQuery(document).one('mouseup', onMouseUp);
		        return false;
	        }

	        function onMouseUp(e) {
		        e.stopPropagation();
		        if (thi$.isEnabled()) {
			        thi$.dispatchEvent('release');
		        }
		        return false;
	        }

            this._view.mousedown(onMouseDown);
        }
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/buttons/PushButtonView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/buttons/PushButton.js
////////////////////////////////////////
(function() {

    t2k.component.buttons.PushButton = t2k.component.buttons.Button.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.buttons.PushButton',

        ctor: function(config) {
            // Delegate
            this._super(config);

            // register view events
            this.view.registerEvent('push', this.cfg.pushCallback);
            this.view.registerEvent('release', this.cfg.releaseCallback);
        },

        initView: function() {
            this.view = new t2k.component.buttons.PushButtonView(this.cfg) ;
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/buttons/PushButton.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/imageViewer/ImageViewerViewConfig.js
////////////////////////////////////////

// Image Viewer constant values
t2k.component.imageViewer.ImageViewerViewConstants = { 
		playerSelector		: "div.player",
		navigationBarSelector : "div.progress-bar",
		minimumReadableParamName : "minimumReadable",
		thumbnailWidth : 124,
		thumbnailHeight : 124,
		minImageConteinerWidth : 124,
		absoluteMinimumLong : 252,
		absoluteMinimumShort : 70,
		reductionRange : 3,
		reduction : 'reduction',
		optimumWidthCoefficient : 0.8,
		thumbnailWrapperPadding : 4,
		normalWrapperPadding : 2,
		iconSize : 20,
		maximumSizeIndex : 0.72,
		maximumSizeIndex_Balloon : 0.98,
		imageViewerMinimumWidth : 252,
		defaultMinReadable : 1,
        blowupMargin : 10,
        blowupMarginRight : 20, // + scrollbar width
        modalCloseSize: 35,
		sharedAreaPadding : {
			top: 42,
			left: 21
		}
};
////////////////////////////////////////
// SRC End --> t2k/component/imageViewer/ImageViewerViewConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/imageViewer/ImageViewer.js
////////////////////////////////////////
(function() {

    t2k.component.imageViewer.ImageViewer = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.imageViewer.ImageViewer',

        ctor: function(config) {
            // Delegate
            this._super(config);
            // reference
            var thi$ = this;

	        this.$data = jQuery(this.cfg.data);

            // get pic type and init view with onAbsMin event
            this.getPicType();
            
            this.initMembers();
            
            if (this.type == 'swf'){
            	this.view = this.createNewView(t2k.component.imageViewer.ImageViewerViewSwf, merge(this.cfg,{
            			isInteractive: jQuery( this.cfg.data ).attr( 'isInteractive' ) == 'true',
            			events:{
                    		onAbsMin : function(){
                    			if (thi$.cfg.onAbsMin)
                    				thi$.cfg.onAbsMin();
                    		},
                    		
                    		setTumbnailAppliedForSmallImage : function(){
                    			thi$.tumbnailAppliedForSmallImage = true;
                    		}
                    	}	
            		}
            	));
            } else {
            	this.view = this.createNewView(t2k.component.imageViewer.ImageViewerView, merge(this.cfg,{
	        			events:{
	                		onAbsMin : function(){
	                			if (thi$.cfg.onAbsMin)
	                				thi$.cfg.onAbsMin();
	                		},
	                		
	                		setTumbnailAppliedForSmallImage : function(){
                    			thi$.tumbnailAppliedForSmallImage = true;
                    		}
	                	}
	            	}
	            ));
            }
        },
        /**
		 * reduce
		 */
		reduce : function(val){
			this._super(val);
			this.layout.onRendered();
		},
		
		/**
		 * setEnabled
		 * @param flag
		 */
		setEnabled : function(flag){
			this._super(flag);
			this.view.setEnabled(flag);
		},
		
		/**
		 * getPicType
		 * from xml
		 */
		getPicType: function(){
			var src = this.cfg.src ? this.cfg.src : this.$data.attr('src');
			var srcArr = src.split('.');
            this.type = srcArr[srcArr.length - 1];
		},
		
		initMembers : function(){
			this.tumbnailAppliedForSmallImage = false;
			this.cfg.imageWidth =  this.$data.length  ? (this.$data.attr('width')  ? this.$data.attr('width').px2int()  : 1) : this.cfg.width;
			this.cfg.imageHeight = this.$data.length  ? (this.$data.attr('height') ? this.$data.attr('height').px2int() : 1) : this.cfg.height;
		}

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/imageViewer/ImageViewer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/imageViewer/ImageViewerView.js
////////////////////////////////////////
(function () {

    var TEMPLATE =
        "<div class='imageViewer' id='{{id}}'>\
        	<div id='{{id}}_content' class='imageViewer_content'>\
        		<div id='{{id}}_imageContainer' class='imageContainer' style='width:{{imageContainerWidth}}px;height:{{imageContainerHeight}}px'>\
        			<img id='{{id}}_img' class='image' src='{{src}}' style='width:{{imgWidth}}px; height:{{imgHeight}}px' alt='{{alt}}'/>\
        			<div id='{{id}}_zoomButton' class='zoomButton'/>\
        			{{#enableSoundButton}}\
        				<div id='{{id}}_soundButton' class='soundButton'></div>\
					{{/enableSoundButton}}\
        		</div>\
				{{#enableCredit}}\
        			<div id='{{id}}_credit' class='credit'></div>\
				{{/enableCredit}}\
				{{#enableCaption}}\
				<div id='{{id}}_caption' class='caption'></div>\
				{{/enableCaption}}\
        	</div>\
			<div id='{{id}}_masc' class='masc'></div>\
        </div>";


    // copy all ImageViewer constants from ImageViewerViewConstants to be readable
    var constants = t2k.component.imageViewer.ImageViewerViewConstants;

    /**
     * ImageViewerView
     */
    t2k.component.imageViewer.ImageViewerView = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.imageViewer.ImageViewerView',

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config, superMe) {

            // first ctor init it's class members and get image size
            // getImgSize.. calls ctor again fot _super()

	        //if in config we got viewObject - use it don't create image (d&d dropping event)
	        if (config.viewObject) {
		        this.cfg = config;

		        this.initClassMembers(config);
		        this._view = this.cfg.viewObject;
		        this.cfg.parent.html(config.viewObject);

		        this.setEnabled(true);
		        this._view.show();

		        // build imageSound / credit / caption
		        this.buildImageSound();

		        // dispatch rendered
		        this.dispatchEvent('onRendered');

	        } else {
		        if (!superMe) {
			        this.cfg = config;
			        this.initClassMembers(config);
			        this.getImgSize();
			        this.checkBlowup();
		        } else {
			        // super - render mustache
			        this._super(copy(this.cfg, {
				        template:this.getTemplate(),
				        src:this.src,
				        imgWidth:this.imageWidth,
				        imgHeight:this.imageHeight,
				        imageContainerHeight:this.imageContainerHeight,
				        imageContainerWidth:this.imageContainerWidth + 2,
				        alt:this.alt,
				        enableSoundButton:!!this.imageSound,
				        enableCredit:!!this.credit,
				        enableCaption:!!this.caption
			        }));

			        this.convinietShortHand();
			        this.preventUserDrag();
			        this.checkBlowup();
			        this.checkThumbnail();

			        // build imageSound / credit / caption
			        this.buildAdditionalComponents();

			        // dispatch rendered
			        this.dispatchEvent('onRendered');
		        }
	        }
        },

        /**
         * getTemplate
         * this function will override on imageViewerViewSwf,
         * to provide each class it's own template
         * @returns {String}
         */
        getTemplate:function () {
            return TEMPLATE;
        },

        resize:function (size) {

        },

        /**
         * resetTile
         * override
         */
        resetTile : function(){

        },

        /**
         * render
         * override original render.
         * if image viewer is not a blowup, add the html before the place holder and delete the place holder
         * @param element
         * @param template
         * @param context
         */
        render:function (element, template, context) {
	        jQuery(element).append(Mustache.to_html(template, context));
        },

        /**
         * convinietShortHand
         */
        convinietShortHand:function () {
            this._imageContainer = this._view.find('div[class=imageContainer]');
            this._image = this._view.find('img[class=image]');
            this._credit = this._view.find('div[class=credit]');
            this._capture = this._view.find('div[class=capture]');
            this._masc = this._view.find('div[class=masc]');
        },


        /**
         * Don't let user drag the image viewer.
         */
        preventUserDrag: function() {
            // FireFox, WebKit
            this._image.attr({draggable: false});
            // + IE
            this._image.bind("dragstart", function() {return false});
        },


        /**
         * checkBlowup
         * check if image viewer should apply blowup, and init blowup behavior
         */
        checkBlowup:function () {
            if (!this.enableBlowup && !this.isBlowup && (this.imageWidth < (this.nativeImageWidth * this.minimumReadable))) {
                this.applyBlowup();
            }else{
                if(this.cfg.dontEnableBlowup && (this.imageWidth < (this.nativeImageWidth * this.minimumReadable))){
                    this.dispatchEvent('cantReduce');
                    return;
                }
            }
        },

        /**
         * applyBlowup
         * init blowup behavior
         */
        applyBlowup:function () {
            var thi$ = this;
            // set blowup flag - true
            this.enableBlowup = true;

            // if configuration doesn't forbid blowup, init blowup behavior
            if (!this.dontEnableBlowup || (!!this.caption || !!this.credit )) {
                // hover behavior sets by css
                this._content && this._content.addClass('blowup');

	            var imageContainerWidth = this._imageContainer.width();
	            imageContainerWidth += this._zoomButton.width();
	            this._imageContainer.width(imageContainerWidth);

                // onClick show blowup
                this._imageContainer.click(function () {
                    thi$.showBlowup();
                });
            }
        },

        /**
         * checkThumbnail
         * check if image viewer should be at thumbnail mode and apply
         */
        checkThumbnail:function () {

            // if image viewer is already at thumbnail mode - return
            if (!!this.enableThumbnail || !!this.cfg.disableTumbnail || this.cfg.dontEnableBlowup) {
                return;
            }

            // u'll find a full explanation at initClassMembers() fnc.
            if (this.tumbnailAppliedForSmallImage) {
                this.applyThumbnail();
                return;
            }

            var longest, shortest;

            // get shortest and longest
            if (this.imageWidth > this.imageHeight) {
                longest = this.imageWidth;
                shortest = this.imageHeight;
            } else {
                longest = this.imageHeight;
                shortest = this.imageWidth;
            }

            // check img size vs. thumbnail size
            if ((longest < constants.absoluteMinimumLong) || (shortest < constants.absoluteMinimumShort)) {

                // don't apply thumbnail on Zero reduction step
                if (this.reductionStep > 0) {
                    this._imageContainer.length && (this._imageContainer[0].style.paddingLeft = '');
                    this.applyThumbnail();
                }
                else {
                    // on zero stepReduction align the image to the center
                    this._imageContainer.length && (this._imageContainer[0].style.paddingLeft =
                        ((this.imageContainerWidth - this.imageWidth) / 2) + 'px');
                }
            }
        },

        /**
         * applyThumbnail
         */
        applyThumbnail:function () {

            if (!!this._soundButton || this._credit.length || !!this._caption) {
                this.applyBlowup();
            }

            // dispatch cantReduce any more
            this.dispatchEvent('cantReduce');
            this.dispatchEvent("onAbsMin", this);

            // set thumbnail flag - true
            this.enableThumbnail = true;
            // remove imageSound, credit and caption
            this.removeAdditionalComponents();
            this._content && this._content.addClass('thumbnail');

            // get image conteiner size
            this.imageContainerHeight = this.thumbnailSize.height;
            this.imageContainerWidth = this.thumbnailSize.width;

            // set Img Size and align image to center
            if (!this.optimumSizeIsSmallerThanThumbnail()) {
                this.setSizeImageByRealAspectRatio(this.imageWidth, this.imageHeight);
            } else if (!this.caption && !this.credit) {
	            this.setSizeImageByRealAspectRatio(this.thumbnailSize.width, this.thumbnailSize.height);
                this.dispatchEvent('setTumbnailAppliedForSmallImage');
                this.tumbnailAppliedForSmallImage = true;
            }
            this.changeImageSizes({
                'left':parseInt((this.imageContainerWidth - this.imageWidth) / 2, 10),
                'top':parseInt((this.imageContainerHeight - this.imageHeight) / 2, 10)
            });

        },

        /**
         * calculated and modified image size accordingly Real Aspect Ratio of Image
         * @param widthImg
         * @param heightImg
         */
        setSizeImageByRealAspectRatio:function (widthImg, heightImg) {
            if (widthImg > heightImg) {
                this.imageWidth = parseInt(constants.thumbnailWidth - 2, 10);
                this.imageHeight = parseInt(constants.thumbnailWidth * this.aspectRatio, 10);

            } else if (heightImg > widthImg) {
                this.imageWidth = parseInt(constants.thumbnailWidth / this.aspectRatio, 10);
                this.imageHeight = parseInt(constants.thumbnailHeight - 2, 10);

            } else {
                this.imageWidth = parseInt(constants.thumbnailWidth - 2, 10);
                this.imageHeight = parseInt(constants.thumbnailHeight - 2, 10);
            }
        },

        /**
         * showBlowup
         */
        //old blowup implementation
        /*showBlowup:function () {
            // remove prev. blowup
            Perf.select('#imageViewerBlowup', 1).remove();

            // reference
            var thi$ = this;

            // set blowup div
            this.blowup = jQuery('<div/>').attr('id', 'imageViewerBlowup').fadeTo(1, 0.01).appendTo(this._view);

            // close button
            jQuery('<div/>').attr('class', 'x').click(
                function () {
                    thi$.blowup.remove();
                }).appendTo(this.blowup);

            // remove blowup property
            var removeBlowup = function () {
                thi$.blowup.remove();
                Perf.select('body').unbind('keyup', bodyKeyEventHandler);
                Perf.select('body').unbind('mousedown', bodyClickEventHandler);
                thi$.unbindScrollEvent();
            };

            // remove blowup on ESC pressed
            var bodyKeyEventHandler = function (e) {
                if (e.keyCode == 27) {
                    removeBlowup();
                }
            };

            // remove blowup on body click
            var bodyClickEventHandler = function (e) {
                removeBlowup();

            };

            // set body events (keyup and mousedown)
                Perf.select('body').bind('keyup', bodyKeyEventHandler).bind('mousedown', bodyClickEventHandler);

            // init image viewer inside the blowup div
            new t2k.component.imageViewer.ImageViewer(copy({}, {
                data:this.cfg.data,
                parent:'imageViewerBlowup',
                isBlowup:true,
                container:this.viewPortContainer,
                // on blowup, set blowup position
                onRendered:function () {
                    thi$.setBlowupPosition();
                }
            }));

            // set blowup position by scroll
            var scroll_parent = thi$.blowup.parents('.scroll_enabled')[0];
            if (scroll_parent && (scroll_parent.scrollHeight > scroll_parent.clientHeight)) {
                domUtils.reparentOnceAndRepositionElement(thi$.blowup, thi$.blowup.offset());
            }
            thi$.bindScrollEvent();
        },*/

        showBlowup:function () {
            // remove prev.
            $('.modal_content').find('.imageViewer').html('');

	        if(!this.cfg.clonedContent && this.cfg.src) {
		        this.cfg.clonedContent = jQuery('<img src="' + (this.cfg.src) + '" height="' + this.nativeImageHeight + '" width="' + this.nativeImageWidth + '">');
	        }

            ENV.Modal.show(this.cfg);
        },

        /**
         * setBlowupPosition
         */
        setBlowupPosition:function () {

            //  reference
            var blowup = this.blowup,
            //  declarations
                blowupSetting = {},
            //  current this._content position relative to viewport
                contentLeft = this._content.offset().left,
                contentTop  = this._content.offset().top,
            //  we have navigation bar over viewport on the top
            //  get it demensions to fix the top position of the blowup
                navigationBar = jQuery(constants.navigationBarSelector);

            blowupSetting.navigationBarHeight = navigationBar ? navigationBar.height() : 0;
            blowupSetting.width  = parseInt(blowup.outerWidth());
            blowupSetting.height = parseInt(blowup.outerHeight());
            //blowup offset from the this._content
            blowupSetting.left = contentLeft - (~~((blowupSetting.width - this._content.width()) / 2));
            blowupSetting.top  = blowupSetting.navigationBarHeight + contentTop - (~~((blowupSetting.height - this._content.height()) / 2));//~~ == Math.round
            //check/override the blowup position according to the viewport
            blowupSetting = this.checkBlowupPositionInViewport(blowupSetting);
            // set position according the regular measurements
            blowup.offset({'top':blowupSetting.top,'left':blowupSetting.left});
            // set blowup correct position and fade in
            this.blowup.fadeTo(300, 1);
        },

        /**
         * checkBlowupPositionInViewport : check/override the blowup position according to the viewport
         * @param blowupSetting
         * return checked/overrided blowupSetting
         */
        checkBlowupPositionInViewport : function(blowupSetting){
            var _blowupSetting  = blowupSetting,
                blowupMargin    = constants.blowupMargin,
                viewportHeight  = this.viewPortContainer.outerHeight(),
                viewportWidth   = this.viewPortContainer.outerWidth();
            // check top beyond viewport
            _blowupSetting.top =_blowupSetting.top <= _blowupSetting.navigationBarHeight ? _blowupSetting.navigationBarHeight + blowupMargin : _blowupSetting.top;
            // check left beyond viewport
            _blowupSetting.left =_blowupSetting.left < blowupMargin ? blowupMargin : _blowupSetting.left;
            // check right beyond viewport
            if(_blowupSetting.left + _blowupSetting.width > viewportWidth){
                _blowupSetting.left = _blowupSetting.left - ((_blowupSetting.left + _blowupSetting.width) - viewportWidth) - constants.blowupMarginRight ;
            }
            // check bottom beyond viewport
            if(_blowupSetting.top + _blowupSetting.height > viewportHeight){
                _blowupSetting.top = _blowupSetting.top - ((_blowupSetting.top + _blowupSetting.height) - viewportHeight)- blowupMargin;
            }
            return _blowupSetting;
        },

        // set blowup position by scroll
        bindScrollEvent:function () {
            domUtils.registerToScroll(this.blowup,this);
        },
        // set blowup position by scroll
        unbindScrollEvent:function () {
            domUtils.unRegisterToScroll(this.blowup,this);
        },

        /**
         * initClassMembers
         * @param config
         */
        initClassMembers:function (config) {

            // class members:
            this.imageWidth;
            this.imageHeight;
            this.optimumWidth;
            this.optimumHeight;

            this.cfg.isNotIinteractive = !!!this.cfg.isInteractive;

            // this var, mean that iv in thumbnail mode,
            // and it's image is smaller than thumbnail size, and iv has no caption or credit.
            // use: on option blowup, iv will init again inside the cloned option,
            // if the original's var is true, that var will appears on the initialize iv as config member.
            // if this var is true, iv will automatic be set sa thumbnail,
            // so the size of the original and the cloned will be the same.
            this.tumbnailAppliedForSmallImage = !!this.cfg.tumbnailAppliedForSmallImage;

            // get a xml from config
            this.xml = jQuery(config.data);

            // save minimum width parameter on this object
            this.minWidth = constants.imageViewerMinimumWidth;

            // size (in pixel) of every reduction step that may be done to ImageViewer
            this.reductionStepSize;

            this.dontEnableBlowup = !!config.dontEnableBlowup;
            this.dontEnableThumbnail = false;

            this.enableBlowup = false;
            this.enableThumbnail = false;

            // thumbnailSize
            this.thumbnailSize = !!this.cfg.thumbnailSize ? this.cfg.thumbnailSize : {width:constants.thumbnailWidth, height:constants.thumbnailHeight};

            // allowReduction
            this.enableReduction = true;

            // set credit member
            this.credit = this.xml.find('credit textViewer').get(0);
            if (this.credit == undefined) {
                this.credit = false;
            }

            // set caption member
            this.caption = this.xml.find('imageCaption textViewer').get(0);
            if (this.caption == undefined) {
                this.caption = false;
            }

            // set imageSound member
            this.imageSound = jQuery(this.xml.find('imageSound').get(0));
            if (this.imageSound.length == 0) {
                this.imageSound = false;
            }

            // how many times a reduction was done
            this.reductionStep = this.cfg.reductionStep || 0;

            if (!this.cfg.dummyMode && !!this.cfg.compiledLayoutRes && !!this.cfg.compiledLayoutRes.reduction && (this.isBlowup !== true)) {
                this.reductionStep = this.cfg.compiledLayoutRes.reduction;
            }

            // A value in percents (%). If an image was reduced and its width now less then 'minimumReadable' blowup is shown
            this.minimumReadable;

            // retrieve minimumReadable. if undefined receives default - 1
            var minimumReadableParam = this.xml.attr(constants.minimumReadableParamName);
            if (minimumReadableParam != null && minimumReadableParam != undefined) {
                this.minimumReadable = parseFloat(minimumReadableParam);
            } else {
                // receive default value - 100%
                this.minimumReadable = constants.defaultMinReadable;
            }

	        if(this.minimumReadable > 1) { //not float - percent integer value
		        this.minimumReadable = (this.minimumReadable / 100);
	        }

            // maxReduction_minReadable means that imaveViewer will maximum reduced to it's min. Readable Size.
            // (uses in tables, for now)
            // gets it value from xml || configuration
            this.maxReduction_minReadable = !!this.cfg.maxReduction_minReadable || !!(this.xml.attr('maxReduction_minReadable') == 'true');

            // a native size of the image we get from Image object when it loaded
            this.nativeImageWidth;
            this.nativeImageHeight;

            // a relation between width and height to decide if an image has landscape or portret orientation
            this.aspectRatio;
            this.isLandscape;

            // get alt from xml
            this.alt = this.xml.attr('alt');

            // get src from xml or from config
            this.src = AbsPath(config.src ? config.src : this.xml.attr('src'));

            // on config.src, srt this.src and delete config.src for right copy to mustache
            delete this.cfg.src;
        },

        /**
         * getImgSize
         */
        getImgSize:function () {
//          build image object and preload an image

	        this.calcOptimumSize();
	        this.calcReductionStepSize();
	        this.calculateImageViewerInitLayoutParams();
	        this.checkImageWidthVsTaskWidth();
	        this.calcImageSizeAfterReduction();
	        this.calcImageConteinerSize();
	        // call ctor for _super
	        this.ctor(this.cfg, true);

        },

        /**
         * onViewRendered
         * override with an empty function.
         * imageViewerView will dispatch the 'onRendered' event himself.
         */
        onViewRendered:function () {
        },

        /**
         * calcImageConteinerSize
         */
        calcImageConteinerSize:function () {
            this.imageContainerHeight = this.imageHeight;// + 2
            this.imageContainerWidth = this.imageWidth;

            // if there is credit or capture and the conteiner width is smaller then min. set conteiner width = min.
            if ((this.credit || this.capture) && (this.imageContainerWidth < constants.minImageConteinerWidth)) {
                this.imageContainerWidth = constants.minImageConteinerWidth;
            }
        },

        /**
         * checkImageWidthVsTaskWidth
         * and set reductionStep.
         * even on init, imageViewer is not allowed to be wither than the task
         */
        checkImageWidthVsTaskWidth:function () {

            var parent = (typeof(this.cfg.parent) == 'object') ? this.cfg.parent : Perf.select('#' + this.cfg.parent);
            var netoTaskWidth;

            var taskWidth = 0;

            var container = this.cfg.container || parent.parents('.task_container');

            if (!container) {
                throw ('image viewer has no container');
            }

            netoTaskWidth = container.width();


            // if the neto task width is bigger then image width, configure reduction step
            if (this.imageWidth > netoTaskWidth) {
                // calc reduction step to align imageWidth and taskWidth
                var widthDelta = this.imageWidth - netoTaskWidth;
                var reductionVal = Math.ceil(widthDelta / this.reductionStepSize);
                this.reductionStep = (this.reductionStep > reductionVal) ? this.reductionStep : reductionVal;
            }
        },

        validateReductionVsMinReadableStopper:function () {
            if (!this.maxReduction_minReadable) return true;

            var nextStepwidth = this.optimumWidth - ((this.reductionStep + 1) * this.reductionStepSize);
            var minReadableWidth = this.optimumWidth * this.minimumReadable;

            if (nextStepwidth < minReadableWidth)
                return false;

            return true;

        },

        /**
         * calcImageSizeAfterReduction
         */
        calcImageSizeAfterReduction:function () {
	        if(this.reductionStep <= 0) {
		        return;
	        }
            var nextStepwidth = this.optimumWidth - (this.reductionStep * this.reductionStepSize);

            /** Cannot reduce to negative values. */
            if (nextStepwidth < 0) return;

            var stepReduction = nextStepwidth / this.nativeImageWidth;

            if (stepReduction < this.cfg.reductionStopper) {
                nextStepwidth = this.nativeImageWidth * this.cfg.reductionStopper;
                this.stopReduction = true;
            }

            this.imageWidth = nextStepwidth;
            this.imageHeight = this.aspectRatio * this.imageWidth;


        },

        /**
         * removeAdditionalComponents
         */
        removeAdditionalComponents:function () {
            if (!!this._soundButton) {
                this._soundButton.hide();
            }
            if (!!this._credit) {
                this._credit.hide();
            }
            if (!!this._caption) {
                this._caption.hide();
            }
        },

        /**
         * buildImageSound
         * init mediaPlayer (soundButton)
         */
        buildImageSound:function () {
            // build mediaPlayer sound button
            if (!!this.imageSound) {
                this._soundButton = this._view.find('.soundButton');
	            this._soundButton.unbind();
	            this._soundButton.empty();

	            var imageSoundSrc = this.imageSound.attr('src');
                this.imageSound = new t2k.component.mediaPlayer.MediaPlayer(copy({}, {
                    parent:this._soundButton,
                    type:'soundButton',
                    src:imageSoundSrc,
                    onRendered:function () {
                    },
                    dummyMode:this.cfg.dummyMode
                }));
                this.imageSound.setEnabled(true);
            }
        },

        /**
         * buildCaptionAndCredit
         */
        buildCaptionAndCredit:function () {
            // check if there's a credit text and initialize a text viewer component
            if (!!this.credit) {
                this.textViewerCredit = componentFactory.create({
                    data:this.credit,
                    parent:this.cfg.id + '_credit',
                    width:this.imageContainerWidth + 'px',
                    onRendered:function () {
                    }
                });
            }

            // check if there's a caption text and initialize a text viewer component
            if (!!this.caption) {
                this.textViewerCaption = componentFactory.create({
                    data:this.caption,
                    parent:this.cfg.id + '_caption',
                    width:this.imageContainerWidth + 'px',
                    onRendered:function () {
                    }
                });
            }
        },

        /**
         * buildAdditionalComponents
         * build additional components (TextViewer for caption, credit... sound) and append them to ImageViewer)
         */
        buildAdditionalComponents:function () {
            // build additional component only if IV is not on a thumbnail mode
            if (!this.enableThumbnail) {
                this.buildImageSound();
                this.buildCaptionAndCredit();
                this.reduceCaptionAndCredit();
            }
        },

        /**
         * removeCaptionAndCreditContent
         * use on reduction, for textViewer rebuild
         */
        removeCaptionAndCreditContent:function () {
            if (!!this._credit) {
                this._credit.html('');
            }
            if (!!this._caption) {
                this._caption.html('');
            }
        },

        /**
         * reduceCaptionAndCredit
         * makes reduction to additional image viewer components (TextViewer)
         * @param reductionValue
         */
        reduceCaptionAndCredit:function () {
            if (this.reductionStep == 0) {
                return;
            }
            if (this.textViewerCaption) {
                this.textViewerCaption.reduce(this.reductionStep);
            }
            if (this.textViewerCredit) {
                this.textViewerCredit.reduce(this.reductionStep);
            }
        },

        /**
         * fitRectangles
         * Fit rectInner in rectOuter
         * @param rectInner {width, height}
         * @param rectOuter {width, height}
         * @return newInnerSize {width, height}
         */
        fitRectangles:function (rectInner, rectOuter) {
            // calculate scale ratios
            var ratioW = rectOuter.width / rectInner.width;
            var ratioH = rectOuter.height / rectInner.height;

            // We need to smaller ratio between the widths and heights ratios
            var selectedRatio = ratioW < ratioH ? ratioW : ratioH;

            // we don't have to scale if inner rect fits in the outer one
            if (selectedRatio > 1) {
                selectedRatio = 1;
            }

            // calculate our new image dimensions
            //if is  in blowup we need to reduce the frame around the image
            var newInnerRect = {
                width:(rectInner.width * selectedRatio) - (this.isBlowup? (constants.blowupMargin*2) : 0),
                height:(rectInner.height * selectedRatio)- (this.isBlowup? (constants.blowupMargin*2) : 0)
            };

            return newInnerRect;
        },

        /**
         * calcOptimumSize
         * is used to calculate image optimum size according to current resolution
         */
        calcOptimumSize:function () {
            // get image properties: width and height
            this.nativeImageWidth = this.cfg.imageWidth;
            this.nativeImageHeight = this.cfg.imageHeight;

            // get aspect ratio in order to know every time a right image proportion
            this.aspectRatio = this.nativeImageHeight / this.nativeImageWidth;

            // calculate image display mode: true - landscape, false - portrait
            this.isLandscape = this.aspectRatio <= 1;

            // get viewport size
            this.viewPortContainer = jQuery(constants.playerSelector);
            //get container element from config, in case of table- we dont want the cell to be the parent because it dont have ist full size yet. 
            //and than the img might apear too small 
            var containerElement = this.cfg.container ? this.cfg.container : jQuery(constants.playerSelector);
            if(!containerElement) {
                console.error("no container element on ImageViewerView line 807");
            }
            var widthTmp = containerElement.outerWidth();
            var heightTmp = containerElement.outerHeight();         

            // calculation the actual size of the modal 
            // 0.85 - coefficient calculated from the css rules for the modal ( .modal_wrapper -> max-width:90% && .modal_content -> max-width:95% : 0.9*0.95 = 0.85)
            if (this.cfg.isBlowup) {
                widthTmp = (this.viewPortContainer.width() * 0.85) - constants.sharedAreaPadding.left - constants.modalCloseSize;
                heightTmp = (this.viewPortContainer.height() * 0.85) - constants.sharedAreaPadding.top;
            }

            //get maximum size. if is blowup we need to reduce the size of the cloze of the modal view
	        var maximum = (this.cfg.useMax || this.cfg.isBlowup ) ? {
                width:widthTmp - (this.cfg.isBlowup ? constants.modalCloseSize : 0) - constants.sharedAreaPadding.left,
		        height:heightTmp - (this.cfg.isBlowup ? constants.modalCloseSize : 0) - constants.sharedAreaPadding.top
	        } : {
		        width:widthTmp * (this.cfg.parentType == 'balloon' ? constants.maximumSizeIndex_Balloon : constants.maximumSizeIndex),
		        height:this.viewPortContainer.height() * (this.cfg.parentType == 'balloon' ? constants.maximumSizeIndex_Balloon : constants.maximumSizeIndex)
	        };

            //get image size. if is in blowup we need to add margins of blowup frame to img diamentions 
	        var cfgSize = {
		        width:this.nativeImageWidth + (this.cfg.isBlowup ? (constants.blowupMargin * 2 ) : 0),
		        height:this.nativeImageHeight + (this.cfg.isBlowup ? (constants.blowupMargin * 2 ) : 0)
	        };

            this.optimumSize = this.fitRectangles(cfgSize, maximum);
            this.optimumWidth = this.imageWidth = this.optimumSize.width;
            this.optimumHeight = this.imageHeight = this.optimumSize.height;

            // on configuration height, set it, calc width, and delete height configuration to allow correct copy for mustache

            if (this.cfg.height) {
                var calcHeight = this.cfg.height;
                this.optimumWidth = this.imageWidth = calcHeight / this.aspectRatio;
                this.optimumHeight = this.imageHeight = calcHeight;
            }
        },

        getReductionReport:function () {

            var percent = this.imageWidth / this.nativeImageWidth,
                belowRead = !!this.enableBlowup,
                belowAbs = !!this.enableThumbnail
                ;

            return { percent:percent, belowRead:belowRead, belowAbs:belowAbs };
        },

        /**
         * calculateImageViewerInitLayoutParams
         */
        calculateImageViewerInitLayoutParams:function () {
            this.layoutParams = this.getLayoutParams();
            if (this.layoutParams != null && this.layoutParams != undefined) {
                // happend during playing
                this.analizeLayoutParams();
            }
        },

        /**
         * calcReductionStepSize
         * calculates how long in pixels every
         * reduction step
         */
        calcReductionStepSize:function () {

            // calculate a reduction step size- a number of pixels IV will be reduce on every reduction step
            if (this.aspectRatio > 1) { // meand that height is longest
                // portrait

                if (constants.absoluteMinimumLong / constants.absoluteMinimumShort > this.aspectRatio) {
                    this.reductionStepSize = Math.abs(((this.imageHeight - constants.absoluteMinimumLong) / constants.reductionRange) / this.aspectRatio);
                    this.reductionStepSize = this.reductionStepSize > 0 ? this.reductionStepSize : 1;
                } else {
                    //this.reductionStepSize = Math.abs((this.imageWidth - constants.absoluteMinimumLong)/ constants.reductionRange);
                    this.reductionStepSize = (this.imageWidth - constants.absoluteMinimumLong) / constants.reductionRange;
                   
                    this.reductionStepSize = this.reductionStepSize > 0 ? this.reductionStepSize : 1;
                }
            } else { // means that width is longest

                if (constants.absoluteMinimumShort / constants.absoluteMinimumLong >= this.aspectRatio) {
                    this.reductionStepSize = (( (this.imageHeight - constants.absoluteMinimumShort) / constants.reductionRange) / this.aspectRatio);
                    this.reductionStepSize = this.reductionStepSize > 0 ? this.reductionStepSize : 1;
                } else {
                    this.reductionStepSize = Math.abs((this.imageWidth - constants.absoluteMinimumLong) / constants.reductionRange);
                }
            }

            this.reductionStepSize = Math.ceil(this.reductionStepSize) + 0.1;
        },

        /**
         * getLayoutParams
         * retrieve layouts parameters from compiled xml file
         */
        getLayoutParams:function () {
            var layoutParamsEl = null;
            var layoutParams = {};
            if ((layoutParamsEl = jQuery(this.xml.find('layout').get(0))) != undefined) {
                layoutParamsEl.children().each(function () {
                    var item = jQuery(this).get(0);
                    layoutParams[item.tagName] = item.textContent;
                });
                return layoutParams;
            }
            return null;
        },

        /**
         * analizeLayoutParams
         * iterates through all layout parameters and call to appropriate function to handle them
         */
        analizeLayoutParams:function () {
            for (var key in this.layoutParams) {
                switch (key) {
                    case constants.reduction:
                        this.reductionStep = this.layoutParams[key];
                        break;
                }
            }
        },

        /**
         * reduce
         * reduce method- used to reduce an ImageViewer size according to resolution
         * @param reductionValue
         */
        reduce:function (reductionValue) {

            if (this.stopReduction || !!this.enableThumbnail) {
                this.dispatchEvent('cantReduce');
                return;
            }

            // validate reduction vs this.maxReduction_minReadable
            if (!this.validateReductionVsMinReadableStopper()) {
                this.dispatchEvent('cantReduce');
                return;
            }

            if (reductionValue == undefined || reductionValue == null) {
                this.reductionStep++;
            } else {
                this.reductionStep += reductionValue;
            }

            //stop reduction in the 10'th time to prevent infinite loops
            if(this.reductionStep >= 10){
                this.dispatchEvent('cantReduce');
                return;
            }

            // if reduction calls,
            // and optimum size is smaller than thumbnail, apply blowup and thumbnail
            if (!this.optimumSizeIsSmallerThanThumbnail()) {
                this.calcImageSizeAfterReduction();

	            if(this.imageSizeIsSmallerThanThumbnail()) {
		            this.dispatchEvent('cantReduce');
		            return;
	            }

                this.calcImageConteinerSize();
                this.changeImageSizes();
                this.checkThumbnail();
                this.checkBlowup();                
            } else {
                // apply thumbnail
                this.applyBlowup();
                this.applyThumbnail();
            }

            if (!!!this.enableThumbnail) {
                this.removeCaptionAndCreditContent();
                this.buildCaptionAndCredit();
                this.reduceCaptionAndCredit();
            }

        },

	    imageSizeIsSmallerThanThumbnail:function() {
		    return (this.imageWidth < this.thumbnailSize.width) &&
			    (this.imageHeight < this.thumbnailSize.height);
	    },

        optimumSizeIsSmallerThanThumbnail:function () {

            // if image optimus size is smaller than thumbnail size - return
            return (this.optimumWidth < this.thumbnailSize.width) &&
                (this.optimumHeight < this.thumbnailSize.height);
        },

        /**
         * changeImageSizes
         * @param [css] optional
         */
        changeImageSizes:function (css) {
            this._image.width(this.imageWidth).height(this.imageHeight);
            this._imageContainer.width(this.imageContainerWidth + 2).height(this.imageContainerHeight + 2);

            // if css, set css..
            if (css) {
                this._image.css(css);
            }
        },

        /**
         * setEnabled
         * overrides parent method. enables or disables IV component
         * @param flag: if true- enable, false- disable
         */
        setEnabled:function (flag) {

            if (!this._masc) {
                return;
            }

            if (!flag) {
                this._masc.show();
            } else {
                this._masc.hide();
            }
        },
        /**
         * setWidth override
         */
        setWidth:function () {
            // do nothing
        },
        /**
         * setHeight override
         */
        setHeight:function () {
            // do nothing
        }

        /* imageSoundView Object END */

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/imageViewer/ImageViewerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/imageViewer/ImageViewerViewSwf.js
////////////////////////////////////////
(function() {
	
	var TEMPLATE =
        "<div class='imageViewer' id='{{id}}'>\
        	<div id='{{id}}_content' class='imageViewer_content'>\
				{{#isNotIinteractive}}\
		        	<div id='{{id}}_imageContainer' class='imageContainer' style='position:absolute;width:{{imageContainerWidth}}px;height:{{imageContainerHeight}}px'>\
						<div id='{{id}}_zoomButton' class='zoomButton'/>\
						{{#enableSoundButton}}\
						<div id='{{id}}_soundButton' class='soundButton'></div>\
						{{/enableSoundButton}}\
					</div>\
				{{/isNotIinteractive}}\
				<div id='{{id}}_flashWrapper'>\
					<object 	id='{{id}}_flash' \
								width='{{imgWidth}}' height='{{imgHeight}}' \
		                        classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000' \
		                        codebase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9.0.115'>\
		                            \
		                            <param name='movie' value='{{src}}'>\
		                            <param name='quality' value='high'>\
		                            <param name='wmode' value='opaque'>\
									<param name='scale' value='noBorder'>\
									<param name='play' value='true' />\
									<param name='loop' value='false' />\
		                            \
		                            <embed	src='{{src}}' \
				                            id='{{id}}_flash_embed' \
				                            scale='noBorder' \
				                            width='{{imgWidth}}' height='{{imgHeight}}' \
				                            swliveconnect='true' \
				                            quality='high' \
				                            wmode='opaque' \
				                            pluginspage='http://www.macromedia.com/go/getflashplayer' \
				                            type='application/x-shockwave-flash'/>\
					</object>\
				</div>\
				{{#enableCredit}}\
        			<div id='{{id}}_credit' class='credit'></div>\
				{{/enableCredit}}\
				{{#enableCaption}}\
				<div id='{{id}}_caption' class='caption'></div>\
				{{/enableCaption}}\
        	</div>\
        </div>";
		
	
	// copy all ImageViewer constants from ImageViewerViewConstants to be readable 
	var constants = t2k.component.imageViewer.ImageViewerViewConstants;
	
	/**
	 * ImageViewerView
	 */
	t2k.component.imageViewer.ImageViewerViewSwf = t2k.component.imageViewer.ImageViewerView.subClass({

				/** The class' name (for debugging purpose). */
				name : 't2k.component.imageViewer.ImageViewerViewSwf',

				/**
				 * @constructor
				 * @see superclass documentation
				 */
				ctor : function(config, superMe){
					this._super(config, superMe);
				},
				
				/**
				 * getTemplate
				 * override to provide it's own template
				 * @returns {String}
				 */
				getTemplate: function(){
					return TEMPLATE;
				},
				
				/**
				 * initClassMembers
				 * add members to _super
				 * @param config
				 */
				initClassMembers: function(config){
					this._super(config);
					this.tempImage = {};
					// width & height are taken from feeding
					this.tempImage.width = this.xml.attr('width');
					this.tempImage.height = this.xml.attr('height');
					
					// if !feeding - throw
					if (!this.tempImage.width || !this.tempImage.height){
						throw ('image viewer must get width & height on feeding swf image');
					}
				},
				
				/**
				 * getImgSize
				 * override (width & height are taken from feeding, no need to load the image)
				 */
				getImgSize: function(){
					// build image object and preload an image
					
					// reference
					var thi$ = this;
					
					// onload get size
					thi$.calcOptimumSize();
					thi$.calcReductionStepSize();
					thi$.calculateImageViewerInitLayoutParams();
					thi$.checkImageWidthVsTaskWidth();
					thi$.calcImageSizeAfterReduction();
					thi$.calcImageConteinerSize();
					thi$.ctor(thi$.cfg, true);
				}, 
				
				/**
				 * calcImageConteinerSize
				 * add to _super
				 * imageContainerWidth should have 2 more pixels cause of the flash player
				 */
				calcImageConteinerSize: function(){
					this._super();
					this.imageContainerWidth = this.imageWidth + 2;
				},
				
				/**
				 * changeImageSizes
				 * override (flash resize is different than img resize)
				 * @param css
				 */
				changeImageSizes: function(css){
					this._image.attr({
						'width': this.imageWidth, 
						'height': this.imageHeight
					});
					
					this._image.find('#' + this.cfg.id + '_flash_embed')
						.attr({
							'width': this.imageWidth,
							'height': this.imageHeight
						});
					this._imageContainer.css({
						'width': this.imageContainerWidth-2,
						'height': this.imageContainerHeight
					});
					
					if (css){
						this._view.find('#' + this.cfg.id + '_flashWrapper').css(css);
					}
					
				},
				
				/**
				 * convinietShortHand
				 * update _image shorthand (flash object) 
				 */
				convinietShortHand: function(){
					this._super();
					this._image = this._view.find('#' + this.cfg.id + '_flash');
				},
				
				/**
				 * applyThumbnail
				 * add flash thumbnail changes
				 */
				applyThumbnail: function(){
					this._super();
					var bgColor = this._imageContainer.css('background-color');
					this._imageContainer.css('background-color','transparent');
					this._content.css('background-color',bgColor).width(this._imageContainer.width()).height(this._imageContainer.height());
				}
				
				
			/* imageSoundViewSwf Object END */
				
			});
	
})();
////////////////////////////////////////
// SRC End --> t2k/component/imageViewer/ImageViewerViewSwf.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/keyboard/KeyboardConfig.js
////////////////////////////////////////
(function() {

// Keyboard constant values
    t2k.component.keyboard.KeyboardConfig = {
        classes: {
            keyboard: 'keyboard',
            selected: 'selected',
            hidden: 'hidden',
            none: 'none',
            shadow: 'shadow',
            key: 'key',
            keyWidth: 'keyWidth',
            tabsNav: 'tabs-nav',
            tabsNavItem: 'tabs-nav-item',
            over: 'over',
            pressed: 'pressed',
            disabled: 'disabled',
            generalKey: 'generalKey',
            verticalSpacer: 'verticalSpacer',
            verticalSpacerLines: 'verticalSpacerLines',
            close: 'close',
            mini: 'mini'
        }
    };
})();
////////////////////////////////////////
// SRC End --> t2k/component/keyboard/KeyboardConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/keyboard/KeyboardView.js
////////////////////////////////////////
(function () {

    var constants = t2k.component.keyboard.KeyboardConfig;

    var TEMPLATE = "\
        <div id='{{id}}' class='{{invokerClass}} keyboard {{fontLocale}}'>\
            <div id='{{id}}_content' class='keyboard_content'>\
                <ul class='tabs-nav'>\
                    {{#tabs}}\
                        <li class='tabs-nav-item {{classes}}' data-tab-name='{{name}}'>{{name}}</li>\
                    {{/tabs}}\
                </ul>\
                <div class='close' id='{{id}}_btn_close' >\
    			    <span class='mobile-touch-area'></span>\
                </div>\
                {{#tabs}}\
                    <div class='tab {{name}}'>\
                    {{#boxes}}\
                        <div class='box'>\
                        {{#lines}}\
                            <div class='line {{align}}'>\
                            {{#keys}}\
                                <div class='key {{#keyWidth}}keyWidth{{keyWidth}}{{/keyWidth}}' data-key-name='{{name}}'>\
                                		{{symbol}}\
                                </div>\
                            {{/keys}}\
                            </div>\
                        {{/lines}}\
                        </div>\
                    {{/boxes}}\
                    </div>\
                {{/tabs}}\
            </div>\
        </div>\
    ";
    /**
     * KeyboardView
     */
    t2k.component.keyboard.KeyboardView = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.keyboard.KeyboardView',

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config) {
            // Render the virtual keyboard
            this._super(override(config, config.preset.virtualKeys, {
                template:TEMPLATE //,parent: jQuery('.sequence_content_inner')
            }));

            this.triggerClickOnDocument();
            //this.lastScrollTopOffset = 0;
            this.initMembers();
            this.initKeyboardState();
            this.initVirtualKeyboard();
            this.initDeviceEvents();
            this.bindClickEvents();
            this.bindScrollEvent();

	        this._enableDraggableKeyboard(true);
        },

        /**
         * initMembers
         * Init members
         */
        initMembers:function () {
            this.id = this.cfg.id;
            this.preset = this.cfg.preset;
            this.keyboardState = {
                virtualKeys:{},
                charCodes2deviceKeys:{},
                charCodes2deviceSpecialKeys:{}
            };

	        this.$parent = this.cfg.$parent ? this.cfg.$parent : Perf.select('#' + this.cfg.parent_dom_id);
        },
        /**
         * initKeyboardState
         * Init keyboard state
         */
        initKeyboardState:function () {

            // Populate virtual keys
            var nonKeys = [
                constants.classes.none
            ].join('|');
            var preset = this.preset;
            var tabs = preset.virtualKeys.tabs;
            var tab;
            var boxes;
            var box;
            var lines;
            var line;
            var keys;
            var key;
            var keyName;
            var keyboardActions;

            for (tab in tabs) {
                boxes = tabs[tab].boxes;
                for (box in boxes) {
                    lines = boxes[box].lines;
                    for (line in lines) {
                        keys = lines[line].keys;
                        for (key in keys) {
                            keyName = keys[key].name;
                            keyboardActions = keys[key].keyboardActions;
                            if (keyName.search(nonKeys) === -1) { // Avoid populating non-keys
                                this.keyboardState.virtualKeys[keyName] = {
                                    name:keyName,
                                    enabled:true
                                };

                                if (keyboardActions) {
                                    this.keyboardState.virtualKeys[keyName].keyboardActions = keyboardActions;
                                }
                            }
                        }
                    }
                }
            }

            // local function to populate key to charCodesMap
            var populateStateCharCodes = function (keys) {
                var charCodesMap = {};
                var key;
                var charCodes;
                var i;
                for (keyName in keys) {
                    key = keys[keyName];

	                if(key.locales && !~key.locales.indexOf(this.cfg.fontLocale)) {
		                continue;
	                } else {
		                if(key['key_' + this.cfg.fontLocale]) {
			                keyName = key['key_' + this.cfg.fontLocale];
		                }

	                    charCodes =  key.charCodes;
	                    for (i in charCodes) {
	                        // reference between virtual key state and device key state, if it exists
	                        charCodesMap[charCodes[i]] = this.keyboardState.virtualKeys[keyName] ?
	                            this.keyboardState.virtualKeys[keyName] :
	                        {
	                            name:keyName,
	                            enabled:true
	                        };
	                    }
	                }
                }

                return charCodesMap;
            };

            override(this.keyboardState, {
                // Populate device keys - these are charCodes that are handled by this.keypress (and are different from this.keydown)
                charCodes2deviceKeys:populateStateCharCodes.call(this, this.preset.deviceKeys),
                // populate device special keys - these are charCodes that are handled by this.keydown (and are different from this.keypress)
                charCodes2deviceSpecialKeys:populateStateCharCodes.call(this, this.preset.deviceSpecialKeys)
            });
        },

        /**
         * initVirtualKeyboard
         * Init the keyboard view
         */
        initVirtualKeyboard:function () {
            // If there's one tab and one box - define the keyboard as mini
            if (this.preset.virtualKeys.tabs.length == 1
                && this.preset.virtualKeys.tabs[0].boxes.length == 1) {

                this._view.addClass(constants.classes.mini);
            }

	        delete this.preset;

            // Offset the keyboard according to offsetData
            domUtils.reparentOnceAndRepositionElement(this._view, this.cfg.offset);

            // init virtual keyboard keys
            this.initVirtualKeyboardKeys();

            // Init virtual keyboard events
            this.initVirtualKeyboardEvents();

            // set virtual keyboard size
            this.initVirtualKeyboardSize();

            // Select the first tab
            this.selectVirtualKeyboardTab(0);

            //fit keyboard horizontal position according to viewport width
            domUtils.horizontalFitToViewport(this._view);

            //fit keyboard vertically position according to viewport height
            domUtils.verticalFitToViewport_scrollDown(this._view, this.$parent);
        },

        /**
         * initVirtualKeyboardKeys
         * init virtual keyboard keys if needed
         */
        initVirtualKeyboardKeys:function () {
            // init 'none' keys
            var none = constants.classes.none;
	        Perf.select('.{0}[data-key-name={1}]'.format(constants.classes.key, none))
                .addClass(none)
                .text('!');

            // init larger keys
            var keyWidthClass = constants.classes.keyWidth;
            var keyWidth;
            var $key;

	        var setKeyWidth = function (key) {
		        $key = jQuery(key);
		        keyWidth = parseInt(/keyWidth([0-9])/ig.exec(key.className)[1]);
		        $key.width($key.width() * keyWidth - (keyWidth - 1));
		        $key = null;
	        };

	        var keys_arr = Perf.select('#{0} :regex(class,{1}[0-9])'.format(this.id, keyWidthClass));

	        for (var i = 0, len = keys_arr.length; i < len; i++) {
		        setKeyWidth(keys_arr[i]);
	        };

	        keys_arr = null;

        },

        /**
         * initVirtualKeyboardSize
         * Set the virtual keyboard size according to the widest tab and the tallest tab
         */
        initVirtualKeyboardSize:function () {
            // Hide the virtual keyboard
            this._view.css({
                visibility:'hidden'
            });

            // Loop tabs and get the max width and height
            var maxSize = {
                width:0,
                height:0
            };

            var thi$ = this;
            var keyboardWidthForCurrentTab;
            var keyboardHeightForCurrentTab;
            var tabNavItem;

	        for (var i = 0, len = this.tabsNavItems.length; i < len; i++) {
                tabNavItem = jQuery(this.tabsNavItems[i]);
                // Select the tab
                thi$.changeToTab(tabNavItem.attr('data-tab-name'));

                // Check max width / height
                keyboardWidthForCurrentTab = thi$._view.outerWidth(false);
                keyboardHeightForCurrentTab = thi$._view.outerHeight(false);

                if (keyboardWidthForCurrentTab > maxSize.width) maxSize.width = keyboardWidthForCurrentTab;
                if (keyboardHeightForCurrentTab > maxSize.height) maxSize.height = keyboardHeightForCurrentTab;

                var setTabNavItemWidth = function () {
                    // Set the width of the tab header
                    // Check normal and bold for max. width
                    var tab = tabNavItem[0], normal, bold;

                    tab.style.fontWeight = 'normal';
                    normal = tabNavItem.width();

                    tab.style.fontWeight = 'bold';
                    bold = tabNavItem.width();

                    tab.style.fontWeight = '';
                    tabNavItem.width(Math.max(normal, bold));
                };


                if (tabNavItem.hasClass(constants.classes.hidden)) {
                    // Show the tab header temporarily to calc width
                    tabNavItem.removeClass(constants.classes.hidden);
                    setTabNavItemWidth();
                    tabNavItem.addClass(constants.classes.hidden);
                } else { // tabNavItem.hasClass(constants.classes.hidden) == false
                    setTabNavItemWidth();
                }

		        tabNavItem = null;

            }

            // Remove the virtual keyboard opacity
	        if(!ENV.behaviors.isTablet) {
                this._view.css({'width' : maxSize.width, visibility:'visible'});
	        } else {
		        this._view.css(override(maxSize, {visibility:'visible'}));
	        }
        },

        /**
         * changeToTab
         * Change to the specified tabName
         */
        changeToTab:function (tabName) {
            // remove selected class from all keyboard elements
	        this._view.find('.' + constants.classes.selected).removeClass(constants.classes.selected);

	        Perf.select('[data-tab-name={0}]'.format(tabName), this._view)
                .addClass(constants.classes.selected);

	        Perf.select('.{0}'.format(tabName), this._view)
                .addClass(constants.classes.selected);
        },

        /**
         * hideTab
         * Hide the specified tab
         * @param {string} tabName
         */
        hideTab:function (tabName) {
	        Perf.select('[data-tab-name="{0}"]'.format(tabName), this._view)
                .addClass(constants.classes.hidden);
        },

        /**
         * showTab
         * Show the specified tab
         * @param {string} tabName
         */
        showTab:function (tabName) {
	        Perf.select('[data-tab-name="{0}"]'.format(tabName), this._view)
                .removeClass(constants.classes.hidden);
        },

	    bindKeyEvents:function (thi$){
		    this.keys = Perf.select('.{0}:not({1})'.format(constants.classes.key, constants.classes.none), this._view);

		    this.keys.unbind(); //unbind all prev events listeners

		    var key,
		        keyboardActions;

		    var onKeyMouseDown = function (e) {
			    // if the current status of this control is disable, do nothing
			    if (this.getAttribute("class").indexOf('disable') > -1) {
				    return;
			    }

			    Compat.addClass(this, constants.classes.pressed);

			    key = this.getAttribute('data-key-name');
			    thi$.cfg.onKeyboardPressed(key);

			    e.preventDefault();

			    if (!!ENV.behaviors.isTablet) {
				    thi$._enableDraggableKeyboard(false);
				    //Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
				    e.stopImmediatePropagation();
				    e.stopPropagation();
				    return false;
			    }

		    };

		    var onKeyMouseOver = function (e) {
			    //Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
			    e.stopImmediatePropagation();

			    Compat.addClass(this, constants.classes.over);
		    };

		    var onKeyMouseOut = function (e) {
			    //Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
			    e.stopImmediatePropagation();

			    // if the current status of this control is disable, do nothing
			    if (this.getAttribute("class").indexOf('disable') > -1) {
				    return;
			    }

			    Compat.removeClass(this, constants.classes.over);
			    Compat.removeClass(this, constants.classes.pressed);
		    };

		    var onKeyMouseUp = function (e) {
			    //Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
			    e.preventDefault();

			    key = this.getAttribute('data-key-name');

			    // execute keyboard actions if the key has any
			    keyboardActions = thi$.keyboardState.virtualKeys[key].keyboardActions;
			    if (keyboardActions) {
				    thi$.executeKeyboardActions(keyboardActions);
			    }

			    if(!!ENV.behaviors.isTablet) {
				    e.stopImmediatePropagation();
				    e.stopPropagation();
			        thi$._enableDraggableKeyboard(true);
				    return false;
			    }
		    };

		    function preventDefault(e) {
			    e.preventDefault();
			    e.stopImmediatePropagation();
			    e.stopPropagation();
			    return false;
		    }

		    function onKeyDoubleClick(e){
			    preventDefault(e);
		    }

		    var pressTimer;

		    if (ENV.behaviors.addKeyboardDelay) {
			    this.keys.mouseup(function (event) {
				    clearTimeout(pressTimer);
				    preventDefault(event);
			    }).mousedown(function (event) {
					    var event_this = this;
					    pressTimer = window.setTimeout(function () {
						    onKeyMouseDown.call(event_this, event);
						    onKeyMouseUp.call(event_this, event);
					    }, 50);
					    event.preventDefault();
				    })
				  .mouseover(onKeyMouseOver)
				  .mouseout(onKeyMouseOut)
				  .dblclick(onKeyDoubleClick);

		    } else {

			    this.keys.mousedown(onKeyMouseDown)
				    .mouseover(onKeyMouseOver)
				    .mouseout(onKeyMouseOut)
				    .mouseup(onKeyMouseUp)
				    .dblclick(onKeyDoubleClick);
		    }
	    },

	    initVirtualKeyboardEvents:function () {
		    var thi$ = this;

		    // Handle virtual keyboard tab events
		    this.tabsNavItems = Perf.select('.{0}'.format(constants.classes.tabsNavItem), this._view);
	        var onTabClick = function (e) {
		        e.stopImmediatePropagation();
		        e.stopPropagation();
		        thi$.changeToTab(e.currentTarget.getAttribute('data-tab-name'));
		        return false;
	        };
	        this.tabsNavItems.mousedown(onTabClick);

	        var fncPreventDefault = function (e) {
		        e.preventDefault();
		        return false;
	        };
	        this._view.dblclick(fncPreventDefault);

		    this._view.mousedown(fncPreventDefault);

            // Handle virtual keys events
		    this.bindKeyEvents(thi$);

		    // Handle close button events
	        this._btn_close.mousedown(thi$.cfg.onKeyboardClosed);
        },

        /**
         * executeKeyboardActions
         * execute the specified keyboard actions
         * @param keyboardActions {Object} Array of function names and their arguments
         */
        executeKeyboardActions:function (keyboardActions) {
            var thi$ = this;
            keyboardActions.forEach(function (keyboardAction) {
                thi$[keyboardAction.actionName].apply(thi$, keyboardAction.actionArgs);
            });
        },

        /**
         * selectVirtualKeyboardTab
         * Select a virtual keyboard tab, by the specified tab name / number
         * @param tab {String/Integer} Either the name of the tab, or the tab index
         */
        selectVirtualKeyboardTab:function (tab) {
            tab = (typeof tab === 'number') ? this.tabsNavItems.eq(tab) : this.tabsNavItems.filter('[data-tab-name="{0}"]'.format(tab));

            // Select tab
	        this.changeToTab(tab[0].getAttribute('data-tab-name'));
        },

        /**
         * enableKeys
         * enable the specified keys
         * @param keys - {String} Key Names (virtual and device), or 'all' / 'none' (for virtual keys only)
         * @param enable - {Boolean} enable or disable - default is true
         */
        enableKeys:function (keys, enable) {
            if (typeof enable === 'undefined') enable = true;
            var enabled = (keys != 'none');
            enabled = !enable ? enabled = !enabled : enabled;
            var key;
            var i;
            var charCode;
            var stateSection;
            if (keys === 'none' || keys === 'all') { // 'all' / 'none' - handle only virtual keys
                for (stateSection in this.keyboardState) {
                    for (key in this.keyboardState[stateSection]) {
                        this.keyboardState[stateSection][key].enabled = enabled;
                    }
                }

            } else {
                var keysSeparated = keys.split(',');
                keys = {};
                for (i in keysSeparated) {
                    keys[keysSeparated[i]] = {};
                }

                for (key in keys) {
                    if (this.keyboardState.virtualKeys[key]) {
                        this.keyboardState.virtualKeys[key].enabled = enabled;
                    }

                    // It's not a virtual key, look for it in the device keys
                    for (charCode in this.keyboardState.charCodes2deviceKeys) {
                        if (this.keyboardState.charCodes2deviceKeys[charCode].name === key) {
                            this.keyboardState.charCodes2deviceKeys[charCode].enabled = enabled;
                        }
                    }

                    // It's not a virtual key and device key, look for it in the device special keys
                    for (charCode in this.keyboardState.charCodes2deviceSpecialKeys) {
                        if (this.keyboardState.charCodes2deviceSpecialKeys[charCode].name === key) {
                            this.keyboardState.charCodes2deviceSpecialKeys[charCode].enabled = enabled;
                        }
                    }
                }
            }
            //disable comma sign, when auto comma is on
            if(this.cfg.autoComma){
               !!this.keyboardState.virtualKeys['comma'] && (this.keyboardState.virtualKeys['comma'].enabled = false);
            }

            // handle virtual keys view
            for (key in this.keyboardState.virtualKeys) {
                jQuery(".{0}[data-key-name='{1}']".format(constants.classes.key, key), this._view)
                    .toggleClass(
                    constants.classes.disabled,
                    !this.keyboardState.virtualKeys[key].enabled
                );
            }
        },

        /**
         * disableKeys
         * disable the specified keys
         * @param keys - {String} Key Names (virtual and device), or 'all' / 'none' (for virtual keys only)
         */
        disableKeys:function (keys) {
            this.enableKeys(keys, false);
        },

        /**
         * resetKeyboardStyle
         * reset keyboard press and over classes
         */
        resetKeyboardStyle:function () {
            this._view.find('.pressed').removeClass('pressed');
            this._view.find('.over').removeClass('over');
        },

        /**
         * selectKeys
         * select the specified keys
         * @param keys - {String} Virtual keys names
         */
        selectKeys:function (keys) {
            var keyDivs = jQuery('.{0}'.format(constants.classes.key), this._view);

            keyDivs
                .removeClass(constants.classes.selected);

            if (keys !== 'none') {
                keys = keys.replace(',', '|');
                keyDivs
                    .filter('[data-key-name={0}]'.format(keys))
                    .addClass(constants.classes.selected);
            }
        },

        /**
         * initDeviceEvents
         * Init keyboard device events
         */
        initDeviceEvents:function () {
            var thi$ = this;

            // We need to handle control keys like enter and del
			var onKeyDown = function (e) {
				if(!!ENV.behaviors.isTablet) {
					e.preventDefault();
					e.stopPropagation();
				}
				var charCode = e.which;

				// Check if a special key was pressed. If not we handle key press in this.onKeyPress
				var specialKey = thi$.keyboardState.charCodes2deviceSpecialKeys[charCode];
				if (specialKey) {
					if (specialKey.enabled) {
						thi$.cfg.onKeyboardPressed(specialKey.name);
                        
                        //defalut backspace event is to go "back" on browser. need to prevent when clicked from mathfield
                        if(specialKey.name == "backspace" ){
                            e.preventDefault();
                        }
					} else { // !specialKey || !specialKey.enabled
						e.preventDefault();
					}
					e.preventDefault();
					e.stopPropagation();
					return false;
				}

				if (!!ENV.behaviors.isTablet) {
					return false;
				}
			};
            this.onKeyDown = onKeyDown;
	        onKeyDown = null;

	        // define onKeyPress handler - store in this to be able to unbind it later
	        var onKeyPress = function (e) {
		        if(!!ENV.behaviors.isTablet) {
			        e.preventDefault();
			        e.stopPropagation();
		        }

		        // get the key char code
		        var charCode = e.which;

		        // enable key stroke only if it's in the map and not disabled
		        var deviceKey = thi$.keyboardState.charCodes2deviceKeys[charCode];
		        if (deviceKey && deviceKey.enabled) {
			        thi$.cfg.onKeyboardPressed(deviceKey.name);
		        }
		        return false;
	        };
	        this.onKeyPress = onKeyPress;
	        onKeyPress = null;


	        this.listenToKeystrokes(true);
        },

        _enableDraggableKeyboard:function (enable) {


	        if (!!$.pep) { //using pep library

		        var thi$ = this;
		        var fncPepStop = function () {
			        thi$._view && thi$._view.trigger('pep.stop');
		        };

		        if (!enable) {
			        fncPepStop();

			        this._view.unbind('mouseup', fncPepStop);
			        if (window.parent && window.parent.document) {
				        jQuery(window.parent.document).unbind('mouseup doubleclick', fncPepStop);

				        if (window.parent.parent && window.parent.parent.document) {
					        jQuery(window.parent.parent.document).unbind('mouseup doubleclick', fncPepStop);
				        }
			        }

			        $.pep.unbind(this._view);
		        } else {
			        this._view.pep({constrainTo:'parent', useCSSTranslation:false, startThreshold:[15, 15],
				        allowDragEventPropagation:false, stopEvents:'pep.stop'});

			        this._view.bind('mouseup doubleclick', fncPepStop);

			        if (window.parent && window.parent.document) {
				        jQuery(window.parent.document).bind('mouseup doubleclick', fncPepStop);

				        if (window.parent.parent && window.parent.parent.document) {
					        jQuery(window.parent.parent.document).bind('mouseup doubleclick', fncPepStop);
				        }
			        }
		        }

	        } else {
		        if (!enable) { //pep library doesn't exist use jQuery UI
			        this._view.is('.ui-draggable') && this._view.draggable("destroy");
		        } else {
			        this._view.draggable({containment: "parent"});
		        }
	        }

        },

        /**
         * listenToKeystrokes
         * Listen to keyboard strokes
         * @param bListen {Boolean} Listen or not
         */
        listenToKeystrokes:function (bListen) {
	        if (bListen) {
		        // Register keypress event
                this.cfg.target[0].addEventListener('keypress', this.onKeyPress);
		        this.cfg.target[0].addEventListener('keydown', this.onKeyDown);

	        } else { //!bListen
                if (this.onKeyPress) {
	                this.cfg.target[0].removeEventListener('keypress', this.onKeyPress);
	                this.cfg.target[0].removeEventListener('keydown', this.onKeyDown);
		        }
	        }
        },
        /**
         * show
         * show the keyboard
         * @param newOffset the new offset to place the keyboard
         */
        show:function (newOffset) {
            var thi$ = this;
            this.triggerClickOnDocument();

            if (!!this.detachedView && (this._view.parent().length == 0)) {
                //attach keyboard back to DOM
	            this.detachedView.appendTo(this.cfg.parent);
	            delete this.detachedView;
	            this.detachedView = null;

                this.cfg.offset = newOffset;
                // Offset the keyboard according to offsetData
	            domUtils.reparentOnceAndRepositionElement(this._view, newOffset);
                //fit keyboard horizontal position according to viewport width
                domUtils.horizontalFitToViewport(this._view);
                //fit keyboard vertically position according to viewport height
                domUtils.verticalFitToViewport_scrollDown(this._view, this.$parent);

	            // Listen to key strokes
                this.listenToKeystrokes(true);
                this.bindClickEvents();
	            this.bindScrollEvent();
	            this.bindKeyEvents(thi$);

	            this._enableDraggableKeyboard(true);
            }
        },


        bindScrollEvent:function () {
            domUtils.registerToScroll(this._view, this);
        },

        unbindScrollEvent:function () {
            domUtils.unRegisterToScroll(this._view, this);
        },

        bindClickEvents:function () {
            var thi$ = this;

	        if (this.cfg.useMathfieldKBHack || !!ENV.behaviors.useMathfieldKBHack) {
		        if (!window._hack_close_mf_keyboard) {
			        window._hack_close_mf_keyboard = [];
		        }
		        window._hack_close_mf_keyboard.push(thi$.cfg.onKeyboardClosed);
	        }

	        var triggerOnKeyboardClosed = function (e) {
		        if (!!jQuery(e.srcElement).parents('.keyboard').length) {
			        e.stopPropagation();
			        return false;
		        } else if (!!thi$._view.parent().length && !thi$._view.hasClass(constants.classes.hidden)) {
			        thi$.cfg.onKeyboardClosed();
		        }
	        };

	        this.cfg.target.one('mousedown', triggerOnKeyboardClosed);

            //bind iframe documents
            jQuery('iframe', document).contents().one('mousedown', triggerOnKeyboardClosed);

	        var parent_elem = document.getElementById(thi$.cfg.parent_dom_id);
	        var fncListenToClick = jQuery.proxy(this.eventStopPropagation, this);

	        if (!!parent_elem) {
		        parent_elem.removeEventListener('mousedown', fncListenToClick);
		        parent_elem.addEventListener('mousedown', fncListenToClick);
	        } else {
		        if (!!this.cfg.$parent && !!this.cfg.$parent.length) {
			        this.cfg.$parent[0].removeEventListener('mousedown', fncListenToClick);
			        this.cfg.$parent[0].addEventListener('mousedown', fncListenToClick);
		        }
	        }

	        parent_elem = null; fncListenToClick = null;  this_elem = null;
        },

        unbindClickEvents:function () {
	        var this_elem = document.getElementById(this.cfg.id);
	        !!this_elem && this_elem.removeEventListener('mousedown', this.eventStopPropagation);

	        var parent_elem = document.getElementById(this.cfg.parent_dom_id);
	        !!parent_elem && parent_elem.removeEventListener('mousedown', this.eventStopPropagation);
        },


        eventStopPropagation:function (event) {
	        event.stopImmediatePropagation();
            event.stopPropagation();
	        return false;
        },



        /**
         * triggerClickOnDocument
         * will trigger the mousedown event on document
         we need it in order to avoid the case of parralel open keyboards , so whenever we open a new keyboard
         we want to simulate a mousedown event to close the last one
         *
         */

        triggerClickOnDocument:function () {
            this.cfg.target.trigger('mousedown');
        },

        scrollHandler:function (event) {
            var thi$ = event.data.ref,
            delta = thi$.lastScrollTopOffset - this.scrollTop;

            thi$.lastScrollTopOffset = this.scrollTop;
            var offsetObj = {
	            top:thi$._view.offset().top + delta,
	            left:thi$._view.offset().left
            };

            thi$._view.offset(offsetObj);
        },
        /**
         * hide
         * hide the keyboard
         */
        hide:function () {
            // Add hidden class
	        //this._view.addClass(constants.classes.hidden);
	        this.unbindClickEvents();
	        this.unbindScrollEvent();
	        this.keys.unbind();

	        // UnListen to key strokes
	        this.listenToKeystrokes(false);
	        this._enableDraggableKeyboard(false);

	        this.detachedView = this._view.detach();
        },

	    reset : function() {
		    this.listenToKeystrokes(false);
		    this.keys.unbind();
		    delete this.preset;
		    delete this.keyboardState;
	    },

        /**
         * destroy
         * Destroy the keyboard
         */
        dispose:function () {
            this.reset();
	        delete this.keys;
	        delete this.detachedView;

	        this._super();
        }
    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/keyboard/KeyboardView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/keyboard/KeyboardAndroidView.js
////////////////////////////////////////
(function () {

	/**
     * KeyboardView
     */
    t2k.component.keyboard.KeyboardAndroidView = t2k.component.BaseComponentView.subClass({
    	name:'t2k.component.keyboard.KeyboardAndroidView',
        //the hash beatwin kebord to mathfield 
        innerHash:{
            "32":"none",
            "small":"small",
            "20":"caps",
            "46":"del",
            "40":"arrowDown",
            "39":"arrowRight",
            "38":"arrowUp",
            "37":"arrowLeft",
//            "13":"enter",
            "08":"backspace",
            "a":"smallA",
            "b":"smallB",
            "c":"smallC",
            "d":"smallD",
            "e":"smallE",
            "f":"smallF",
            "g":"smallG",
            "h":"smallH",
            "i":"smallI",
            "j":"smallJ",
            "k":"smallK",
            "l":"smallL",
            "m":"smallM",
            "n":"smallN",
            "o":"smallO",
            "p":"smallP",
            "q":"smallQ",
            "r":"smallR",
            "s":"smallS",
            "t":"smallT",
            "u":"smallU",
            "v":"smallV",
            "w":"smallW",
            "x":"smallX",
            "y":"smallY",
            "z":"smallZ",
            "A":"capitalA",
            "B":"capitalB",
            "C":"capitalC",
            "D":"capitalD",
            "E":"capitalE",
            "F":"capitalF",
            "G":"capitalG",
            "H":"capitalH",
            "I":"capitalI",
            "J":"capitalJ",
            "K":"capitalK",
            "L":"capitalL",
            "M":"capitalM",
            "N":"capitalN",
            "O":"capitalO",
            "P":"capitalP",
            "Q":"capitalQ",
            "R":"capitalR",
            "S":"capitalS",
            "T":"capitalT",
            "U":"capitalU",
            "V":"capitalV",
            "W":"capitalW",
            "X":"capitalX",
            "Y":"capitalY",
            "Z":"capitalZ",
            "0":"zero",
            "1":"one",
            "2":"two",
            "3":"three",
            "4":"four",
            "5":"five",
            "6":"six",
            "7":"seven",
            "8":"eight",
            "9":"nine"
        },
    	/**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config) {
        	this.editableContrainer = {};
        	var self = this;
            self.cfg = config;
            self.currentInput = config.parent.find(".mathField").find(".editMobile");
            config.parent.find(".mathField").on("click",function(e){
                var inputx = $(this).find(".editMobile");
                var divStatus = $("<div>").attr("id","divStatus");
                if($(this).find("#divStatus").length == 0){
                    $(this).append(divStatus);
                }
                inputx.on("focus",function(){
                  $(this).parent().find("#divStatus").text("focus");
                });
                inputx.on("blur",function(){
                   $(this).parent().find("#divStatus").text("blur");
                });
                inputx.focus();

            })
            self.editableContrainer = $(this);
            self.initVirtualKeyboardEvents(self);
            setTimeout(0,self.currentInput.focus);

        	
        },
        /**
         * initMembers
         * Init members
         */
        initMembers:function () {},
        /**
         * initKeyboardState
         * Init keyboard state
         */
        initKeyboardState:function () {},
        /**
         * initVirtualKeyboard
         * Init the keyboard view
         */
        initVirtualKeyboard:function () {},
        /**
         * initVirtualKeyboardKeys
         * init virtual keyboard keys if needed
         */
        initVirtualKeyboardKeys:function () {},
        /**
         * initVirtualKeyboardSize
         * Set the virtual keyboard size according to the widest tab and the tallest tab
         */
        initVirtualKeyboardSize:function () {},
        /**
         * changeToTab
         * Change to the specified tabName
         */
        changeToTab:function (tabName) {},
        /**
         * hideTab
         * Hide the specified tab
         * @param {string} tabName
         */
        hideTab:function (tabName) {},
        /**
         * showTab
         * Show the specified tab
         * @param {string} tabName
         */
        showTab:function (tabName) {},
        sortHash: function(keyCode){

        },
        caseMethod : {
                //backspace was click
                "0":function(self){return self.innerHash["08"];},
                "2":function(inputVal,self){
                    //use the innerhash object
                    inputVal = inputVal.substr(1);
                    return self.innerHash[inputVal];
                },
                "3":function(inputVal){
                    //remove the z char and send the value
                    return inputVal.substr(1);
                }
        },
        /**
         * initVirtualKeyboardEvents
         * Init the virtual keyboard events
         */
        initVirtualKeyboardEvents:function (self) {
        	//need to cjange to keyup event
        	//thi$ = self;

        	self.currentInput.on('keyup',$.proxy(function(e){
        		
        		
                
                var inputValLength, charHash, inputVal = e.currentTarget.value;

                inputValLength = inputVal.length > 2 ? 3 : inputVal.length;

                if(typeof self.caseMethod[inputValLength] == "function"){
                    //use the config object to defined what to write 
                    charHash = self.caseMethod[inputValLength](inputVal,self);
                    //sending the right value to the mathfield object
                    self.cfg.onKeyboardPressed(charHash);
                }
                //reValue the input with z char - the z char is needed for detecting backspase
                self.currentInput.val("z");
                
        	},this)); 
        },
        /**
         * executeKeyboardActions
         * execute the specified keyboard actions
         * @param keyboardActions {Object} Array of function names and their arguments
         */
        executeKeyboardActions:function (keyboardActions) {},

        /**
         * selectVirtualKeyboardTab
         * Select a virtual keyboard tab, by the specified tab name / number
         * @param tab {String/Integer} Either the name of the tab, or the tab index
         */
        selectVirtualKeyboardTab:function (tab) {
            //todo: Send choose tab event to keyboard

        },
        /**
         * enableKeys
         * enable the specified keys
         * @param keys - {String} Key Names (virtual and device), or 'all' / 'none' (for virtual keys only)
         * @param enable - {Boolean} enable or disable - default is true
         */
        enableKeys:function (keys, enable) {
        	
        },
        /**
         * disableKeys
         * disable the specified keys
         * @param keys - {String} Key Names (virtual and device), or 'all' / 'none' (for virtual keys only)
         */
        disableKeys:function (keys) {
        	
        },
        /**
         * resetKeyboardStyle
         * reset keyboard press and over classes
         */
        resetKeyboardStyle:function () {
        	//todo: fire event resetKeyboard
        },
        /**
         * selectKeys
         * select the specified keys
         * @param keys - {String} Virtual keys names
         */
        selectKeys:function (keys) {},
        /**
         * initDeviceEvents
         * Init keyboard device events
         */
        initDeviceEvents:function () {},
        /**
         * listenToKeystrokes
         * Listen to keyboard strokes
         * @param bListen {Boolean} Listen or not
         */
        listenToKeystrokes:function (bListen) {},
        /**
         * show
         * show the keyboard
         * @param newOffset the new offset to place the keyboard
         */
        show:function (newOffset) {
        	//todo:fire event show
        },

        bindScrollEvent:function () {
        },

        unbindScrollEvent:function () {
        },

        bindClickEvents:function () {},
        unbindClickEvents:function () {
        	//editableContrainer.off();
        },
        listenToClick:function (event) {
        },
         /**
         * triggerClickOnDocument
         * will trigger the click event on documetn
         we need it in order to avoid the case of parralel open keyboards , so whenever we open a new keyboard
         we want to simulate a click event to close the last one
         *
         */

        triggerClickOnDocument:function () {},
        scrollHandler:function (event) {},
        /**
         * hide
         * hide the keyboard
         */
        hide:function () {
        	//todo: fire event hide
        },
        /**
         * destroy
         * Destroy the keyboard
         */
        destroy:function () {
        	editableContrainer.off();
        }
    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/keyboard/KeyboardAndroidView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/keyboard/Keyboard.js
////////////////////////////////////////
(function() {

    t2k.component.keyboard.Keyboard = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.keyboard.Keyboard',

        ctor: function(config) {
            this._super(config);

            //selecte the right keyboard normal or android
            //todo: need to repalce with useExternalKeyboard
           if( !! ENV.behaviors.useExternalMediaPlayer && !ENV.behaviors.overrideMathNativeKeyboard){
                this.view = this.createNewView(t2k.component.keyboard.KeyboardAndroidView, config);
            }else{
                this.view = this.createNewView(t2k.component.keyboard.KeyboardView, config);
            }

        },

        enableKeys : function(keys, enable) {
        	this.resetKeyboardStyle();
            this.view.enableKeys(keys, enable);
        },

        disableKeys : function(keys) {
        	this.resetKeyboardStyle();
            this.view.disableKeys(keys);
        },

        selectKeys : function(keys) {
            this.view.selectKeys(keys);
        },

        show: function(newOffset) {
            this.view.show(newOffset);
        },

        hide: function() {
            this.view.hide();
        },

	    dispose: function() {
            this.view.dispose();
        },

	    reset: function() {
			this.view.reset();
	    },
        
        resetKeyboardStyle : function(){
        	this.view.resetKeyboardStyle();
        }
    });
})();

////////////////////////////////////////
// SRC End --> t2k/component/keyboard/Keyboard.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerConfig.js
////////////////////////////////////////
(function(){
// Media Player constant values
t2k.component.mediaPlayer.MediaPlayerViewConstants = { 
		mediaFormat : {
			mp3 : {
                type: 'audio',
                isVideo: false,
                className: 'MediaPlayerViewAudio'
			},
			mp4 : {
                type: 'htmlVideo',
                isVideo : true,
                className: 'MediaPlayerViewVideo',
                minimumReadableFactor: 0.7
			},
			avi : {
                type: 'htmlVideo',
                isVideo : true,
                className: 'MediaPlayerViewFlashVideo',
                minimumReadableFactor: 0.7
			},
			swf : {
                type: 'flashVideo',
                isVideo : true,
                className: 'MediaPlayerViewFlashVideo',
                minimumReadableFactor: 0.9
			},
			flv : {
                type: 'flashVideo',
                isVideo : true,
                className: 'MediaPlayerViewFlashVideo',
                minimumReadableFactor: 0.95
			}
		},
        numReductionSteps: 3,
        absoluteMinimum: {
			width: 400,
			height: 300
		},
        absoluteThumbnailSize: {
            width: 168,
            height: 126
        },
        maxSizeFactor : 0.8,
        maxAudioWidth: 350,
        classes: {
            player: 'player',
            navigation: 'player_navigation',
			hidden: 'hidden',
            hideCursor: 'hideCursor',
            pressed: 'pressed',
            play: 'play',
            pause: 'pause',
            stop: 'stop',
            fullscreen: 'fullscreen',
            fullscreenExit: 'fullscreenExit',
            thumbnail: 'thumbnail'
        },
		blowup: {
			selector: 'mediaPlayerBlowup',
			parentSelector: 'body',
			exitKeycode: 27 // escape key code
		},
		reductionStates: {
			REGULAR: 0,
			BIG_THUMBNAIL: 1,
			ABSOLUTE_THUMBNAIL: 2
		},
		blowupStates: {
			EXIT: 0,
			OPTIMUM: 1,
			FULL_SCREEN: 2
		},
		controlPanel: {
			minTimelineWidth : 150,
			timeSectionWidthShowHours : 48,
			timeSectionWidthHideHours : 31,
			timeSectionSeparatorWidth : 4,
            hideTimeout: 20
		},
        animation: {
            speed: 300,
            effect: 'blind',
            stateFeedbackSpeed: 600,
            fullscreenFeedbackFadeSpeed: 3000
        }
		
};
})();
////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayer.js
////////////////////////////////////////
(function() {
	var constants = {
			mediaFormat : t2k.component.mediaPlayer.MediaPlayerViewConstants.mediaFormat
	};
    t2k.component.mediaPlayer.MediaPlayer = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.mediaPlayer.MediaPlayer',

        ctor: function(config) {
            // Delegate
            this._super(config);

            // a flag to indicate if we deal with flash content now
            this.isFlashMedia = false;

            this.cfg.originalSrc = this.cfg.src;
            
            // init media player component parameters
            this.analyzeParams();
            
            // encode src ( ' ' = %20 etc.. )
            if (!this.cfg.dummyMode){
            	this.cfg.src = encodeURI(this.cfg.src);
            }
            
            this.cfg.reductionStep = 0;

            // Init the view according the media type (video/audio etc).
            if(this.cfg.type === 'soundButton') {
                this.view = this.createNewView(t2k.component.mediaPlayer.MediaPlayerViewSoundButton, this.cfg);
            } else { // this.cfg.type !== 'soundButton'
                this.view = this.createNewView(t2k.component.mediaPlayer[this.cfg.mediaFormat.className], this.cfg);
            }
        },
        
        /**
         * analyzeParams
         */
        analyzeParams : function(){
        	// get a xml from config
			var xml = jQuery(this.cfg.data);
			// save src in local variable
			var srcPath = this.cfg.src || xml.attr('src');
			var src = AbsPath(srcPath);

            override(this.cfg, {
                src: src,
                fileExtension: src.substring(src.lastIndexOf('.') + 1),
                type: xml.attr('type') || this.cfg.type,
                width: parseInt(xml.attr('width')),
                height: parseInt(xml.attr('height')),
                reductionStep: parseInt(xml.attr('reductionStep')),
                autoplay: this.cfg.autoplay ? this.cfg.autoplay : ((xml.attr('auto_play') === 'true') ? true : false)
            });

            this.cfg.mediaFormat = constants.mediaFormat[this.cfg.fileExtension.toLowerCase()];
        },

        /**
		 * reduce
		 */
		reduce : function(val){
			var reductionValue = val ? val : 1;
			this.cfg.reductionStep += reductionValue;
			this.view.reduce(this.cfg);
			this.writeCompiled('reduction', this.cfg.reductionStep);
		},
		
		/**
		 * setEnabled
         * Enable/Disable this component view
		 * @param active - {Boolean} True for active, false otherwise.
		 */
		setEnabled : function(active){
			this._super(active);
			this.view.setEnabled(active);
		},

        /**
         * setMyState
         * Set media player state
         * @param state - {jQuery} State xml
         */
        setMyState : function(state){
            this.view.setMyState(state);
        },

        /**
         * setMyState
         * Set media player state
         * @param state - {jQuery} State xml
         */
        addMyState : function(){
            return this.view.addMyState();
        },
        
        bindEvent : function(event, host, callback, one, unbind){
        	this.view.bindEvent(event, host, callback, one, unbind);
        }
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerViewHtmlPlayer.js
////////////////////////////////////////

(function() {

/*
 * MediaPlayerViewHtmlPlayer
 * build HTML5 video/audio player, fire media events to init class
 */
t2k.component.mediaPlayer.MediaPlayerViewHtmlPlayer = function(view){

    /** The class' name (for debugging purpose). */
    this.name = 't2k.component.mediaPlayer.MediaPlayerViewHtmlPlayer';
    
    var thi$ = this ;
    
    var video = view.video;
    if ( !video && (view._mediaPlayer[0].localName === "video") ) {
        video = view._mediaPlayer;
    }

    var media = video || view._mediaPlayer;
    

	var timeToSetOnMetadata = 0 ;
	var hasMetadataLoaded = false ;
    
	// call player private function init()
	init();

    function setMediaSrc() {
    	
        // We need to change the src with setTimeout because of a bug in Chrome.
        // Check out http://stackoverflow.com/questions/4694519/how-do-i-change-the-src-of-an-html5-video-via-javascript-without-either-crashing

		setTimeout(function() {
			video.attr( 'src', view.cfg.src ) ;
		}, 10);

    }

    /**
	 * init
	 * init media player
	 */
	function init(){
		
		// We never want the default HTML5 controls and autoplay
		// media.attr('controls', false);
        media.attr('autoplay', false);

        // Set the media src

	    if (video){
            if(view.cfg.setSrcAtStart){
                video.attr( 'src', view.cfg.src ) ;


            }else{

                globalEvents.add({
                    fnc: function(){
                        video.attr( 'src', view.cfg.src ) ;
                    }
                })
            }
	    }
//        video && setMediaSrc();
        // bind events
        
        // media loading progress event
		media.bind('click', function(event){
			event.preventDefault();
		});
		
        // media loading progress event
		media.bind('progress', function(event){
            view.onMediaLoadingProgress();
		});

		// media playing progress event
		media.bind('timeupdate',function(event){
            view.onTimeupdate(event.target.currentTime);
		});

		// start load media event
		media.bind('loadstart', function(event){
            view.onLoadstart();
		});		
		
		// media metadata (duration, videoWidth, videoHeight...) loaded event
		media.bind('loadedmetadata', function(event){
            var loadedMetadataParams = {
                duration: event.target.duration
            };
			
			if ('videoHeight' in event.target) {
				jQuery.extend(loadedMetadataParams, {
					videoHeight: event.target.videoHeight,
					videoWidth: event.target.videoWidth
				});
			}
			
			hasMetadataLoaded = true ;
			
			if( timeToSetOnMetadata ) {
				thi$.setCurrentTime( timeToSetOnMetadata ) ;
			}
			
			// change flag to true to indicate that metadata is available
			view.onLoadedMetadata(loadedMetadataParams);
		});
		
		// media data loaded event
		media.bind('loadeddata', function(event){
            view.onPlayerReady();
		});
		 
		// media pause event
		media.bind('pause', function(event){
            view.onPause();
		});
		
		// media play event
		media.bind('play', function(event){
            view.onPlay();
		});
		
		// media playing ended event
		media.bind('ended', function(event){
            view.onEnd();
		});

		// media playing error event
		media.bind('error', function(event){
            // media playback failed - show a message saying why
            var msg = '';
            var error = event.target.error;
            switch (error.code) {
                case error.MEDIA_ERR_ABORTED:
                    msg = 'You aborted the video playback.';
                    break;
                case error.MEDIA_ERR_NETWORK:
                    msg = 'A network error caused the video download to fail part-way.';
                    break;
                case error.MEDIA_ERR_DECODE:
                    msg = 'The video playback was aborted due to a corruption problem or because the video used features your browser did not support.';
                    break;
                case error.MEDIA_ERR_SRC_NOT_SUPPORTED:
                    msg = 'The video could not be loaded, either because the server or network failed or because the format is not supported.';
                    break;
                default:
                    msg = 'An unknown error occurred.';
                    break;
            }

            view.onError('{0}\n{1}'.format(msg, media.attr('src')));
        });
    };
	/**
	 * MediaPlayerViewHtmlPlayer class public methods
	 */

    /**
     * play
     * play media
     * @returns
     */
    this.play = function(){
        mediaManager.setMedia(media[0], true);
        mediaManager.play();
    };

    /**
     * pause
     * pause media
     * @returns
     */
    this.pause = function(){
        if (media[0] === mediaManager.currentItem) {
            mediaManager.pause();
        }
    };

    /**
     * stop
     * stop media
     * @returns
     */
    this.stop = function(){
        this.pause();
        this.setCurrentTime(0);
    };

    /**
     * playFrom
     * play media from some point (currentTime) on timeline
     * @param time
     * @returns
     */
    this.playFrom = function(time){
        this.setCurrentTime(time);
        this.play();
    };

    /**
     * isPaused
     * check if a media is paused now
     * @returns
     */
    this.isPaused = function(){
        return media[0].paused;
    };

    /**
     * setCurrentTime
     * set current time on timeline
     * @param time
     * @returns
     */
    this.setCurrentTime = function(time){
    	
    	if( hasMetadataLoaded ) {
    		try {
    			media[0].currentTime = time;
    		} catch (e) {
    			/*          When you set this property, the media play head moves to the new location.
            An INVALID_STATE_ERR DOM exception is raised if there is no selected media resource when you set this property.
            An INDEX_SIZE_ERR DOM exception is raised if the specified time is not within the start and end times.*/
    			media[0].currentTime = 0;
    		}
    	} else {
    		timeToSetOnMetadata = time ;
    	}
    	
    };

    /**
     * getCurrentTime
     * @returns
     */
    this.getCurrentTime = function(){
        return media[0].currentTime;
    };
};
})();

////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerViewHtmlPlayer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerViewControlPanelTimeline.js
////////////////////////////////////////
(function() {

/**
 * MediaPlayerViewControlPanelTimeline
 * object to manage timeline functionality
 */

// save reference to this class for global scope
t2k.component.mediaPlayer.MediaPlayerViewControlPanelTimeline = t2k.core.View.subClass({
			
    /** The class' name (for debugging purpose). */
    name : 't2k.component.mediaPlayer.MediaPlayerViewControlPanelTimeline',

    /**
     * @constructor
     * @see superclass documentation
     */
    ctor : function(config) {
        this._super(override(config, { template : "" })); // Mustache template is in MediaPlayerViewControlPanel
        this.initMembers();
    },

    /**
     * init members
     */
    initMembers: function() {
        jQuery.extend(this, {
            // timeline range - px/sec
            range: 0
        });
    }, // End of initMembers

    /**
     * setup timeline view
     * @param dynamicControlsDimensionsParams
     */
    setup : function(dynamicControlsDimensionsParams) {

    	var mediaPlayerView = this.cfg.mediaPlayerView;

        // init members
        this._controlPanel = mediaPlayerView.controlPanel._controlPanel;
        this._timeline = mediaPlayerView.controlPanel._timeline;
        this._timelineTooltip = mediaPlayerView.controlPanel._timelineTooltip;
        this._timelineTooltipProgress = mediaPlayerView.controlPanel._timelineTooltipProgress;
        this._timelineTooltipSeparator = mediaPlayerView.controlPanel._timelineTooltipSeparator;
        this._timelineTooltipTotalTime = mediaPlayerView.controlPanel._timelineTooltipTotalTime;
        this._progressBar = mediaPlayerView.controlPanel._progressBar;
        this._mediaSlider = mediaPlayerView.controlPanel._mediaSlider;
        this._timelineBackground = mediaPlayerView.controlPanel._timelineBackground;
        this.dynamicControlsDimensionsParams = dynamicControlsDimensionsParams;
        this.timelineWidth = dynamicControlsDimensionsParams.timelineWidth;
        this._timeline
        	.css({
                width : dynamicControlsDimensionsParams.timelineWidth,
                minWidth : dynamicControlsDimensionsParams.timelineWidth
            });

        // calculate timeline range value
        this.range = dynamicControlsDimensionsParams.timelineWidth / dynamicControlsDimensionsParams.duration;

        // progress bar shows video / audio progress on timeline
        this._progressBar
            .css({
                maxWidth : dynamicControlsDimensionsParams.timelineWidth
            });

        // init timeline tooltip events
        this.initTimelineTooltipEvents();

        // init media slider events
        this.initMediaSliderEvents();

        // Set half timeline tooltip width for tooltip positioning
        this.halfTimelineTooltipWidth = this._timelineTooltip.outerWidth(true) / 2;
    },
    /**
     * initTimelineTooltipEvents
     * init timeline tooltip show on timeline mouse move
     */
    initTimelineTooltipEvents : function() {
        var thi$ = this;
        var mediaPlayerView = this.cfg.mediaPlayerView;

        this.offsetX = 0;

        // Hide the timeline tooltip if the mouse enters it
        this._timelineTooltip.mouseenter(function() {
            thi$.hideTimelineTooltip();
        });

        // Track mouse moves inside timeline
        // We're using setTimeout to improve performence
        this._timeline
            
             // handle timeline clicks
            .mousedown(function(event) {
            	
                if (event.target.id == thi$._timeline[0].id
                    || event.target.id == thi$._progressBar[0].id
                    || event.target.id == thi$._timelineBackground[0].id){
                	
                	thi$.offsetX = thi$.getPageX(event) - thi$._timeline.offset().left;
                    var secsEllapsed = thi$.offsetX / thi$.range;
                    mediaPlayerView.setCurrentTime(secsEllapsed);
                }
            });
            

    },

    /**
     * hideTimelineTooltip
     * Hide the timeline tooltip
     */
    hideTimelineTooltip : function() {
        this._timelineTooltip.css({
            display: 'none'
        });
    },

    /**
     * onMouseStop
     * This code captures the mouse position and adjusts the timeline tooltip position
     */
    onMouseStop : function() {
    	clearTimeout(this.onMouseStopThread);
    	
    	
    	if (this.mousemoveEventTarget != this._timelineTooltip[0]) {
            // Keep offsetX in timeline bounds
            if (this.offsetX < 0) {
                this.offsetX = 0;
            }
            else if (this.offsetX > this.timelineWidth) {
                this.offsetX = this.timelineWidth;
            }

            // set new time and move timeline tooltip
            
            this.newCurrentTime = this.dynamicControlsDimensionsParams.duration * this.offsetX / this.dynamicControlsDimensionsParams.timelineWidth;
            


            // Drag media slider if mouse is down
            if(this.mediaSliderMouseDown) {
                     this._mediaSlider.css({
                        left: this.offsetX
                    });
                     
            }
        }
    },

    /**
     * onMouseMove
     * Handle mouse move
     * @param event
     */
    onMouseMove : function(event) {
    	if(event.type == "touchmove"){
    		event.preventDefault();
    	}    	
    	
        var thi$ = this;
        this.offsetX = this.getPageX(event) - this._timeline.offset().left;
        this.mousemoveEventTarget = event.target;
        clearTimeout(this.onMouseStopThread);
        this.onMouseStopThread = setTimeout(function() {
            thi$.onMouseStop();
        }, 4);
    },
    
    getPageX:function(event){
    	
    	var origEvent = event;
    	var pageX;
    	
    	if(origEvent.type == "touchstart" || origEvent.type == "touchend" || origEvent.type == "touchmove"){
    		origEvent = event.originalEvent;
    		pageX = origEvent.touches[origEvent.touches.length - 1].pageX;
    	}
    	else{
    		pageX = origEvent.pageX;
    	}
    	
    	
    	return pageX;
    },

    /**
     * initMediaSliderEvents
     * init media slider drag and drop
     */
    initMediaSliderEvents : function() {
        var thi$ = this;

        var onDocumentMouseMove = function(event) {
            thi$.onMouseMove(event);
        };
        

        
        var onDocumentMouseUp = function() {
            jQuery(document)
                .unbind('mousemove', onDocumentMouseMove)
                .unbind('mouseup', onDocumentMouseUp);

            jQuery(document.body)
                .removeClass('unselectable');
            thi$.onMouseStop();
            thi$.hideTimelineTooltip();
            thi$.onMediaSliderDragEnd();
        };

        
        this._mediaSlider
        		.mousedown(function(event) {
        		//temporarily the sliding on the tablet is disabled
        		if(event.type == "touchstart"){
        			return;
        		}	
                thi$.onMediaSliderDragStart();
                jQuery(document)
                    .mousemove(onDocumentMouseMove)
                    .mouseup(onDocumentMouseUp);
                jQuery(document.body)
                    .addClass('unselectable');
            });
    },

    /**
     * onMediaSliderDragStart
     * Pause the playback
     */
    onMediaSliderDragStart : function() {
        this.mediaSliderMouseDown = true;
        
        //this._mediaSlider.addClass('mobile');
        this._mediaSlider.addClass('drag');
        
        //this.dragStartOffset = this.offsetX;

        var mediaPlayerView = this.cfg.mediaPlayerView;
        
        // If the video was playing before drag we want to keep playing after it
        this.playAfterDrag = !mediaPlayerView.isPaused();

        // Pause player
        mediaPlayerView.pause();
    },

    /**
     * onMediaSliderDragEnd
     * Set media time and resume playback if necessary
     */
    onMediaSliderDragEnd : function() {
        if(this.mediaSliderMouseDown) {
            this.mediaSliderMouseDown = false;
            
            this._mediaSlider.removeClass('drag');


            var mediaPlayerView = this.cfg.mediaPlayerView;

            // Update video current time and play if necessary
        		mediaPlayerView.setCurrentTime(this.newCurrentTime);

            if(this.playAfterDrag){
                mediaPlayerView.play();
            }
            
        }
    },

    /**
     * progress
     * @param secs
     */
    progress : function(secs) {
        var shift = secs * this.range;
        this._progressBar && this._progressBar.css({
            minWidth : shift
        });

        this._mediaSlider && this._mediaSlider.css({
            left : shift
        });
        
    }
});  // End of t2k.component.mediaPlayer.MediaPlayerViewControlPanelTimeline

})();

////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerViewControlPanelTimeline.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerViewControlPanelIndicator.js
////////////////////////////////////////
(function() {
// class constants
var constants = {
    controlPanel: t2k.component.mediaPlayer.MediaPlayerViewConstants.controlPanel
};

/**
 * MediaPlayerViewControlPanelIndicator
 * an object to display total time and ellapsed time values
 */
// save reference to this class for global scope
t2k.component.mediaPlayer.MediaPlayerViewControlPanelIndicator = t2k.component.BaseComponentView.subClass({
			
    /** The class' name (for debugging purpose). */
    name : 't2k.component.mediaPlayer.ControlPanelIndicatorView',

    /**
     * @constructor
     * @see superclass documentation
     */
    ctor : function(config, type) {
    	this.type = type;
        this._super(override(config, { template : "" })); // Mustache template is in MediaPlayerViewControlPanel
        this.initMembers();
    },

    //Guy - no need to render here
    onViewRendered:function(){

    },

    /**
     * init members
     */
    initMembers: function() {
    }, // End of initMembers

    /**
     * setup
     * time indicator (total and ellapsed time) object
     * @param dynamicControlsDimensionsParams
     */
    setup : function(dynamicControlsDimensionsParams) {
    	var wholeIndicatorWidth = 0;
        var eachSectionIndicatorWidth = 0;
        var mediaPlayerView = this.cfg.mediaPlayerView;
        
        // init members
        
        if(this.type == "total"){
        	this._indicator = mediaPlayerView.controlPanel._indicatorTotalTime;
            this._indicator
        	.text(mediaPlayerView.controlPanel.totalDurationText);
        } else{
        	this._indicator = mediaPlayerView.controlPanel._indicatorProgress;
			var txtDuration = '00:00';
            if(dynamicControlsDimensionsParams){
				txtDuration = dynamicControlsDimensionsParams.duration >= 3600 ? '00:00:00' : '00:00';
			}
			this._indicator.text(txtDuration);
        }
    },

    /**
     * setMediaProgressTime
     * set a new value of progress time indicator
     * @param secs
     */
    setMediaProgressTime : function(secs) {
        if(this._indicator && this._indicator.length > 0){
            var mediaPlayerView = this.cfg.mediaPlayerView;
            var progressTime = mediaPlayerView.controlPanel.convertDurationToTimeFormat(secs);
            this._indicator.text(progressTime);
        }
    }
});  // End of t2k.component.mediaPlayer.MediaPlayerViewControlPanelIndicator

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();

////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerViewControlPanelIndicator.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerViewControlPanel.js
////////////////////////////////////////
(function() {

// class constants
var constants = t2k.component.mediaPlayer.MediaPlayerViewConstants;

// Mustache template
var controlPanelTemplate = "\
	<div id='{{id}}_controlPanel'  onselectstart='return false' class='controlPanel unselectable'>\
		<div id='{{id}}_playButton' class='mpControlButton playButton {{playClass}}' title='{{playText}}'>\
			<div id='playState'>\
					?\
			</div>\
			<div id='pauseState'>\
					C\
			</div>\
			<span class='mobile-touch-area'></span>\
        </div>\
		<div id='{{id}}_indicatorProgress' class='indicator indicatorProgress'>{{indicatorTimeFormat}}</div>\
		<div id='{{id}}_timeline' class='newTimeline'>\
			<div id='{{id}}_timelineBackground' class='timelineBackground'></div>\
			<div id='{{id}}_progressBar' class='timelineNewProgressBar'></div>\
			<div id='{{id}}_mediaSlider' class='mediaSliderKnob'>\
			    <div id='{{id}}_mediaInternalSlider' class='mediaInternalSliderKnob'></div>\
			    <span class='mobile-touch-area'></span>\
			</div>\
	        <span class='mobile-touch-area'></span>\
		</div>\
		<div id='{{id}}_indicatorTotalTime' class='indicator indicatorTotalTime'>{{indicatorTimeFormat}}</div>\
		{{#isVideo}}\
			<div id='{{id}}_fullscreenButton' class='mpControlButton fullScreenButton' title='{{fullscreenText}}'>\
			 	A\
			    <span class='mobile-touch-area'></span>\
			</div>\
		{{/isVideo}}\
	</div>";
		

/**
 * MediaPlayerViewControlPanel
 */

// save reference to this class for global scope
t2k.component.mediaPlayer.MediaPlayerViewControlPanel = t2k.component.BaseComponentView.subClass({
			
    /** The class' name (for debugging purpose). */
    name : 't2k.component.mediaPlayer.MediaPlayerViewControlPanel',

    /**
     * @constructor
     * @see superclass documentation
     */
    ctor : function(config) {
        this._super(override(config, { template : "" })); // There's no mustache template for control panel, we build it using jQuery in build()
        this._initMembers();
    },
    
    onViewRendered : function(){
    	
    },

    /**
     * init members
     */
    _initMembers: function() {
        jQuery.extend(this, {
            cpWidth : 0,

            // a flag indicates if media slider is draged now
            isSlided : false,

            // timer id to manage controls panel behaiviour
            timerId : 0,

            // children
            indicatorProgress:new t2k.component.mediaPlayer.MediaPlayerViewControlPanelIndicator(this.cfg, "progress"),
            timeline : new t2k.component.mediaPlayer.MediaPlayerViewControlPanelTimeline(this.cfg),
            indicatorTotal : new t2k.component.mediaPlayer.MediaPlayerViewControlPanelIndicator(this.cfg, "total"),

            loadedMetadata: null,
            totalDurationText: null,
            showHours: false
        });
    }, // End of _initMembers

    /**
     * build
     * build controls panel
     * @param loadedMetadata
     */
    setLoadedMetaData : function(loadedMetadata) {
        this.loadedMetadata = loadedMetadata;
        this.showHours = loadedMetadata.duration >= 3600;
        this.totalDurationText = this.convertDurationToTimeFormat(loadedMetadata.duration);
    },
    /**
     * build
     * build controls panel
     */
    build : function() {
		var mediaPlayerView = this.cfg.mediaPlayerView;

		// Render the control panel and its controls
		this.render(
			mediaPlayerView._content,
			controlPanelTemplate,
			override(mediaPlayerView.cfg, {
                // isVideo use to show/hide full screen button. 
                // show this button only on video, and only behaviors permission.
                // (on tablets, behaviors probebly won't allow to show full screen)
				isVideo: mediaPlayerView.cfg.mediaFormat.isVideo && ENV.behaviors.allowMediaPlayerFullScreen ,
                playClass: constants.classes.play,
                pauseClass: constants.classes.pause,
                stopClass: constants.classes.stop,
                fullscreenClass: constants.classes.fullscreen,
				indicatorSeparator: '/',
				indicatorTimeFormat: this.showHours ? '00:00:00' : '00:00',
                playText: _i18n('mediaPlayer.tooltips.play'),
                stopText: _i18n('mediaPlayer.tooltips.stop'),
                fullscreenText: _i18n('mediaPlayer.tooltips.fullscreen')
			})
		);

        // Store members
		var id = mediaPlayerView.cfg.id;
        this._controlPanel = jQuery('#' + id + '_controlPanel');
        this._playButton = jQuery('#' + id + '_playButton');
        this._playButtonBorder = jQuery('#' + id + '_playButtonBorder');
        
        // timeline
        this._timeline = jQuery('#' + id + '_timeline');
        this._progressBar = jQuery('#' + id + '_progressBar');
        this._mediaSlider = jQuery('#' + id + '_mediaSlider');
        this._timelineTooltip = jQuery('#' + id + '_timelineTooltip');
        this._timelineTooltipProgress = jQuery('#' + id + '_timelineTooltipProgress');
        this._timelineTooltipSeparator = jQuery('#' + id + '_timelineTooltipSeparator');
        this._timelineTooltipTotalTime = jQuery('#' + id + '_timelineTooltipTotalTime');
        this._timelineBackground = jQuery('#' + id + '_timelineBackground');
        
        // indicators
        this._indicatorProgress = jQuery('#' + id + '_indicatorProgress');
        this._indicatorTotalTime = jQuery('#' + id + '_indicatorTotalTime');
        
        // full screen
        this._fullscreenButton = jQuery('#' + id + '_fullscreenButton');

        // Init control panel controls 
        this.initControls();

		// setup control panel events
		this.initEvents();

        // We're ready
		this.isReady = true;
    },

    /**
     * initControls
     * Resize control panel controls
     */
    initControls : function() {
    	var cp = this._controlPanel;
    	var mediaPlayerView = this.cfg.mediaPlayerView;
    	
    	// set control panel size / position
        this.cpWidth = mediaPlayerView._content.width();

        cp.css({
            width : this.cpWidth,
            maxWidth : this.cpWidth
        });
        
        // calculate dimensions of dynamic controls
        var dynamicControlsDimensionsParams = this.calculateDynamicControlsDimensions();

        // resize the control panel controls 
        this.resizeControls(dynamicControlsDimensionsParams);
    },
    /**
     * calculateDynamicControlsDimensions
     * calculate controls demensions according to priority
     * @returns {} timeline and indicator widths
     */
    calculateDynamicControlsDimensions : function() {
    	// calculate the total width off all static controls and spacing
    	var staticElementsWidth = this.calculateStaticElementsWidth();

    	// Change dynamic controls according to available width
        var timeSectionWidth = this._indicatorProgress.width();
        var twoTimeSectionsWidth = 2 * timeSectionWidth;        
        var indicatorWidth = twoTimeSectionsWidth;
        
        // Product want these hidden. I'm leaving them in the template because they may change their mind...
        this._timelineTooltipSeparator.hide();
        this._timelineTooltipTotalTime.hide();

        // timeline width will be what's left
        var timelineWidth = this.cpWidth - staticElementsWidth;

        // Create return object
        var dynamicControlsDimensionsParams = override(this.loadedMetadata, {
        	timelineWidth: timelineWidth,
        	indicatorWidth: indicatorWidth
        });

        return dynamicControlsDimensionsParams;
    },

    /**
     * calculateStaticElementsWidth
     * calculate width of all static elements
     * @return static elements width
     */
    calculateStaticElementsWidth : function() {
    	
    	var staticElementsWidth = Math.ceil(this._playButton.outerWidth(true)) 
    							+ Math.ceil(this._indicatorProgress.outerWidth(true))
    							+ Math.ceil(this._indicatorTotalTime.outerWidth(true))
    							+ Math.ceil(this._fullscreenButton.outerWidth(true));
        
        return Math.ceil(staticElementsWidth);
    },
    /**
     * resizeControls
     * resize controls on controls panel(buttons, timeline,indicator)
     * @param dynamicControlsDimensionsParams
     */
    resizeControls : function(dynamicControlsDimensionsParams) {
        var mediaPlayerView = this.cfg.mediaPlayerView;
            
        this.indicatorTotal.setup(dynamicControlsDimensionsParams);   
        this.indicatorProgress.setup(dynamicControlsDimensionsParams);   

        // build timeline
        this.timeline.setup(dynamicControlsDimensionsParams);
        
        // if the player is not ready to play disable controls panel
        //if(!mediaPlayerView.isPlayerReady){
        	//this._controlPanel.attr('disabled', 'disabled');
        //}
        
        // Update controls to current play state
        this.changeControls(mediaPlayerView.isPaused() ? 'play' : 'pause');
    },
    /**
     * initEvents
     * Init control panel events
     */
    initEvents : function() {
		var mediaPlayerView = this.cfg.mediaPlayerView;
		var thi$ = this;

	    mediaPlayerView._content
		    .bind(ENV.behaviors.mediaPlayerShowEvent, function (event) {
			    var $target = jQuery(event.target);
			    if($target.parents('.controlPanel').length) { //mouse is over control panel
				    event.preventDefault();
				    event.stopPropagation();
				    return false;
			    }
			    $target = null;

			    mediaPlayerView.isPaused() || thi$.show(true);
			    mediaPlayerView.isPaused() || thi$.waitAndHide();
		    });
        
        // init play button
        this._playButton
        	.click(function() {
        		mediaPlayerView.togglePlayPause();
        	});

        
        // init fullscreen button if needed
        var isVideo = mediaPlayerView.cfg.mediaFormat.isVideo;
        if(isVideo){
            // init fullscreen button
        	this._fullscreenButton
        		.click(function() {
                    mediaPlayerView.onFullScreen();
                });
        }

        // init all control buttons pressed state
        jQuery('.controlButton', this._controlPanel)
            .mousedown(function () {
                jQuery(this).addClass(constants.classes.pressed);
            })
            .mouseup(function () {
                jQuery(this).removeClass(constants.classes.pressed);
            });
    },

    /**
     * show
     * Shows the control panel
     * @param bShow boolean
     */
    show: function(bShow) {
        var thi$ = this;

        // start animation only if we're not already animating
        // Also, perform animation only if we can (hide when we're visible, show when we're hidden)
        if (this._controlPanel
            && !this.controlPanelAnimated
            && bShow !== this._controlPanel.is(':visible')) {

            var animationMethod;
            var classMethod;

            if(bShow) {
                animationMethod = 'fadeIn';
                classMethod = 'removeClass';
                this.waitAndHide();
            } else { // !bShow
                animationMethod = 'fadeOut';
                classMethod = 'addClass';
            }
            thi$.cfg.mediaPlayerView._content[classMethod](constants.classes.hideCursor);

            this.controlPanelAnimated = true;
			this._controlPanel[animationMethod](
                constants.animation.speed,
                function() {
                    thi$.controlPanelAnimated = false;
                });
		}
    },

    /**
     * waitAndHide
     * Wait a timeout and then hide cpanel
     * @param waitTimeout - {Integer} Time to wait before hiding in milliseconds
     */
    waitAndHide: function(waitTimeout) {
        var mediaPlayerView = this.cfg.mediaPlayerView;
        if(waitTimeout === undefined) {
            waitTimeout = constants.controlPanel.hideTimeout;
        }

        // hide cpanel only if media is a video
        if (mediaPlayerView.cfg.mediaFormat.isVideo &&
            !mediaPlayerView.isPaused()) {

            var thi$ = this;
            // run timer to hide controls panel on automatically
            clearTimeout(this.timerId);
            thi$.timerId = setTimeout(function() {
                clearTimeout(thi$.timerId);
                if (!this.isSlided && !mediaPlayerView.isPaused()) {
                    // TODO: demo - don't hide cpanel
                    thi$.show(false);
                }
            }, waitTimeout);
        } else { // Either it's
            clearTimeout(this.timerId);
        }
    },
    /**
     * remove
     * Removes the control panel
     */
    remove: function() {
        if (this._controlPanel) {
			this._controlPanel.remove();
		}
    },
	
    /**
     * changeControls
     * Changes controls (play or pause)
	 * @param state - 'play' / 'pause'
     */
    changeControls : function(state) {
        if (!this._playButton) return;

        this._playButton
            .attr('title', _i18n('mediaPlayer.tooltips.' + state));

        if(state === constants.classes.pause) {
            this._playButton
                .removeClass(constants.classes.play)
                .addClass(constants.classes.pause);
        } else {
            this._playButton
                .removeClass(constants.classes.pause)
                .addClass(constants.classes.play);
        }
	},

    /**
     * onPlay
     * Change controls (pause) and show control panel
     */
    onPlay : function() {
        this.changeControls('pause');
        //this.waitAndHide();
    },

    /**
     * onPause
     * Change controls (play) and show control panel
     */
    onPause : function() {
        this.changeControls('play');
        this.show(true);
    },

    /**
     * convertDurationToTimeFormat
     * convert duration in secounds to time format hh:mm:ss
     * @param secs - {Integer}
     * @returns {String}
     */
    convertDurationToTimeFormat : function(secs) {
        var hours = Math.floor(secs / (60 * 60));
        var divisor_for_minutes = secs % (60 * 60);
        var minutes = Math.floor(divisor_for_minutes / 60);

        var divisor_for_seconds = divisor_for_minutes % 60;
        var seconds = Math.floor(divisor_for_seconds);

        minutes = (minutes < 10) ? '0' + minutes : minutes;
        seconds = (seconds < 10) ? '0' + seconds : seconds;

        var timeFormatArr = [minutes, ':', seconds];

        if (this.showHours) {
            hours = (hours < 10) ? '0' + hours : hours;
            timeFormatArr.splice(0, 0, hours, ':');
        }
        return timeFormatArr.join('');
    }

});  // End of t2k.component.mediaPlayer.MediaPlayerViewControlPanel

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerViewControlPanel.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerView.js
////////////////////////////////////////
(function() {
/**
 * MediaPlayerView
 */

// class constants
var constants = t2k.component.mediaPlayer.MediaPlayerViewConstants;

// save reference to this class for global scope
t2k.component.mediaPlayer.MediaPlayerView = t2k.component.BaseComponentView.subClass({
			
			/** The class' name (for debugging purpose). */
			name : 't2k.component.mediaPlayer.MediaPlayerView',

            /**
             * @constructor
             * @see superclass documentation
             */
            ctor : function(config) {

                this.initMembers();

                // render template with Mustache
                this._super(config);
                
                // set dummyMode as a member, 
                // to let the mediaPlayer's components know the dummyMode
                this.dummyMode = this.cfg.dummyMode;

                // reduction step
                // this.reductionStep = jQuery.isNaN(this.cfg.reductionStep) ? 0 : this.cfg.reductionStep;
                this.reductionStep = jQuery.isNumeric(this.cfg.reductionStep) ? this.cfg.reductionStep : 0 ;

                // calculate dimensions
                this.calcVisualSettings();

                // Create control panel
                this.controlPanel = new t2k.component.mediaPlayer.MediaPlayerViewControlPanel(override(config, {
                    mediaPlayerView: this
                }));

                // set the media size
				this.setSize();

                // get player reference
                this.player = this._initPlayer();
				
				// init UI behavior
				this.initUiBehavior();
				
				// on dummy mode - dispatch onRendered.
				// (dummy mode won't load meta data and won't call rendered)
				if (this.dummyMode){
					this.dispatchEvent('onRendered');
				}
            },

            /**
             * onViewRendered
             */
            onViewRendered: function (){
                
            },
            
            /**
             * checkWidth
             * check media player width vs container width
             * on delta, calc reduction steps, and set size
             */
            checkWidth : function(){
            	// get containter
            	this.container = this.cfg.container || this._view.parents('.task_container');
            	
            	// calc delta
            	var deltaWidth = this._view.width() - this.container.width();
            	
            	// on delta, calc reduction steps and set the new size
            	if (deltaWidth > 0){
            		var reductionStepSum = Math.ceil(deltaWidth / this.reductionStepSize);
    	        	this.reductionStep = reductionStepSum;
    	            this.setSize();
            	}
            },


            /**
             * initMembers
             * init class members
             */
            initMembers: function (){
                // class properties
                this.player = null;

                // a original size from the configuration
                this.originalSize = {
                    width: undefined,
                    height: undefined
                };

                this.size = {
                    width: undefined,
                    height: undefined
                };

                // a relation between width and height to decide if an image has landscape or portrait orientation
                this.aspectRatio;
                this.isLandscape;

                // a flag indicates if the player is ready to play media
                this.isPlayerReady = false;

                // to play when media was loaded or not
                this.playWhenLoaded = false;
            },
			
			/**
			 * _initPlayer
			 * init media player according to media content
			 * @returns t2k.component.mediaPlayer.MediaPlayerViewHtmlPlayer
			 */
			_initPlayer : function(){
				var anyPlayer = null;
				if(!this.cfg.isFlashMedia){
					// init and return generic (HTML5) media player
                    anyPlayer = new t2k.component.mediaPlayer.MediaPlayerViewHtmlPlayer(this);
				}else{
					// init and return FLASH media player
					// anyPlayer = new FlashPlayer For example!!!
				}
				return anyPlayer;
			},
			
			/**
			 * initUiBehavior
			 * init user interface behavior - events etc.
			 */
			initUiBehavior : function(){
				var thi$ = this;
				this._content.click(function(e) {
                    // Avoid clicks on control panel and decsendants
                    if(jQuery(e.target).closest('.controlPanel').length === 0){
                        thi$.onMediaClick();
                    }
				});
			},
			
            /****************************************************************************************************************************
             * Media player methods
             ****************************************************************************************************************************/

			play : function() {
				this.player.play();
			},

			stop : function() {
				this.player.stop();
			},

			pause : function() {
				this.player.pause();
			},

			playFrom : function(sec) {
				this.player.playFrom(sec);
			},

			setCurrentTime : function(time) {
				this.player.setCurrentTime(time);
			},
			
			getCurrentTime : function() {
				return this.player.getCurrentTime();
			},

			isPaused : function() {
				return this.player.isPaused();
			},

			/****************************************************************************************************************************
			 * player callback methods to listen to media player (HTML5 or Flash) events
			 ****************************************************************************************************************************/ 
			
			/**
			 * onLoadedMetadata
			 * onLoadedMetadata called from player implementation when
			 * loadedMetadata media player event fired
			 * 
			 * @param loadedMetadataParams
			 */
			onLoadedMetadata : function(loadedMetadata) {
                this.controlPanel.setLoadedMetaData(loadedMetadata);
                if(!this.blowupEnabled){
                    this.buildControls();
                }

                // after the media player video refactor, this on rendered is buggy.
                // this.dispatchEvent('onRendered');
			},
			
			/**
			 * onPlayerReady
			 * called from media player when all media data completely loaded 
			 */
			onPlayerReady : function(){
				this.isPlayerReady = true;
				// can play now
				if(this.playWhenLoaded) {
					this.play();
				}
			},
			
			/**
			 * onTimeupdate
			 * onTimeupdate called from player (HTML5 or Flash) on media playing progress
			 * @param currentTime
			 */
			onTimeupdate : function(currentTime) {
				this.controlPanel.timeline.progress(currentTime);
				this.controlPanel.indicatorProgress.setMediaProgressTime(currentTime);
			},
			
			/**
			 * onPlay 
			 * fired when media begins to play
			 */
			onPlay : function() {
                this._content
                    .addClass('play')
                    .removeClass('pause');
                this.controlPanel.onPlay();
                this.showStateSwitchFeedback();
			},
			
			/**
			 * onPause 
			 * onPause fired when media player is paused
			 */
			onPause : function() {
                this._content
                    .addClass('pause')
                    .removeClass('play');
                this.controlPanel.onPause();
                this.showStateSwitchFeedback();

			},
			
			/**
			 * onMediaLoadingProgress
			 * onMediaLoadingProgress fired on media resource loading progress
			 */
			onMediaLoadingProgress : function(){
				
			},

			/**
			 * onLoadstart
			 * onLoadstart fired on media loading start
			 */
			onLoadstart : function(){
				
			},
			
			/**
			 * onEnd
			 * onEnd fired when player finishes to play media
			 */
			onEnd : function(){
				this._mediaPlayer.trigger('pause');
			},
			/**
			 * onError
			 * onError fired when player has an error when loading media
             * @param msg
			 */
			onError : function(msg){
				console.error(msg);

				//remove video player onError
				if(this.video.length) {
					this.video.trigger('pause');
					this.video.remove();
				}

                this.dispatchEvent('cantReduce');
                this.dispatchEvent('onRendered');
			},
			/****************************************************************************************************************************
			 * player callback methods END!!!
			 ****************************************************************************************************************************/ 
			onMediaClick : function() {
				// overriden in derived classes
			},

            /**
             * setMyState
             * Return media player view to the specified state
             * @param state - {jQuery} State xml
             */
            setMyState : function(state){
                var currentTime = parseFloat(state.children('currentTime').text());
                this.setCurrentTime(currentTime);
            },

            /**
             * addMyState
             * Add media player state
             */
            addMyState : function(){
                var state = jQuery('<state/>')
                    .append(jQuery('<currentTime/>').text(this.getCurrentTime()));

                return state;
            },

            /**
             * reduce
             * reduce use to make a reduction
             */
            reduce : function() {
                // overridden in derived classes
            },

            /**
             * calcVisualSettings
             * calculate width / height, optimum size, thresholds
             */
            calcVisualSettings : function() {
                var t2kPlayer = Perf.select('.' + constants.classes.player);
                var navigation = Perf.select('.' + constants.classes.navigation);

                this.viewportSize = {
                    width: t2kPlayer.width(),
                    height: t2kPlayer.height()
                };

				var containerElement = this.cfg.container ? this.cfg.container : t2kPlayer ;
				
                this.pageContentSize = this.cfg.container ? {
                	 width: containerElement.width(),
                	 height: containerElement.height()
                 } : {
                    width: containerElement.width(),
                    height: containerElement.height() - navigation.height()
                };

                this.aspectRatio = this.cfg.width / this.cfg.height;
                this.isLandscape = this.aspectRatio > 1;

                // the rest is in derived classes
            },

            /**
             * setSize
             * set the media size according to the specified optimum size
             */
            setSize: function() {
                // overridden in derived classes
            },
			
            /**
             * rebuildControls
             * Rebuild control panel and title
             */
			rebuildControls : function() {
				this.removeControls();
				this.buildControls();
			},
			
            /**
             * removeControls
             * Remove control panel and title
             */
			removeControls : function() {
                this.controlPanel.remove();
                //this.title.remove();
			},
			
            /**
             * buildControls
             * Build control panel and title
             */
			buildControls : function() {
                this.controlPanel.build();
                //this.title.build();
				
				// Trigger timeupdate to set the slider and time indicator
				this._mediaPlayer.trigger('timeupdate');
			},
			
			
            /**
             * togglePlayPause
             * hook the 
             */
			togglePlayPause : function() {
				if (this.isPaused()) { // video is paused - play it
					this.play();
				} else { // video is playing - pause it
					this.pause();
				}
			},

            /**
             * showSwitchStateFeedback
             * Show the switch state feedback (play / pause)
             */
            showStateSwitchFeedback : function() {

                var thi$ = this;
                 $(this._stateSwitchFeedback)
                    .css({
                        display: 'block',
                        opacity: 0.8,
                        width: 68.9,
                        height: 58.5,
                        'margin-left': -34.45,
                        'margin-top': -29.25
                    })
                    .animate({
                        opacity: 0,
                        width: 106,
                        height: 90,
                        'margin-left': -53,
                        'margin-top': -45
                    }, constants.animation.stateFeedbackSpeed, function() {
                        thi$._stateSwitchFeedback.hide();
                    });
            },

        /**
         * setEnabled
         * Enable/Disable this component view
         * @param active - {Boolean} True for active, false otherwise.
         */
        setEnabled : function(active){
            if (active) {
                var autoplay = this.cfg.autoplay;
                var isVideo = this.cfg.mediaFormat.isVideo;
                if(isVideo) {
                    autoplay = autoplay && !this.blowupEnabled;
                }

                if(autoplay) {
                    if (this.isPlayerReady) {
                        this.play();
                    } else {
                        this.playWhenLoaded = true;
                    }
                }
            } else { // !active
                this.pause();
            }
        }

    });
})();
////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerViewVideo.js
////////////////////////////////////////
var timer = {};

(function() {
    /**
     * MediaPlayerViewVideo
     */

// class constants
    var constants = t2k.component.mediaPlayer.MediaPlayerViewConstants;

// mustache template
//<iframe scrolling='no' frameborder=0 id='{{id}}_mediaPlayer' style='width:{{width}}px; height:{{height}}px'/>\
    var mediaTemplate = "\
    <div id='{{id}}' class='mediaPlayer htmlVideo'  onselectstart='return false'>\
		<div id='{{id}}_placeholderContainer' class='placeholderContainer'>\
			<div id='{{id}}_placeholder' class='placeholder'>\
				<div id='{{id}}_content' class='mediaContainer' style='width:{{width}}px; height:{{height}}px'>\
                    <video id='{{id}}_mediaPlayer' style='width:99%; height:99%'/>\
                    <div id='{{id}}_thumbnailBlowupIcon' class='thumbnailBlowupIcon'>\
                    </div>\
				</div>\
			</div>\
		</div>\
	</div>\
";

    var overlayTemplate = "\
	<div id='{{mediaPlayerBlowup}}' class='mediaPlayerBlowup {{hiddenClass}}'  onselectstart='return false'>\
		<div id='{{mediaPlayerBlowup}}_overlay' class='mediaPlayerBlowupOverlay'>\
		</div>\
		<div id='{{mediaPlayerBlowup}}_container' class='mediaPlayerBlowupContainer'>\
			<a id='{{mediaPlayerBlowup}}_close' class='mediaPlayerBlowupClose' title='Close'>\
			    <span class='mobile-touch-area'> > </span>\
			</a>\
			<div id='{{mediaPlayerBlowup}}_wrap' class='mediaPlayerBlowupWrap'>\
			</div>\
		</div>\
        <div id='{{mediaPlayerBlowup}}_fullscreenFeedback' class='fullscreenFeedback'>{{fullscreenFeedback}}\
        </div>\
	</div>\
";

    var playThumbnailMaskTemplate = "\
    <div id='{{id}}_playThumbnailMask' class='playThumbnailMask'>\
        <img class='play' src='assets/images/mediaPlayer/play.svg' />\
    </div>\
";

// save reference to this class for global scope
    t2k.component.mediaPlayer.MediaPlayerViewVideo = t2k.component.mediaPlayer.MediaPlayerView.subClass({

        /** The class' name (for debugging purpose). */
        name : 't2k.component.mediaPlayer.MediaPlayerViewVideo',

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor : function(config) {
            
            // render template with Mustache
            this._super(override(config, { template : mediaTemplate }));
            this.video = this._mediaPlayer || $("<video style='width:98%; height:98%' />");

            // check mp width vs. containter width
            this.checkWidth();

            // this.$iframeBody = this._mediaPlayer.contents().find('body');
            // this.$iframeBody.css('margin', '0px').append(this.video);

	        this.dispatchEvent('onRendered');
        },

        /**
         * initOverlay
         * Init overlay when we need blowup
         */
        initOverlay: function() {
            // Add the overlay only once to the page, even on multiple videos
            var blowupParent = jQuery(constants.blowup.parentSelector),
                blowupId = constants.blowup.selector;
            if (blowupParent.children('#' + blowupId).length === 0) {
                jQuery(constants.blowup.parentSelector)
                    .append(Mustache.to_html(overlayTemplate, {
                    mediaPlayerBlowup: blowupId,
                    hiddenClass: constants.classes.hidden,
                    fullscreenFeedback: _i18n('mediaPlayer.messages.fullscreenExit')
                }));
            }

            // Store overlay sections
            this._blowup             = Perf.select('#' + blowupId);
            this._blowupOverlay      = Perf.select('#' + blowupId + '_overlay');
            this._blowupContainer    = Perf.select('#' + blowupId + '_container');
            this._blowupWrap         = Perf.select('#' + blowupId + '_wrap');
            this._fullscreenFeedback = Perf.select('#' + blowupId + '_fullscreenFeedback');

            // handle blowup close event
            var thi$ = this;
            Perf.select('#' + blowupId + '_close').click(function() {
                thi$.onCloseBlowup();
            });
        },

        /**
         * reduce method - reduce the video by the specified amount of refucton steps
         * @param numReductionSteps
         */
        reduce : function(numReductionSteps) {
            // if numReductionSteps was not properly supplied as a number, it will be 1
            numReductionSteps = (typeof numReductionSteps == 'number') ? numReductionSteps : 1;
            this.reductionStep += numReductionSteps;

            // set the new size
            this.setSize();

            this.dispatchEvent('onRendered');
        },

        /**
         * calcVisualSettings
         * calculate width / height, optimum size, thresholds
         */
        calcVisualSettings: function() {
            // calculate viewport dimensions
            this._super();

            // calculate optimum size
            this.calcOptimumSize();

            // Calculate minimum readable height. When the media player is reduced, this is threshold from which to start using blowup
            this.minimumReadableHeight = this.cfg.mediaFormat.minimumReadableFactor * this.optimumSize.height;

            // This is the height threshold from which we show the video as a thumbnail
            this.absoluteMinimumHeight = (this.aspectRatio > 1) ? (constants.absoluteMinimum.width / this.aspectRatio) : (constants.absoluteMinimum.height * this.aspectRatio);

            // fix minimumReadableHeight if it's smaller than absoluteMinimumHeight
            this.minimumReadableHeight < this.absoluteMinimumHeight ? this.minimumReadableHeight = this.absoluteMinimumHeight : jQuery.noop();

            // Calculate reduction step size
            var reductionHeightRange = this.optimumSize.height - this.absoluteMinimumHeight;
            this.reductionStepSize = reductionHeightRange / constants.numReductionSteps;
        },

        getReductionReport: function() {

            var percent =  this.size.width / this.cfg.width,
                belowRead = false,
                belowAbs = false
                ;

            return { percent: percent, belowRead: belowRead, belowAbs: belowAbs };
        },

        /**
         * calcOptimumSize
         * optimum size is either native dimensions, or 80% of the viewport if bigger (80% of the width or height)
         */
        calcOptimumSize: function () {
            // calculate maximum width and height according to viewport dimensions and take 80% from its value
            var maximum = (this.cfg.useMax || false) ? {
                width: this.pageContentSize.width,
                height: this.pageContentSize.height

            } : {
                width: this.pageContentSize.width * constants.maxSizeFactor,
                height: this.pageContentSize.height * constants.maxSizeFactor
            };

            var cfgSize = {
                width: this.cfg.width,
                height: this.cfg.height
            };

            this.optimumSize = this.fitRectangles(cfgSize, maximum);
        },

        /**
         * fitRectangles
         * Fit rectInner in rectOuter
         * @param rectInner {width, height}
         * @param rectOuter {width, height}
         * @return newInnerSize {width, height}
         */
        fitRectangles: function(rectInner, rectOuter) {
            // calculate scale ratios
            var ratioW = rectOuter.width / rectInner.width;
            var ratioH = rectOuter.height / rectInner.height;

            // We need to smaller ratio between the widths and heights ratios
            var selectedRatio = ratioW < ratioH ? ratioW : ratioH;

            // we don't have to scale if inner rect fits in the outer one
            if (selectedRatio > 1) {
                selectedRatio = 1;
            }


            // calculate our new video dimensions
            var newInnerRect = {
                width: rectInner.width * selectedRatio,
                height: rectInner.height * selectedRatio
            };

            if(constants.absoluteThumbnailSize.width > newInnerRect.width || constants.absoluteThumbnailSize.height > newInnerRect.height ){
                newInnerRect.width = constants.absoluteThumbnailSize.width;
                newInnerRect.height = constants.absoluteThumbnailSize.height;
            }
            return newInnerRect;
        },

        /**
         * setSize
         * set the media size according to the reduction and size
         */
        setSize: function() {
            // calculate the new size
            var newHeight = this.optimumSize.height - this.reductionStep * this.reductionStepSize;

	        if(newHeight < this.minimumReadableHeight) {
		        newHeight = this.minimumReadableHeight;
		        this.dispatchEvent('cantReduce');
	        }

            this.size = {
                width: newHeight * this.aspectRatio,
                height: newHeight
            };

            // Check: if the size is less than the size of its container
            if (this.container && ( this.size.width > this.container.width() ) ) {
                this.size.width = this.container.width();
                this.size.height = this.container.width()/this.aspectRatio;
            }
            // Check: if thumbnail
            if (this.size.width < constants.absoluteThumbnailSize.width) {
                // Prepare the thumbnail
                this.prepareThumbnail();
            }

            // Determine reduction state (regular / big thumbnail / thumbnail)
            this.reductionState = this.determineReductionState();

            // resize media player
            this._view.css(this.size);
            this._content.css(this.size);            

	        var self = this;

        },

        /**
         * prepareThumbnail
         * Prepare thumbnail for big thumbnail and absolute minimum thumbnail
         */
        prepareThumbnail : function() {
            // Set up thumbnail features
            if (this.reductionState === constants.reductionStates.ABSOLUTE_THUMBNAIL) {
                // Fit the optimum size in the absolute thumbnail size
                this.size = this.fitRectangles(this.optimumSize, constants.absoluteThumbnailSize);

                this.preparePlaceholder(constants.absoluteThumbnailSize);

                // position the video in the middle of the thumbnail
                this._placeholder.css({
                    top: Math.round((constants.absoluteThumbnailSize.height - this.size.height) / 2),
                    left: Math.round((constants.absoluteThumbnailSize.width - this.size.width) / 2)
                });
            } else { // (this.reductionState !== constants.reductionStates.ABSOLUTE_THUMBNAIL)
                this.preparePlaceholder(this.size);
            }

            // Create a play overlay over the thumbnail if doesn't exist already
            if (!this._playThumbnailMask) {
                var thi$ = this;
                var playThumbnailMask = jQuery(Mustache.to_html(playThumbnailMaskTemplate, {
                    id: this.cfg.id
                }))
                    .click(function() {
                        thi$.onMediaClick();
                    });

                this._placeholderContainer.append(playThumbnailMask);
                this._playThumbnailMask = jQuery('.playThumbnailMask', this._view);
            }
        },

        /**
         * preparePlaceholder
         * Prepare placeholder size and such
         * @param placeholderContainerSize
         */
        preparePlaceholder : function(placeholderContainerSize) {
            // Set placeholder its size
            this._placeholderContainer
                .css(placeholderContainerSize)
                .addClass(constants.classes.thumbnail);
            this._placeholder.css(this.size);
        },

        /**
         * onMediaClick
         * Either toggle play / pause or activate blowup
         */
        onMediaClick : function() {
            var now = Date.now();
            if (typeof this._mediaClickTime !== "number" || this._mediaClickTime + 250 < now) {
                this._mediaClickTime = now;
            }
            else return;

            if (this.blowupEnabled && !this.showingBlowup) {
                // Use the overlay to show the blowup
                this.showBlowup(constants.blowupStates.OPTIMUM);
            }
        },

        /**
         * onCloseBlowup
         * Either close blowup or return from full screen to opimum size blowup
         */
        onCloseBlowup : function() {
            if (this.returnFullScreenToState === constants.blowupStates.OPTIMUM) {
                this.showBlowup(constants.blowupStates.OPTIMUM);
            } else { // (this.returnFullScreenToState !== constants.blowupStates.OPTIMUM)
                this.exitBlowup();
            }
        },

        /**
         * showBlowup
         * Show or hide blowup according to specified state
         * @param state - blowup state
         */
        showBlowup : function(state) {
            this.currentBlowupState = state;
            switch (state) {
                case constants.blowupStates.FULL_SCREEN:
                    // store last state before full screen
                    this.returnFullScreenToState = this.showingBlowup ? constants.blowupStates.OPTIMUM : constants.blowupStates.EXIT;
                    this.startBlowup();

                    this._blowup.addClass(constants.classes.fullscreen);

                    // Animate fullscreen esc message
                    this._fullscreenFeedback
                        .show()
                        .css({opacity: .7})
                        .animate({
                            'opacity': 0
                        }, constants.animation.fullscreenFeedbackFadeSpeed, 'easeInExpo', function() {
                            jQuery(this).hide();
                        });

                    break;
                case constants.blowupStates.OPTIMUM:
                    this.startBlowup();
                    this._blowup.removeClass(constants.classes.fullscreen);
                    break;
                case constants.blowupStates.EXIT:
                    this._blowup.removeClass(constants.classes.fullscreen);
                    this.exitBlowup();
                    break;
            }
        },

        /**
         * startBlowup
         * Start blowup (optimum size or full screen)
         */
        startBlowup : function() {

            // if we need to create the blowup because it is now closed
            if (!this.showingBlowup) {
                this.showingBlowup = true;
                var thi$ = this;

                // init the blowup / fullscreen overlay
                this.initOverlay();

                // we need to hold this.blowupOnExitKeydown for when the blowup is exited
                if (!this.blowupOnExitKeydown) {
                    this.blowupOnExitKeydown = function(e) {
                        if (e.keyCode == constants.blowup.exitKeycode) { // 'escape' key
                            thi$.onCloseBlowup();
                        }
                    };
                }

                // append the media player to the blowup overlay
                jQuery('#' + constants.blowup.selector + '_wrap').append(this._content);

                // show the blowup
                jQuery('#' + constants.blowup.selector).removeClass(constants.classes.hidden);

	            //recalc new optimum size according to blowup size
	            this.cfg.useMax = true;
	            this.calcOptimumSize();

                // During blowup we show the optimum size
                this._content.css(this.optimumSize);

                // center the video in the overlay
                jQuery('#' + constants.blowup.selector + '_container').css(this.getCenterOffset(this.optimumSize, this.pageContentSize));

                // Hide thumbnail blowup icon if visible
                this._thumbnailBlowupIcon.addClass(constants.classes.hidden);

                jQuery('#' + constants.blowup.selector + '_close').click(function() {
                    thi$.onCloseBlowup();
                });

                // listen to escape keystrokes to close the blowup
                jQuery(document).bind('keydown', this.blowupOnExitKeydown);

                // Blowup auto starts the play
                this.play();

                // hide playThumbnailMask if exists
                if (this._playThumbnailMask) {
                    this._playThumbnailMask.hide();
                }
            }

            if (this.isFullScreenOn()) {
                // resize to viewport size
                this._content.css(this.viewportSize);

                // restyle blowup container
                jQuery('#' + constants.blowup.selector + '_container')
                .css({
                    top: 0,
                    left: 0,
                    padding: 0
                });
                jQuery('#' + constants.blowup.selector + '_close').addClass(constants.classes.fullscreen);


            } else { // !this.isFullScreenOn()
                // resize to optimum size
                this._content.css(this.optimumSize);
                jQuery('#' + constants.blowup.selector + '_close').removeClass(constants.classes.fullscreen);

                // handle mediaPlayer overlay close event
                jQuery('#mediaPlayerBlowup_overlay').click(function() {
                    thi$.onCloseBlowup();
                });
                // restyle blowup container
                jQuery('#' + constants.blowup.selector + '_container')
                    .css(jQuery.extend(this.getCenterOffset(this.optimumSize, this.pageContentSize), {
                    padding: ''
                }));

                // next time close blowup
                this.returnFullScreenToState = constants.blowupStates.EXIT;
            }

            // rebuild media player controls
            this.rebuildControls();
        },

        /**
         * exitBlowup
         * Exit blowup
         */
        exitBlowup : function() {
            this.currentBlowupState = constants.blowupStates.EXIT;
            this.showingBlowup = false;

            // save play state
            var wasPlaying = !this.isPaused();

            // return the media player to the placeholder
            this._placeholder.append(this._content);

            // Play if we were playing before and blowup is not enabled
            if (wasPlaying && !this.blowupEnabled) {
                this.play();
            }

            // Set the thumbnail size
            this._content.css(this.size);

            // Show the thumbnail blowup icon if we're in thumbnail
            this._thumbnailBlowupIcon.removeClass(constants.classes.hidden);

            // remove the overlay
            jQuery('#'+constants.blowup.selector).remove();


            // rebuild / remove controls in the thumbnail
            if (this.blowupEnabled) {
                this.removeControls();
            } else {
                this.rebuildControls();
            }

            // unlisten to escape keystrokes to close the blowup
            jQuery(document).unbind('keydown', this.blowupOnExitKeydown);

            // show playThumbnailMask if exists
            if (this._playThumbnailMask) {
                this._playThumbnailMask.show();
            }
        },

        /**
         * getCenterOffset
         * get center offset of size a in size b
         * @param sizeA
         * @param sizeB
         */
        getCenterOffset : function(sizeA, sizeB) {
            return {
                top:  Math.round((sizeB.height - sizeA.height) / 2),
                left: Math.round((sizeB.width - sizeA.width) / 2)
            }
        },

        /**
         * onLoadedMetadata
         * onLoadedMetadata called from player implementation when
         * loadedMetadata media player event fired
         * @param loadedMetadataParams
         */
        onLoadedMetadata : function(loadedMetadata) {
            
            var thi$ = this, 
                video = this.video.get(0);

            video.play();

            var getMetaData = function(){
                if (video.duration > 1){
                    clearTimeout(timer[thi$.cfg.id]);
                    video.pause();
                    loadedMetadata.duration = video.duration;
                    thi$.controlPanel.setLoadedMetaData(loadedMetadata);
	                thi$.controlPanel.build();
//                    thi$.dispatchEvent('onRendered');
                } else {
                    timer[thi$.cfg.id] = setTimeout(function(){
                        getMetaData();
                    }, 100);
                }
            }

            getMetaData();

            //   old code: this._super(loadedMetadata);

        },

        /**
         * onFullScreen
         * Toggle full screen mode
         */
        onFullScreen : function() {
            // Show blowup or exit blowup
            if (this.isFullScreenOn()) {
                this.onCloseBlowup();
                this.controlPanel._fullscreenButton.attr('title', _i18n('mediaPlayer.tooltips.fullscreen'));
            } else { // !this.isFullScreenOn()
                this.showBlowup(constants.blowupStates.FULL_SCREEN);
                this.controlPanel._fullscreenButton.attr('title', _i18n('mediaPlayer.tooltips.fullscreenExit'));
            }

        },

        /**
         * onEnd
         * Exit full screen if needed
         */
        onEnd : function() {
            this._super();

            if (this.isFullScreenOn()) {
                this.onCloseBlowup();
            }
        },

        /**
         * isFullScreenOn
         * Test if we're in fullscreen mode
         */
        isFullScreenOn : function() {
            return this.currentBlowupState === constants.blowupStates.FULL_SCREEN;
        },

        /**
         * determineReductionState
         * determine reduction state according to height
         */
        determineReductionState: function() {
            var reductionState;
            this.blowupEnabled = false;

            if (this.size.height >= this.minimumReadableHeight && this.size.height > this.absoluteMinimumHeight) {
                reductionState = constants.reductionStates.REGULAR;
                this.blowupEnabled = false;
            }
            else if (this.size.height > this.absoluteMinimumHeight) {
                reductionState = constants.reductionStates.BIG_THUMBNAIL;
            }
            else { //(this.size.height < this.absoluteMinimumHeight) {
                reductionState = constants.reductionStates.ABSOLUTE_THUMBNAIL;
                this.dispatchEvent('cantReduce');
            }

            return reductionState;
        }
    });
})();
////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerViewVideo.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerViewAudio.js
////////////////////////////////////////
(function() {
    /**
     * MediaPlayerViewAudio
     */

// class constants
    var constants = t2k.component.mediaPlayer.MediaPlayerViewConstants;

// mustache template
    var template =
        "<div id='{{id}}' class='mediaPlayer audio'>\
            <div id='{{id}}_content' style='width: {{width}}px; height: {{height}}px;' class='mediaContainer pause'>\
                <audio id='{{id}}_mediaPlayer' src={{src}}/>\
                <div id='{{id}}_stateSwitchFeedback' class='stateSwitchFeedback'>\
                    <img class='feedback play' src='assets/images/mediaPlayer/play.svg' />\
                    <img class='feedback pause' src='assets/images/mediaPlayer/pause.svg' />\
                </div>\
            </div>\
        </div>";

// save reference to this class for global scope
    t2k.component.mediaPlayer.MediaPlayerViewAudio = t2k.component.mediaPlayer.MediaPlayerView.subClass({

        /** The class' name (for debugging purpose). */
        name : 't2k.component.mediaPlayer.MediaPlayerViewAudio',

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor : function(config) {
            // render template with Mustache
            this._super(override(config, { 
            	template : template,
            	dummyMode : config.dummyMode
            	}));
            // check mp width vs. containter width
            this.checkWidth();
        },
        
        /**
         * initMembers
         * init class members
         */
        initMembers: function() {
            this._super();
        },

        /**
         * calcVisualSettings
         * calculate width / height, optimum size, thresholds
         */
        calcVisualSettings: function() {
            // calculate viewport dimensions
            this._super();

            // calculate optimum size
            this.calcOptimumSize();

            // This is the width threshold from which we show audio at a fixed size
            this.absoluteMinimumWidth = constants.absoluteMinimum.width;

            // Calculate reduction step size
            var reductionWidthRange = this.optimumSize.width - this.absoluteMinimumWidth;
            this.reductionStepSize = reductionWidthRange / constants.numReductionSteps;
        },

        getReductionReport: function() {

            var percent = this.size.width / this.cfg.width,
                belowRead = false,
                belowAbs = false
                ;

            return { percent: percent, belowRead: belowRead, belowAbs: belowAbs };
        },

        /**
         * calcOptimumSize
         * optimum size is either native dimensions, or 80% of the viewport if bigger (80% of the width)
         */
        calcOptimumSize: function () {
            // calculate maximum width and height according to viewport dimensions and take 80% from its value
            var maximumWidth = this.pageContentSize.width * constants.maxSizeFactor;

            // Make sure that maximum width is smaller than maximum
            if (maximumWidth > constants.maxAudioWidth) {
                maximumWidth = constants.maxAudioWidth;
            }

            this.optimumSize = {
                width: this.cfg.width < maximumWidth ? this.cfg.width : maximumWidth,
                height: this.cfg.height
            };
        },

        /**
         * reduce method - reduce the video by the specified amount of refucton steps
         * @param numReductionSteps
         */
        reduce : function(numReductionSteps) {
            // if numReductionSteps was not properly supplied as a number, it will be 1
            numReductionSteps = (typeof numReductionSteps == 'number') ? numReductionSteps : 1;
            this.reductionStep += numReductionSteps;

            // set the new size
            if (this.setSize()){
            	this.dispatchEvent('onRendered');
            }
        },

        /**
         * setSize
         * set the media size according to the reduction and size
         */
        setSize: function() {
            // calculate the new size
            var newWidth = this.optimumSize.width - this.reductionStep * this.reductionStepSize;
            
            if (newWidth < this.absoluteMinimumWidth){
            	this.dispatchEvent('cantReduce');
            	this.dispatchEvent('onRendered');
            	return false;
            }
            
            this.size = {
                width: newWidth,
                height: this.cfg.height
            };
             // Check: if the size is less than the size of its container
            if (this.container && ( this.size.width > this.container.width() ) ) {
                this.size.width = this.container.width();
                this.size.height = this.container.width()/this.aspectRatio;
            }       
            // Determine reduction state (regular / big thumbnail / thumbnail)
            this.reductionState = this.determineReductionState();

            // resize media player
            this._view.css(this.size);
            this._content.css(this.size);

            // rebuild controls
            if (this.isPlayerReady) {
                // rebuild controls
                this.rebuildControls();
            }
            
            return true;
        },

        /**
         * determineReductionState
         * determine reduction state according to height
         */
        determineReductionState: function() {
            var reductionState;

            if (this.size.width >= this.absoluteMinimumWidth) {
                reductionState = constants.reductionStates.REGULAR;
            }
            else { //(this.size.height < this.absoluteMinimumHeight) {
                reductionState = constants.reductionStates.ABSOLUTE_THUMBNAIL;
            }

            return reductionState;
        },

        /**
         * buildControls
         * Build control panel and title
         */
        buildControls : function() {
            this.controlPanel.build();
            //this.title.build();

            // Trigger timeupdate to set the slider and time indicator
            this._mediaPlayer.trigger('timeupdate');
        },

        /**
         * onMediaClick
         * Toggle play / pause
         */
        onMediaClick : function() {
            this.togglePlayPause();
        },

        /**
         * onLoadedMetadata
         * onLoadedMetadata called from player implementation when
         * loadedMetadata media player event fired
         * @param loadedMetadataParams
         */
        onLoadedMetadata : function(loadedMetadata) {
            this._super(loadedMetadata);
        }

    });
})();
////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerViewAudio.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mediaPlayer/MediaPlayerViewSoundButton.js
////////////////////////////////////////
(function() {
    /**
     * MediaPlayerViewAudio
     */

// class constants
    var constants = t2k.component.mediaPlayer.MediaPlayerViewConstants;

// mustache template
    var template =
        "<div id='{{id}}' class='mediaPlayer soundButton'>\
            <div id='{{id}}_content' class='soundButton_content'>{{text}}\
                <audio src={{src}} id='{{id}}_soundButtonMedia' {{#loadResource}} src='{{src}}' {{/loadResource}} preload='none'/>\
            </div>\
            <span class='mobile-touch-area'></span>\
        </div>";

// save reference to this class for global scope
    t2k.component.mediaPlayer.MediaPlayerViewSoundButton = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name : 't2k.component.mediaPlayer.MediaPlayerViewSoundButton',

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor : function(config) {
            // load resource only on dummyMode = false
            config.loadResource =  !config.dummyMode;

            // render template with Mustache
            this._super(override(config, {
                template : template
            }));

            // init members
            this.initMembers();

            // Init sound button events
            this.initEvents();

        },

        /**
         * initMembers
         * init class members
         */
        initMembers : function() {
            jQuery.extend(this, {
                playWhenLoaded: false,
                isPlayerReady: false
            });

            this.mobile_touch_area = this._view.children(".mobile-touch-area");
        },

        /**
         * initEvents
         * init sound button events
         */
        initEvents : function() {
            var thi$ = this;

            // div events
            this._view
                //.add(this._view.children(".mobile-touch-area"))
	            .mousedown(function (e) {
		            e.stopPropagation();

		            thi$.togglePlayStop();
		            thi$._view.addClass('mouseDown');
		            return false;
	            })
	            .mouseup(function (e) {
		            e.stopPropagation();

		            thi$._view.removeClass('mouseDown');
		            return false;
	            })

                /**
                 * Fire drag-n-drop events on mouse move.
                 * This is needed when the sound button is inside a draggable sub answer.
                 */
                .mousemove(function(event) {
                    if (thi$._view.hasClass('mouseDown')) {
                        var parent = thi$._view.parent().parent().parent();
	                    var eventParams = [{'pageY': event.pageY, 'pageX': event.pageX, 'screenX': event.screenX, 'screenY': event.screenY}];

                        if (ENV.behaviors.dragAndDropBehaviorTablets) {
                            parent.trigger('touchstart', eventParams).trigger('touchmove', eventParams);
                        }
                        else {
                            parent.trigger('mousedown', eventParams).trigger('mousemove', eventParams);
                        }
                    }
                })

                .mouseover(function(){
                    if(!thi$._view.hasClass('disabled')){
                        thi$._view.addClass('hover');
                    }
                })
                .mouseout(function(){
                    thi$._view.removeClass('hover');
                });

            /**
             * Any mouseup clears mouse down class.
             */
            $('body').mouseup(function(event){
                thi$._view.removeClass('mouseDown');
            });

            // audio events
            if( this._soundButtonMedia ) {
                this._soundButtonMedia
                    .bind('loadeddata', function(e){
                    thi$.isPlayerReady = true;
                    if (thi$.playWhenLoaded) {
                        thi$.play();
                    }
                })
                    .bind('ended', function(){
                        thi$.ended();
                    })
                    .bind('pause', function(){
                        thi$._soundButtonMedia.trigger('ended');
                    });
            } else {
                console.error( 'no ready sound button' ) ;
            }
        },

        /**
         * togglePlayStop
         * Play from beginning if stopped, Stop if playing
         */
        togglePlayStop : function() {
            var stopped = this._soundButtonMedia[0].paused;
            if(stopped) {
                this.play();
            } else { // playing
                EXT_SERVICES.get('stopAudio')();
                this.stop();
            }
        },

        /**
         * Play the sound button audio
         */
        play : function(IsPlayWhenLoaded) {

            var thi$ = this;

//             if(!this.isPlayerReady && this.isEnabled()){
//                 // try {
//                 //     jQuery.ajax({
//                 //         url: thi$._soundButtonMedia[0].src,
//                 //         success: function(result) {
//                 //             thi$.isPlayerReady = true;
//                 //             thi$.play();
//                 //         },
//                 //         error:function(response, q, t){
//                 //             console.error('MPVSB.js -> play -> ERROR-Message: ', response);
//                 //         }
//                 //     });


//                     //todo : remove element on stopping play or pause ?
// //                    var audio = document.createElement("audio");
// //                    audio.src = this._soundButtonMedia[0].src;
// //                    audio.play();
// //                    this.isPlayerReady = true;
// //                    this._view.addClass('playing');

//                 } catch(e){
//                     //console.error('e: ',e.typeName);
//                 };
//             }

            if (this.isEnabled()) {
                mediaManager.setMedia(this._soundButtonMedia[0].id);
                mediaManager.play();
                this._view.addClass('playing');
                EXT_SERVICES.get('playAudio')(thi$.cfg.originalSrc, thi$.stop, thi$);
            }
        },

        /**
         * stop
         * Stop the sound button audio
         * readyState 0 = HAVE_NOTHING - no information whether or not the audio/video is ready
         */
        stop:function () {
            if (this.isPlayerReady) {

                mediaManager.pause();

                if (this._soundButtonMedia[0].readyState > 0) {
                    this._soundButtonMedia[0].currentTime = 0;
                }

                this._view.removeClass('playing');
            }
        },

        /**
         * ended
         * calls on media ended. set currentTime and class
         * readyState 0 = HAVE_NOTHING - no information whether or not the audio/video is ready
         */
        ended : function(){
            if (this._soundButtonMedia[0].readyState > 0) {
                this._soundButtonMedia[0].pause();  // make sure it stopped.
                this._soundButtonMedia[0].currentTime = 0;
            }
            this._view.removeClass('playing');
        },

        /**
         * isStopped
         * Is the sound button stopped or not
         */
        isStopped : function() {
            return this._soundButtonMedia[0].paused;
        },

        /**
         * reduce
         * Sound button has no reduction
         */
        reduce : function() {
            this.dispatchEvent('cantReduce');
            this.dispatchEvent('onRendered');
        },

        setWidth : function(){
            // Do nothing
        },

        /**
         * onPlayerReady
         * called from media player when all media data completely loaded
         */
        onPlayerReady : function(){
            this.isPlayerReady = true;
            // can play now
        },

        /**
         * setMyState
         * Return media player view to the specified state
         * @param state - {jQuery} State xml
         */
        setMyState : function(state){
            // soundButton has no state
        },

        /**
         * addMyState
         * Add media player state
         */
        addMyState : function(){
            // soundButton has no state
        },

        /**
         * setEnabled
         * Enable/Disable this component view
         * @param active - {Boolean} True for active, false otherwise.
         */
        setEnabled : function(active){

            this._super(active);

            if(active && this.cfg.autoplay) {
                if (this.isPlayerReady) {
                    if (this.isStopped()) {
                        this.play();
                    }
                } else {
                    this.playWhenLoaded = true;
                }
            } else { // !active || !this.cfg.autoplay
                this.stop();
            }

            if (!active){
                this._view.addClass('disabled');
            } else {
                this._view.removeClass('disabled');
            }
        },

        bindEvent : function(event, host, callback, one, unbind){
            var element = (host == 'audio') ? this._soundButtonMedia : this._content;

            if (!!unbind){
                element.unbind(event);

                this.mobile_touch_area.unbind(event);

            } else {
                if (!!!one){
                    element.bind(event, callback);
                    this.mobile_touch_area.bind(event, callback);
                } else {
                    element.one(event, callback);
                    this.mobile_touch_area.one(event, callback);
                }
            }


        }

    });
})();
////////////////////////////////////////
// SRC End --> t2k/component/mediaPlayer/MediaPlayerViewSoundButton.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/externalMediaPlayer/ExternalMediaPlayer.js
////////////////////////////////////////
(function() {

	// var constants = {
	// 		mediaFormat : t2k.component.mediaPlayer.MediaPlayerViewConstants.mediaFormat
	// };

    t2k.component.mediaPlayer.ExternalMediaPlayer = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.mediaPlayer.ExternalMediaPlayer',

        ctor: function(config) {
            // Delegate
            this._super(config);

            this.type = $(this.cfg.data).attr('type') || this.cfg.type;
            var viewClass;
            
            // Init the view according the media type (video/audio etc).
            switch (this.type) {

	            case 'audio':
                case 'soundButton':
                    viewClass = t2k.component.mediaPlayer.ExternalMediaPlayerViewSoundButton;
                    break;
//
//                case 'audio':
//                    viewClass = t2k.component.mediaPlayer.ExternalMediaPlayerViewAudio;
//                    break;

                case 'video':
                    viewClass = t2k.component.mediaPlayer.ExternalMediaPlayerViewVideo;
                    break;


            };

            // create the view
            this.view = this.createNewView(viewClass, this.cfg);
        }	

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/externalMediaPlayer/ExternalMediaPlayer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/externalMediaPlayer/ExternalMediaPlayerViewVideo.js
////////////////////////////////////////
(function() {
/**
 * MediaPlayerView
 */

// class constants
var constants = t2k.component.mediaPlayer.MediaPlayerViewConstants;

var template = "<div id='{{id}}' class='externalMediaPlayerVideo'></div>";

// save reference to this class for global scope
t2k.component.mediaPlayer.ExternalMediaPlayerViewVideo = t2k.component.BaseComponentView.subClass({
			
			/** The class' name (for debugging purpose). */
			name : 't2k.component.mediaPlayer.ExternalMediaPlayerViewVideo',

            /**
             * @constructor
             * @see superclass documentation
             */
            ctor : function(config) {

                var thi$ = this,
                    src = $(config.data).attr('src');

                // render template with Mustache
                this._super(override(config, { 
                    template : template,
                }));


                this._view.click(function(){
                    EXT_SERVICES.get('playMovie')(src);
                });
               
            }

    });
})();
////////////////////////////////////////
// SRC End --> t2k/component/externalMediaPlayer/ExternalMediaPlayerViewVideo.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/externalMediaPlayer/ExternalMediaPlayerViewAudio.js
////////////////////////////////////////
(function() {
/**
 * MediaPlayerView
 */

// class constants
var constants = t2k.component.mediaPlayer.MediaPlayerViewConstants;

var template = "<div id='{{id}}' class='externalMediaPlayerAudio'></div>";

// save reference to this class for global scope
t2k.component.mediaPlayer.ExternalMediaPlayerViewAudio = t2k.component.BaseComponentView.subClass({
			
			/** The class' name (for debugging purpose). */
			name : 't2k.component.mediaPlayer.ExternalMediaPlayerViewAudio',

            /**
             * @constructor
             * @see superclass documentation
             */
            ctor : function(config) {

                var thi$ = this,
                    src = $(config.data).attr('src');

                // render template with Mustache
                this._super(override(config, { 
                    template : template,
                }));


                this._view.click(function(){
                    EXT_SERVICES.get('playAudio')(src);
                });
               
            }

    });
})();
////////////////////////////////////////
// SRC End --> t2k/component/externalMediaPlayer/ExternalMediaPlayerViewAudio.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/externalMediaPlayer/ExternalMediaPlayerViewSoundButton.js
////////////////////////////////////////
(function() {
/**
 * MediaPlayerView
 */
// class constants
var constants = t2k.component.mediaPlayer.MediaPlayerViewConstants;

var template = "<div id='{{id}}'><div id='{{id}}_content' class='ExternalMediaPlayerViewSoundButton' /></div>";

// save reference to this class for global scope
t2k.component.mediaPlayer.ExternalMediaPlayerViewSoundButton = t2k.component.BaseComponentView.subClass({
			
			/** The class' name (for debugging purpose). */
			name : 't2k.component.mediaPlayer.ExternalMediaPlayerViewSoundButton',

            /**
             * @constructor
             * @see superclass documentation
             */
            ctor : function(config) {

                var thi$ = this,
                    src = $(config.data).attr('src') || config.src ;

                // render template with Mustache
                this._super(override(config, { 
                    template : template
                }));

                this.mode = 'stop';

                this._content.click(function(){

                    if (thi$.mode == 'stop'){ // PLAY AUDIO
                        thi$.changeMode('play');
                        EXT_SERVICES.get('playAudio')(src, thi$.changeMode, thi$);
                    } else {                  // STOP AUDIO
                        EXT_SERVICES.get('stopAudio')();
                        // DEV
                        thi$.changeMode('stop');
                    }
                });
            },

            changeMode : function(mode){
                this.mode = mode ? mode : 'stop';
                this.setGui();
            },

            setGui : function(){
                if (this.mode == 'stop'){ // STOP
	                this._content.addClass('stop').removeClass('play');
                } else {                  // PLAY
	                this._content.addClass('play').removeClass('stop');
                }
            }

    });
})();
////////////////////////////////////////
// SRC End --> t2k/component/externalMediaPlayer/ExternalMediaPlayerViewSoundButton.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/modal/ModalView.js
////////////////////////////////////////
(function () {
            
    var TEMPLATE =
        "<div id='{{id}}' class='modal'>\
            <div id='{{id}}_modal_wrapper' class='modal_wrapper'>\
                <div id='{{id}}_content' class='modal_content'></div>\
                <div id='{{id}}_modal_close' class='modal_close'>$</div>\
            </div>\
        </div>";
	
    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template:TEMPLATE,
        layout:'inline'
    }; // End of defaultConfig.

    t2k.component.modal.ModalView = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.modal.ModalView',

        /**
         * 2d0 - complete doc
         */
        ctor:function (config) {
            // Delegate.
        	var thi$ = this;
        	
            this._super(override(config, defaultConfig));
            
            this._view
                .css({
                    //Vertical Centering With CSS : Line-Height Method 
                    'line-height':(this.cfg.parent.height())+'px'
                })
                .click(function(e){
		            e.stopPropagation();
                    // close modal on click outside the content area only when the modal is not full screen mode
		            if (jQuery(e.target).hasClass('modal_close') ||
			            ((jQuery(e.target).parents().is(thi$._content) == false) &&
				          !thi$._view.hasClass('fullScreen') &&
				          !jQuery(e.target).hasClass('fullScreenButton'))) {
			            thi$.dispatchEvent('onClose');
		            }
		            return false;
                });

            // don't care
            this.dispatchEvent('onRendered');
        },

        show : function(isFullScreenOnly){
            var thi$ = this;
            //on fullScreen mode add class to the modal and set the close button the the top rigth corner
            if (isFullScreenOnly) {
                this._view.addClass('fullScreen');
            }
            
            this._content
                .css({'height':this._modal_wrapper.outerHeight()+10})
                .fadeTo('slow',1);
            this._modal_close.fadeTo('slow',1);
        	
        },

        close:function () {
            this._modal_close.removeAttr('style');
            this._content
                .removeAttr('style')
                .html('');
            this._view.hide();
        }
        
    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/modal/ModalView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/modal/Modal.js
////////////////////////////////////////
(function() {

	t2k.component.modal.Modal = t2k.component.BaseComponent.subClass({

		/** The class' name (for debugging purpose). */
		name : 't2k.component.modal.Modal',

		ctor : function() {
			var thi$ = this;
			
			this._super(copy ({}, {onRendered : function(){}}));

			this.view = this.createNewView(t2k.component.modal.ModalView, {
				
				events : {
					onClose : function() {
						thi$.onClose();
					}
				},
				parent : ENV.playerContent.parent()
			});
		},
		
		show : function(config){
			
			this.view._view.css({'display':'inline-block'});
			this.config = config ;

			var thi$ = this;

			if (config.clonedContent) {
				// blowup is a cloned html
				this.view._content.append(config.clonedContent);
				this.view.show(false);

			} else {
				// blowup is a component
				this.modalContent = componentFactory.create(copy({}, {
					data 				: config.data,
					parent 				: this.view._content,
					isBlowup 			: true,
					dontEnableBlowup 	: true,
					container 			: this.view._view,
					onRendered 			: function(isFullScreenOnly){					
						config.state && thi$.modalContent.setState( config.state ) ;						
						thi$.modalContent && thi$.modalContent.setEnabled(true);
						thi$.view.show(isFullScreenOnly);
					}
				}));
			}
			
		},
		
		onClose: function() {
			
			var thi$ = this ;
			
			if( this.config.onClose ) {
				StateUtil.collectState( this.modalContent, function( state ) {
					thi$.close( state );
				} ) ;
			} else {
				this.close() ;
			}
			
		},

		close : function( state ) {
			
			this.view.close();			
			this.config.onClose && this.config.onClose( state ) ;
			
			this.modalContent = null ;
			this.config = null ;
		}

	});

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Private Functions.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();

////////////////////////////////////////
// SRC End --> t2k/component/modal/Modal.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/BubbleView.js
////////////////////////////////////////
(function () {

    var TEMPLATE = "<div class='bubble' id='{{id}}'>\
                	<div id='{{id}}_bubble_arrow' class='bubble_arrow'></div>\
                	<div id='{{id}}_content' class='bubble_content'></div>\
                </div>";


    var defaultConfig = {
        layout:'inline-block',
        /** The mustache template to render. */
        template:TEMPLATE
    }; // End of defaultConfig.

    t2k.component.dialog.BubbleView = t2k.component.CompositeView.subClass({
        /** The class' name (for debugging purpose). */
        name:'t2k.component.dialog.BubbleView',
        /**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        }
    
    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/BubbleView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/Bubble.js
////////////////////////////////////////
(function() {

    t2k.component.dialog.Bubble = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.dialog.Bubble',

        ctor: function(config) {
            // Delegate
            this._super(config);

            this.view = this.createNewView(t2k.component.dialog.BubbleView, config);

            this.startComposite2({parent: this.view.cfg.id + '_content'});
        }


        

		

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/Bubble.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/AvatarView.js
////////////////////////////////////////
(function () {

    var TEMPLATE = "<div class='avatar' id='{{id}}'>\
                    	<div id='{{id}}_content' class='avatar_content' />\
                    </div>";


    var defaultConfig = {
        layout:'inline',
        /** The mustache template to render. */
        template:TEMPLATE
    }; // End of defaultConfig.

    t2k.component.dialog.AvatarView = t2k.component.CompositeView.subClass({
        /** The class' name (for debugging purpose). */
        name:'t2k.component.dialog.AvatarView',
        /**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

        }



    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/AvatarView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/Avatar.js
////////////////////////////////////////
(function() {

    t2k.component.dialog.Avatar = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.dialog.Avatar',

        ctor: function(config) {
            // Delegate
            this._super(config);

            this.view = this.createNewView(t2k.component.dialog.AvatarView, config);

            this.startComposite2( { parent: this.view._content } ) ;
        },

        reduce : function(){
            this.layout.canReduce = false;
            this.layout.onRendered();
        }

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/Avatar.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/PostsView.js
////////////////////////////////////////
(function () {

    var TEMPLATE = "<div class='posts' id='{{id}}'>\
                    	<div id='{{id}}_content' class='posts_content' />\
                    </div>";


    var defaultConfig = {
        layout:'inline',
        /** The mustache template to render. */
        template:TEMPLATE
    }; // End of defaultConfig.

    t2k.component.dialog.PostsView = t2k.component.CompositeView.subClass({
        /** The class' name (for debugging purpose). */
        name:'t2k.component.dialog.PostsView',
        /**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

        }
    
    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/PostsView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/Posts.js
////////////////////////////////////////
(function() {

    t2k.component.dialog.Posts = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.dialog.Posts',

        ctor: function(config) {
            
        	preProcessData( config.data ) ;

            // Delegate
            this._super(config);

            this.view = this.createNewView(t2k.component.dialog.PostsView, config);

            this.startComposite2( { parent: this.view._content } ) ;
            
        }

    });
    
    function preProcessData( data ) {
    	
    	var names = [] ;
    	var namesCounter = 0 ;
    	
    	var $data = jQuery( data ) ;
		var $post ;
		var postName ;
		
		var opposite ;
		var nameIndex ;
		var isNewName ;
    	
		$data.children().each( function( index, post ) {
    		
    		$post = jQuery( post ) ;
    		postName = $post.attr( 'name' ) ;
    		
    		nameIndex = names.indexOf( postName ) ;
    		isNewName = nameIndex == -1 ;
    		
    		if( isNewName ) {
    			names.push( postName ) ;
    			nameIndex = namesCounter ;
    			namesCounter++ ;
    		}
    		
    		opposite = nameIndex % 2 != 0 ;
    		
    		$post.attr( 'opposite', opposite ) ;
    		
    		$post.attr( 'skin', 'skin_' + ( nameIndex + 1 ) ) ;
    		
    	} ) ;
		
    }

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/Posts.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/ExpositionView.js
////////////////////////////////////////
(function () {

    var TEMPLATE = "<div class='exposition' id='{{id}}'>\
            	<div id='{{id}}_content' class='exposition_content' />\
            </div>";

    var defaultConfig = {
        layout:'inline',
        /** The mustache template to render. */
        template:TEMPLATE
    }; // End of defaultConfig.

    t2k.component.dialog.ExpositionView = t2k.component.CompositeView.subClass({
        /** The class' name (for debugging purpose). */
        name:'t2k.component.dialog.ExpositionView',
        /**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

        }
    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/ExpositionView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/Exposition.js
////////////////////////////////////////
(function() {

    t2k.component.dialog.Exposition = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.dialog.Exposition',

        ctor: function(config) {
        	
            // Delegate
            this._super(config);
            
            // reference
            var thi$ = this;
            
            this.view = this.createNewView(t2k.component.dialog.ExpositionView, config);

            this.startComposite2({parent: this.view.cfg.id + '_content'});
        }

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/Exposition.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/PostView.js
////////////////////////////////////////
(function() {

    var TEMPLATE = "<div id='{{id}}' class='post {{type}} {{skin}}'>\
                    	<div id='{{id}}_content' class='post_content' />\
                    </div>";

    var defaultConfig = {
        layout : 'inline-block',
        /** The mustache template to render. */
        template : TEMPLATE
    }; // End of defaultConfig.

    t2k.component.dialog.PostView = t2k.component.CompositeView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor : function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

            this._view.addClass( this.cfg.isOpposite ? 'read_opposite' : 'read_normal' ) ;
            
        },
        
	    /**
		 * reduce
		 */
		reduce : function(){
		}

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/PostView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/Post.js
////////////////////////////////////////
(function() {

    t2k.component.dialog.Post = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.dialog.Post',

        ctor: function(config) {
            // Delegate
            this._super(config);

            // parse configuration
            this.parseConfig() ;
            
            this.view = this.createNewView( t2k.component.dialog.PostView, copy( {
            	isOpposite: this.isOpposite,
            	type: this.type,
            	name: this.name,
            	skin: this.skin
	            },
	            this.cfg )
            ) ;

            this.startComposite2( { 
            	parent: this.view._content,
            	isOpposite: this.isOpposite,
            	type: this.type,
            	name: this.name
            });
            
        },
		
		/**
		 * setEnabled
		 * @param flag
		 */
		setEnabled : function(flag){
			this._super(flag);
			this.view.setEnabled(flag);
		},
		
		parseConfig: function() {
			
			var $data = jQuery( this.cfg.data ) ;

            this.name = $data.attr( 'name' ) ;
            this.type = $data.attr( 'type' ) ;
            this.isOpposite = $data.attr( 'opposite' ) == 'true' ;
            this.skin = $data.attr( 'skin' ) ;
			
		}

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/Post.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/DialogView.js
////////////////////////////////////////
(function() {

    var TEMPLATE = "<div class='dialog' id='{{id}}'>\
        	<div id='{{id}}_content' class='dialog_content'/>\
        </div>";

    var defaultConfig = {
        layout : 'inline',
        /** The mustache template to render. */
        template : TEMPLATE
    }; // End of defaultConfig.

    t2k.component.dialog.DialogView = t2k.component.CompositeView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor : function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
            
            if (config.useMax) {
            	var mw = this.cfg.maxSize ? this.cfg.maxSize.width : this.cfg.container.width() ;
            	var mh = this.cfg.maxSize ? this.cfg.maxSize.height : this.cfg.container.height() ;
                this._view.css('max-width', mw.toString() + 'px');
                this._view.css('max-height', mh.toString() + 'px');
            }
        },
    
	    /**
		 * reduce
		 */
		reduce : function(){
			this._super() ;
		},

        getReductionReport: function() {

            var percent = 1,
                belowRead = false,
                belowAbs = false
                ;
            
            var _elm = (this._view)[0];

            var overV = ( _elm.clientWidth < _elm.scrollWidth ) ;
            var overH = ( _elm.clientHeight < _elm.scrollHeight ) ;
            
            return { 
            	percent: percent,
            	belowRead: belowRead,
            	belowAbs: belowAbs,
            	overflowV: overV,
            	overflowH: overH,
            	overflow: overH || overV
            };
        }

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/DialogView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/dialog/Dialog.js
////////////////////////////////////////
(function () {

    t2k.component.dialog.Dialog = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.dialog.Dialog',

        ctor:function (config) {
        	
            // Delegate
            this._super(config);
            
            // parse configuration
            this.parseConfig();

            this.view = this.createNewView(t2k.component.dialog.DialogView, copy({}, this.cfg));

            this.startComposite2( { parent:this.view._content } ) ;

        },
        
        /**
         * reduce
         */
        reduce : function(){
        	this._super() ;
//	         this.layout.canReduce = false ;
//	         this.layout.onRendered();
         },
         loose : function(){
        	 this.layout.onRendered();
         },
         compact : function(){
        	 this.layout.onRendered();
         },

        /**
         * setEnabled
         * @param flag
         */
        setEnabled:function (flag) {
            this._super(flag);
            this.view.setEnabled(flag);
        },

        parseConfig:function () {
        }

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/dialog/Dialog.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/text/QuestionView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div class='question' id='{{id}}'>\
            <div id={{id}}_content></div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.text.QuestionView = t2k.component.CompositeView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        }

    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/text/QuestionView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/text/Question.js
////////////////////////////////////////
(function() {

    t2k.component.text.Question = t2k.component.Composite.subClass({
    	
    	/** The class' name (for debugging purpose). */
        name: 't2k.component.text.Question',

        ctor: function(config) {
            // Delegate
            this._super(config);

            this.view = this.createNewView(t2k.component.text.QuestionView, this.cfg);

            this.startComposite2({parent: this.view.cfg.id + '_content'});
        },

        /**
         * setState
         * Set the question and its children to the specified state xml
         * @param state - {jQuery} State xml
         */
        setState:function (state) {
            this._super(state);
        },

        /**
         * getState
         * Get the question state xml
         * @return state - {jQuery} State xml
         */
        getState:function () {
            return this._super();
        }
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();

////////////////////////////////////////
// SRC End --> t2k/component/text/Question.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/text/TitleView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div class='title' id='{{id}}'>\
            <div id={{id}}_content></div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.text.TitleView = t2k.core.View.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        }

    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/text/TitleView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/text/Title.js
////////////////////////////////////////
(function() {

    t2k.component.text.Title = t2k.component.Composite.subClass({
    	
    	/** The class' name (for debugging purpose). */
        name: 't2k.component.text.Title',

        ctor: function(config) {
            // Delegate
            this._super(config);

            this.view = new t2k.component.text.TitleView(this.cfg);
            
            this.startComposite2({parent: this.view.cfg.id + '_content'});
        }
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();

////////////////////////////////////////
// SRC End --> t2k/component/text/Title.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/textViewer/TextViewerConfig.js
////////////////////////////////////////


// toolbar config constant values
t2k.component.textViewer.TextViewerConstants = { 

		soundImgSrc					: 'assets/images/textviewer/SoundBtn_Default.png',
		soundImgSrc_mouseOver		: 'assets/images/textviewer/SoundBtn_Rollover.png',
		soundImgSrc_mousePress		: 'assets/images/textviewer/SoundBtn_Press.png',
		soundImgSrc_selected		: 'assets/images/textviewer/SoundBtn_Selected.png',
		soundImgSrc_selectedOver	: 'assets/images/textviewer/SoundBtn_SelectedRollover.png',
		
		narrationImgSrc				: 'assets/images/textviewer/NarrationBtn_Default.png',
		narrationImgSrc_mouseOver	: 'assets/images/textviewer/NarrationBtn_Rollover.png',
		narrationImgSrc_mouseDown	: 'assets/images/textviewer/NarrationBtn_Press.png',
		narrationImgSrc_stop		: 'assets/images/textviewer/NarrationBtn_Selected.png',
		narrationImgSrc_stopOver	: 'assets/images/textviewer/NarrationBtn_SelectedRollover.png',
		narrationAnimateBG			: 'assets/images/textviewer/NarrationAnimateBG.png',
		
		narrationImgHeight			: '26px',
		narrationImgWidth			: '40px',

		narrationBG_color			: '#FEF3BA',
		
		// ltr
		narrationImgPaddingLeft		: '0em', // must be em
		
		// rtl
		narrationImgPaddingRight	: '0.5em', // must be em

        mathFieldLineHeightEvenFactor: 0.9,
		lineHeightEvenFactor		: 1.27,
		lineHeightCompactFactor		: 1.27,
		lineHeightPxFactor			: 7,
		
		fontSizeToImgSizeFactor		: 1.18,
		
		textViewerMaxWidth			: 714, // must be 51rem. example: for PC this is 51 * 14(html/body font-size) = 714px
		
		sideBarWidth				: '2.5em',
		baloonTipTopFactor			: 10,
		baloonTipSafeZoneFactor		: 30,
		baloonTipArrowWidth			: 10,
		baloonTipArrowHeight		: 14,
		sequenceClass				: 'themable_player_sequenceHolder',
		minimumReadableFontSize		: ENV.behaviors.textViewerMinReadable,
		absoluteMinimumFontSize		: ENV.behaviors.textViewerMinReadable,
		absMinStrLen				: 10,
		fontSizeReductionFactor		: 2,
		reductionStepSize			: 1,
		
		minWidthForAspectRatioResize : {
			"en_US"	: 200,
			"he_IL"	: 100,
			"fr_FR"	: 200,
			"nl_NL"	: 200
		},
		
		inlineSoundAspectRatio : 1.489, // aspectRatio = width / height
		
		inlineNarrationSize : {width:'1em', height:'1em'},
		
		// balloonTip
		balloonTipArrowHeight: 10,
		balloonTipFactor  : 4,
		balloonButtonAnimateDuration : 250,
		
		balloonArrowSize : {
			width: 6, height: 10
		}

};

/**
 * the object that will be received by TextAreaViewer's @constructor
 */
t2k.component.textViewer.TextViewerParams = function(){
	this.id 				= "",
	this.width 				= "", // size + 'px'
	this.height 			= "", // size + 'px'
	this.initMarkup			= "", // markup
	this.style 				= "", // 
	this.parent 			= "", // parent Id
	this.parentIsObject		= "", // if parent is an object and not an id
	this.direction 			= "", // 'ltr' (default)/ 'rtl'
	this.mode 				= "", //
	this.useSideBar			= "",
	this.enableTextSelection = "",
	this.language			= "",
	this.baloonStyle		= "",
	this.lineHeightConfig	= "",   // 'compact' or 'keepEven'
	this.setMaxWidth		= "",	// size + 'px' or size only	
	this.fixNarrationPosition	= "",	// 'bottom' / non
	this.applyAbsoluteMinimum = "";
};

////////////////////////////////////////
// SRC End --> t2k/component/textViewer/TextViewerConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/textViewer/TextViewerView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.textViewer.TextViewerView
     * @desc A textViewer View component class
     * @namespace t2k.component.textViewer
     * @extends t2k.component.BaseComponentView
     * @type {Object}
     */
    /**
     * Private: TEMPLATE
     * The textViewer's Mustache template.
     */
    var TEMPLATE =
        "<div class='textViewer {{style}} {{direction}}' id='{{id}}' \
              style='width:{{width}};height:{{height}}; direction:{{direction}}; text-align:{{textAlign}}'>\
            <div id='{{id}}_content' class='textViewer_content'>{{{initMarkup}}}</div>\
        </div>";

    /**
     * Private: multiNarrationTemplate
     * The textViewer's multi narration Mustache template.
     */
    var multiNarrationTemplate =
        "<div class='multiNarration'>\
            <div id='control'></div>\
            <div id='first'  class='narrationMediaPlayerButton'></div>\
            <div id='second' class='narrationMediaPlayerButton'></div>\
        </div>";

    /**
     * Private: balloonArrowTemplate
     * The textViewer's balloon Mustache template.
     */
    var balloonArrowTemplate =
        "<div class='balloonArrowWrapper {{position}}'>\
            <div class='arrow' />\
            <div class='arrowBG' />\
            <div class='arrowShadow' />\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the task's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.   

    /**
     * Private: constants
     * short hand to textViewer constants
     */
    var constants = t2k.component.textViewer.TextViewerConstants;

    t2k.component.textViewer.TextViewerView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor TextAreaViewer
         * @param config
         */
        ctor: function(config) {
              //if in config we got viewObject - use it don't create new text (d&d dropping event)
            if (config.viewObject) {
                this.cfg = config;
                this._view = this.cfg.viewObject;
	            this._content = this.cfg.viewObject.children('.textViewer_content').first();
				this.children = [];

	            this.getMembers();
	            this.initMembers();

                jQuery(this.cfg.parent).append(this.cfg.viewObject);
	            this.startInlineSound();
	            this.startInlineNarration();
                this._view.show();
            } else {

                // prepare markup for Mustache
                this.cfg = config;
                config.initMarkup = this.prepareMarkup(config.initMarkup);

                // Delegate
                this._super(override(config, defaultConfig));

                /**
                 * @property ''
                 * @type {Boolean}
                 */
                this.overflow = false;

                // get and init text viewer members
                this.getMembers();
                this.initMembers();

                // init text viewer children (inlineSound, inlineImage, narration etc..)
                this.startManualComposite();
                this.setMaxWidthfromParent();

                this.checkMaxWidth();

                this.dispatchEvent('onTextViewerChildrenRendered', this);
            }
        },

        /**
         * onViewRendered
         * override with an empty function.
         * textViewerView will dispatch the 'onRendered' event himself.
         */
        onViewRendered : function() {
            if( this.cfg.autoplay ) {
             // this.narrate( function(){} ) ;
            }
        }, // end of onViewRendered

        /**
         *
         * @return {Boolean}
         */
        isOverflowing:function() {
            // var _elm = (this._view)[0];
            var _hasScrollBar = false;
            //            if ((_elm.clientHeight < _elm.scrollHeight) || (_elm.clientWidth < _elm.scrollWidth)) {
            //            fixed bug : calculation scrollHeight in IE9

            // 19/06/2013 12:41:32 :=) 
            // below written code should only work if the TV is in the SheardArea
            // TODO: check behave in shared (i dont have enough info)
            /*if ((jQuery(_elm).height() < jQuery(_elm).outerHeight()) || (_elm.clientWidth < _elm.scrollWidth)) {
                _hasScrollBar = true;
            }*/

            
            return _hasScrollBar;
        },

        /**
         * getMembers
         * configuration to members
         */
        getMembers : function() {
            this.width = this.cfg.width;

            this.height = this.cfg.height;

            this.initMarkup = this.cfg.initMarkup;

            this.style = this.cfg.style;

            this.parent = this.cfg.parent;

            this.direction = this.cfg.direction;

            this.mode = this.cfg.mode;

            this.useSideBar = this.cfg.useSideBar;

            this.enableTextSelection = this.cfg.enableTextSelection;

            this.language = this.cfg.language;

            this.parentIsObject = this.cfg.parentIsObject;

            this.balloonStyle = this.cfg.balloonStyle;

            this.lineHeightConfig = this.cfg.lineHeightConfig;

            this.setMaxWidth = this.cfg.setMaxWidth ? this.cfg.setMaxWidth : null;

            this.fixNarrationPosition = this.cfg.fixNarrationPosition;

            this.applyAbsoluteMinimum = this.cfg.applyAbsoluteMinimum;

            this.maxLineHeight = 0;

            this.narrationIndicator = [];

            this.isMinimunReadable = false;

            this.isAbsoluteMinimun = false;

            this.additionLineHeight = this.cfg.additionLineHeight;

            this.reductionStep = parseInt(!!this.cfg.reductionStep ? this.cfg.reductionStep : 0);

            if (!this.cfg.dummyMode && !!this.cfg.compiledLayoutRes.reduction){
                this.reductionStep = parseInt(this.cfg.compiledLayoutRes.reduction);
            }
            /**
             * @property reductionStepSize
             * @type {Number}
             */
            this.reductionStepSize = constants.reductionStepSize;

            this.textViewerChildren = [];
        },

        /**
         * initMembers
         * init text viewer members
         */
        initMembers : function() {

            this.minimumReadableFontSize = this.cfg.minimumReadableFontSize ? this.cfg.minimumReadableFontSize : constants.minimumReadableFontSize.px2int();
            // get current font size by a factor of initialization ...
            var tmpFontSize = this._view.css('font-size');
            if(tmpFontSize){
                this.fontSize = tmpFontSize.px2int() * ENV.behaviors.textViewerFontSizeInitializeFactor;
                this._view.css('font-size',  this.fontSize);

                this.maxLineHeight = this.fontSize + constants.lineHeightPxFactor + this.additionLineHeight;
                this.optimumFontSize = this.cfg.optimumFontSize || this.fontSize;
            }else{
                this.fontSize = this.cfg.optimumFontSize || 22;
                this._view.css('font-size',  this.fontSize);

                this.maxLineHeight = this.fontSize + constants.lineHeightPxFactor + this.additionLineHeight;
                this.optimumFontSize = this.cfg.optimumFontSize || this.fontSize;
            }


            // get reduction step and set font-size
            if (this.reductionStep > 0) { //if reductionStep > 0, calculate font-size according to it
                var reducedFontSize = this.calcFontSizeByReduction();
                this._view.css('font-size', reducedFontSize + 'px');
            }

            // get jQuery parent dom element
            this.$parent = this._view.parent();

            // set media player class
            if (!!ENV.behaviors.useExternalMediaPlayer){
               
                this.mediaPlayerClass = t2k.component.mediaPlayer.ExternalMediaPlayer;
            } else {
               
                this.mediaPlayerClass = t2k.component.mediaPlayer.MediaPlayer;
            }
        },

        /**
         * setLineHeight
         * keepEven or compact
         */
        setLineHeight : function() {

            var thi$ = this, compHeight, compTop, compFactorHeight, margin;

            if (this.lineHeightConfig == 'keepEven') {

                jQuery(this.textViewerChildren).each(function(index, child) {
                    if (child.name.indexOf('mathField') > -1){
                        compHeight = child.view._frame.height() * constants.lineHeightEvenFactor;
                    } else {
                        compHeight = child.view._view.height() * constants.lineHeightEvenFactor;
                    }

                    thi$.setMaxLineHeight(compHeight);
                });
                this._view.css('line-height', this.maxLineHeight + 'px');
            } else {

	            var childType;
                jQuery(this.textViewerChildren).each(function(index, child) {
	                childType = child.view._view.parent().attr('rel');

                    if (childType == 'mathField'){
                        compHeight = child.view._frame.height();
                        compTop = child.view._frame.css('top').px2int();
                        compFactorHeight = compHeight * constants.lineHeightCompactFactor;
                        margin = Math.ceil(compFactorHeight - compHeight - compTop);
                        child.view._view.parent().css({'margin-top' : margin + 'px'});
                    }
                });
            }
        },

        setMaxWidthfromParent: function(){
            if(this.setMaxWidth == null){
                this.setMaxWidth= this.parent.outerWidth();
            }
        },

        /**
         * checkMaxWidth
         */
        checkMaxWidth : function() {

            var mw = constants.textViewerMaxWidth,
                mh;

            if (this.cfg.useMax) {
                mw = this.cfg.maxSize ? this.cfg.maxSize.width : this.cfg.container.outerWidth();

                /*
                    mh = (this.cfg.maxSize ? this.cfg.maxSize.height : this.cfg.container.height())+'px';
                    this._view.css({'max-height': mh,'max-width': mw + 'px'});
                */

            } else {
                if (this.setMaxWidth > constants.minWidthForAspectRatioResize[ENV.locale]) {
                    mw = this.setMaxWidth;
                }else{
                    mw = constants.minWidthForAspectRatioResize[ENV.locale] || this.cfg.container.outerWidth()
                }
            }
            // Maximum size should not exceed the required GUI options ( 51rem for PC this is 714px )
            // todo: add case for tablet
            var newWidth = (mw > constants.textViewerMaxWidth) ? constants.textViewerMaxWidth : mw;

            this._view.css({'max-width': Math.ceil(newWidth) + 'px'});

            // TODO: liron: check behave in shared (i dont have enough info)
            if(this.isOverflowing()){
                this._view.addClass('overflow');
                this.overflow = true;
            }
        },

        /**
         * every child changes the line height param
         * @param val
         */
        setMaxLineHeight : function(val) {
            if (val > this.maxLineHeight) {
                this.maxLineHeight = val;
            }
        },

        /**
         * textViewerChildrenRendered
         * on textViewer children rendered
         */
        textViewerChildrenRendered : function() {
            this.setLineHeight();
            this.checkMaxWidth();
            this.dispatchEvent('onRendered');
        },

        /**
         * on a new child, view dispatch event to presenter, that adds the child to itself
         * and calls this function, to let view add the child also
         * @param child
         */
        addChild : function(child) {
            this.textViewerChildren.push(child);
        },

        /**
         * markup string manipulation for text viewer children
         * @param markup
         * @returns prepared markup
         */
        prepareMarkup : function(markup) {
            // init numOfChildren
            this.numOfChildren = 0;
            //markup = markup.trim();
            markup = this.clearConfigLineBreak(markup);

            // <p> tag
            markup = this.prepareMarkup_pTag(markup);

            // textViewerNarration
            markup = this.prepareMarkup_textViewerNarration(markup);

            // prepare inline sound, inlineNarration, inlineImage
            markup = this.prepareMarkup_replace(markup, 'inlinesound', true);
            markup = this.prepareMarkup_replace(markup, 'inlinenarration', true);
            markup = this.prepareMarkup_replace(markup, 'inlineimage', true);
	        markup = this.prepareMarkup_replace(markup, 'fullsizeimage', true);

            markup = this.prepareMarkup_replace(markup, 'balloontip');
            markup = this.prepareMathFieldMarkup_replace(markup, 'mathfield');

            return markup;
        },

        /**
         * special string manipulation on textViewerNarration
         * @param markup
         * @return prepared markup
         */
        prepareMarkup_textViewerNarration : function(markup) {
            while (markup.toLowerCase().indexOf('<textviewernarration') != -1) {
                markup = markup.replace(/<textviewernarration/i, '<inlinenarration textViewerNarration="true"');
                markup = markup.replace(/<\/textviewernarration>/i, '</inlinenarration>');
            }
            return markup;
        },

        /**
         * generic method to replace the feeding markup to html markup. Mustache preparation
         * @param markup
         * @param tagName (inlineImage, inlineSound, narration etc..)
         * @param countChild {Boolean} on true, count this child
         * @return prepared markup
         */
        prepareMarkup_replace : function(markup, tagName, countChild) {

            var index;

            // find tagName, replace it with a div [tagName + 'Wrapper']
            while (markup.toLowerCase().indexOf('<' + tagName) != -1) {
                // special wrap on inline narration - get index
                if (tagName == 'inlinenarration') {
                    index = markup.indexOf('<' + tagName);
                }

                markup = markup.replace('<{0}'.format(tagName), '<div rel="{0}" class="{0}Wrapper {2}" id="{1}" '.format(tagName, genId(), this.cfg.direction));
                markup = markup.replace('</{0}>'.format(tagName), '</div>');

                // special wrap on inline narration - wrap with a span to prevent narration on single line
                if (tagName == 'inlinenarration') {
                    /* Save our fragment and remove it from markup */
                    var inlineNarrationRe = /<div rel="inlinenarration".+?div>/,
                        savedFrag = markup.substr(index).match(inlineNarrationRe)[0];
                    markup = markup.replace(savedFrag, '');

                    /* When the last item in text viewer is math field, we wrap it */
                    if (markup.substr(0, index).match(/<\/(inlinesound|inlineimage|fullsizeimage|balloontip|mathfield|subanswer)>\s*$/)) {
                        var insBefore = markup.substr(0, index).search(/<(inlinesound|inlineimage|fullsizeimage|balloontip|mathfield|subanswer)/);
                        markup = markup.
                            splice(index, 0, savedFrag + '</span>').
                            splice(insBefore, 0, '<span class="narrationSpecialWrapper">');
                    }
                    else {
                        /* Find insertion points before and after the last word,
                         * skipping tags and whitespace */
                        var insAfter = markup.substr(0, index).search(/(\s*<[^<>\s]*?>)*\s*$/),
                            insBefore = markup.substr(0, insAfter).search(/[^>\s]*$/);
                        markup = markup.
                            splice(insAfter, 0, savedFrag + '</span>').
                            splice(insBefore, 0, '<span class="narrationSpecialWrapper">');
                    }
                }

                // count this child (on children rendered)
                if (countChild) this.numOfChildren++;
            }
            return markup;
        },

        /**
         * prepareMathFieldMarkup_replace
         * @param markup
         * @param tagName
         * @param countChild
         * @return {String}
         */
        prepareMathFieldMarkup_replace:function (markup, tagName, countChild) {

            var thi$ = this, $child, div, arrMathFields, wrapper;

            markup = jQuery('<div/>').append(markup);

            arrMathFields = jQuery('mathfield', markup);

            if(arrMathFields.length){
                thi$.checkMathField = true;
            }

            arrMathFields.each(function (index, child) {
                $child = jQuery(child);

                //don't handle MathField inside of subAnswer, because subAnswer it's composite
                if (!$child.parent('subanswer').length) {
                    div = jQuery('<div/>');

                    div.html($child.html());

                    jQuery(child.attributes).each(function (index, attr) {
                        div.attr(attr.nodeName, attr.nodeValue);
                    });

                    div.attr({'rel':'mathField', 'class':'mathFieldWrapper ' + thi$.cfg.direction, 'id':genId()});

                    div.insertBefore($child);
                    $child.remove();
                }

            });

            wrapper = jQuery('<div/>').append(markup);
            return wrapper.html();
        },

        /**
         * p tag string manipulation that replace the feeding p tag with a div
         * @param markup
         * @return {String} prepared markup
         */
        prepareMarkup_pTag : function(markup) {
            if(!markup) {
                return $("<wrapper />").html();
            }
            // if p tag wasn't found, wrap the content with one
            if (markup.indexOf('<p') == -1) {
                // TODO: revert this change when XML data allow it
                // throw 'textViewer markup should have p tag: "' + markup + '"';
                markup = ['<p>', '</p>'].join(markup);
            }

            /**
             * This is magical feature of the DL, please test whenever you change the below line.
             * TODO use string manipulation instead of Jquery as it messes up the HTML
             */
            //fixed in the TextViewer.js : with textViewerTagName calculeted
            //TODO : check with CGT
            //markup += '</p>';

            var classes, $pTag,
                markupWrapper = jQuery('<wrapper/>'),
                $markup = $(markup),
                newTag;

            markupWrapper.append($markup);
            //to register the markupWrapper in the dom fix for very slow tablets
            if(ENV.behaviors.isTablet){
                var tmp = $(markupWrapper).html();
            }
            
            //this code is breaking on android when the applets has problem 
            //I don't want it to stop the flow so I am putting that inside try catch
            try{
                markupWrapper.find('p').each(function(index, pTag){

                    $pTag = jQuery(pTag);
                    classes = $pTag.get(0).attributes;

                    newTag = jQuery('<div/>' , {id : genId()}).addClass('textViewerParagraph').html($pTag.html());

                    for (var i=0 ; i < classes.length ; i++){
                        if (classes[i].name != 'class'){
                            newTag.attr(classes[i].name, classes[i].value);
                        } else {
                            newTag.addClass(classes[i].value);
                        }
                    }

                    newTag.insertBefore($pTag);
                    $pTag.remove();
                });
            }
            catch(e){
                console.error('prepareMarkup_pTag',e.message,markupWrapper.html());
            }
            return markupWrapper.html();

        },

        /**
         * remove line breaks from feeding
         * @param markup
         * @return {String} cleared markup
         */
        clearConfigLineBreak : function(markup) {
            // remove line breaks and tabs
            markup = markup.replace(/[\r\n\t]+/g, " ");
            return markup;
        },

        /**
         * startManualComposite
         * init text viewer's children (components and balloon tip)
         */
        startManualComposite : function() {
            // dispatch children sum to presenter
            this.dispatchEvent('childSum', this.numOfChildren);

            // narration needs a speacial dom manipulation before initialize
            this.setTextViewerNarrationDomPosition();

            // start components
            this.startInlineSound();
            this.startInlineNarration();
            this.startInlineImage();
	        this.startFullsizeimage();
            this.startBalloonTip();

	        this.mathFields = [];
            this.startMathField();
        },

        /**
         * setTextViewerNarrationDomPosition
         * narrztion speacial dom manipulation before initialize
         */
        setTextViewerNarrationDomPosition : function() {
            // reference
            var thi$ = this;

            this._view.find('div [textviewernarration=true]').each(function() {
                var narrationSpecialWrapper = thi$._view.find('.narrationSpecialWrapper');

                for (var i = 0; i < narrationSpecialWrapper.length; ++i) {
                    if (this.contains(narrationSpecialWrapper[i])) continue;
                    jQuery(narrationSpecialWrapper[0]).append(this);
                }
            });
        },

        /**
         * startInlineSound
         * get attributes and init media player component
         */
        startInlineSound : function() {
            // reference
            var thi$ = this;

            !this._content || this._content.find('div[rel=inlineSound]').each(function(index, child) {

                // get Data
                var $child = jQuery(child);
	            $child.empty();

                var src = $child.attr('src');
                var tooltip = $child.attr('tooltip');

                // get wrapper's params
                var childFontSize = $child.css('font-size').px2int();
                var childHeight = '1em'; // set inline sound at same height as line
                // thi$.fontSizeToImgSize(childFontSize);
                var childWidth = constants.inlineSoundAspectRatio +'em'; // aspectRatio = width / height

                // set wrapper size
                $child.height(childHeight).width(childWidth);

                // init sound button
                var soundObject = new thi$.mediaPlayerClass(copy({}, {
                    parent: $child,
                    type: 'soundButton',
                    src: src,
                    onRendered : function() {
                        thi$.dispatchEvent('childRendered', thi$);
                    },

                    dummyMode: thi$.cfg.dummyMode
                }));
                // enable sound button
                soundObject.setEnabled(true);

                // resize sound button and set tooltip
                soundObject.view._content.height(childHeight).width(childWidth).attr('title', tooltip);

                // add child
                if (soundObject) thi$.dispatchEvent('addChild', {child : soundObject, view : thi$});
            });

        }, // inline sound end

        /**
         * startMathField
         * get attributes
         */
        startMathField : function() {
            // reference
            var thi$ = this, $child, mathFieldTag, mathField, childHTML;

	        function createMF(index, child) {
		        // get Data
		        $child = jQuery(child);

		        mathFieldTag = jQuery('<mathField/>');
		        mathFieldTag.attr('keyboardPreset', $child.attr('keyboardpreset'));
		        mathFieldTag.attr('type', $child.attr('type'));
		        mathFieldTag.attr('editMode', $child.attr('editmode'));
		        mathFieldTag.attr('maxHeight', $child.attr('maxheight'));
		        mathFieldTag.attr('fontLocale', $child.attr('fontlocale'));
		        mathFieldTag.attr('colorShapes', $child.attr('colorShapes'));
		        mathFieldTag.attr('italicVariables', $child.attr('italicVariables'));

		        childHTML = $child.html().trim();
		        $child.html('');

		        // init math field
		        mathField = new t2k.component.mathField.MathField (copy({}, {
			        parent: $child.attr('id'),
			        container : $child,
			        data : mathFieldTag.append(childHTML),
			        taskmode: thi$.cfg.taskmode,
			        onRendered : function() {
				        thi$.dispatchEvent('childRendered', thi$);
			        },
			        dontEnableBlowup : thi$.cfg.dontEnableBlowup
		        }));

		        if (mathField) {
			        mathField.view._view.css({'margin-top':'0px', 'margin-bottom':'0px'});
			        var mfSize = mathField.getSize(),
				        mewMfHeight = mfSize.height + mathField.view._frame.css('top').px2int();

			        mathField.view._view.height(mewMfHeight);
			        $child.css({'display':'inline-block'});

			        thi$.dispatchEvent('addChild', {child:mathField, view:thi$});
			        thi$.mathFields.push(mathField);
		        }
	        }

            !this._content || this._content.find('div[rel=mathField]').each(createMF);

            //add to TV div attribute mathfield=true in order to use it in css later (because there is no 'parent' selector in css now)
            thi$._view.attr('mathfield', true);
        },

        /**
         * startBalloonTip
         * get attributes and balloon tip events
         */
        startBalloonTip : function() {
            // reference
            var thi$ = this;

            !this._content || this._content.find('div[rel=balloontip]').each(function(index, child) {
                // get Data
                var $child = jQuery(child);
                var config = $($child.attr('markup'));
                
                // mouse down event (gui)
                $child.mousedown(function() {
                    $child.addClass('mouseDown');
                });

                // mouse up event (gui)
                $child.mouseup(function() {
                    $child.removeClass('mouseDown');
                });

                // mouse enter event - show balloon tip
                $child.mouseenter(function() {
                    var childId = $child.attr('id');
                    var balloonRelateTo = jQuery('.balloonWrapper').attr('relateToId');

                    if (childId != balloonRelateTo) {
                        thi$.showBalloonTip($child, config);
                    }
                });
            });

        }, // startBalloonTip end

        /**
         * startInlineImage
         * get attributes and init image viewer component
         */
        startInlineImage : function() {
            // reference
            var thi$ = this;

            !this._content || this._content.find('div[rel=inlineimage]').each(function(index, child) {
                // get Data
                var $child = jQuery(child),
                    src = $child.attr('src'),
                    tooltip = $child.attr('tooltip'),

                    // get wrapper's params
                    childFontSize = $child.css('font-size').px2int(),
                    childHeight = thi$.fontSizeToImgSize(childFontSize),
                    originalwidth = $child.attr('originalwidth') != undefined ? $child.attr('originalwidth').px2int() : childHeight,
                    originalHeight = $child.attr('originalheight') != undefined ? $child.attr('originalheight').px2int() : childHeight,
                    childWidth = (originalwidth * childHeight) / originalHeight;

                // set wrapper size and tooltip
                $child.height(childFontSize).attr('title', tooltip);

                // init image viewer
                var imageObject = new t2k.component.imageViewer.ImageViewer(copy({}, {
                    parent: $child,
                    src: src,
                    height: childHeight,
                    width: childWidth,
                    disableTumbnail: true,
                    onRendered : function() {
                        thi$.dispatchEvent('childRendered', thi$);
                    }
                }));

                if (imageObject && !!imageObject.view._view) thi$.dispatchEvent('addChild', {child : imageObject, view : thi$});
            });

        }, // inline image end

	    startFullsizeimage: function() {
		    // reference
		    var thi$ = this;

		    !this._content || this._content.find('div[rel=fullsizeimage]').each(function(index, child) {
			    // get Data
			    var $child = jQuery(child),
				    src = $child.attr('src'),
				    tooltip = $child.attr('tooltip'),
				    childFontSize = $child.css('font-size').px2int(),
				    childHeight = thi$.fontSizeToImgSize(childFontSize),
			    // get wrapper's params
				    originalwidth = $child.attr('originalwidth') != undefined ? $child.attr('originalwidth').px2int() : childHeight,
				    originalHeight = $child.attr('originalheight') != undefined ? $child.attr('originalheight').px2int() : childHeight;

			    // set wrapper size and tooltip
			    $child.height(originalHeight).attr('title', tooltip);

			    // dim clean up - remove latex
			    if($child.parent()[0].tagName.toLowerCase() === 'latex') {
			        $child.unwrap();
			    }

			    // init image viewer
			    var imageObject = new t2k.component.imageViewer.ImageViewer(copy({}, {
				    parent: $child,
				    src: src,
				    height: originalHeight,
				    width: originalwidth,
				    disableTumbnail: true,
				    onRendered : function() {
					    thi$.dispatchEvent('childRendered', thi$);
				    }
			    }));

			    if (imageObject && !!imageObject.view._view) thi$.dispatchEvent('addChild', {child : imageObject, view : thi$});
		    });

	    },

        /**
         * startInlineNarration
         * get attributes and init media player component with paragraph background
         */
        startInlineNarration : function() {
            // reference
            var thi$ = this;

            !this._content || this._content.find('div[rel=inlinenarration]').each(function(index, child) {

                var narrationElement = this;

                // get Data
                var $child = jQuery(child);

	            $child.empty();

                var src = $child.attr('src');
                var tooltip = $child.attr('tooltip');
                var multiLanguage = $child.attr('multiLanguage') == 'true';
                // get textViewerNarration flag {Boolean}
                var textViewerNarration = !!($child.attr('textViewerNarration'));

                // get wrapper's params
                var childFontSize = $child.css('font-size').px2int();
                var childHeight = constants.inlineNarrationSize.height;
                var childWidth = constants.inlineNarrationSize.width;

                // set wrapper size
                $child.height(childHeight).width(childWidth);

                // init sound button
                var soundObject = new thi$.mediaPlayerClass(copy({}, {
                    parent: $child,
                    type: 'soundButton',
                    src: src,
                    onRendered : function() {
                        thi$.dispatchEvent('childRendered', thi$);
                    },

                    dummyMode: thi$.cfg.dummyMode
                }));
                // enable sound button
                soundObject.setEnabled(true);

                // register narration
                thi$.registerNarration(soundObject);

                // resize sound button and set tooltip
                soundObject.view._content.attr('title', tooltip);

                /**
                 * _fixThis function
                 * in case this is a mobile touch area return it's _content sibling
                 * @param _this
                 * @return {*}
                 * @private
                 */
                function _fixThis(_this) {
                    if (_this.className === "mobile-touch-area")
                        return jQuery(_this).siblings(".soundButton_content")[0];
                    return _this;
                }
                
                if( soundObject.bindEvent ) {
                    // add narration's events:
                    // mouse enter - if nar bg exists, show it. else, build it.
                    soundObject.bindEvent('mouseover', 'content', function() {
                        var $thisData = thi$.getEleData(_fixThis(this));
                        if (thi$.narrationBGexists($thisData)) thi$.showNarration($thisData, true);
	                    else {
	                        thi$.drawNarrationBG($thisData, true, textViewerNarration);
                        }
                    });
    
                    // mouse mousedown - toggle nar play
                    soundObject.bindEvent('mousedown', 'content', function() {
                        var $thisData = thi$.getEleData(_fixThis(this));
                        thi$.toggleNarrationIndicator($thisData, 'narPlay');
                        if (!!multiLanguage) thi$.showMultiNarrationBalloon($thisData, narrationElement, true);
                    });
    
                    // mouse leave - if nar doen't play, hide nar bg
                    soundObject.bindEvent('mouseout', 'content', function() {
                        var soundObj = _fixThis(this);
                        setTimeout(function () {
                            var $thisData = thi$.getEleData(soundObj);
                            if (!thi$.narrationIndicator[$thisData.id].narPlay)
                                thi$.showNarration($thisData, false);
                        }, 2);
                    });
    
                    // sound pause - toggle narPlay[false], and hide narration
                    soundObject.bindEvent('pause', 'audio', function() {
                        var $thisData = thi$.getEleData(jQuery(this).parent());
                        thi$.toggleNarrationIndicator($thisData, 'narPlay', true);
                        thi$.showNarration($thisData, false);
                    });
                } else {
                    
                    console.warn( "[DL][TextViewer] - inline SB can't bind events" ) ;
                    
                }
                
                if (soundObject) thi$.dispatchEvent('addChild', {child : soundObject, view : thi$});

                thi$.lastNarration = soundObject;

                // on fix narration position (mostly option composite),
                // append the narration structure to the $parent(option), and place a space holder instead
                if (!!thi$.fixNarrationPosition) {
                    thi$.$parent.css('position', 'relative');
                    jQuery('<div/>').addClass('narrationSpaceHolder').insertBefore(jQuery(this));
                    jQuery(this).addClass('textViewer fixNarrationPosition ' + this.direction).appendTo(thi$.$parent);
                }
            });


        },

        /**
         * removeAllBalloons
         */
        removeAllBalloons : function() {
            // remove all the balloons
            jQuery('.balloonWrapper').remove();
            jQuery('.balloontipWrapper').removeClass('arrow-top arrow-bottom');
        },

        /**
         * showBalloonTip
         * @param dataDomObj
         * @param config
         */
        showBalloonTip : function(dataDomObj, config) {
            // reference
            var thi$ = this;
            var balloonId = genId();

            thi$.removeAllBalloons();

            // build balloonTip elements
            var balloonWrapper = jQuery('<div/>')
                                    .addClass('balloonWrapper')
                                    .attr('id', balloonId)
                                    .attr('relateToId', dataDomObj.attr('id'));

            var parentDomObj = dataDomObj.closest('[class^="sequence_"]');
            dataDomObj.isShared = parentDomObj.hasClass('sequence_shared');

            if (dataDomObj.isShared) {
                dataDomObj.parentObj = parentDomObj.find('.sharedarea_content');
                balloonWrapper.appendTo(dataDomObj.parentObj);
            } else {
                dataDomObj.parentObj = this._view.parents('.task_content');
                balloonWrapper.insertBefore(dataDomObj.parentObj);
            }

            var balloonX = jQuery('<div></div>').addClass('x').appendTo(balloonWrapper);
            var balloonContent = jQuery('<div/>').addClass('balloonContent').appendTo(balloonWrapper);

            // balloon wrapper binds:
            balloonWrapper.click(function(e) {
                e.stopPropagation();
            });

            // balloon x binds:
            balloonX.mousedown(function() {
                balloonX.addClass('mouseDown');
            });

            balloonX.mouseup(function() {
                balloonX.removeClass('mouseDown');
            });

            balloonX.click(function() {
                thi$.activeBalloonId = null;
                // balloonWrapper.fadeOut('fast', function() {
                    thi$.removeAllBalloons();
                // });
            });

            // destroy balloon on document click
            jQuery(document).one('click', outsideCloseIB);
            function outsideCloseIB() {
                if($(event.currentTarget).hasClass('mediaPlayer') && $(event.currentTarget).parents('.balloonWrapper').length) {
                    jQuery(document).one('click', outsideCloseIB);
                }
                else {
                    balloonX.trigger('click');
                }
            }

            // var tmpData = jQuery(jQuery(config).get(0)).removeAttr("height").removeAttr("width");
            // init balloonTip content
            var balloonComponent = componentFactory.create(copy({
                data : config[0],//tmpData[0],
                parent: balloonContent,
	            container: dataDomObj.parentObj,
                enabled: true,
	            isBlowup: true,
	            useMax: true,
                onRendered: function() {
                    // set the balloonTip position
                    thi$.setBalloonTipPosition(dataDomObj, balloonWrapper);
                }
            }));

	        dataDomObj.parentObj = null;
        },

	    setBalloonTipPosition:function (dataDomObj, balloonWrapper) {

		    function callback(css, cfg) {

			    balloonWrapper.css(css);

			    var currTop = (css.top ? css.top : balloonWrapper.css('top')),
				    arrowHeight = (constants.balloonArrowSize.height + constants.balloonTipFactor);

			    if (cfg.vertical === "bottom") {
				    currTop -= arrowHeight;
			    } else {
				    currTop += arrowHeight;
			    }

			    dataDomObj.removeClass('arrow-top arrow-bottom');

			    balloonWrapper.css({
				    'opacity':0
			    }).animate({
					    'opacity':1,
					    'top':currTop
				    }, constants.balloonButtonAnimateDuration, function () {
					    dataDomObj.addClass(cfg.vertical === "top" ? "arrow-bottom" : "arrow-top");

				    });

		    }

		    balloonWrapper.appendTo(dataDomObj.parent());

		    var position_cfg = {
			    my:(ENV.contentDirection == 'ltr' ? 'left-' : 'right+') + '30' + ' top',
			    at:(ENV.contentDirection == 'ltr' ? 'left' : 'right') + ' bottom',
			    of:dataDomObj,
			    collision:'fit flip',
			    using:callback.bind(this),
			    within:ENV.playerContent
		    };

		    balloonWrapper.position(position_cfg);
	    },

	    /**
         * showMultiNarrationBalloon
         * @param narrationObject
         * @param dataElement
         * @param show {Boolean}
         */
        showMultiNarrationBalloon : function(narrationObject, dataElement, show) {
            var thi$ = this;

            if (show) {

                var firstLang = {}, secondLang = {}, $dataElement = jQuery(dataElement);
                // get first narration conf
                firstLang.src = $dataElement.attr('firstLangNarrationSrc');
                firstLang.text = $dataElement.attr('firstLangText');

                // get second narration conf
                secondLang.src = $dataElement.attr('secondLangNarrationSrc');
                secondLang.text = $dataElement.attr('secondLangText');

                // build multi narration element from template
                var multiEle = jQuery(multiNarrationTemplate);
                jQuery(dataElement).prepend(multiEle);

                /**
                 * set multiNarrationBalloon data object
                 * @type {Object}
                 */
                this.multiNarrationBalloonData = {
                    narrationObject : narrationObject,
                    firstLang : firstLang,
                    secondLang : secondLang,
                    multiEle: multiEle
                };

                // anumate multi narration balloon
                multiEle.animate({
                    width: '110px',
                    opacity: 1
                }, 500, function() {
                    // Animation complete.
                });

                // bind control and buttons events
                this.startMultiControl(multiEle.find('#control'));
                this.startMultiButton(multiEle.find('#first'), firstLang, true);
                this.startMultiButton(multiEle.find('#second'), secondLang, false);

            } else {
                // on show(false), animate multi narration balloon destruction
                this.multiNarrationBalloonData.multiEle.animate({
                    width: '34px',
                    opacity: 0
                }, 500, function() {
                    // Animation complete.
                    jQuery(this).remove();
                });

                // set multi narration destruction objects
                this.toggleNarrationIndicator(this.multiNarrationBalloonData.narrationObject, 'narPlay');
                this.multiNarrationBalloonData.narrationObject.ele.trigger('mouseout');
                this.multiNarrationBalloonData = null;
            }
        },

        /**
         * startMultiControl
         * @param control
         * bind click event to multi nattarion control (stop)
         */
        startMultiControl : function(control) {
            // reference
            var thi$ = this;
            // insert control element to multi narrztion balloon data
            this.multiNarrationBalloonData.controlElenemt = control;

            /**
             * @event mousedown
             * bind mousedown event on multi nattarion control
             */
            control.mousedown(function() {
                jQuery(this).addClass('playIcon');
                thi$.showMultiNarrationBalloon('', '', false);
            });
        },

        /**
         * startMultiButton
         * @param container
         * @param langObj
         * @param autoplay
         */
        startMultiButton : function(container, langObj, autoplay) {
            // reference
            var thi$ = this;
            // reset nextToPlay indicator
            this.multiNarrationBalloonData.nextToPlay = false;

            // init sound button
            var soundObject = new thi$.mediaPlayerClass(copy({}, {
                parent: container,
                type: 'soundButton',
                src: langObj.src,
                text: langObj.text,
                autoplay: autoplay,
                onRendered : function() {
                },

                dummyMode: thi$.cfg.dummyMode
            }));
            // enable sound button
            soundObject.setEnabled(true);

            // bind new events
            /**
             * @event mousedown
             * bind mousedown event on sound button
             */
                // on clicking the multi narration, set nextToPlay = true
            soundObject.bindEvent('mousedown', 'content', function() {
                thi$.multiNarrationBalloonData.nextToPlay = !!soundObject.view.isStopped();
            }, '');
            /**
             * @event pause
             * bind pause event on audio
             */
            soundObject.bindEvent('pause', 'audio', function() {
                // if the multi narration clicked, reset indicator
                if (thi$.multiNarrationBalloonData.nextToPlay) {
                    thi$.multiNarrationBalloonData.nextToPlay = false;
                    // else, trigger control mousedown
                    // logic: if nextToPlay, don't close the multi narration, because one of the narration
                    // on the multi narration is about to play.
                    // if !nextToPlay, close the multi narration, because the nextToPlay is not relate to this multi narration
                } else {
                    thi$.multiNarrationBalloonData.controlElenemt.trigger('mousedown');
                }
            }, '');
        },

        /**
         * fontSizeToImgSize
         * @param fontSize
         * @return int
         */
        fontSizeToImgSize : function(fontSize) {
            return (Math.ceil(fontSize * constants.fontSizeToImgSizeFactor));
        },

        /**
         * narrationBGexists
         * @param soundContainerData
         * @return {Boolean}
         */
        narrationBGexists : function(soundContainerData) {
            return !!this.narrationIndicator[soundContainerData.id] && !!this.narrationIndicator[soundContainerData.id].nar;
        },

        /**
         * toggleNarrationIndicator
         * @param soundContainerData
         * @param key
         * @param forceFalse - on true, force narrationIndicator to be false
         */
        toggleNarrationIndicator:function (soundContainerData, key, forceFalse) {
            // on fix narration postion, textViewer doesnt draw narration background, therefore there isn't narration indicator
            if (!!!this.fixNarrationPosition) {
                if (!!this.narrationIndicator[soundContainerData.id]) {
                    this.narrationIndicator[soundContainerData.id][key] = (forceFalse ? false : !this.narrationIndicator[soundContainerData.id][key]);
                }
            }
        },

        /**
         * show or hide narration background
         * @param soundContainerData
         * @param show
         */
        showNarration : function(soundContainerData, show) {
            // on fix narration postion, dont show narration background
            if (!!this.fixNarrationPosition) return;

            if (show) {
                this.narrationIndicator[soundContainerData.id].nar.show();
            } else {
                this.narrationIndicator[soundContainerData.id].nar.hide();
            }
        },

        /**
         * drawNarrationBG
         * @param soundContainerData
         * @param draw
         * @param textViewerNarration
         */
        drawNarrationBG : function(soundContainerData, draw, textViewerNarration) {

            // on fix narration postion, dont draw narration background
            if (!!this.fixNarrationPosition) return;

            var paragraphDiv;

            // select paragraph div by textViewerNarration flag
            // on false, select the paragraph div that wrap the sound element
            // on true, select the first paragraph div
            if (textViewerNarration) {
                paragraphDiv = this._content.find('div[class=textViewerParagraph]')[0];
            } else {
                paragraphDiv = jQuery(soundContainerData.ele).parents('.normal');
                if (!paragraphDiv.length) {
                    paragraphDiv = jQuery(soundContainerData.ele).parents('.textViewerParagraph');
                }
            }

            var paragraphDivData = this.getEleData(paragraphDiv);

            // draw 1st background
            var nar = {};
            // on textViewerNarration, the nar height will be the _content.height. else, set the paragraph div height
            nar.height = textViewerNarration ? this._content.height() : paragraphDivData.height;
            nar.width = textViewerNarration ? this._content.width() : paragraphDivData.width;
            var chckSoundContainerPosition = (this.cfg.direction == 'ltr') ? (soundContainerData.left + soundContainerData.width) : (soundContainerData.right + soundContainerData.width);
            if ( chckSoundContainerPosition <= paragraphDivData.width && (nar.height/this.fontSize) <= 2 ) {
                nar.width = (this.cfg.direction == 'ltr') ? (soundContainerData.right - paragraphDivData.left) : (paragraphDivData.right - soundContainerData.left);
            }
            //nar.ele = jQuery('<div/>', {width: nar.width + 'px', height: nar.height + 'px'}).addClass('narration').insertBefore(jQuery(paragraphDiv));
            if (textViewerNarration){
	            var tmpElem = document.createElement('div');
	            tmpElem.className = 'narration';
	            tmpElem.style = {width: nar.width + 'px', height: nar.height + 'px'};
	            paragraphDiv.parentNode.insertBefore(tmpElem, paragraphDiv);

                nar.ele = jQuery(tmpElem);
	            tmpElem = null;
            } else {
                // nar.ele = jQuery(paragraphDiv).addClass('narrationSpan');//, {width: nar.width + 'px', height: nar.height + 'px'}
                var styleObj = {
                    width: nar.width + 'px', 
                    height: nar.height + 'px',
                    top: 0+ 'px'
                };
                styleObj[this.cfg.direction == 'ltr'? 'left' : 'right'] = 0+ 'px';
                nar.ele = jQuery('<span/>').css(styleObj).addClass('narration').insertBefore(jQuery(paragraphDiv).find('.narrationSpecialWrapper'));
            }
            // register narration
            this.registerNarrationAdd(soundContainerData, paragraphDivData, nar.ele);
        },

        /**
         * register narration to narrationIndicator
         * @param soundObject
         */
        registerNarration : function(soundObject) {
            this.narrationIndicator[soundObject.view.cfg.id + '_content'] = {
                'soundObject' : soundObject
            };
        },

        /**
         * add params to narration indicator object
         * @param soundContainerData
         * @param paragraphDivData
         * @param nar
         */
        registerNarrationAdd : function(soundContainerData, paragraphDivData, nar) {
            this.narrationIndicator[soundContainerData.id] = {
                'soundContainerData' : soundContainerData,
                'paragraphDivData'     : paragraphDivData,
                'nar'                  : nar,
                'narShow'              : true,
                'narPlay'             : false
            };
        },

        /**
         * set element data to one object
         * @param ele
         * @return element data object
         */
        getEleData : function(ele) {
            var res = {};
            res.ele = jQuery(ele);
            res.height = res.ele.height();
            res.width = res.ele.width();
            res.top = res.ele.offset().top;
            res.bottom = res.top + res.height;
            res.left = res.ele.offset().left;
            res.right = res.left + res.width;
            res.id = res.ele.attr('id');
            return res;
        },

        /**
         * narrate
         * calls from presenter.
         * narrate the last narration, on done call the callback
         * @param callback
         */
        narrate : function(callback) {
            // ref
            var thi$ = this;

            // narrate only if there is 'lastNarration'
            // on false, there is no narration in current textViewer
            if (this.lastNarration){
                // bind one event for callback
                this.lastNarration.bindEvent('pause', 'audio', callback, 'one');

                // narrate after 2 sec.
                setTimeout(function() {
                    thi$.lastNarration.view._content.trigger('mouseover');
                    thi$.lastNarration.view._content.trigger('mousedown');
                }, 2000);
            }
        },

        /**
         * compact
         * on compact textViewer, set aspect ratio 2/3
         */
        compact: function() {
            this._super();
            if(this.checkMathField !== true){
                this.ratioResize('2/3');    //TODO: check for this function impact on subanswer sizing
            }
        },

        /**
         * ovveride
         * on loose text viewer, loose it's size
         */
        loose : function() {
            this._view.width('').height('');
        },

        /**
         * on reduction, set reduced font-size
         * @param val*
         */
        reduce : function(val) {
            var reducedFontSize = this.calcFontSizeByReduction(val);
            this._view.css('font-size', reducedFontSize + 'px');
            this.dispatchEvent('onRendered');
        },

        /**
         * spaceEaterAddWidth
         * @param addWidth
         */
        spaceEaterAddWidth : function(addWidth) {
            var width = this._view.outerWidth() + addWidth;
            this.looseHeight();
            this.setWidth(width);
        },

        /**
         * calc font size by reduction value, and apply abs. min when require
         * @param val
         * @return {Number} reduced font size
         */
        calcFontSizeByReduction : function(val) {
            if (!this.isMinimunReadable && this.optimumFontSize != undefined) {
                //incase of small optimum font size (image credit, image caption) don't perform reduction
                if (this.optimumFontSize < this.minimumReadableFontSize) {
                    this.dispatchEvent("cantReduce");
                    return null;
                }
                // if val == null set val = 1 in case this.cfg.reductionStep = 0
                var reductionValue = parseInt((this.cfg.reductionStep > 0) ? 0 : ((val != undefined && val > 0) ? val : 1));
                // add the val to the current reductionStep
                this.reductionStep = this.reductionStep + reductionValue;
                // calc font size by reductionStep
                this.setFontSize = (Math.floor((this.optimumFontSize - (this.reductionStep * this.reductionStepSize)) / 2)) * 2;
                // if fontSize is less then fontSizeMinReadable
                if (this.setFontSize <= this.minimumReadableFontSize) {
                    // set fontSize = minimumReadable (not less)
                    this.setFontSize = this.minimumReadableFontSize;
                    // min readable flag
                    this.isMinimunReadable = true;

                    this.dispatchEvent("cantReduce");

                    // get char sum and apply abs. min. on charSum > 20
                    var charSum = this._view.text().length;

                    // if absolute minimum if apply
                    if (!!this.applyAbsoluteMinimum && !this.isAbsoluteMinimum && charSum > 20) {
                        // set the markup for a number of chars + '...'
                        var absMinMarkup = this._view.text().trim().substring(0, constants.absMinStrLen) + '...';

                        this._view.html(absMinMarkup);

                        // set absoluteMinimum flag = true
                        this.isAbsoluteMinimum = true;
                        // let the textViewer's presenter know that you'r on absoluteMinimum
                        this.dispatchEvent("onAbsMin", this);
                    }
                }
                return this.setFontSize;
            }
        },

        /**
         *
         * @return {Object}
         */
        getReductionReport: function() {

            var percent = ( this.setFontSize == undefined ) ? 1 : this.setFontSize / this.optimumFontSize,
                belowRead = !!this.isMinimunReadable,
                belowAbs = !!this.isAbsoluteMinimum
                ;

            var _elm = (this._view)[0];
            var _hasScrollBar = false;

            var overV = ( _elm.clientWidth < _elm.scrollWidth ) ;
            var overH = ( _elm.clientHeight < _elm.scrollHeight ) ;

            return {
                percent: percent,
                belowRead: belowRead,
                belowAbs: belowAbs,
                overflowV: overV,
                overflowH: overH,
                overflow: overH || overV
            };
        },

        /**
         * ratioResize
         * resize textViewer by aspect ratio
         * @param ratio - string: 'x/y'
         */
        ratioResize: function(ratio) {
            var ratioWidth = parseInt(ratio.split('/')[0]);
            var ratioHeight = parseInt(ratio.split('/')[1]);

            var width = this._view.width();
            var height = this._view.height();

            if((width < constants.minWidthForAspectRatioResize[ENV.locale]) || (height == 0)) {
                return;
            }

            var totalArea = width * height;

            var unit = Math.ceil(Math.sqrt(totalArea / (ratioWidth * ratioHeight)));
            var ratioTextViewerWidth = unit * ratioWidth;

            // if the width is larger than the minimum width for aspect ratio resize, set it.
            ratioTextViewerWidth = ratioTextViewerWidth > constants.minWidthForAspectRatioResize[ENV.locale] ? ratioTextViewerWidth : constants.minWidthForAspectRatioResize[ENV.locale];
            this.setWidth(ratioTextViewerWidth);
        },

        /**
         *
         * @param size
         */
        resize : function(size){
            this.setWidth(Math.ceil(size.width));
        },

        /**
         * setWidth
         * @param val
         * @param overwriteLaydownSize- ignore the value in laydownsize and use the new value 
         */
        setWidth : function(val, overwriteLaydownSize) {
            // laydown size will be the the maximal width
            if (!!this.laydownSize && !overwriteLaydownSize)
                val = (val > this.laydownSize.width) ? this.laydownSize.width : val;

            if (val == 0) return;

            this._view.width(Math.ceil(val));
        },

        /**
         * spaceEatingAvailable
         * check if space eating is available
         * @return {Boolean}
         */
        spaceEatingAvailable : function() {
            return this.laydownSize.width > (Compat.fullOuterWidth(this._view));
        },

        /**
         * setHeight
         * @param val
         */
        setHeight : function(val) {
            val = val - (this._view.css('margin-top').px2int()) - (this._view.css('margin-bottom').px2int());
            this._view.height(val);
        }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/textViewer/TextViewerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/textViewer/TextViewer.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.textViewer.TextViewer
     * @desc A textViewer Presenter component class
     * @namespace t2k.component.textViewer
     * @extends t2k.component.BaseComponent
     * @type {Object}
     */
    t2k.component.textViewer.TextViewer = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.textViewer.TextViewer',
        
        /**
         * text viewer - ctor
         * @param config
         */
        ctor: function(config) {
            // Delegate            	
            this._super(config);
            /**
             *
             * @type {Array}
             */
            this.textViewerChildren = [];
            
            this.initLayout();
            this.initView(); 
            this.addChildren();
        },
        
        /**
         * initLayout
         * initLayout params
         */
        initLayout : function(){
        	
        	if (!this.layout.onRendered){
            	this.layout.onRendered = function(){};
            }

            /**
             * @property
             * @type {Number}
             */
        	this.layout.numOfChildren	  = 0;
            /**
             * @property
             * @type {Number}
             */
        	this.layout.onRenderedCounter = 0;
            /**
             * @property
             * @type {Boolean}
             */
        	this.layout.firstRender 	  = true;
        },
        
        /**
         * initView
         * init view and register view presenter events
         */
        initView : function(){
        	
        	var thi$ = this;

            /**
             *
             * @type {Object}
             */
        	this.view = this.createNewView(t2k.component.textViewer.TextViewerView, (merge(this.prepareTextViewerConfiguration(), {
            	events:{
            		/**
            		 * onAbsMin
            		 * calls if textViewer reduced to abs. min.
            		 * abs. min. reduction is possible only on applyAbsoluteMinimum[configuration] flag true
            		 */
            		onAbsMin : function(){
            			thi$.cfg.onAbsMin();
            		},
            		
            		/**
            		 * childSum
            		 * calls when view finished parsing it's children.
            		 */
            		childSum : function(val){
            			thi$.layout.numOfChildren = val;
            		},
            		
            		/**
            		 * childRendered
            		 * calls on view's children render (one child at a time)
            		 */
            		childRendered : function(view){
            			thi$.layout.onRenderedCounter++;
            		},
            		
            		/**
            		 * onTextViewerChildrenRendered
            		 * view calls this event if it's a widower
            		 */
            		onTextViewerChildrenRendered : function(view){
            			thi$.textViewerChildrenRendered(view);
            		},
            		
            		/**
            		 * addChild
            		 * calls from view, to add the child to the presenter & view.
            		 * the child first pushed to textViewerChildren array, and later to this.children array
            		 */
            		addChild : function(args){
            			thi$.textViewerChildren.push(args.child);
            			args.view.addChild(args.child);
            		}
            	}
            })));       	
        },     
        
        /**
         * addChildren
         * adds textViewerChildren children to this.children
         */
        addChildren : function(){
        	// ref
        	var thi$ = this;
        	
        	jQuery(this.textViewerChildren).each(function(index, child){
        		thi$.add(child);
        	});
        },
        
        /**
         * this function calls from view's event on all children rendered.
         * @param view
         */
        textViewerChildrenRendered : function(view){
        	
        	view = view ? view : this.view;
        	
        	// on first (full) rendering, save the laydown size
        	if (this.layout.firstRender){
        		this.layout.laydownSize = view.laydownSize = view.getSize();
        		this.layout.firstRender = false;
        	}
        	
        	// call the view function for last actions and onRendered dispatch
        	view.textViewerChildrenRendered();
        },
        
        /**
         * prepareTextViewerConfiguration
         * @returns config
         */
        prepareTextViewerConfiguration : function(){            	
        	return _prepareTextViewerConfiguration(this.cfg);            	
        },

        /**
         *
         * @param val
         */
        reduce : function(val){
        	this._super(val);
        	this.writeCompiled('fontsize', this.view._view.css('font-size').px2int());
        },

        /**
         *
         * @param compiledElement
         */
        readCompiled_Private : function(compiledElement){
        	this.compiledLayoutRes.fontsize = compiledElement.attr('fontsize');
        },
        
        /**
         * calls from parent composite. view will narrate the last narration and will call the callback
         * @param callback
         */
		narrate : function(callback){
			this.view.narrate(callback) ;
			this.layout.onRendered();
		},
		
		/**
		 * setEnabled
		 * check autoPlay and narrate
		 * @param flag
		 */
		setEnabled : function(flag){
            // empty this.children
			var temp = this.children;
            this.children = [];
			this._super(flag);

            // set this.children
            this.children = temp;
			
			if( this.cfg.autoplay && !!!this.cfg.dummyMode && flag) {
	        	this.narrate(function(){});
			}
			
		},
		
		/**
		 * resize textViewer to aspect ratio
		 * @param ratio - aspect ratio:  Number/Number*
		 */
		ratioResize : function(ratio){
			// default aspect ratio
			ratio = ratio ? ratio : '2/3';
			this.view.ratioResize(ratio);
			this.layout.onRendered();
		},
		
		/**
		 * spaceEaterAddWidth
		 * @param widthAdd
		 */
		spaceEaterAddWidth : function(widthAdd){
			this.view.spaceEaterAddWidth(widthAdd);
		},
		
		/**
		 * spaceEatingAvailable
		 * @returns {Boolean}
		 */
		spaceEatingAvailable : function(){
			return this.view.spaceEatingAvailable();
		},

	    dispose : function() {
		    if (!!this.textViewerChildren) {
			    this.textViewerChildren.forEach(function (child) {
				    child.view.dispose();
				    child.dispose();
				    delete child;
			    });
			    this.textViewerChildren = null;
		    }

		    this._super();
	    }
		
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private:
     * Function: _prepareTextViewerConfiguration
     * Extract the text viewer configuration from the xml
     *
     * Parameter:
     *  param - {XML} taskXml The task's configuration XML.
     *  param - {ID} parent id
     *
     * Returns:
     *  {Object} t2k.component.textViewer.TextViewerParams that contains text viewer parameters.
     */
    function _prepareTextViewerConfiguration(cfg) {

    	// The result object.
    	var result;
    	var textViewerElement = cfg.data; 

    	if (textViewerElement){
	    	var textViewerMarkup = jQuery.xmlToString(cfg.data) || "",
                textViewerMarkupLenght = textViewerMarkup.length,
                tmp = (textViewerMarkup.substring(1,textViewerMarkup.indexOf('>'))).split(" "),
                textViewerTagName = (tmp[0].toString() != 'p') ? tmp[0].toString():"";

    		textViewerMarkup = textViewerMarkup.substring(
	    	textViewerMarkup.indexOf('>') + 1, textViewerMarkupLenght - textViewerTagName.length - 3);

	    	var textViewerParam = new t2k.component.textViewer.TextViewerParams();
	    	textViewerParam.id 					= genId();
            /**
             * @cfg {string} width The width of textViewer
             */
	    	textViewerParam.width 				= cfg.width ? cfg.width : '';
	    	textViewerParam.height 				= '';
            /**
             * @cfg {string} initMarkup
             */
	    	textViewerParam.initMarkup			= textViewerMarkup;
            /**
             * @cfg {string} style textView class name
             */
	    	textViewerParam.style 				= cfg.style || jQuery(textViewerElement).attr('style') || ENV.textViewer.style;
            /**
             * @cfg {Object} parent
             */
	    	textViewerParam.parent 				= cfg.parent;
            /**
             * @cfg {Boolean} parentIsObject
             */
	    	textViewerParam.parentIsObject		= false;
            /**
             * @cfg {String} direction
             */
	    	textViewerParam.direction 			= jQuery(textViewerElement).attr('direction') || ENV.contentDirection;
            /**
             * @cfg {String} textAlign
             */
	    	textViewerParam.textAlign 			= textViewerParam.direction == 'ltr' ? 'left' : 'right';
	    	// useSideBar: CR
            /**
             * @cfg {Boolean} useSideBar
             */
	    	textViewerParam.useSideBar			= eval(jQuery(textViewerElement).attr('useSideBar') || ENV.textViewer.useSideBar);
            /**
             * @cfg {Boolean} enableTextSelection
             */
	    	textViewerParam.enableTextSelection = jQuery(textViewerElement).attr('enableTextSelection') || ENV.textViewer.enableTextSelection;
            /**
             * @cfg {String} language
             */
	    	textViewerParam.language			= jQuery(textViewerElement).attr('language') || ENV.interfaceLanguage;
	    	//textViewerParam.baloonStyle			= jQuery(textViewerElement).attr('baloonStyle') || ENV.textViewer.baloonStyle;
            /**
             * @cfg {string} lineHeightConfig The line-height config of textViewer
             */
	    	textViewerParam.lineHeightConfig 	= cfg.lineHeightConfig || jQuery(textViewerElement).attr('lineHeightConfig') || ENV.textViewer.lineHeightConfig;
            /**
             * @cfg {String} setMaxWidth
             */
	    	textViewerParam.setMaxWidth		 	= jQuery(textViewerElement).attr('setMaxWidth') || cfg.setMaxWidth;
            /**
             * @cfg {string} fixNarrationPosition
             */
	    	textViewerParam.fixNarrationPosition= cfg.fixNarrationPosition || jQuery(textViewerElement).attr('fixNarrationPosition');
            /**
             * @cfg {XML} data
             */
	    	textViewerParam.data = cfg.data;
            /**
             * @cfg {Number} additionLineHeight
             */
	    	textViewerParam.additionLineHeight  = cfg.additionLineHeight || 0;
            /**
             * @cfg {string} applyAbsoluteMinimum
             */
	    	textViewerParam.applyAbsoluteMinimum= cfg.applyAbsoluteMinimum || jQuery(textViewerElement).attr('applyAbsoluteMinimum');
            /**
             * @cfg {Number} reductionStep
             */
	    	textViewerParam.reductionStep = cfg.reductionStep ? cfg.reductionStep : 0;
            /**
             * @cfg {Number} optimumFontSize
             */
	    	textViewerParam.optimumFontSize = cfg.optimumFontSize ? cfg.optimumFontSize : null;	    	
	    	
	        // set the result.
	    	result = textViewerParam;
	    } else {
	    	result = null;
	    }

    	return merge(result, cfg);

    } // End of prepareTextViewerConfiguration

})();
////////////////////////////////////////
// SRC End --> t2k/component/textViewer/TextViewer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/subAnswer/SubAnswerConfig.js
////////////////////////////////////////
/**
 * SubAnswer component constants
 */
t2k.component.subAnswer.SubAnswerConstants = {
		dndBehaviour : {
			
			dragAndDrop : {
				startDraggingEvent : 'mousedown',
				droppingEvent : 'mouseup',
				draggingEnter : 'mouseenter',
				draggingLeave : 'mouseleave',
                mouseMove : 'mousemove'
			},
			
			clickAndDrop : {
				startDraggingEvent : 'click',
				droppingEvent : 'click',
				draggingEnter : 'mouseenter',
				draggingLeave : 'mouseleave',
                mouseMove : 'mousemove'
			},

            touchAndDrop : {
                startDraggingEvent : 'touchstart',
                droppingEvent : 'touchend',
                draggingEnter : 'touchmove',
                draggingLeave : 'touchend',
                mouseMove : 'touchmove'
            }
		},
			
		dndModes : {		
			
			dragAndCopy : {
				droppable : false,
				draggable : true,
				afterDrag : 'draggable,markSourceAsReusable',
				afterDrop : 'checkAndReturn',
                beforeDrop : ''
			},

			dragAndDisable : {
				droppable : false,
				draggable : true,
				afterDrag : 'disable',
				afterDrop : 'checkAndReturn',
                beforeDrop : ''
			},

			dragAndDropAndReplaceAndReturn : {
				droppable : true,
				draggable : false,
				afterDrag : 'dropabble,delete',
				afterDrop : 'draggable,dropabble,checkAndReturn',
                beforeDrop : ''
			},

            dragAndDropNoReplace : {
                droppable: true,
                draggable: false,
                afterDrag: 'dropabble,delete',
                afterDrop: 'draggable,dropabble,checkAndReturn',
                beforeDrop : 'checkIfDroppableNoReplace'
            },

            dragAndDropAndReplace : {
                droppable: true,
                draggable: true,
                afterDrag: 'dropabble,delete',
                afterDrop: 'draggable,dropabble,checkAndReturn',
                beforeDrop : ''
            },

            dragAndDropToMultiAnswer : {
                droppable: false,
                draggable: true,
                afterDrag: 'deleteSubAnswer',
                afterDrop: 'checkAndReturn',
                beforeDrop : ''
            }

		},

		ignoreChecking : {
			'capitalLetters' : function(value) { //Capital letters
				return value.toLowerCase();
			},
			'spacesBetweenTwoCharacters' : function(value) { //Spaces between two characters
				return value.replace(/\s/g, '');
			},
			'accents' : function(value) { //Accents
				var accentsMap = LocaleUtil.getAccentsMap();

				if(accentsMap) {
					accentsMap.forEach(function(item, index){
						if(item.accent && item.accent.length) {
							item.accent.forEach(function(letter){
								value = value.replace(new RegExp(letter, 'g'), item.replacement);
							})
						}
					});
				}
				return value;
			},
			'punctuationMarks' : function(value){ //Punctuation marks
				return value.replace(/[\.,-\/#!$%\^&\*;:{}=\-_`~()]/g, '')
			},
			'' : function(value) {
				return value;
			}

		},
		
		paddingFactor : 0.1,             // factor of div.subanswer padding
		heightWrapperExpansion  : 1,     // Expansion of div wrapper height
        lineHeightBorderExpansion  : 6,
		heightFactorWrite: 1.15,      
		lineHeightFactor: 0.66,
        timeoutAnimationSec : 200,
        timeoutFadeOutSec : 100,
		draggedObjectOffset : (ENV.behaviors.isTablet ? 30 : 20),
		dtpAppOffset: {top:120 , left: 60 },
		widthHeightExpansion : 2,
		hintOffsetBottom : 3,
		hintOffsetBottomWrite : 6,		
		widthHeightExpansionWrite: 7,
		appendCloneSelector: 'div.player',
		scrollableSelector: 'div.scroll_enabled',
		mathFieldHeight: '2.3em',
		additionalWidthFactor : 1.3
};
////////////////////////////////////////
// SRC End --> t2k/component/subAnswer/SubAnswerConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/subAnswer/SubAnswerView.js
////////////////////////////////////////
var tempFnc, tempFnc2;

(function() {
    /**
     * @class t2k.component.subAnswer.SubAnswerView
     * @desc A subAnswer View class
     * @namespace t2k.component.subAnswer
     * @extends t2k.component.BaseComponentView
     * @type {Object}
     */

    var TEMPLATE =
        "<div class='subAnswer' id='{{id}}' >\
        	<div class='subAnswer_content_wrap' id='{{id}}_content_wrap' >\
        		{{#checkable}}" +
        		"<div class='status_icon'></div>\
        		<div class='subAnswer_content' id={{id}}_content></div>\
        		{{/checkable}}" +
        		"{{^checkable}}" +
        			"<div class='subAnswer_content' id={{id}}_content></div>" +
        		"{{/checkable}}" +
        	"</div>\
        </div>";

    /**
     * @private
     * @name defaultConfig
     * @desc Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.
    
    // constants from SubAnswerConstants
	var constants = t2k.component.subAnswer.SubAnswerConstants;

    t2k.component.subAnswer.SubAnswerView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor
         * @desc constructor, see superclass documentation
         */
        ctor: function(config) {
            // Delegate.        	
            this._super(override(config, defaultConfig));

            /**
             * @property
             * @type {*}
             */
            this.insertBefore = this.cfg.insertBefore;

            /**
             * @property
             * @type {*}
             */
            this._content = this._view.find('.subAnswer_content');

            /**
             * @property
             * @type {Object}
             */
            this.hintObj = {};   //hint object

            /**
             * @desc draggable clone of subAnswer content
             * @type {*}
             */
            this.draggedElement = null;

            /**
             *
             * @type {Number}
             */
            this.childReductionStep = 0;

            /**
             *
             * @type {Number}
             */
            this.childOptimumFontSize = 0;
            
            if(!!this.cfg.registerEvents){
            	this.bindDNDEvents(this.cfg.registerEvents);            	
            }

            /**
             *
             * @type {String}
             */
             this.draggElementClass = ((this.cfg.taskmode == "matching" || this.cfg.taskmode == "sorting" ||
                                        this.cfg.taskmode == "sequencing") ? 'inDragMtq' : 'inDrag');

            /**
             * When animating, user should not be able to catch and drag the image.
             * Default browser behaviour is confusing in this case.
             */
            this.draggElementClass += ' not_draggable';
	        dndManager.draggElementClass = this.draggElementClass;

            var thi$ = this;

            /**
             * @desc document mouse move handler
             */

            this.mmFunctionHandler = function (event) {

	            tempFnc = setTimeout(function () {
		            clearTimeout(tempFnc);
		            thi$.mouseMoveHandler(event);
	            }, 20);


	            clearTimeout(tempFnc2);

            };

            /**
             * @desc document key down handler, prevent viewport scrolling while dragging
             * @param event
             */
            this.keyDownHandler = function (event) {
                cancelEvent(event);
            };

            dndManager.inDragObjectView = null;
            dndManager.isOverBank = false;

	        globalEvents.add({
		        fnc: function(){
			        thi$._initHint();
		        }
	        });

        },
        
        /**
         * @name setEnabled
         * @param flag
         */
        setEnabled : function(flag){
        	this._super(flag);

        	// children's setEnabled
            this.children.forEach(function(child) {
            	child.setEnabled(flag);
            });

            if(!flag) {
                this.markAsNotDraggable();
                this.markAsNotDroppable();
            } else {
	            var thi$ = this;

	            if(thi$.cfg.taskViewDomElement) { //scroll task with draggable object
		            thi$.taskView = thi$.cfg.taskViewDomElement;
		            thi$.bankView = thi$.taskView.find('.mtqBank');
		            thi$.scrollableDiv = jQuery(constants.scrollableSelector);
	            }
            }
        },

        /**
         * @name render
         * @param element
         * @param template
         * @param context
         */
        render : function(element, template, context) {
        	if (!!context.insertBefore){
        		var subAnswerHtml = Mustache.to_html(template, context);
        		jQuery(subAnswerHtml).insertBefore(context.insertBefore);
        		
        	} else if (!!context.insertAfter ){
        		var subAnswerHtml = Mustache.to_html(template, context);
        		jQuery(subAnswerHtml).insertAfter (context.insertAfter );

        	} else {
        		this._super(element, template, context);
        	}
        }, // End of render

        /**
		 * @name _initMarkupForEmptySA
		 * @desc markup initialization
		 */
        _initMarkupForEmptySA : function(){
            if(!this._content.html()){
                return;
            }

			if(this._content.html().length == 0){
				var divTagElement = jQuery('<div/>').css('display','inline-block');
				this._content.append(divTagElement);
			}
		},

        /**
         * @namne setStyleByChild
         * @param childName
         */
        setStyleByChild : function(childName) {
            this._view.addClass(childName);
        },

        /**
         * @name getElementSize
         * @return {'width': Int, 'height': Int}
         */
        getElementSize:function () {
           return this.getSize();
        },

	    getInnerSize: function() {
		    if (this.children.length && this.children[0].adjustContentStyle) { //only for MF child
			    this.children[0].adjustContentStyle();
		    }

		    if (this.children.length) {
			    return this.children[0].getSize();
		    } else {
			    return null;
		    }
	    },
        
        /**
         * @name setElementSize
         * @param elementSizes
         */
         setElementSize: function(elementSizes) {

	        this.setWidth(elementSizes.width);
	        this.setHeight(elementSizes.height);

        	this._view.css('line-height', elementSizes.height - constants.lineHeightBorderExpansion + 'px');
        },
        
        /**
         * @name resetElementSize
         */
        resetElementSize : function() {
            this._view.height('').width('');
            this._view.css('line-height', '');
            this._content.width('').height('');
            this._content.parent().width('').height('');
        },
        
        /**
         * @name resetTile
         * @desc override - this component has different resetTile logic
         */
        resetTile : function(){
            this.resetElementSize();
        },
        /**
         * @name looseWidth
         * @desc override - this component has different looseWidth logic
         */
        looseWidth :function () {
            this._view.width('');
            this._content.width('');
            this._content.parent().width('');
        },
        /**
         * @name looseHeight
         * @desc override - this component has different looseHeight logic
         */
        looseHeight : function(){
            this._view.height('');
            this._view.css('line-height', '');
            this._content.height('');
            this._content.parent().height('');
        },
        /**
         * @name setWidth
         * @desc override - this component has different setWidth logic
         * @param val {Number}
         */
        setWidth : function(val){
	        this._view.outerWidth(val);
	        this._content.outerWidth(val);
	        this._content_wrap.outerWidth(val);
        },
        /**
         * @desc override - this component has different setHeight logic
         * @param val {Number}
         */
        setHeight:function (val) {
	        this._view.outerHeight(val);
	        this._content.outerHeight(val);
	        this._content_wrap.outerHeight(val);
        },

        /**
         * @desc loose override - this component has different loose logic
         */
        loose:function () {
            this._view.css({'display':'inline-block', 'vertical-align':'top'});
        },

        /**
         * @name getSize
         * @returns size {'width': Int, 'height': Int}
         */
        getSize : function(){
	        if (this.children.length && this.children[0].adjustContentStyle) { //only for MF child
		        this.children[0].adjustContentStyle();
	        }

	        var height = Compat.actualHeight(this._content);
	        var width = Compat.actualWidth(this._content);
	        return {'width':width, 'height':height};
        },

        /**
         * @desc adjust subAnswer height, padding and margin according to the font-size
         */
        setStyle : function(subAnswerSize){
            var thisFontSize = parseInt(this._view.css('font-size').replace('px', ''));

            if (!!subAnswerSize) {

	            this.setWidth(subAnswerSize.width);
	            this.setHeight(subAnswerSize.height);

                var divHeight = Math.floor(((subAnswerSize.height - thisFontSize) / 2 ) + thisFontSize) + constants.heightWrapperExpansion;
	            this._content_wrap.outerHeight(divHeight);

                this._view.css('line-height', subAnswerSize.height + 'px');

            } else if (!this.cfg.parent.hasClass('cell')) {

	            var subAnswerHeight =
		            (!!this._content.children().length && (this._view.hasClass('texteditor') || this._view.hasClass('mathfield'))) ?
			            this._content.children().first().outerHeight(true) + constants.heightWrapperExpansion :
			            this._content.outerHeight(true);

	            var divHeight = Math.floor(((subAnswerHeight - thisFontSize) / 2 ) + thisFontSize);
	            this._content_wrap.outerHeight(divHeight);

                this._content.outerHeight(subAnswerHeight);
                this._view.css('line-height', subAnswerHeight + 'px');
            }

            if (this.cfg.mode != 'write') {
                this._content.addClass('shadow');
            }

        },
    	
    	/**
    	 * @desc replace subAnswer child with in dragg object
         * @param sourceElement
    	 */
    	replaceChild : function(sourceElement, sourceView) {

    		// get & empty content element
    		var subanswer_content = this._content;
			subanswer_content.html('');

			//set the cloned content element a new id
            var subanswer_content_id = subanswer_content.attr('id');

		    if (!sourceElement && !!dndManager.inDragObject) {
			    sourceElement = dndManager.inDragObject;
		    }

            //source element to create child -
            //in case of dragged object exists - use it
            //otherwise use bank source element
            var viewOfSourceElement = (sourceView ? sourceView : sourceElement.children[0].view._view.clone());

		    this.childReductionStep = sourceElement.children.length ?
			    sourceElement.children[0].view.reductionStep : sourceElement.cfg.reductionStep;
		    this.childOptimumFontSize = sourceElement.children.length ?
			    sourceElement.children[0].view.setFontSize : sourceElement.cfg.setFontSize;

		    var xmlSource = sourceElement.children.length ?
			                sourceElement.children[0].view.cfg.data : sourceElement.cfg.data.children[0];

            this.dispatchEvent('createChildren', {'xml' : xmlSource ,
	        'subanswer_content_id' : subanswer_content_id, 'width' : '', 'container' : this._content,
	        'childReductionStep' : this.childReductionStep, 'childOptimumFontSize' : this.childOptimumFontSize,
	        'viewOfSourceElement' : viewOfSourceElement, 'taskmode' : sourceElement.cfg.taskmode});
        },

    	/**
    	 * @desc remove subAnswer content
    	 */
    	 removeContent : function(){
            if (this.cfg.mode != 'write' && !!this.cfg.mode) {
                //DOM manipulations cancel touch javascript events
                //this._content.html('');
                dndManager.insertIntoRecycleBin(this._content.children());

                this._initMarkupForEmptySA();
            } else { //remove text editor markup
                if (this.children[0]) {
                    this.children[0].removeContent();
                }
            }
    	},
    	/**
    	 * @desc replace html content of subAnswer child with given parameter
    	 * @param htmlContent
    	 */
    	replaceContent : function(htmlContent){
    		if(this.cfg.mode != 'write' && !!this.cfg.mode){
        		this._content.html(htmlContent);
        		this._initMarkupForEmptySA();    			
    		} else { //replace text editor markup
    			if(this.children[0]){
    				this.children[0].replaceContent(htmlContent);	
    			}    			
    		}    		
    	},
    	
        /**
    	 * @desc get subAnswer value
    	 */
    	getValue : function(){
    		if(this.cfg.mode != 'write' && !!this.cfg.mode){
        		return jQuery.trim(this._content.text());
    		} else if(this.children[0]) {    			
    			return this.children[0].getValue();
    		} else {
    			return '';
    		}
    	},
        /**
         * @desc get subAnswer markUp value
         */
        getMarkUpValue : function(){
            if(this.cfg.mode != 'write' && !!this.cfg.mode){
        		return this._content.html();
    		} else if(this.children[0]) {
    			return this.children[0].getMarkUpValue();
    		} else {
    			return '';
    		}
        },

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////// HINT //////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /**
         * @desc subAnswer hint initiation
         * @method
         */
        _initHint : function(){

	        if(!this.cfg) {
		        return;
	        }

        	var elHint = this.cfg.elHint;
        	if(elHint.text() != ''){
                Perf.select('#' + this.cfg.id + '_hint', 1).remove();  //remove old hint
        		
	        	var hintPosition = elHint.attr('position');
	        	if(hintPosition == 'undefined' || hintPosition == null){
	        		hintPosition = 'bottom';
	        	}
	        	
	        	this.hintObj.position = hintPosition;
	        	this.hintObj.textShort = '';
	        	
	        	//prepend div hint tag to the subAnswer tag        	
	        	this.subAnswerHint = jQuery('<div/>').attr('id',this.cfg.id + '_hint').addClass('hint');
	        	if(hintPosition == 'top'){
	        		this.subAnswerHint.prependTo(this._view);
	        	} else {
	        		this.subAnswerHint.appendTo(this._view);
	        	}          	
	        	
	        	this.subAnswerHint.text(elHint.text());       //set div hint tag html with the source html
	        	this.hintObj.textOriginal = this.subAnswerHint.text();
	        	
	        	this.subAnswerHint.addClass(ENV.contentDirection);   //append ltr/rtl class according to the environment direction
	        	
	        	var subAnswerWidth = Compat.fullOuterWidth(this._view);
	        	this.hintObj.hintWidth = this.subAnswerHint.outerWidth(true);
	        	
	        	var thi$ = this;
	        	
	        	if(this.hintObj.hintWidth > subAnswerWidth){        		
	        		var hintLength = this.subAnswerHint.text().length;    				
	        		var charWidth = (this.hintObj.hintWidth / hintLength);	        		
	        		var charsCount = Math.floor(subAnswerWidth / charWidth);        		
	        		var sofix = '...';	        	
	        		
	        		var shortText = (this.subAnswerHint.text().slice(0, charsCount - sofix.length));
	        		
	        		this.hintObj.textShort = shortText + sofix;        		
	        		this.subAnswerHint.width(subAnswerWidth).text(this.hintObj.textShort);        		
	        		
	        		this.hintBindAnimation(subAnswerWidth);        		    		
	        	}
	        	
	        	this.hintObj.hintHeight = parseInt(this.subAnswerHint.outerHeight());    //get the height of the hint tag
	        	if(hintPosition == 'top'){
	        		this.subAnswerHint.css('top', '-' + (this.hintObj.hintHeight) + 'px');   //set the top of the div hint tag according to his height	
	        	} else {

			        //in case of hint inside sub-answer add it's height
			        var viewHeight = this._view.outerHeight();
	        		this.subAnswerHint.css('top', (this._content.outerHeight() + constants.hintOffsetBottom) + 'px');

			        //add hint height to sub-answer height
			        this._view.outerHeight(viewHeight + this.hintObj.hintHeight);

	        	}
	        	
        	}
        },
        /**
         * @desc bind hover animation to the hint object (expand to its original width, reduce to the subAnswer width)
         * @param subAnswerWidth
         */
        hintBindAnimation : function(subAnswerWidth) {
        	var thi$ = this;        	
        	
        	this.subAnswerHint.hover(function() {
        		if((dndManager.inDragObject == null) && (thi$.subAnswerHint.text() != thi$.hintObj.textOriginal) ){
        			jQuery(this).css('z-index', '100').text(thi$.hintObj.textOriginal);
        			if(!jQuery(this).is(':animated')){
        				jQuery(this).stop().animate({width : thi$.hintObj.hintWidth}, 600, 'swing');	
        			}        			
        		}
        			        		
    		}, function() {
    			if((dndManager.inDragObject == null) && (thi$.subAnswerHint.text() != thi$.hintObj.textShort)){    				  
    				if(!jQuery(this).is(':animated')){ 					
        				jQuery(this).stop().animate({width: subAnswerWidth}, 600, 'swing', function(){    					
        					jQuery(this).text(thi$.hintObj.textShort);    					
        					jQuery(this).css('z-index', '0');
        				});
    				} 
    			}	
    		});
        },        
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////// DRAG AND DROP /////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * @name mouseMoveHandler
         * @param event
         */
        mouseMoveHandler:function (event) {


            event.preventDefault();

            if(!!dndManager.animated()) {
                return false;
            }

            var thi$ = this, pageX = 0, pageY = 0;

	        //touches: A list of information for every finger currently touching the screen
            //changedTouches: A list of information for every finger involved in the event
            //When I lift a finger, it will be removed from touches, targetTouches and will appear in changedTouches since it’s what caused the event
            //Removing my last finger will leave touches and targetTouches empty, and changedTouches will contain information for the last finger
            if(!!event.pageX) {
                pageX = event.pageX;
            } else if(!!event.originalEvent && !!event.originalEvent.touches && !!event.originalEvent.touches[0]) {
                pageX =  event.originalEvent.touches[0].pageX;
            } else if(!!event.originalEvent && !!event.originalEvent.changedTouches && !!event.originalEvent.changedTouches[0]) {
                pageX = event.originalEvent.changedTouches[0].pageX;
            }

            if(!!event.pageY) {
                pageY = event.pageY;
            } else if(!!event.originalEvent && !!event.originalEvent.touches && !!event.originalEvent.touches[0]) {
                pageY =  event.originalEvent.touches[0].pageY;
            } else if(!!event.originalEvent && !!event.originalEvent.changedTouches && !!event.originalEvent.changedTouches[0]) {
                pageY = event.originalEvent.changedTouches[0].pageY;
            }

            if (!!thi$.draggedElement) {

	            var cantMoveDragged = false,
		            taskViewTop = thi$.taskView ? thi$.taskView.offset().top : 0,
		            taskViewLeft = thi$.taskView ? thi$.taskView.offset().left : 0,
		            draggedObjectHeight = thi$.draggedElement.outerHeight(),
		            draggedObjectWidth = thi$.draggedElement.width(),
		            taskViewHeight = thi$.taskView ? thi$.taskView.outerHeight() : 0,
		            taskViewWidth = thi$.taskView ? thi$.taskView.width() : 0;

	            if (thi$.taskView) {
		            //prevent dragging after top of the answer
		            if (pageY < taskViewTop) {
			            cantMoveDragged = true;
		            }

		            //prevent dragging below bottom of the answer
		            if (((pageY + draggedObjectHeight) - (taskViewTop + taskViewHeight)) > (draggedObjectHeight / 2) ) {
			            cantMoveDragged = true;
		            }

		            if(ENV.contentDirection != "rtl") { //ltr content direction
			            //prevent dragging over left border of the task
			            if (pageX < taskViewLeft) {
				            cantMoveDragged = true;
			            }

			            //prevent dragging over right border of the task
			            if ((pageX - draggedObjectWidth) > (taskViewWidth - taskViewLeft)) {
				            cantMoveDragged = true;
			            }
		            } else {  //rtl content direction

			            //prevent dragging over left border of the task
			            if (pageX < draggedObjectWidth) {
				            cantMoveDragged = true;
			            }

						//prevent dragging over right border of the task
			            if((pageX - constants.draggedObjectOffset) > (taskViewLeft + taskViewWidth)) {
				            cantMoveDragged = true;
			            }

		            }

	            }

	            if(!cantMoveDragged) {
	                //place dragged div near mouse position
	                thi$.draggedElement.css({ 'top':pageY - constants.draggedObjectOffset,
		                                      'left':pageX - constants.draggedObjectOffset });

		            var screenY = (event.screenY || event.originalEvent.changedTouches[0].screenY);

		            thi$.prevDELTA = !!thi$.DELTA ? thi$.DELTA : 0;
		            thi$.DELTA = (thi$.Y - screenY);

		            var change = (thi$.DELTA * 1) + thi$.marginTop;

		            if (thi$.taskView) {

			            var answerInViewPort = Compat.elementInViewport(thi$.taskView.get(0), thi$.scrollableDiv.get(0));
			            var oldScrollTop = thi$.scrollableDiv.get(0).scrollTop, newScrollTop = 0;

			            if ((thi$.DELTA > 0) && (answerInViewPort.inTop == false)) { //answer top in not in view port
//				            console.log('scrolling up', change, ' delta=', thi$.DELTA);
				            if(thi$.prevDELTA < 0) { //switching scroll direction
					            thi$.scrollableDiv.stop();
				            }

				            newScrollTop = oldScrollTop - Math.abs(change); //scrolling up
				            thi$.scrollableDiv.css('overflow', 'hidden');
				            //thi$.scrollableDiv.get(0).scrollTop = newScrollTop; //scrolling up
				            thi$.scrollableDiv.animate({'scrollTop' : newScrollTop}, 100);

				            thi$.scrollableDiv.css('overflow', 'auto');
			            } //answer bottom in not in view port
			            else if ((thi$.DELTA < 0) && (!answerInViewPort.inBottom)) {
//				            console.log('scrolling down', change, ' delta=', thi$.DELTA);
				            if(thi$.prevDELTA > 0) { //switching scroll direction
					            thi$.scrollableDiv.stop();
				            }

				            newScrollTop = oldScrollTop + Math.abs(change); //scrolling down
			                thi$.scrollableDiv.css('overflow', 'hidden');
			                //thi$.scrollableDiv.get(0).scrollTop = newScrollTop; //scrolling down
				            thi$.scrollableDiv.animate({'scrollTop' : newScrollTop}, 100);
			                thi$.scrollableDiv.css('overflow', 'auto');
			            }
		            }

		            thi$.prevDraggedPosition = {'top' : pageY, 'left' : pageX};

	            } else {
                    if(ENV.behaviors.touch){
                        $(thi$.scrollableDiv).trigger(thi$.cfg.dndBehaviour.draggingLeave);
                    }
                    else{
                        thi$.removeDragElem();
                    }
                    
                    thi$.scrollableDiv.stop();

		            if(thi$.prevDraggedPosition) {
			            thi$.draggedElement.css(thi$.prevDraggedPosition);
		            }

		            return false;
	            }

                //in case dragged object is over multiSubAnswer object
                if (dndManager.overObject && dndManager.overObject.obj && (dndManager.overObject.obj.dndContainer == 'multiSubAnswer') && (dndManager.inDragObject.dndContainer != "bank")) {

                    if ((dndManager.overObject.left <= pageX && dndManager.overObject.right >= pageX)
                        && (dndManager.overObject.top <= pageY && dndManager.overObject.bottom >= pageY)) {
                        dndManager.overObject.obj.view.removePlaceHolder();
                        dndManager.overObject = null;
                    }

                }

                //if there is no current over element - check if now dragger element is over,
                //otherwise check for mouse leave over element
                var subAnswersDomArray = thi$.getSubAnswersDomArray();

                if (!dndManager.overObject) { //currently there is no over SubAnswer - check if mouse now over some subAnswer
                    thi$.checkMouseEnter(subAnswersDomArray, pageY, pageX, event);
                } else {  //check for mouse leave over element
                    thi$.checkMouseLeave(subAnswersDomArray, pageY, pageX, event);
                }
            }
        },

        /**
         * @name startDrag
         * @desc Creates dragged element, places it by the mouse location, binds mousemove and keydown events on the document, binds dropping event
         * @param event
         */
        startDrag : function(event, answerId) {
	        var pageX, pageY;

	        if((!event.pageY && !event.originalEvent) && event.data) {
		        event.pageX =  event.data.pageX;
		        event.pageY =  event.data.pageY;
		        event.screenX =  event.data.screenX;
		        event.screenY =  event.data.screenY;
	        }

            event.preventDefault();

            //create dragged element from current content clone
            this.draggedElement = this._content.clone();

            //put clone of the subAnswer child into dndManager
            dndManager.inDragObjectView = this._content.children().first().clone();
            dndManager.inDragObjectView.css('vertical-align', '');

            var fontSize = this.cfg.optimumFontSize || parseInt(this._content.css('font-size')), thi$ = this;

            //console.log('left: ' + event.pageY + ' top: ' + event.pageX + ' dndManager.overObject: ' + dndManager.overObject);
            pageX = (event.pageX ? event.pageX : (event.originalEvent ? event.originalEvent.touches[0].screenX : 0));
            pageY = (event.pageY ? event.pageY : (event.originalEvent ? event.originalEvent.touches[0].screenY : 0));

	        dndManager.draggElementClass = this.draggElementClass;

            //place dragged element according mouse position and set it's style
            this.draggedElement.attr('id', genId()).removeClass().addClass(this.draggElementClass).css(
                {   left:pageX - constants.draggedObjectOffset,
	                top:pageY - constants.draggedObjectOffset,
                    width: Compat.fullOuterWidth(this._content),
	                height:this._content.outerHeight(true),
	                'font-size':fontSize}).appendTo(jQuery(constants.appendCloneSelector))
	            .attr('answerId', answerId ? answerId : -1);

            jQuery(document).bind("mousemove", this.mmFunctionHandler);

            jQuery(document).bind('keydown', this.keyDownHandler);

	        if (this.taskView && this.taskView.length) {
		        this.Y = (  event.screenY ||
			               (event.originalEvent && event.originalEvent.changedTouches[0].screenY) ||
			               (event.pageY + document.body.scrollTop)
			             );
		        this.marginTop = this.taskView.css('margin-top').px2int();
	        }

            this.markAsEmpty();

            this.bindDroppingEvent(this.cfg.dndBehaviour.droppingEvent);

        },

        /**
         * @name bindDroppingEvent
         * @desc bind dropping event to the current dragged element
         * @param eventType 'mouseup'/'click'
         */
        bindDroppingEvent : function(eventType){ //droppingEvent : event type 'mouseup'/'click'	
        	var thi$ = this;

	        function fncDropping(e) {

		        // Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
		        e.stopImmediatePropagation();

		        if(!!ENV.behaviors.isTablet) {
			        e.stopPropagation();
			        e.preventDefault();
		        }

		        if (!dndManager.inDragObject) return;

		        var draggAnswerId = dndManager.inDragObject.answerId;

		        //dragged object is over dropped zone - do dropping and return to bank in case it's needed
		        if(!!dndManager.overObject && dndManager.overObject.obj.isEnabled()) {

			        (dndManager.overObject.obj.dndContainer !== 'bank') &&
			        dndManager.overObject.obj.droppingEvent(); //trigger dropping event of the current over subAnswer

			        //only after dropping event finished completely perform return option to bank (wait to callstack to empty)
			        function cancelDrag() {
				        var isReturnOptionToBank = false, overObjectDnDContainer = '';

				        try {
					        overObjectDnDContainer = dndManager.overObject.obj.dndContainer;
				        } catch(e) {
					        overObjectDnDContainer = '';
				        }

				        if(overObjectDnDContainer === 'bank'){  //dragged element is over bank
					        isReturnOptionToBank = true;
				        } else if ((!dndManager.afterDrop()) && (thi$.cfg.mode == 'dragAndDisable')){
					        isReturnOptionToBank = true;
				        }

				        if (isReturnOptionToBank) {
					        thi$.cancelDrag(true);
				        } else {
					        var isReturnToTheSource = false;

					        if (!dndManager.afterDrop() && (!dndManager.readyToDrop()) &&
						        (dndManager.inDragObject && dndManager.inDragObject.dndContainer != 'bank')) {
						        isReturnToTheSource = true;
					        }

					        thi$.cancelDrag(isReturnToTheSource);
				        }

			        }

			        setTimeout(cancelDrag, 0);

		        } else {

			        //if drop doesn't happened - return dragged element to the bank
			        setTimeout(function () {
				        if ((dndManager.inDragObject && dndManager.inDragObject.dndContainer == 'bank') && !dndManager.afterDrop()) {
					        thi$.dispatchEvent('returnOptionToBankEvent', {'draggAnswerId':draggAnswerId});
				        }
			        }, 0);

			        //remove draggable object
			        setTimeout(function() {
				        thi$.cancelDrag(!dndManager.afterDrop());
			        } , 100);
		        }

		        if (!!dndManager.isOverBank && !dndManager.overObject && !dndManager.afterDrop()) {
			        thi$.dispatchEvent('returnOptionToBankEvent', {'draggAnswerId':draggAnswerId});
		        }

		        if(!!ENV.behaviors.isTablet) {
			        return false;
		        }

	        }

		    jQuery(document).one(eventType, fncDropping);
            jQuery(thi$.draggedElement).on(eventType, fncDropping);
        	
        },

        /**
         * @desc cancel dragg - unbind mousemove event, remove dragged element, over element, in dragg object and set readyToDrop = false
         * @param returnToSource
         */
        cancelDrag : function(returnToSource){

            jQuery(document).unbind('mousemove', this.mmFunctionHandler)
	                        .unbind('touchmove', this.mmFunctionHandler)
                            .unbind('keydown',   this.keyDownHandler);

            if (!!returnToSource) {
                this.removeDragElem();	 	//move dragged element to the source and then remove it
            } else {
                this.fadeDragElem();     	//fade out dragged element in to the subAnswer
            }

            dndManager.overObject = null;     	//clear  current over Element (subAnswer)
        },

        /**
         * @desc on mousemove check if mouse cursor is over one of the subAnswers, if true - trigger mouseenter event of this subAnswer
         * @param subAnswersDomArray
         * @param y - mouse position
         * @param x - mouse position
         */
        checkMouseEnter : function(subAnswersDomArray, y, x, event){

            dndManager.readyToDrop(false);
            dndManager.isOverBank = false;
	        dndManager.overObject = null;

            //if there is no inDragObject - return
            if(!!!dndManager.inDragObject){
                return;
            }

        	// checking for 'over' position of dragging element
        	// if true - trigger mouseenter 
        	var thi$ = this,
				draggObjWidth = dndManager.inDragObject.view._view.outerWidth(),
				draggObjHeight = dndManager.inDragObject.view._view.outerHeight(),
				left_offset = x + draggObjWidth,
				right_offset = x - draggObjWidth,
				top_offset = y + draggObjHeight,
				bottom_offset = y - draggObjHeight;

	        var saBankDomArray = _.filter(subAnswersDomArray, function(saObj) {return saObj.obj.cfg.dndContainer == 'bank'});

	        
	        var bankElement = _.filter(dndManager.allItems, function(item) {				
				return item.dataTagName in {'bank' : 1, 'mtqbank' : 1}
			});

	        dndManager.isOverBank = false;
	        if (bankElement.length && dndManager.inDragObject.dndContainer !== "bank") {
		        var bankElem = document.getElementById(bankElement[0].view.cfg.id);
		        var bankClientRect = bankElem.getBoundingClientRect();
		        dndManager.isOverBank = (bankClientRect.left <= left_offset &&
			        bankClientRect.right >= right_offset &&
			        bankClientRect.top <= top_offset &&
			        bankClientRect.bottom >= bottom_offset);
	        }

	        if (dndManager.isOverBank) { //dragged element is over bank - return it to correct bank option
		        var sourceAnswerId = dndManager.inDragObject.answerId; //in drag element source id
		        //correct sab-answer inside bank
		        var tmpArr = _.filter(saBankDomArray, function (saObj) {
			        return saObj.obj.answerId == sourceAnswerId
		        });

		        if (tmpArr.length && bankElement.length) {
			        dndManager.isOverBank = true;
			        dndManager.overObject = tmpArr[0];
			        dndManager.readyToDrop(true);
			        dndManager.afterDrop(false);
			        !!bankElement[0].view && bankElement[0].view.markAsDroppable();
			        return;
		        }
	        } else {
		        !!bankElement[0] && !!bankElement[0].view && bankElement[0].view.markAsNotDroppable();
	        }

	        var saAreaDomArray = _.filter(subAnswersDomArray, function (saObj) {
		        return saObj.obj.cfg.dndContainer != 'bank'
	        });

	        if(this.cfg.IsPlaceholders === false) { //hidden multi sub-answer
		        var overSaInArea = _.filter(saAreaDomArray, function (saObj) {
                //console.log('saObj.top=', saObj.top, ' top_offset=', top_offset, ' saObj.bottom=', saObj.bottom, ' bottom_offset=', bottom_offset, ' saObj.id=', saObj.id);
                //console.log('saObj.left=', saObj.left, ' left_offset=', left_offset, ' saObj.right=', saObj.right, ' right_offset=', right_offset, ' saObj.id=', saObj.id);
		        return (saObj.left <= left_offset &&
				            saObj.right >= right_offset &&
				            saObj.top <= top_offset &&
				            saObj.bottom >= bottom_offset)
		        });
	        } else {
		        var overSaInArea = _.filter(saAreaDomArray, function (saObj) {
			        return ((saObj.left <= x) && (x <= saObj.right) &&
				            (saObj.top <= y) && (y <= saObj.bottom))
		        });
	        }

	        if(overSaInArea.length) {
		        dndManager.isOverBank = false;
		        dndManager.overObject = overSaInArea[0];

		        //if dragged element is over subAnswer inside multiSubAnswer - we need to get the multiSubAnswerObject in order to mark
		        //multiSubanswer as droppable + mark insertion point
		        if (dndManager.overObject.obj.dndContainer != 'multiSubAnswer' && dndManager.overObject.obj.droppable == false && !!dndManager.overObject.obj.cfg.ownerObject) {
			        var current_over_obj_id = dndManager.overObject.obj.cfg.ownerObject.view.cfg.id;
			        dndManager.overObject = thi$.getSubAnswerByDomId(current_over_obj_id, subAnswersDomArray);
		        }

		        if (!!dndManager.overObject.obj) {
			        if (dndManager.overObject.obj.setOverElement) {  //if over element has setOverElement function, call it
				        dndManager.overObject.obj.setOverElement(dndManager.overObject.obj);
			        }

			        if (dndManager.overObject.obj.setMousePosition) { //if over element has setMousePosition function, call it
				        dndManager.overObject.obj.setMousePosition(x, y);
			        }

			        dndManager.readyToDrop(true);

			        dndManager.overObject.obj.draggingEnter(event);
		        }

		        return;
	        }
        },

        /**
         * @desc getSubAnswerByDomId find subAnswer element by its DOM id
         * @param DomId
         * @param arrObj
         */
        getSubAnswerByDomId : function(DomId, arrObj){
            var subAnswerElement = null;
        	arrObj.forEach(function(arrElm){
        		if(arrElm.obj.view.cfg.id == DomId){
        			subAnswerElement = arrElm;
                    return false;
        		}
        	});
            return subAnswerElement;
        },
        
        /**
         * @desc getSubAnswerByIdAndContainer find subAnswer element by its answerId attribute and container
         * @param answerId
         * @param dndContainer
         */
        getSubAnswerByIdAndContainer : function(answerId, dndContainer){
        	var sAObject = null;
        	var arrObj = this.getSubAnswersDomArray();
        	arrObj.forEach(function(arrElm){        		
        		if(arrElm.obj.answerId == answerId && arrElm.obj.dndContainer == dndContainer){
        			sAObject = arrElm.jquery;
        		}
        	});
        	return sAObject;
        },
        
        /**
         * @desc on mousemove check if mouse leaved one of the subAnswers, if true trigger mouseleave
         * @param subAnswersDomArray
         * @param y
         * @param x
         */
        checkMouseLeave:function (subAnswersDomArray, y, x, event) {
	        event.stopImmediatePropagation();

	        if (!dndManager.inDragObject) {
		        return;
	        }

	        var isLeaved = ((dndManager.overObject.left > x || dndManager.overObject.right < x) ||
		        (dndManager.overObject.top > y) || dndManager.overObject.bottom < y);

	        if (isLeaved) {
		        //console.log('dndManager.overObject.left=', dndManager.overObject.left, ' x=', x, ' dndManager.overObject.right=', dndManager.overObject.right)
		        dndManager.overObject.obj.draggingLeave(event);
		        dndManager.overObject = null;
	        }
        },
        
        /**
         * @desc bind array of all subAnswers (object + jquery reference + position)
         * @returns {Array}
         */
        getSubAnswersDomArray:function () {
	        var sAnswersArray = [];

	        for (var elemId in dndManager.answerAreaItems) {
		        sAnswersArray.push(initSAElement(elemId, dndManager.answerAreaItems[elemId]));
	        }

	        for (var elemId in dndManager.bankItems) {
		        sAnswersArray.push(initSAElement(elemId, dndManager.bankItems[elemId]));
	        }

	        return sAnswersArray;
        },

        /**
         * @name removeDragElem
         * @desc Return dragged element to the bank (with animation) and then remove it.
         */
        removeDragElem : function () {
	        if (!this.draggedElement || !dndManager.inDragObject) return;

	        var containerToReturnTo = (dndManager.isOverBank) ? 'bank' : dndManager.inDragObject.dndContainer;

	        var returnAnswerId = (['mtq', 'bank'].indexOf(containerToReturnTo) >= 0) ? dndManager.inDragObject.answerId : dndManager.inDragObject.initAnswerId;

	        var elemToDrop = this.getSubAnswerByIdAndContainer(returnAnswerId, containerToReturnTo, this.getSubAnswersDomArray());

	        var isDoDrop = (containerToReturnTo == 'bank') ? false : !dndManager.afterDrop();

	        var dropAnswerId = dndManager.inDragObject.answerId;
	        var isDoDropToOwnerObject = false;
	        var ownerObject = null;

	        //not found element to return - return to it self
	        if ((elemToDrop == null) && (dndManager.inDragObject.dndContainer != 'bank')) {
		        var initAnswerId = jQuery(this.cfg.data).attr('answerId');
		        elemToDrop = this.getSubAnswerByIdAndContainer(initAnswerId, containerToReturnTo, this.getSubAnswersDomArray());
		        dndManager.overObject = elemToDrop;
	        } else if (elemToDrop == null) {
		        elemToDrop = this._view;
	        }

	        if ((elemToDrop == null) && (dndManager.inDragObject.cfg.ownerObject)) {  //in case of multiAnswer parent, return subAnswer to it
		        elemToDrop = dndManager.inDragObject.cfg.ownerObject.view._view;

		        if(elemToDrop.parent().length == 0) {
			        elemToDrop = jQuery(document.getElementById(dndManager.inDragObject.cfg.ownerObject.view.cfg.id));
		        }

		        ownerObject = dndManager.inDragObject.cfg.ownerObject;
		        isDoDropToOwnerObject = true;
	        }

	        if ((dndManager.inDragObject) && (dndManager.inDragObject.children.length > 0)) {
		        this.childReductionStep = dndManager.inDragObject.children[0].view.reductionStep;
		        this.childOptimumFontSize = dndManager.inDragObject.children[0].view.optimumFontSize;
	        }

	        var thi$ = this;

	        var offset = elemToDrop.offset ? { left:elemToDrop.offset().left, top:elemToDrop.offset().top } :
	        {left:elemToDrop[0].getBoundingClientRect().left, top:elemToDrop[0].getBoundingClientRect().top};
	        var animateTo = offset ? offset : false;

	        function endOfAnimation() {

		        thi$.markAsNotDroppable();

		        function removeDraggedElement() {
			        clearDnDManagerDrag(thi$);

			        if (thi$.draggedElement) {
				        jQuery(document.getElementsByClassName(this.draggElementClass)).remove();
				        thi$.draggedElement.remove();
				        thi$.draggedElement = null;
			        }

			        // Animation ended, resume dragging other objects. */
			        dndManager.animated(false);
		        }

		        if (!!ownerObject && !!isDoDropToOwnerObject) { //mtq
			        ownerObject.dispatchEvent('doDroppingEvent', {'dropAnswerId':dropAnswerId, 'callback' : removeDraggedElement.bind(thi$)});
		        } else if (!!elemToDrop && !!isDoDrop) {
			        //perform dropping event
			        thi$.dispatchEvent('doDroppingEvent', {'dropAnswerId':dropAnswerId, 'callback' : removeDraggedElement.bind(thi$)});
		        } else {
			        thi$.dispatchEvent('returnOptionToBankEvent', {'draggAnswerId':dropAnswerId, 'callback' : removeDraggedElement.bind(thi$)});
		        }
	        }

	        if(animateTo) {
		        // Animation started, prevent dragging other objects. */
		        dndManager.animated(true);
		        this.draggedElement.animate(animateTo, constants.timeoutAnimationSec, endOfAnimation);
	        } else {
		        endOfAnimation();
	        }
        },

        /**
         * @name fadeDragElem
         * @desc Fade out dragged element into the subAnswer (answer area), and then remove it.
         */
        fadeDragElem : function () {
	        if (!this.draggedElement) {
		        this.draggedElement = jQuery(document.getElementsByClassName(this.draggElementClass));
	        }

	        if (!this.draggedElement) return;

	        var thi$ = this;

	        // Animation started, prevent dragging other objects. */
	        dndManager.animated(true);

	        this.draggedElement.fadeOut(constants.timeoutFadeOutSec, 'linear', function () {
		        fncEndOfAnimation();
	        });

	        function fncEndOfAnimation() {
		        clearDnDManagerDrag(thi$);

		        if (thi$.draggedElement) {
			        thi$.draggedElement.remove();
			        thi$.draggedElement = null;
		        }

		        // Animation ended, resume dragging other objects. */
		        dndManager.animated(false);
	        }

        },

        /**
         * @name bindDNDEvents
         * @desc bind all events from events map
         * @param dndEvents
         */
        bindDNDEvents : function (dndEvents) {
	        var thi$ = this;

	        dndEvents = jQuery.unique(dndEvents);

	        var lastEvent = '';
	        function bindEvents(index, dndEvent) {

		        function handleEvent(event, data) {
			        event.preventDefault();

			        if (!!dndManager.animated()) {
				        return false;
			        }

			        //prevent mouseUp double firing
			        if ((event.type == 'mouseup') && (lastEvent == event.type)) {
				        lastEvent = (event.type);
				        return false;
			        }

			        if (!!data) {
				        event.data = data;
			        }

			        thi$.dispatchEvent('catchEvent', event, data);

			        lastEvent = (event.type);
		        }

		        thi$._view.bind(dndEvent, handleEvent);
	        }

	        jQuery.each(dndEvents, bindEvents);
        },
	        
        /**
         * @name markAsDraggable
         * @desc mark subAnswer as draggable object
         */
        markAsDraggable : function () {
	        this._content.removeClass('not_droppable').addClass('draggable');
        }
        ,
        /**
         * @name markAsNotDraggable
         * @desc mark subAnswer as not draggable object
         */
        markAsNotDraggable: function () {
	        this._content.removeClass('draggable');
        }
        ,
        /**
         * @name markAsDroppable
         * @desc mark subAnswer as droppable object
         */
        markAsDroppable : function () {
			this._content.removeClass('not_droppable').addClass('droppable');
        },
        /**
         * @name markAsNotDroppable
         * @desc mark subAnswer as not droppable object
         */
        markAsNotDroppable : function () {
			this._content.removeClass('droppable').addClass('not_droppable');
        },
        /**
         * @name markAsEnable
         * @desc mark subAnswer as enabled object
         * @param removeReusable
         */
        markAsEnable : function (removeReusable) {
	        var thi$ = this;

	        if (!!removeReusable) {
		        thi$._content.removeClass('disabled');
		        thi$._content.removeClass('reusable');
	        } else {
		        thi$._content.removeClass('disabled');
		        thi$._content.removeClass('reusable');
	        }

        }
        ,
        /**
         * @name markAsDisable
         * @desc mark subAnswer object as disabled object
         */
        markAsDisable : function () {
	        this._content.addClass('disabled');
        }
        ,
        /**
         * @name markAsReusable
         * @desc mark subAnswer as reusable object
         */
        markAsReusable : function () {
	        this._content.addClass('reusable');
        }
        ,
        /**
         * @name removeAllMarks
         * @desc remove all marks from subAnswer object
         */
        removeAllMarks : function () {
	        if (this.cfg.dndContainer == 'bank') { //mark all bank as not droppable zone
		        var parentElem = this._view.parent().parent();
		        parentElem.removeClass('draggable').removeClass('droppable').removeClass('not_droppable');
	        } else {
		        this._content.removeClass('draggable').removeClass('droppable').removeClass('not_droppable').removeClass('full').removeClass('disabled');
		        this._view.removeClass('wrong').removeClass('correct').removeClass('partlyCorrect').removeClass('system_correct');
	        }
        }
        ,
        /**
         * @name markAsFull
         * @desc mark subAnswer as full (has content - child)
         */
        markAsFull : function () {
	        this._content.addClass('full');
        }
        ,
        /**
         * @name markAsEmpty
         * @desc mark subAnswer as empty (without content - child)
         */
        markAsEmpty : function () {
	        this._content.removeClass('full');
        }
        ,
        /**
         * @name markAsCorrect
         */
        markAsCorrect: function () {
	        this._view.removeClass('wrong').removeClass('partlyCorrect');
	        this._view.addClass('correct');
	        this.cfg.state = 'correct';
        }
        ,
        /**
         * @name markAsPartiallyCorrect
         */
        markAsPartiallyCorrect : function () {
	        this._view.removeClass('wrong');
	        this._view.addClass('partlyCorrect');
	        this.cfg.state = 'partlyCorrect';
        }
        ,
        /**
         * @name markAsSystemCorrect
         */
        markAsSystemCorrect : function () {
	        if (this.cfg.state != 'correct') {
		        this._view.removeClass('correct').addClass('system_correct');
	        } else {
		        this.markAsCorrect();
	        }
        }
        ,
        /**
         * @name markAsWrong
         */
        markAsWrong: function () {
	        this.markAsFull(); //for empty sub-answers
	        this._view.removeClass('correct');
	        this._view.addClass('wrong');
	        this.cfg.state = 'wrong';
        }
        ,
        /**
         * @name isMarkedAsCorrect
         */
        isMarkedAsCorrect: function () {
	        return this._view.hasClass('correct');
        }
        ,
        /**
         * @name isMarkedAsCorrect
         */
        isMarkedAsSystemCorrect: function () {
	        return this._view.hasClass('system_correct');
        }
        ,
        /**
         * @name isMarkedAsWrong
         */
        isMarkedAsWrong : function () {
	        return this._view.hasClass('wrong');
        }
        ,
        /**
         * @name isMarkedAspartiallyCorrect
         */
        isMarkedAspartiallyCorrect : function () {
	        return this._view.hasClass('partlyCorrect');
        }
    });

 // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // Private Functions.
 // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * @name cancelEvent
     * @param e
     * @return {Boolean}
     */
    function cancelEvent(e) {
        e = e ? e : window.event;
        if (e.stopPropagation)
            e.stopPropagation();
        if (e.preventDefault)
            e.preventDefault();
        e.cancelBubble = true;
        e.cancel = true;
        e.returnValue = false;
        return false;
    }

    /**
     * @name initSAElement
     * @param elemId
     * @param elemObj
     * @return {Object}
     */
    function initSAElement(elemId, elemObj){
    	var sAnswerObj = {};
		sAnswerObj.id = elemId;
		sAnswerObj.obj = elemObj;
		sAnswerObj.jquery = Perf.select('#' + elemId);

	    try {
		    sAnswerObj.left = sAnswerObj.jquery.offset().left;
		    sAnswerObj.top = sAnswerObj.jquery.offset().top;
		    sAnswerObj.right = sAnswerObj.left + sAnswerObj.jquery.outerWidth(false);
		    sAnswerObj.bottom = sAnswerObj.top + sAnswerObj.jquery.outerHeight(false);

	    } catch (e) {
		    dndManager.removeSubAnswer(elemId, true);
	    }

		return sAnswerObj;
    }

    /**
     * @name clearDnDManagerDrag*
     */
    function clearDnDManagerDrag(thi$){
		dndManager.inDragObject = null;
		dndManager.readyToDrop(false);
    	dndManager.afterDrop(false);
        dndManager.inDragObjectView = null;
	    //cancel all animations
	    thi$.scrollableDiv && thi$.scrollableDiv.stop(true, true);
    }
})();
////////////////////////////////////////
// SRC End --> t2k/component/subAnswer/SubAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/subAnswer/SubAnswer.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.subAnswer.SubAnswer
     * @desc A subAnswer class
     * @namespace t2k.component.subAnswer
     * @extends t2k.component.Composite
     * @type {Object}
     */

    var constants = t2k.component.subAnswer.SubAnswerConstants;

    t2k.component.subAnswer.SubAnswer = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.subAnswer.SubAnswer',

        /**
         * @name ctor
         * @param config
         * @desc constructor
         */
        ctor: function(config) {

            var newConfig;

            // if (special configuration), get configuration from special configuratoin
            if (config.specialConfiguration){
                newConfig = copy({}, config.specialConfiguration);
                newConfig.parent = config.parent;
                newConfig.data = config.data;
                newConfig.container = config.container;
                newConfig.insertBefore = config.insertBefore;
                newConfig.showMFEmptyIcon = config.showMFEmptyIcon || config.specialConfiguration.showMFEmptyIcon;
                newConfig.dummyMode = config.dummyMode;

                delete newConfig.onRendered;
                newConfig.onRendered = config.onRendered;

            } else {
                newConfig = copy({}, config);
            }
            // Delegate
            var thi$ = this;

            this._super(newConfig);

            this.initParams();

            this.initView();

            // Create the answers objects : (correct, partiallyCorrect, incorrectPredicted)
            override(this.cfg, prepareConfiguration(this.cfg.data));

            this.startComposite2({
                fontColor : thi$.cfg.fontColor,
                style : thi$.childStyle,
                maxChar : this.fieldsSize,
                widthEm : this.fieldsWidth,
                reductionStep : thi$.cfg.reductionStep,
                optimumFontSize : thi$.cfg.optimumFontSize,
                setFontSize : thi$.cfg.setFontSize,
                lineHeightConfig : thi$.cfg.lineHeightConfig || 'keepEven',
                showMFEmptyIcon : thi$.cfg.showMFEmptyIcon,
                parent: this.view.cfg.id + '_content',
                setAnswer : function(flag) {
                    thi$.containsAnswer = flag;
                },
                firstKeyDown : thi$.cfg.firstKeyDown,
                dontEnableBlowup : true,
                minimumReadable : 0.3,
                maxReduction_minReadable : true,
	            taskmode : thi$.cfg.taskmode,
                onAbsMin : function(){},
                dummyMode : this.cfg.dummyMode,
                viewObject:  (dndManager.inDragObject &&  dndManager.inDragObject.children.length )? (dndManager.inDragObject.children[0].view._view).clone() : null
            });

            var childName = '';

            if(this.children.length > 0) {
                childName = this.children[0].name.split('.');
                childName = childName[childName.length-1].toLowerCase();
            }

            // check disabled space eating (override)
        	// in child component is imageViewer, disable spaceEating (layouter)
        	this.layout.disableSpaceEating = function(){
            	return (childName == 'imageviewer');
            };

            this.view._initHint();
            this.view._initMarkupForEmptySA();
            this.view.setStyleByChild(childName);
            this.initFullSubAnswer();

        },

        /**
         * @name initParams
         * @desc parameters initialization
         */
        initParams : function() {

	        var $data = jQuery(this.cfg.data);

            this.hint = $data.find('hint');   //hint tag

            /**
             * @desc subAnswer answerId MUST be unique per task
             * @type {Number}
             */
            this.answerId = $data.attr('answerId') || $data.children('answerId').text() || 0;

            /**
             * @const
             * @desc subAnswer answerId MUST be unique per task
             * @type {Number}
             */
            this.initAnswerId = $data.attr('answerId') || $data.children('answerId').text() || 0;

            /**
             *@desc id the sub answer related to this bank item - relevant only for bank subanswer
             *
             */
             if(!!$data.attr('originalid')){
                this.originalid = $data.attr('originalid');
             }

            /**
             * @property
             * @type {Boolean}
             */
            this.caseSensitive = $data.find('check caseSensitive').text() === "true";

            /**
             * @property
             * @type {Boolean}
             */
            this.punctuationMarks = $data.find('check punctuationMarks').text()  === "true";

            /**
             * @property
             * @type {String}
             */
            this.sampleMatchMode = $data.find('sampleMatchMode').text() || null;

            /**
             * @property
             * @type {Boolean}
             */
            this.resetIncorrect = this.cfg.resetIncorrect;  // resetIncorrect flag

	        this.checkAnswerOnState = this.cfg.checkAnswerOnState;

            /**
             * @property
             * @type {String}
             */
            this.dndMode = this.cfg.mode;

            /**
             * @property
             * @type {String}
             * @desc ()
             */
            this.dndContainer = this.cfg.dndContainer;

            /**
             * @property
             * @type {String}
             */
            this.childStyle = this.cfg.style;

            /**
             * @property
             * @type {String}
             */
            this.fieldsSize = this.cfg.fieldsSize;  //chars number of subAnswer child component
             /**
             * @property
             * @type {int} em
             */

            this.fieldsWidth = this.cfg.fieldsWidth;

            /**
             * @property
             * @type {Boolean}
             */
            this.droppable;

            /**
             * @property
             * @type {Boolean}
             */
            this.draggable;

            this.afterDrag;
            this.afterDrop;
            this.beforeDrop;
            this.eventsMap = [];

            this.state;
            this.correct = 'false';
        },

        /**
         * @name setMyState
         * @desc override - set state of component
         * @param state
         */
        setMyState : function(state) {
            this.state = state;

            if (!!state) {
                var thi$ = this, $state = jQuery(state);

	            this.answerId = $state.children('answerId').text().trim();
	            this.setEnabled($state.attr('enabled') === 'true');
	            this.setAnswer($state.children('isAnswer').text() === 'true');

	            if(    (["write", "dragAndDropToMultiAnswer"].indexOf(this.cfg.mode) < 0)
		            && (this.dndContainer != "bank")){ //not child of hidden multi subanswer or writable
	                this.reset();
	            }

	            //set answerId and enabled flag after reset
                this.answerId = $state.children('answerId').text().trim();
	            this.setEnabled($state.attr('enabled') === 'true');

                if (this.answerId != 'undefined') {
                    this.containsAnswer = ($state.children('isAnswer').text() === 'true');

                    if (this.isAnswer()) { //there is an answer in this subAnswer
                        // dragged object bank source option - get, parse and send to factory
                        var sourceElement = dndManager.getBankItem(this.answerId);

	                    if(!sourceElement || !sourceElement.children.length) {
		                    sourceElement = dndManager.getItem(this.answerId);
	                    }

	                    if (sourceElement && sourceElement.children.length &&
		                    ["write", "dragAndDropToMultiAnswer"].indexOf(this.cfg.mode) < 0) { //not child of hidden multi subanswer or writable
		                    this.view.replaceChild(sourceElement); //remove subAnswer child and replace it with new one (source of the dragged object)
		                    dndManager.afterDrop(true);    //set after drop flag - true
	                    }

	                    thi$.setAnswer(thi$.children.length > 0);  //mark this subAnswer as answered after drop

                        if (typeof thi$.cfg.firstKeyDown == 'function') { //check for function existance
	                        thi$.cfg.firstKeyDown();    //trigger progress event of the task
                        }

                        this.applyAfterDrop(this.answerId, this.isEnabled() && this.cfg.bankMode == 'dragAndCopy');
                    }

	                if(!this.checkAnswerOnState) { //checking is handled not by state
		                thi$.view.removeAllMarks();

		                if(!thi$.isEmpty()) {
			                thi$.markAsFull();
		                }

	                    //apply checking marks
		                if ($state.children('correct').text() === 'true') thi$.markAsCorrect();
		                if ($state.children('wrong').text() === 'true') thi$.markAsWrong();
		                if ($state.children('systemCorrect').text() === 'true') thi$.markAsSystemCorrect();
		                if ($state.children('partiallyCorrect').text() === 'true') thi$.markAsPartiallyCorrect();
	                }
                    if ($state.children('lockSubanswerBankState').text() === 'true') thi$.lockSubanswerBankState = true;

                }

	            $state = null;

            }
        },

        /**
         * @name addMyState
         * @desc returns component state
         * @return {Object}
         */
        addMyState : function() {
	        var state = jQuery('<state/>').append(jQuery('<answerId/>').text(this.answerId));

	        if (this.dndContainer != 'bank') {
			    state.append(jQuery('<isAnswer/>').text(this.isAnswer()));
	        }

	        state.append(jQuery('<id/>').text(this.view.cfg.id))
		         .append(jQuery('<correct/>').text(this.isMarkedAsCorrect() || false))
		         .append(jQuery('<systemCorrect/>').text(this.isMarkedAsSystemCorrect() || false))
		         .append(jQuery('<wrong/>').text(this.isMarkedAsWrong() || false))
		         .append(jQuery('<partiallyCorrect/>').text(this.ispartiallyCorrect() || false))
                 .append(jQuery('<lockSubanswerBankState/>').text(this.lockSubanswerBankState || false));

	        if(this.cfg.mode == "dragAndDropToMultiAnswer") { //multi subanswer hidden - add state of sab answer child
		        //create children state
		        var childState, childrenState = Perf.create('children');  //children state;

		        this.children.forEach(function(child, index) {
			        var childState = jQuery(child.cfg.data);
			        if (childState) {
				        childState.attr('index', index);
				        state.append(childrenState.append(childState.clone()));
				        state.append(childState.clone());
			        }
		        });
	        }

            return state;
        },

        /**
         * @name setEnabled
         * @param flag {Boolean}
         * @param removeReusable
         */
        setEnabled: function(flag, removeReusable) {

	        this._super(flag);

	        if (this.cfg.mode !== "write") {
		        this.manageSALists();
	        }

            if(!this.lockSubanswerBankState){
                if (flag) {

	                if (this.cfg.mode !== "write") {
		                //empty sub-answer or inside multi sub-answer
		                if (!this.isAnswer() || (this.dndMode == "dragAndDropToMultiAnswer")) {
			                this.analizeDNDMode(this.dndMode);
		                }

		                this.manageDND();
	                }

                    this.view.markAsEnable(removeReusable || false);
                } else {
                    this.view.markAsDisable();
                }
	        }
        },
        resetBankLockState: function(){
            this.lockSubanswerBankState = false;
        },

        /**
         * @name getSize
         */
        getSize : function() {
          return this.view.getSize();
        },

        /**
         * @name initView
         * @desc view initialization, in case task in dndMode init all related events and fill dnd parameters
         */
        initView : function() {
            var thi$ = this;

            //set subanswer size
            if( this.cfg.fieldsSizeMode =="manual"){
                var maxVal = 0 ;
                var isMathfield;
                jQuery(this.cfg.data).find('ans_option').each(function(index, ansOptionElement){
                    var answerWidth = 0;
                    var widthEm = jQuery(ansOptionElement).attr('widthem');
                    if(widthEm && widthEm.length){
                        answerWidth = parseInt(widthEm);
                    }else{
                        answerWidth = jQuery(ansOptionElement).text().length;
                    }
                    if(answerWidth > maxVal){
                        maxVal = answerWidth;
                        isMathfield = widthEm && widthEm.length;

                    }
                });

                this.fieldsSize = maxVal * (isMathfield ? constants.additionalWidthFactor : 1 );
                this.fieldsWidth = maxVal * (isMathfield ? constants.additionalWidthFactor : 1 );;
            }

            // check if DND functionality is allowed on this component
            if (this.dndMode && this.dndMode != 'write') {

                // analyze DND mode
                this.analizeDNDMode(this.dndMode);

                var selectedDNDBehaviour = (ENV.behaviors.dragAndDropBehaviorTablets ? ENV.behaviors.dragAndDropBehaviorTablets : ENV.dragAndDropBehavior);

                this.dndBehaviour = this.analizeDNDBehaviour(selectedDNDBehaviour);
                this.dndEventsNames = this.registerDNDEventsNames();

	            function analizeEvent(event) {
		            var eventMeaning = thi$.eventsMap[event.type];  //event meaning translation by the event type

		            if ((thi$.dndBehaviour.startDraggingEvent == thi$.dndBehaviour.droppingEvent) //in case of equal event types
			            && ((thi$.eventsMap[event.type] == 'droppingEvent') || (thi$.eventsMap[event.type] == 'startDraggingEvent'))) {
			            eventMeaning = (dndManager.inDragObject) ? 'droppingEvent' : 'startDraggingEvent';
		            }

		            if (event.type === "touchend") { //can be droppingEvent on over element or draggingLeave - 2 special cases

			            if (!dndManager.overObject) {
				            thi$.view.mouseMoveHandler(event);  //check if mouse over some subAnswer
			            }

			            if (!!dndManager.overObject) {  //droppingEvent
				            event.preventDefault();
				            dndManager.overObject.obj.droppingEvent(event);
				            /* if (dndManager.afterDrop()) {  //after drop remove draggable object
				             thi$.view.cancelDrag(false);
				             } else if (dndManager.overObject.obj.dndContainer == "bank") { //over bank
				             dndManager.overObject.obj.draggingLeave(event);
				             thi$.view.draggedElement.touchend(); //TODO: check it
				             thi$.view.cancelDrag(true);
				             }

				             } else if (!!thi$.view.draggedElement) { //draggingLeave
				             thi$.view.draggedElement.touchend();
				             }*/
				            return false;
			            }
		            }

		            //cloze subAnswer prevent drop to it self when subanswer is full
		            if (thi$.dndContainer != 'bank' && thi$.containsAnswer && eventMeaning == 'draggingEnter') {
			            if (dndManager.inDragObject) {
				            if (dndManager.inDragObject.dndContainer != 'bank') {
					            if (dndManager.inDragObject.answerId == thi$.answerId) {
						            return false;
					            }
				            }
			            }
		            }

		            switch (eventMeaning) {
			            case 'startDraggingEvent' :
				            thi$.startDraggingEvent(event);
				            break;
			            case 'draggingEnter' :
				            thi$.draggingEnter(event);
				            break;
			            case 'draggingLeave' :
				            thi$.draggingLeave(event);
				            break;
			            case 'droppingEvent' :
				            thi$.droppingEvent(event);
				            break;
		            }
	            }

                this.view = this.createNewView(t2k.component.subAnswer.SubAnswerView, override(copy(this.cfg, {elHint: this.hint}), {

                    registerEvents : this.dndEventsNames,
                    dndBehaviour : this.dndBehaviour,

                    events : {
                        catchEvent : analizeEvent,

                        doDroppingEvent:function (config) {
	                        setTimeout(function() {
                                var event = jQuery.Event(thi$.dndBehaviour.droppingEvent);
                                thi$.droppingEvent(event, config.dropAnswerId);
		                        config.callback && config.callback();
	                        }, 0)
                        },

                        returnOptionToBankEvent : function(config) {
	                        enableBankOption(config.draggAnswerId, true);
	                        thi$.answerId = thi$.initAnswerId;  //return initial answerId
	                        config.callback && config.callback();
                        },

	                    createChildren:function (config) {
		                   thi$.createChildren(config);
		                   config.callback && config.callback();
	                    }
                    }
                }));

            } else {  //not dndMode
                this.view = this.createNewView(t2k.component.subAnswer.SubAnswerView, copy(this.cfg, {elHint: this.hint}));
            }

            if (!!this.cfg.content_css) {  //apply some css to content div
                this.view._content.css(this.cfg.content_css);
            }
	    },

	    createChildren: function(config) {
		    //remove children
		    this.removeChildren();

		    var newComponent = componentFactory.create({data:config.xml,
			    parent:config.subanswer_content_id,

			    setAnswer:function (flag) {
				    this.containsAnswer = flag;
			    },
			    fontColor:this.cfg.fontColor,
			    style:this.childStyle,
			    width:config.width,
			    maxChar:this.cfg.fieldsSize,
                width: this.cfg.fieldsWidth,
			    container:config.container,
			    reductionStep:config.childReductionStep,
			    optimumFontSize:config.childOptimumFontSize,
			    lineHeightConfig:this.cfg.lineHeightConfig || 'keepEven',
			    dontEnableBlowup:true,
			    applyAbsoluteMinimum:false,
			    minimumReadable:0.3,
			    maxReduction_minReadable:true,
			    onRendered:function () {
			    },
			    onAbsMin:function () {
			    },
			    viewObject:config.viewOfSourceElement,
			    taskmode:config.taskmode
		    });

		    if (newComponent) {
			    this.add(newComponent);
			    newComponent.setEnabled(true);
			    this.setAnswer(true);
		    }
	    },

        /**
         * @name getElementSize
         */
        getElementSize : function() {
            return this.view.getElementSize();
        },

        /**
         * @name setElementSize
         * @param elementSizes
         */
        setElementSize : function(elementSizes) {
            this.view.setElementSize(elementSizes);
        },

        /**
         * @name resetElementSize
         */
        resetElementSize : function() {
            this.view.resetElementSize();
        },

        /**
         * @name analizeDNDMode
         * @param dndMode
         */
        analizeDNDMode : function(dndMode) {
            var dndModeConfig = t2k.component.subAnswer.SubAnswerConstants.dndModes[dndMode];  //clickAndDrop or dragAndDrop

            if (dndModeConfig) {
                this.droppable = dndModeConfig.droppable;
                this.draggable = dndModeConfig.draggable;
                this.afterDrag = dndModeConfig.afterDrag;
                this.afterDrop = dndModeConfig.afterDrop;
                this.beforeDrop = dndModeConfig.beforeDrop;
            }

        },
        /**
         * @name analizeDNDBehaviour
         * @desc usually it's dragAndDrop. In case of tablet PC may be clickAndDrop
         * @param dndBehaviour
         */
        analizeDNDBehaviour :function(dndBehaviour) {
            var dndBehavioursConfig = t2k.component.subAnswer.SubAnswerConstants.dndBehaviour[dndBehaviour]; //event mapping object of the current behavior
            return dndBehavioursConfig;
        },

        /**
         * @name manageDND
         */
        manageDND : function() {
            // if the component is draggable add to DNDManager draggables
            if (!!this.draggable) {
                dndManager.addDraggable(this.view.cfg.id, this);
            } else {
                dndManager.removeDraggable(this.view.cfg.id);
            }

            // if the component is droppables add to DNDManager droppables
            if (!!this.droppable) {
                dndManager.addDroppable(this.view.cfg.id, this);
            } else {
                dndManager.removeDroppable(this.view.cfg.id);
            }
        },
        /**
         * @name manageSALists
         */
        manageSALists : function() {
	        dndManager.addItem(this.view.cfg.id, this);

            if (this.dndContainer == 'bank') {
                dndManager.addBankItem(this.view.cfg.id, this);
            } else {
                dndManager.addAnswerAreaItem(this.view.cfg.id, this);
            }
        },

        /**
         * @name registerDNDEventsNames
         * @desc run through DND Behaviour map, check if event handler exists in the class and add it to events map, returns dndEventsArray
         * @returns {Array}
         */
        registerDNDEventsNames : function() {
            var thi$ = this;
            var dndEventsArray = [];
            for (var dndEvent in this.dndBehaviour) {  // loop the array and check for double values
                //if (jQuery.inArray(dndEvent, thi$.eventsMap) == -1) { //check for event existence in the events map array
                    dndEventsArray.push(this.dndBehaviour[dndEvent]);
                    thi$.eventsMap[this.dndBehaviour[dndEvent]] = dndEvent;
                //}
            }
            return dndEventsArray;
        },

        /**
         * @name draggingEnter
         * @param event
         * @desc 2 cases: 1. if inDragObject == true - check if i'm droppable (yes - handleCanDrop || no - handleCantDrop)
         *             else {
         *                     check if i'm draggable (yes - handleCanDrag || no - handleCantDrag)
         *                     (mostly - handleCantDrag will do nothing)
         *             }
         */
        draggingEnter : function(event) {
            //console.log('id:' + this.view.cfg.id + ' this.droppable: ' + this.droppable + ' this.draggable:' + this.draggable);
            if (dndManager.isInDragMode()) {
                var isReplaceEnable = true;

                if ((this.dndMode == 'dragAndDropNoReplace') && (this.isAnswer()) && (dndManager.inDragObject.dndContainer != 'bank')) {
                    isReplaceEnable = false;
                }

                dndManager.readyToDrop(false);

                if (this.droppable && isReplaceEnable) {
                    dndManager.readyToDrop(true);
                    this.view.markAsDroppable();
                } else {
                    if ((this.cfg.dndContainer != 'bank') && (dndManager.inDragObject.view.cfg.id != this.view.cfg.id)) { //bank is always droppable
                        this.view.markAsNotDroppable();
                    } else {
                        this.view.markAsDroppable();	//draggable object is over his source - allow to drop
                    }
                }

            } else {
                if (this.draggable && !!this.isEnabled()) { //handleCanDrag
                    this.view.markAsDraggable();
                } else { //handleCantDrag
                    this.view.markAsNotDraggable();
                }
            }
        },
        /**
         * @name draggingLeave
         * @desc 2 cases: 1. leave without dropping (reverse mouseEnter)
         *          2. leave after dropping
         *
         *          remove all dragging related css styles
         */
        draggingLeave : function(event) {
            if (!!this.isEnabled()) {
                if (this.dndContainer != 'bank' && dndManager.isInDragMode()) {
                    if (!this.isEmpty()) {
                        this.view.removeAllMarks();
                        this.markAsFull();
                    } else {
                        this.view.markAsNotDraggable();
                        this.view.markAsNotDroppable();
                        this.markAsEmpty();
                    }
                } else if (this.dndContainer != 'bank' && this.isEmpty()) {
                    this.view.removeAllMarks();
                } else if (this.dndContainer == 'bank') {
                    this.view.markAsNotDraggable();
                    this.view.markAsNotDroppable();
                }
            }
        },
        /**
         * @name applyAfterDragg
         * @desc applying after dragg parameters for subAnswer
         */
        applyAfterDragg : function(isEnableBank) {

            this.draggable = false;
            this.droppable = false;

            if (this.afterDrag) {
                var thi$ = this;

                var afterDragParams = this.afterDrag.split(',');
                for (var param in afterDragParams) {
                    switch (afterDragParams[param]) {
                        case 'draggable' :
                            thi$.draggable = true;
                            break;
                        case 'dropabble' :
                            thi$.droppable = true;
                            break;
                        case 'markSourceAsReusable' :
                            thi$.view.markAsReusable();
                            break;
                        case 'delete' :  //delete content
                            thi$.deleteSubAnswerChild(isEnableBank);
                            break;
                        case 'deleteSubAnswer' :
                            thi$.deleteSubAnswer(isEnableBank);
                            break;
                        case 'disable' :
                            thi$.setEnabled(false);
                            this.lockSubanswerBankState = true;
                            break;
                    }
                }
            }


            this.manageDND();

        },

        /**
         * @name startDraggingEvent
         * @desc  handling of the dragging event, creating draggable element and call applyAfterDragg method
         * @param event
         */
        startDraggingEvent : function(event) {
            if (!!dndManager.canDrag(this.view.cfg.id) && !!this.isEnabled()) {
                dndManager.startDrag(this.view.cfg.id);
                dndManager.afterDrop(false);
                dndManager.readyToDrop(false);

                this.view.startDrag(event, this.answerId);

                this.applyAfterDragg(false);

            }
        },
        /**
         * @name droppingBySystemEvent
         * @param dropAnswerId
         * @desc performing dropping event programmatic
         */
        droppingBySystemEvent : function(dropAnswerId) {
            // dragged object bank source option - get, parse and send to factory
            var draggSourceElement = dndManager.getItem(dropAnswerId);

	        if (!draggSourceElement || (draggSourceElement && !draggSourceElement.children.length)) {
		        draggSourceElement = dndManager.getBankItem(dropAnswerId);
	        }

            if (!!draggSourceElement && !!draggSourceElement.children.length) {
	            this.view.replaceChild(draggSourceElement);        //replace subAnswer child

	            dndManager.afterDrop(true);     //set after drop flag - true

	            this.setAnswer(this.children.length > 0);  //mark this subAnswer as answered after drop

	            if (typeof this.cfg.firstKeyDown == 'function') { //check for function existence
		            this.cfg.firstKeyDown();    //trigger progress event of the task
	            }

	            this.applyAfterDrop(dropAnswerId, false);

	            (this.cfg.IsBank !== true) && dndManager.afterDrop(false);
            }
        },
        /**
         * @name checkIfDroppableNoReplace
         * @desc perform check for no replace between subAnswers allowed or only drop from bank
         */
        checkIfDroppableNoReplace : function() {
            var IsDroppableNow = true;

            if (this.isAnswer() && (dndManager.inDragObject.dndContainer != 'bank')) {
                IsDroppableNow = false;
            }

            return IsDroppableNow;
        },

        /**
         * @name droppingEvent
         * @desc handling of the dropping event: clear subAnswer child and create new one from the dndManager.inDragObject
         * mark this subAnswer as answered, fire afterDrop event*
         */
        droppingEvent:function (event, dropAnswerId) {

	        var IsBank = this.cfg.IsBank;
	        if (typeof IsBank == 'undefined') {
		        IsBank = true;
	        }

	        if (!!dropAnswerId) {

		        this.droppingBySystemEvent(dropAnswerId);

	        } else if (!!dndManager.canDrop(this.view.cfg.id) && !!this.isEnabled()) {

		        var isDroppableNow = true;
		        var beforeDropParams = this.beforeDrop.split(',');
		        for (var param in beforeDropParams) {
			        switch (beforeDropParams[param]) {
				        case 'checkIfDroppableNoReplace' : //check if subAnswer is full and then set this SA in bank enable
					        isDroppableNow = this.checkIfDroppableNoReplace();
					        break;
			        }
		        }

		        if (!isDroppableNow) {
			        dndManager.readyToDrop(false);
			        return;
		        }

		        // dragged object bank source option - get, parse and send to factory
		        var draggSourceElement = dndManager.getBankItem(dndManager.inDragObject.answerId);
		        var replaceContentElement = null;

		        if (!IsBank) {
			        if (!!!draggSourceElement) {
				        draggSourceElement = dndManager.getAnswerAreaItemByInitAnswerId(dndManager.inDragObject.initAnswerId);
			        }

			        replaceContentElement = dndManager.getItem(dndManager.inDragObject.answerId);
		        }

		        if (!!!replaceContentElement) {
			        replaceContentElement = draggSourceElement;
		        }

		        var enableBankAfterDrop = false, thi$ = this, currentAnswerId = dndManager.inDragObject.answerId;

		        if (draggSourceElement) {
			        if ((this.answerId != currentAnswerId) && (this.cfg.bankMode == 'dragAndDisable') && (!!this.containsAnswer)) {
				        enableBankAfterDrop = true;
			        }

			        //move current answer into source dragg subAnswer (switch between subAnswers in case there is no bank)
			        if ((this.dndMode == 'dragAndDropAndReplace') && (draggSourceElement.dndContainer != "bank") && (this.isAnswer())) {
				        draggSourceElement.droppingBySystemEvent(this.answerId, true);
			        }
		        }

		        function replaceContentAndSetAnswer() {
			        if(dndManager.afterDrop()) { //prevent double dropping
				        return false;
			        }

			        //remove subAnswer child and replace it with new one (source of the dragged object)
			        thi$.view.replaceChild(replaceContentElement, dndManager.inDragObjectView);

			        dndManager.afterDrop(true);    //set after drop flag - true

			        thi$.setAnswer(thi$.children.length > 0);  //mark this subAnswer as answered after drop

			        if (typeof thi$.cfg.firstKeyDown == 'function') { //check for function existence
				        thi$.cfg.firstKeyDown();    //trigger progress event of the task
			        }

			        thi$.applyAfterDrop(currentAnswerId, enableBankAfterDrop && thi$.cfg.bankMode != 'dragAndCopy');
		        }

		        setTimeout(replaceContentAndSetAnswer, 0);


	        }

        },
        /**
         * @name deleteSubAnswer
         * @desc delete this subAnswer content and children, if isEnableBank = true - enable bank option
         * @param isEnableBank (true / false;)
         */
        deleteSubAnswerChild : function(isEnableBank) {
            this.view.removeContent();
            this.children.length = 0;
            this.view.children.length = 0;

            if (isEnableBank) {
                enableBankOption(this.answerId, true);
            }

            this.setAnswer(false);

            if (typeof this.cfg.firstKeyDown == 'function') { //check for function existance
                this.cfg.firstKeyDown();    //trigger progress event of the task
            }

            this.answerId = this.initAnswerId;

        },
        /**
         * @name deleteSubAnswer
         * @desc delete this subAnswer
         */
        deleteSubAnswer : function() {

            dndManager.removeSubAnswer(this.view.cfg.id, false);

            this.children.length = 0;
            this.view.children.length = 0;

            //DOM manipulations cancel touch events
            //this.view.dispose();
            dndManager.insertIntoRecycleBin(this.view._view);

            //remove this child from the ownerObject children
            if (this.cfg.ownerObject) {
                this.cfg.ownerObject.removeChild(this);
	        }

        },
        /**
         * @name setCorrect
         * @desc sets this subAnswer correct property
         * @param type ('true' / 'false')
         */
        setCorrect : function(type) {
            this.correct = type;
        },
        /**
         * @name getCorrect
         * @desc  returns this subAnswer correct
         * @returns {String}
         */
        getCorrect : function() {
            return this.correct;
        },
        /**
         * @name getCorrectAnswer
         * @desc returns first correct answer
         * @returns {String}
         */
        getCorrectAnswer : function() {
            var correctAnswer = '';

            if(this.dndMode == 'write' && !!this.cfg.answers.showAnswer) {
                return '<showAnswer>' + this.cfg.answers.showAnswer + '</showAnswer>';
            }

            jQuery(this.cfg.answers.correct).each(function(index, objAnswer) {
                if (objAnswer.checkType == 'value') {
                    correctAnswer = objAnswer.answer;
                    return false;
                }
            });

            return correctAnswer;
        },
        /**
         * @name isAnswer
         * @desc returns boolean, true if this subAnswer contains answer atherwize, returns false
         * @return {Boolean}
         */
        isAnswer : function() {
            return !!this.containsAnswer;
        },

        /**
         * @name isCorrect
         * @desc return true if current answer is correct
         * @returns boolean
         */
        isCorrect : function(returnCheckValue) {
            if (this.cfg.mode != 'write') { //check correct answer by answerId
                var IsCorrectAnswer = false,
                checkValue,
                thi$ = this;

                jQuery.each(this.cfg.answers.correct, function(index, objCorrectAnswer) {
                    var strCorrectAnswer = objCorrectAnswer.answer;
                    var checkType = objCorrectAnswer.checkType;
                    IsCorrectAnswer = ( (thi$.answerId == jQuery.trim(strCorrectAnswer)) && thi$.containsAnswer ? true : false);
                    if (IsCorrectAnswer) {
                        checkValue = thi$.answerId;
                        return false;
                    }
                });
                if(returnCheckValue){
                    return {IsCorrectAnswer: IsCorrectAnswer, checkValue: checkValue}
                }
                return IsCorrectAnswer;

            } else {
                var IsCorrectAnswer = this.parseAnswers(this.cfg.answers.correct, returnCheckValue);
                return IsCorrectAnswer;
            }
        },
        /**
         * @name ispartiallyCorrect
         * @returns {Boolean}
         */
        ispartiallyCorrect : function(returnCheckValue) {
            var IsCorrectAnswer = false,
            saValue = this.getValue(),
            checkValue='';

            if (this.cfg.mode == 'write') {
                jQuery.each(this.cfg.answers.partiallyCorrect, function(index, value) {
                    IsCorrectAnswer = (saValue == value.answer);
                    if (IsCorrectAnswer) {
                        checkValue = value.answer;
                        return false;
                    }
                });
            }
            if(returnCheckValue){
                return{ IsCorrectAnswer: IsCorrectAnswer, checkValue : checkValue}
            }

            return IsCorrectAnswer;
        },
        /**
         * @name isIncorrectPredicted
         * @returns {Boolean}
         */
        isIncorrectPredicted : function(returnCheckValue) {
            var IsIncorrectPredictedAnswer = this.parseAnswers(this.cfg.answers.incorrectPredicted, returnCheckValue);
            return IsIncorrectPredictedAnswer;
        },
        /**
         * @name parseAnswers
         * @param arrAnswers (correct / partiallyCorrect, incorrectPredicted)
         */
        parseAnswers : function(arrAnswers, returnCheckValue) {
            var thi$ = this;
            var IsCorrectAnswer = false;
            var subAnswerValue = '';
            jQuery.each(arrAnswers, function(index, objCorrectAnswer) {
                var strCorrectAnswer = objCorrectAnswer.answer;
                var checkType = objCorrectAnswer.checkType;
                var saValue = '', saMaValue = '', saCorrectness = '';

                switch (checkType) {
                    case 'value' :
                        saValue = jQuery.trim(thi$.getValue());
                        break;
                    case 'markupValue' : case 'markUp'  :
                        saValue = jQuery.trim(thi$.getMarkUpValue());

                        //"<four/>".replace(/<(\w+)\/>/g, "<$1></$1>")  ==> "<four></four>"
                        saValue = saValue.replace(/<(\w+)\/>/g, "<$1></$1>").replace(/\s+/g,'').toLowerCase();
                        strCorrectAnswer = strCorrectAnswer.replace(/<(\w+)\/>/g, "<$1></$1>").replace(/\s+/g,'').toLowerCase();
                        
                        /////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////
                        saValue = saValue.replace(/minusSign/gi, "minus");
                        strCorrectAnswer = strCorrectAnswer.replace(/minusSign/gi, "minus");
                        /////////////////////////////////////////////////////////////////////////////

                        break;
                    case 'correctness' :
                        saValue = jQuery.trim(thi$.getCorrectness());
                        break;
                    case 'rule' :
                        saValue = jQuery.trim(thi$.getValue());
                        saMaValue = jQuery.trim(thi$.getMarkUpValue());
                        saCorrectness = jQuery.trim(thi$.getCorrectness());

                        var rule = replaceAll(strCorrectAnswer, "value", saValue);
                        rule = replaceAll(rule, "markupValue", saMaValue);
                        rule = replaceAll(rule, "correctness", saCorrectness);

                        rule = replaceAll(rule, "bigger", ">");
                        rule = replaceAll(rule, "smaller", "<");
                        rule = replaceAll(rule, "AND", "&&");
                        rule = replaceAll(rule, "OR", "||");

                        ////////////////////////////////////////////////////////
                        // set all numbers to 15 digit decimal
                        ////////////////////////////////////////////////////////
                        rule = rule.replace( /\d+\.?\d*/g, function( num ) {
                        	var fixed = ( 1 * num ).toFixed( 15 ) ;
                        	return fixed
                        } ) ;
                        ////////////////////////////////////////////////////////
                        
                        try {
                            IsCorrectAnswer = eval( rule );
                        } catch(e) {
                            IsCorrectAnswer = false;
                        }

                        if (IsCorrectAnswer) {
                            return false;
                        }
                        break;
                }

                //don't performe case sencitive and punctuation checking for Math Field markUp
                //[IE9]if (thi$.children[0].__proto__.name.indexOf('mathField') < 0) {
                if (Object.getPrototypeOf(thi$.children[0]).name.indexOf('mathField') < 0) {
                    if (!!thi$.caseSensitive) {
                        saValue = saValue.toLowerCase();
                        strCorrectAnswer = strCorrectAnswer.toLowerCase();
                    }

                    if (!!(thi$.punctuationMarks)) { //remove punctuation marks
                        saValue = saValue.replace(/[\.,-\/#!$%\^&\*;:{}=\-_`~()]/g, '');
                        strCorrectAnswer = strCorrectAnswer.replace(/[\.,-\/#!$%\^&\*;:{}=\-_`~()]/g, '');
                    }

	                //ignore checking
	                if(!!thi$.cfg.ignoreChecking && thi$.cfg.ignoreChecking.length) {
		                thi$.cfg.ignoreChecking.forEach(function(item, index){
							if(typeof constants.ignoreChecking[item] == "function") {
								var fnc = constants.ignoreChecking[item];
								saValue = fnc(saValue);
								strCorrectAnswer = fnc(strCorrectAnswer);
							}
		                });
	                }
                }

                IsCorrectAnswer = (saValue == strCorrectAnswer);
                if (IsCorrectAnswer) {
                    subAnswerValue = saValue
                    return false;
                }
            });
            if(returnCheckValue){
                return {IsCorrectAnswer : IsCorrectAnswer , checkValue : subAnswerValue};
                
            }
            return IsCorrectAnswer;
        },
        /**
         * @name getCorrectness
         * @desc returns subAnswer correctness
         * @return {Boolean}
         */
        getCorrectness : function() {

            if(this.children[0].view.calculate) {
                return this.children[0].view.calculate.correctness();
            }

            return null;

        },
        /**
         * @name markAsCorrect
         * @desc mark subAnswer as correct
         */
        markAsCorrect: function() {
            if (this.dndContainer != 'bank' && this.dndMode == 'write') {
                this.view.markAsFull();
            }
            this.view.markAsCorrect();
        },
        /**
         * @name markAspartiallyCorrect
         */
        markAsPartiallyCorrect : function() {
            if (this.dndContainer != 'bank' && this.dndMode == 'write') {
                this.view.markAsFull();
            }
            this.view.markAsPartiallyCorrect();
        },
        /**
         * @name setSystemAnswer
         * @param correctAnswerId
         */
        setSystemAnswer : function(correctAnswerId) {
            dndManager.afterDrop(true);
            var currentAnswer = this.answerId;
            var isEnableBank = false;

            if ((correctAnswerId != currentAnswer) || (!this.children.length)) {
                this.view.removeAllMarks();

                if (this.dndContainer != 'bank') {
                    this.view.markAsFull();
                }

	            var sourceElement = dndManager.getItem(correctAnswerId);

                if (sourceElement && (["dragAndDropToMultiAnswer"].indexOf(this.cfg.mode) < 0)) { //not if child of hidden multi subanswer
                    this.view.replaceChild(sourceElement); //remove subAnswer child and replace it with correct answer
                }
            }

            this.applyAfterDrop(correctAnswerId, isEnableBank);
            this.disableBankOption(correctAnswerId);
        },
         /**
         * @name onShowAnswer
         * @desc set correct answer and mark subAnswer as system
         */
        onShowAnswer : function() {
            if (!this.isCorrect()) {
                this.setSystemAnswer(this.getCorrectAnswer());
                this.view.markAsSystemCorrect();
            } else {
	            this.markAsCorrect();
            }
        },

        /**
         * @name markAsSystemCorrect
         * @desc fill subAnswer with the correct answer and mark as correct
         */
        markAsSystemCorrect : function() {
            //check for task mode, if 'write' then put string value, else put correct bank option
            if (this.dndMode) {

                this.setAnswer(this.children.length > 0);  //mark this subAnswer as answered after drop

                if (typeof this.cfg.firstKeyDown == 'function') { //check for function existence
                    this.cfg.firstKeyDown();    //trigger progress event of the task
                }

                if (this.dndMode == 'write') {
                    this.view.removeAllMarks();

                    if (this.dndContainer != 'bank') {
                        this.view.markAsFull();
                    }
                    this.view.replaceContent(this.getCorrectAnswer());

                } else {

                    this.setSystemAnswer(this.getCorrectAnswer());

                }

                this.view.markAsSystemCorrect();
            }
        },
        /**
         * @name applyAfterDrop
         * @desc apply after dropping actions according to the configuration
         */
        applyAfterDrop : function(correctAnswerId, isBankEnabled) {
            var thi$ = this;

            if (dndManager.afterDrop()) { //mouseLeave after dropping

                thi$.analizeDNDMode(thi$.dndMode);    //init draggable/droppable

                thi$.draggable = false;
                thi$.droppable = false;


                if(!!!thi$.afterDrop){
                    return;
                }

                var afterDropParams = thi$.afterDrop.split(',');
                var param;
                for (param in afterDropParams) {
                    switch (afterDropParams[param]) {
                        case 'draggable' :
                            thi$.draggable = true;
                            break;
                        case 'dropabble' :
                            thi$.droppable = true;
                            break;
                        case 'checkAndReturn' : //check if subAnswer is full and then set this SA in bank enable
                            if (this.isAnswer()) {
                                if (!!isBankEnabled) {
                                    enableBankOption(thi$.cfg.bankMode == 'dragAndDropNoReplace' ? correctAnswerId : thi$.answerId, false);
                                } else {
                                    thi$.disableBankOption((thi$.cfg.bankMode == 'dragAndDropNoReplace' || thi$.cfg.bankMode == "dragAndDisable") ? correctAnswerId : thi$.answerId, true);
                                }

                                this.view.removeAllMarks();

                                if (this.dndContainer != 'bank') {
                                    this.view.markAsFull();
                                }
                            }
                            break;
                    }
                }

                thi$.answerId = correctAnswerId;

                thi$.manageDND();
            }
        },
        /**
         * @name isMarkedAsCorrect
         */
        isMarkedAsCorrect: function() {
            return this.view.isMarkedAsCorrect();
        },
        /**
         * @name isMarkedAsSystemCorrect
         */
        isMarkedAsSystemCorrect: function() {
            return this.view.isMarkedAsSystemCorrect();
        },
        /**
         * @name isMarkedAsWrong
         */
        isMarkedAsWrong : function() {
            return this.view.isMarkedAsWrong();
        },
        /**
         * @name isMarkedAspartiallyCorrect
         */
        isMarkedAspartiallyCorrect : function() {
            return this.view.isMarkedAspartiallyCorrect();
        },
        /**
         * @name markAsWrong
         */
        markAsWrong: function() {
            if (this.dndContainer != 'bank' && this.dndMode == 'write') {
                this.view.markAsFull();
            }
            this.view.markAsWrong();
        },
        /**
         * @name markAsFull
         */
        markAsFull : function() {
            this.view.markAsFull();
        },
        /**
         * @name markAsEmpty
         */
        markAsEmpty : function() {
            this.view.markAsEmpty();
        },
        /**
         * @name initFullSubAnswer
         * @desc in case of subAnswer initiation with child and dndMode set it's style as full and containsAnswer = true
         */
        initFullSubAnswer : function() {
            if (this.children.length > 0 && !!this.dndMode) {
                if (this.dndMode != 'write') {
                    this.markAsFull();
                    this.setAnswer(true);
                }
            }
        },

        /**
         * @name disableBankOption
         * @param currAnswerId
         */
        disableBankOption : function(currAnswerId) {
            var bankSourceSA = dndManager.getBankItem(currAnswerId);

            if (bankSourceSA) {
                bankSourceSA.analizeDNDMode(bankSourceSA.dndMode);
                bankSourceSA.manageDND();

                if (bankSourceSA.cfg.mode == "dragAndCopy") {
                    bankSourceSA.view.markAsReusable();
                } else {
                    //bankSourceSA.view.markAsDisable();
                    bankSourceSA.setEnabled(false);
                    bankSourceSA.lockSubanswerBankState = true;
                }
            }
        },
        /**
         * reset function
         * check resetIncorrect parameter if true - reset subAnswer, if false - do nothing
         */
        reset : function() {
            //in write mode - enable texteditor and reset firstKeyDown flag
            if (this.cfg.mode == 'write' && this.children[0]) {

                if(this.children[0].view.setFirstKeyPressed) {
                    this.children[0].view.setFirstKeyPressed(false);
                }

                this.children[0].setEnabled(true);
            }

            this.view.removeAllMarks();

            if (!!(this.resetIncorrect)) {
	            if(this.cfg.mode != "write") {
	                this.applyAfterDragg(true);
	                this.answerId = this.initAnswerId;
	            } else {
		            this.view.removeContent();
	            }
            }

            if ((this.cfg.mode != 'write') && !this.isEmpty()) {
               dndManager.afterDrop(true);
               this.applyAfterDrop(this.answerId, this.resetIncorrect);
            }
        },
        
        /**
         * @name setAnswer
         * @param flag
         */
        setAnswer : function(flag) {
            this.containsAnswer = flag;  //mark this subAnswer as answered
        },
        /**
         * @name triggerDraggingEvent
         * @desc creates dragging event and returns dragged element, used for sample math
         */
        triggerDraggingEvent : function() {
            var event = jQuery.Event(this.dndBehaviour.startDraggingEvent);

            this.startDraggingEvent(event);

            return this.view.draggedElement;
        }

    });

    /**
     * @method
     * @name addBehavior
     * @desc add checkable behavior
     */
    t2k.component.subAnswer.SubAnswer.addBehavior(t2k.behavior.checkable, {

        /**
         * @name getValue
         * @desc returns subAnswer value
         * @returns String
         */
        getValue : function() {
            return this.view.getValue();
        },

        getOriginalBankId: function(){
            if(this.originalid){
                return this.originalid;
            }
            return false;
        },

        /**
         * @name getMarkUpValue
         * @desc returns subAnswer markUp
         * @returns String
         */
        getMarkUpValue : function() {
            return this.view.getMarkUpValue();
        },

        /**
         * @name setLocalFeedback
         * @param feedbackType
         */
        setLocalFeedback : function(feedbackType, applyFeedback) {

	        if(applyFeedback) {
	            switch (feedbackType) {
	                case 'correct' :
	                    this.markAsCorrect();
	                    break;
	                case 'incorrect' :
	                    this.markAsWrong();
	                    break;
	                case 'full' :
	                    this.markAsFull();
	                    break;
	                case 'partiallyCorrect' :
	                    this.markAsPartiallyCorrect();
	                    break;
	                case 'predictedIncorrect' :
	                    this.markAsWrong();
	                    break;
	                case 'systemCorrect' :
	                    this.view.markAsSystemCorrect();
	                    break;
	            }
	        }
        },
        /**
         * @name runCheck
         */
        runCheck : function(applyFeedback) {

            var checkResult = {};

            checkResult.expected = 1;

            checkResult.empty = this.isEmpty() ? 1 : 0;

            if (this.isCorrect()) {
                checkResult.correct = 1;
	            this.setLocalFeedback('correct', applyFeedback);
            } else if (this.ispartiallyCorrect()) {
                checkResult.partiallyCorrect = 1;
	            this.setLocalFeedback('partiallyCorrect', applyFeedback);
            } else if (this.isIncorrectPredicted()) {
                checkResult.incorrectPredicted = 1;
	            this.setLocalFeedback('predictedIncorrect', applyFeedback);
            } else {
                checkResult.incorrect = 1;
	            this.setLocalFeedback('incorrect', applyFeedback);
            }

            if (this.view.children.length == 0) { //subAnswer is not empty
                this.setLocalFeedback('full');
            }

	        applyFeedback && this.setEnabled(false);

            return checkResult;
        },
        /**
         * @name isEmpty
         */
        isEmpty: function() {
            // We have this to handle legacy code isAnswer() which actually means "contains with answer"
            return !this.isAnswer();
        },
        /**
         * @name resetOnTryAgain
         */
        resetOnTryAgain : function() {
            if (!this.isMarkedAsCorrect()) {
                if (!!this.cfg.taskmode && this.cfg.taskmode == "matching") {
                    this.setEnabled(true);
                    this.reset();
                } else {
                    this.reset();
                    this.setEnabled(true);
                }

            } else {
                this.disableBankOption(this.answerId);
            }
        },
        /**
         * @name markOnShowAnswer
         */
        markOnShowAnswer : function() {
            if (!this.isCorrect()) {
	            this.markAsSystemCorrect();
            }
	        this.setEnabled(false);
        },

        setSpecificFeedback : function(message){

            this.view.setSpecificFeedback(message, 'subAnswer');
        }

    });
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
    /**
     * @name prepareOConfiguration
     * @desc Private function, Extract the answers values from the xml
     * @param {XML} saXml The subAnswer configuration XML.
     * @return {Object} that contains answers values: correct, partially correct, incorrect and predicted.
     */
    function prepareConfiguration(saXml) {
        // The result object.
        var result = {
            answers : {
                showAnswer : null,
                correct: [],
                partiallyCorrect: [],
                incorrectPredicted: []
            }
        };

        //Iterate the XML with answers options.
        var arrNodes = saXml.childNodes,
			i,
			child,
			innerChild,
			node,
			strXML;

        for (i = 0; i < arrNodes.length; i++) {
            node = arrNodes[i];

            if (node.nodeType == 1) {
                switch (node.nodeName.toLowerCase()) {
                    case 'check' :
                        child = Compat.getFirstChildType1(node);
                        while (child) {
                            switch (child.nodeName.toLowerCase()) {
                                case "showanswer" :
                                    strXML = '';
                                    innerChild = Compat.getFirstChildType1(child);

                                    while (innerChild) {
                                        if (innerChild.nodeType == 1) {
                                            strXML += jQuery.xmlToString(innerChild);
                                        }
                                        innerChild = innerChild.nextSibling;
                                    }

                                    result.answers.showAnswer = strXML || '';
                                    break;
                                case "correct" :
									loadAnswersArray(Compat.getChildren2(child), result.answers.correct);
                                    break;

                                case "partiallycorrect" :
                                    loadAnswersArray(Compat.getChildren2(child), result.answers.partiallyCorrect);
                                    break;
                                case "incorrectpredicted" :
                                    loadAnswersArray(Compat.getChildren2(child), result.answers.incorrectPredicted);
                                    break;
                            }
                            child = child.nextElementSibling;
                        }
                        break;

                    case "showanswer" :
                        result.answers.showAnswer = jQuery.xmlToString(node.firstElementChild) || '';
                        break;
                    case "correct" :
						loadAnswersArray(jQuery(node).children(), result.answers.correct);
                        break;
                    case "partiallycorrect" :
                        loadAnswersArray(jQuery(node).children(), result.answers.partiallyCorrect);
                        break;
                    case "incorrectpredicted" :
                        loadAnswersArray(jQuery(node).children(), result.answers.incorrectPredicted);
                        break;
                }
            }
        }

        // Return the result.
        return result;
    } // End of prepareConfiguration
    /**
     * @name enableBankOption
     */
    function enableBankOption(currAnswerId, removeReusable) {
        var bankSourceSA = dndManager.getBankItem(currAnswerId);
        if (bankSourceSA) {
            bankSourceSA.analizeDNDMode(bankSourceSA.dndMode);
            bankSourceSA.manageDND();
            bankSourceSA.lockSubanswerBankState = false;
            bankSourceSA.setEnabled(true, removeReusable);
        }
    }

    /**
     * @name releaseBankOption
     * @param currAnswerId
     */
    function releaseBankOption(currAnswerId) {
        var bankSourceSA = dndManager.getBankItem(currAnswerId);

        if (bankSourceSA) {
            if (bankSourceSA.cfg.mode == "dragAndCopy") {
                bankSourceSA.analizeDNDMode(bankSourceSA.dndMode);
                bankSourceSA.manageDND();
                bankSourceSA.view.markAsReusable();
            } else {
                bankSourceSA.draggable = false;
                bankSourceSA.droppable = false;
                bankSourceSA.setEnabled(false);
            }
        }
    }

    /**
     * @name replaceAll
     * @param source
     * @param stringToFind
     * @param stringToReplace
     * @return {String}
     */
    function replaceAll(source, stringToFind, stringToReplace) {
        var temp = source;
        var index = temp.indexOf(stringToFind);
        while (index != -1) {
            temp = temp.replace(stringToFind, stringToReplace);
            index = temp.indexOf(stringToFind);
        }
        return temp;
    }

    /**
     * @name loadAnswersArray
     * @param arrayElements
     * @param arrayResult
     */
    function loadAnswersArray(arrayElements, arrayResult) {
        var answer, checkType;

        jQuery(arrayElements).each(function (index, elXml) {
            answer = jQuery.trim(elXml.innerHTML || elXml.textContent || elXml.text);
            if(!answer.length) {
                var strXML = '';
                var innerChild = elXml.firstElementChild || elXml;

                while (innerChild) {
                    if (innerChild.nodeType == 1) {
                        strXML += jQuery.xmlToString(innerChild);
                    }
                    innerChild = innerChild.nextSibling;
                }
                answer = strXML;
            }

            checkType = jQuery.trim(jQuery(elXml).attr("checkType")) || 'value';
            if (checkType.toLowerCase() == "markup") {
                checkType = "markupValue"
            }

            //trim spaces between tags
            if (checkType.toLowerCase() == "markupvalue") {
                answer = answer.replace(/>\s</g, '><');
                //remove <enter> tag
                answer = answer.replace(/<enter>|<\/enter>/gi, '')
            }

            arrayResult.push({'answer':answer, 'checkType':checkType});
        });
    }

})();
////////////////////////////////////////
// SRC End --> t2k/component/subAnswer/SubAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/subAnswer/MultiSubAnswerConfig.js
////////////////////////////////////////
/**
 * MultiSubAnswer component constants
 */
t2k.component.subAnswer.MultiSubAnswerConstants = {
    dndBehaviour:{

        dragAndDrop:{
            startDraggingEvent:'mousedown',
            droppingEvent:'mouseup',
            draggingEnter:'mouseenter',
            draggingLeave:'mouseleave'
        },

        clickAndDrop:{
            startDraggingEvent:'click',
            droppingEvent:'click',
            draggingEnter:'mouseenter',
            draggingLeave:'mouseleave'
        },

        touchAndDrop:{
            startDraggingEvent:'touchstart',
            droppingEvent:'touchend',
            draggingEnter:'touchenter',
            draggingLeave:'touchend'
        }
    },
    
    dndModes : {
        dragAndDropAndInsert : {
            droppable : true,
            draggable : false,
            afterDrag : 'childDelete',
            afterDrop : 'dropabble,removePlaceHolder',
            beforeDrop : 'checkIfDroppable'
        }
    },

	sideMarginOfSubAnswer: 1,     //rem
    paddingOfMultiAnswer: 1,    //rem
    BottomPaddingOfSubAnswer: 1,  //rem
	paddingOfSubAnswer : 1,       //rem
    VerticalBottomPaddingOfSubAnswer : 1, //rem
	borderOfMultiSubAnswer : 2,  //px
	scrollableSelector: 'div.scroll_enabled'
};
////////////////////////////////////////
// SRC End --> t2k/component/subAnswer/MultiSubAnswerConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/subAnswer/MultiSubAnswerView.js
////////////////////////////////////////
(function() {
    var TEMPLATE = "<div id='{{id}}' class='multiSubAnswer{{^IsPlaceholders}} noplaceholders{{/IsPlaceholders}}\
                        {{#IsBank}} withbank{{/IsBank}}{{^IsBank}} nobank{{/IsBank}}'>\
                        <div id='{{id}}_content' class='multiSubAnswer_content' />\
                    </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

	var constants = t2k.component.subAnswer.MultiSubAnswerConstants;

    /*
     * @class MultiSubAnswerView
     */
    t2k.component.subAnswer.MultiSubAnswerView = t2k.component.BaseComponentView.subClass({

        /*
         * @constructor
         * @param config - {Object} configuration
         */
        ctor: function(config) {
            
            this._super(override({}, config, defaultConfig));

             if(!!this.cfg.registerEvents){
            	this.bindDNDEvents(this.cfg.registerEvents);
            }

	        this.remSize = jQuery('body').css('font-size').px2int();

        },
//        /**
//         * override
//         */
//        compact : function (){
//            // don't compact my view
//        },

        /**
         * applyHorizontalStyle
         * @param size
         */
        applyHorizontalStyle : function(size) {
            if (size) {
                this._view.outerWidth(size.width);
                this._view.outerHeight(size.height);
            }
        },

        /**
         * applyVerticalStyle
         * @param size
         */
        applyVerticalStyle : function(size) {
            if (size) {
                this._view.outerWidth(size.width);
                this._view.outerHeight(size.height);
            }
        },

        /**
         * set size (width + height)
         * @param elementWidth integer
         * @param elementHeight integer
         */
        setSize : function(numOfAnswers, elementWidth, elementHeight, verticalLayout){

            var topPadding = (parseInt(this._view.css('padding-top')));
            var sidePadding = (parseInt(this._view.css('padding-left'))), width, height;

            if (verticalLayout){
                // vertical
	            width = elementWidth + sidePadding * 2;
                this._view.outerWidth(width);
	            height = topPadding * 2 + (elementHeight + (this.remSize * constants.VerticalBottomPaddingOfSubAnswer)) * numOfAnswers
		                 - (this.remSize * constants.VerticalBottomPaddingOfSubAnswer);
                this._view.outerHeight(height);
            } else {
                //horizontal
	            width = (elementWidth * numOfAnswers) + (sidePadding  * 2) + (this.remSize * numOfAnswers);
                this._view.outerWidth(width);
	            height = elementHeight + (constants.BottomPaddingOfSubAnswer * this.remSize) + topPadding;
                this._view.outerHeight(height);
            }

	        return {'width' : width, 'height' : height}
        },
        /**
         *  setWidth
          * @param elementWidth
         */
        setWidth : function(elementWidth){
            this._view.outerWidth(elementWidth);
        },
        /**
    	 * bind all events from events map
    	 * @param dndEvents
    	 */
    	bindDNDEvents : function(dndEvents){
    		var thi$ = this;

            dndEvents = jQuery.unique( dndEvents );

            var lastEvent = '';

	        function bindEvents(index, dndEvent) {
		        thi$._view.bind(dndEvent, function (event) {
			        event.preventDefault();

			        //prevent any event during animation
			        if (!!dndManager.animated()) {
				        return false;
			        }

			        //prevent mouseUp double firing
			        if ((event.type == 'mouseup') && (lastEvent == event.type)) {
				        lastEvent = (event.type);
				        return;
			        }

			        thi$.dispatchEvent('catchEvent', event);

			        lastEvent = (event.type);

		        });
	        }

	        jQuery.each(dndEvents, bindEvents);
    	},
        /**
         * markAsEnable
         */
        markAsEnable : function(){
            this._view.removeClass('disabled');
    	},
        /**
         * markAsDisable
         */
    	markAsDisable : function(){
    		this._view.addClass('disabled');
    	},
        /**
         * markAsDraggable
         */
    	markAsDraggable : function(){
    		this._view.removeClass('not_droppable').addClass('draggable');
    	},
        /**
         * markAsNotDraggable
         */
    	markAsNotDraggable: function(){
    		this._view.removeClass('draggable');
    	},
        /**
         * markAsDroppable
         */
    	markAsDroppable : function(){
    		this._view.removeClass('not_droppable').addClass('droppable');
    	},
        /**
         * markAsNotDroppable
         */
    	markAsNotDroppable : function(){
    		this._view.removeClass('droppable').addClass('not_droppable');
    	},

	    setVerticalPlaceHolder:function (clientY, lastChildIndex, positionOfLastChild, elementSizes, thi$){
			//check if we over subAnswer then put placeholder after it
		    jQuery(this.children).each(function(index, child) {
			    if (child._view.offset().top < clientY) {
				    lastChildIndex = (index + 1);
				    positionOfLastChild = (constants.paddingOfSubAnswer * this.remSize) +
					    lastChildIndex * (elementSizes.height + parseInt(child._view.css('margin-bottom')));
				    thi$.dispatchEvent('setLastChildIndex', {'lastChildIndex' : lastChildIndex});
			    }
		    });

		    if (positionOfLastChild == 0 && this.children.length > 0) {//mouse cursor is over top of the element - insert element in top
			    lastChildIndex = 0;
			    positionOfLastChild = parseInt(this._view.css('padding-top')) / 2;

			    thi$.dispatchEvent('setLastChildIndex', {'lastChildIndex' : lastChildIndex});

		    } else if (positionOfLastChild == 0) {
			    positionOfLastChild = (this.children.length == 0) ? (constants.paddingOfSubAnswer * this.remSize) :
				    ((this.children.length) * (elementSizes.height + parseInt(jQuery(this.children).get(0)._view.css('margin-bottom'))));

		    }

		    return jQuery('<div></div>').attr('id', this.cfg.id + '_placeholder').css({'width' : elementSizes.width, 'height' : 2,   //horizontal
			    'backgroundColor' : '#FF9933', 'position' : 'absolute', 'top' : ((elementSizes.height + 14) * lastChildIndex) + 7});
	    },

	    setHorizontalPlaceHolder:function (lastChildIndex, clientX, positionOfLastChild, elementSizes, thi$){
		    lastChildIndex = (ENV.contentDirection == 'ltr' ? 0 : thi$.children.length);

		    function calcPositionOfLastChild() {
			    return lastChildIndex * (elementSizes.width) + 3;
		    }

		    positionOfLastChild = (ENV.contentDirection == 'ltr' ? 0 : calcPositionOfLastChild());

			//check if we over subAnswer then put placeholder after it
		    jQuery(this.children).each(function(index, child) {
			    switch (ENV.contentDirection) {
				    case 'ltr' :
					    if (child._view.offset().left < clientX) {
						    lastChildIndex = (index + 1);
						    positionOfLastChild = calcPositionOfLastChild();
					    }
					    break;
				    case 'rtl' :
				    {
					    if (child._view.offset().left + child._view.outerWidth() < (clientX)) {
						    var diff = (clientX - (child._view.offset().left + child._view.outerWidth()));
						    lastChildIndex = thi$.children.length - Math.ceil(diff / (child._view.outerWidth() + (child._view.css('margin-left').px2int() / 2)));
						    positionOfLastChild = calcPositionOfLastChild();
					    }
				    }
			    }

			    thi$.dispatchEvent('setLastChildIndex', {'lastChildIndex' : lastChildIndex});

		    });

		    if (positionOfLastChild == 0 && this.children.length > 0) {//mouse cursor is over top of the element - insert element in top
			    lastChildIndex = 0;

			    positionOfLastChild = parseInt(this._view.css('padding-top')) / 2;

			    thi$.dispatchEvent('setLastChildIndex', {'lastChildIndex' : lastChildIndex});

		    } else if (positionOfLastChild == 0) {

			    switch(ENV.contentDirection) {
				    case 'ltr' : {
					    positionOfLastChild = (this.children.length == 0) ? (constants.paddingOfSubAnswer * this.remSize) :
						    ((this.children.length) * (elementSizes.height + parseInt(jQuery(this.children).get(0)._view.css('margin-bottom'))));
					    break;
				    }
				    case 'rtl' : {
					    positionOfLastChild = (this.children.length) * (elementSizes.height + parseInt(jQuery(this.children).get(0)._view.css('margin-bottom')));
						break;
				    }
			    }

		    }

		    var ph_left = 0;
		    switch(ENV.contentDirection) {
			    case 'ltr' : {
				    ph_left = ((elementSizes.width + 14) * lastChildIndex) + 7;
				    break;
			    }
			    case 'rtl' : {
				    ph_left = thi$._content.outerWidth() - ((elementSizes.width + 14) * lastChildIndex) + 21;
				    break;
			    }
		    }

		    return jQuery('<div></div>').attr('id', this.cfg.id + '_placeholder').css({'width' : 2, 'height' : elementSizes.height,   //horizontal
			    'backgroundColor' : '#FF9933', 'position' : 'absolute', 'top' : 14,
			    left: ph_left});
	    }, /**
	     * creates div that indicaites current dropping position
	     * @param elementSizes
	     * @param clientX
	     * @param clientY
	     */
	    createPlaceHolder : function(elementSizes, clientX, clientY, overElement, verticalLayout) {

		    this.removePlaceHolder();

		    //view SubAnswer placeholder
		    var positionOfLastChild = 0, lastChildIndex = 0, ph;

            if (!!verticalLayout) {
	            ph = this.setVerticalPlaceHolder(clientY, lastChildIndex, positionOfLastChild, elementSizes, this);
            } else {
	            ph = this.setHorizontalPlaceHolder(lastChildIndex, clientX, positionOfLastChild, elementSizes, this);
            }
            
            this._view.append(ph);

		    ph = null;
        },
        /**
         * remove placeholder div (find it by id)
         */
        removePlaceHolder : function() {
	        var placeholder = document.getElementById(this.cfg.id + '_placeholder');
	        //console.log('removePlaceHolder before', !!placeholder);
	        if(placeholder) {
                jQuery(placeholder).remove();
	        }
        }
    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/subAnswer/MultiSubAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/subAnswer/MultiSubAnswer.js
////////////////////////////////////////
(function() {

    var constants = t2k.component.subAnswer.MultiSubAnswerConstants;

    /*
     * MultiSubAnswer - collection of subAnswers
     */
    t2k.component.subAnswer.MultiSubAnswer = t2k.component.Composite.subClass({

        name: 't2k.component.subAnswer.MultiSubAnswer',

        /*
         * @constructor
         * @param config - {Object} configuration
         */
        ctor: function(config) {
             // Delegate
        	var thi$ = this;
            
            // call base class ctor
            this._super(config);

            this.initParams();

            this.initView();

            copy(this.cfg, prepareConfiguration(this.cfg.data));

            // start composite functionality
            this.startComposite2(copy({
                parent: this.view.cfg.id + '_content',
                dndContainer : 'mtq',
                mode : this.cfg.dndModes.subAnswer,
                IsBank : this.cfg.IsBank,
                bankMode : this.cfg.bankMode,
                resetIncorrect : this.cfg.resetIncorrect,
                ownerObject : thi$,
	            taskViewDomElement : this.cfg.taskViewDomElement
            }, this.cfg));

            if ((!!!this.cfg.IsPlaceholders) && (!!this.cfg.IsBank)) {
                this.children.forEach(function(child) {
                    child.view._content.css('float', ENV.contentDirection == "ltr" ? "left" : "right");
                });
            }

        },
        /**
         * initView
        */
        initView : function(){
            //ref.
            var thi$ = this;

	        if (this.cfg.dndModes.multiSubAnswer) {
		        // init view
		        this.view = this.createNewView(t2k.component.subAnswer.MultiSubAnswerView, override(this.cfg, {

			        registerEvents : this.dndEventsNames,

			        events : {
				        //catching DOM events and translating it to dnd behavior
				        catchEvent : function(event) {
					        var eventMeaning = thi$.eventsMap[event.type];  //event meaning translation by the event type

					        if ((thi$.dndBehaviour.startDraggingEvent == thi$.dndBehaviour.droppingEvent) //in case of equal event types
						        && ((thi$.eventsMap[event.type] == 'droppingEvent') || (thi$.eventsMap[event.type] == 'startDraggingEvent'))) {
						        eventMeaning = (dndManager.inDragObject) ? 'droppingEvent' : 'startDraggingEvent';
					        }

					        switch (eventMeaning) {
						        case 'startDraggingEvent' :
							        thi$.startDraggingEvent(event);
							        break;
						        case 'draggingEnter' :
							        thi$.draggingEnter(event);
							        break;
						        case 'draggingLeave' :
							        thi$.draggingLeave(event);
							        break;
						        case 'droppingEvent' :
							        thi$.droppingEvent(event);
							        break;
					        }
				        },
				        //create dropping event and do drop
				        doDroppingEvent : function(config) {
					        var event = jQuery.Event(getEventName(thi$, 'droppingEvent'));
					        thi$.droppingEvent(event, config.dropAnswerId);
					        config.callback && config.callback();
				        },
				        //set lastChild Index
				        setLastChildIndex : function(config) {
					        thi$.lastChildIndex = config.lastChildIndex;
					        config.callback && config.callback();
				        }

			        }

		        }));
	        } else {

		        this.view = this.createNewView(t2k.component.subAnswer.MultiSubAnswerView, this.cfg);

	        }

        },

        /**
         * initParams - class parameters initialization
         */
        initParams : function(){
	        /**Start Drag And Drop**/
	        if (this.cfg.dndModes.multiSubAnswer) {
		        this.dndMode = this.cfg.dndModes.multiSubAnswer;
		        this.dndContainer = 'multiSubAnswer';
		        this.droppable;
		        this.draggable;
		        this.afterDrag;
		        this.afterDrop;
		        this.beforeDrop;
		        this.eventsMap = [];
		        this.clientX = 0;
		        this.clientY = 0;

		        this.analizeDNDMode(this.dndMode);
		        var selectedDNDBehaviour = (ENV.behaviors.dragAndDropBehaviorTablets ? ENV.behaviors.dragAndDropBehaviorTablets : ENV.dragAndDropBehavior);
		        this.dndBehaviour = this.analizeDNDBehaviour(selectedDNDBehaviour);
		        this.dndEventsNames = this.registerDNDEventsNames();
	        }
	        /**End Drag And Drop**/


            this.elementSizes;
            this.numOfAnswers = 0;
            this.overElement;
            this.lastChildIndex;  //index of child to insert new child after
            this.lastCreatedChild;
            this.childReductionStep = 0;
            this.childOptimumFontSize = 0;

            // init vertical layout - true
            this.layout.verticalLayout = true;

	        this.remSize = jQuery('.player').css('font-size').px2int();
        },

        /**
         * setEnabled
         * @param flag
         */
        setEnabled: function(flag) {
            this._super(flag);

	        if (flag) {
		        if (this.cfg.dndModes.multiSubAnswer) {
			        this.analizeDNDMode(this.dndMode);
			        this.manageDND();
			        this.manageSALists();
			        this.view.bindDNDEvents(this.cfg.registerEvents);
		        }
		        this.view.markAsEnable();
	        } else {
		        this.view.markAsDisable();
	        }
        },

	    addMyState:function () {
		    var state = jQuery('<state/>');
		    return state;
	    },

	    /**
	     * @name setMyState
	     * @desc override - set state of component
	     * @param state
	     */
	    setMyState : function(state) {
		    this.state = state;

		    if (!!state) {
			    var thi$ = this;

			    this.setEnabled(jQuery(state).attr('enabled') === 'true');

			    //in hidden multi sub answer need to create children from state
			    var arrChildren = state.find('subanswer'), thi$ = this;

			    if (!this.cfg.IsPlaceholders && arrChildren.length) {

				    if(!this.cfg.IsBank) { //remove all children
					    var oldChildren = this.children.slice(0);
				    }

				    //remove children
				    this.children = [];
				    this.view.children = [];

				    thi$.lastChildIndex = 0;
				    jQuery(arrChildren).each(function (index, item) {
					    //remove prev child from dndManager lists
					    dndManager.removeSubAnswer(jQuery(item).children("id").text(), true);
					    thi$.createChild(item);
					    thi$.lastChildIndex += 1;
				    });

				    jQuery(oldChildren).each(function (index, item) {
					    thi$.remove(item);
					    item.view.dispose();
				    });
			    }
		    }
		 },

        /**
         * getMaxCountOfExpectedCorrects
         * return max length of correct answers sets
         */
        getMaxCountOfExpectedCorrects : function() {
            var countOfAnswers = 0;

            jQuery.each(this.cfg.answers.correct, function(index, objCorrectAnswer) {
                var arrCorrectAnswers = objCorrectAnswer.split(',');
                if (arrCorrectAnswers.length > countOfAnswers) {
                    countOfAnswers = arrCorrectAnswers.length;
                }
            });

            return countOfAnswers;
        },
        /**
         * set component size
         */
        setSize : function(numOfAnswers, elementSizes) {

            this.elementSizes = elementSizes;
            this.numOfAnswers = numOfAnswers;
            var elementWidth = elementSizes.width;
            var elementHeight = elementSizes.height; //numOfAnswers *

	        this.containerSize = this.view.setSize(numOfAnswers, elementWidth, elementHeight, this.layout.verticalLayout);
        },
       
        /**
         * applyHorizontalStyle
         */
        applyHorizontalStyle : function() {
            this.layout.verticalLayout = false;
            this.view.applyHorizontalStyle(this.horizontalSize);
        },

        /**
         * getHorizontalSize
         * calculates component horizontal size
         */
        getHorizontalSize : function(layoutStatus) {
            // different size calculation for visable or hidden multiSubAnswer
            this.horizontalSize = this.cfg.IsPlaceholders ? this.getVisibleHorizontalSize(layoutStatus) : this.getHiddenHorizontalSize(layoutStatus);
            return this.horizontalSize;
        },
        
        /**
         * getVisibleHorizontalSize
         */
        getVisibleHorizontalSize : function() {

	        var compositeWidth = this.view.cfg.parent.parents('.task_wrapper_internal').width(),
		        widthCounter = 0,
		        compositeHeight = 0,
		        numOfLines = 1,
		        elementsMap = {};

	        var domChildren = this.view._content.children(), numOfChildren = domChildren.length;

	        for (var index = 0; index < numOfChildren; index++) {

		        var childId = jQuery(domChildren[index]).attr('id');
		        if (!childId) continue;

		        var childIndex = this.getChildIndexById(childId);
		        var item = {};

		        var childSize = this.children[childIndex].getSize();

		        item.index = index;
		        item.width = childSize.width + (constants.paddingOfSubAnswer * this.remSize);
		        item.height = childSize.height + (constants.paddingOfSubAnswer * this.remSize);

		        widthCounter += item.width;

		        if (index == 0) {
			        compositeHeight += item.height;
		        }

		        if (widthCounter >= compositeWidth) {
			        // increace num of lines
			        numOfLines++;
			        compositeWidth = widthCounter - item.width;
			        widthCounter = 0;
			        compositeHeight += item.height;
		        }

		        if (!elementsMap[numOfLines]) {
			        elementsMap[numOfLines] = 0;
		        }

		        elementsMap[numOfLines]++;
	        }

	        // manual 'squeezeComposite'
	        // only if there is more than one line in the bank
	        if (numOfLines > 1) {
		        // calc optimum number of children per line
		        var optimumNumChildrenPerLine = Math.round(numOfChildren / numOfLines);

		        // calc the composite width
		        compositeWidth = 0;
		        for(var i = 0; i<optimumNumChildrenPerLine; i++) {
			        compositeWidth += this.children[i].getSize().width + (constants.paddingOfSubAnswer * this.remSize);
		        }

	        } else {
		        for(var i = 0; i<this.children.length; i++) {
			        compositeWidth += this.children[i].getSize().width + (constants.paddingOfSubAnswer * this.remSize);
		        }
	        }

	        return {'width' : compositeWidth, 'height' : compositeHeight};
        },
        
        /**
         * getHiddenHorizontalSize
         */
        getHiddenHorizontalSize : function() {
            this.horizontalSize = {'width' : 0, 'height' : 0 };

            this.horizontalSize.width =  (this.elementSizes.width + (constants.sideMarginOfSubAnswer * this.remSize)) * this.numOfAnswers +
                                         ((constants.paddingOfMultiAnswer * this.remSize * 2) - (constants.sideMarginOfSubAnswer * this.remSize))  +
                                          constants.borderOfMultiSubAnswer * 2;
            this.horizontalSize.height = (this.elementSizes.height + (constants.paddingOfMultiAnswer * this.remSize * 2)
	                                      + (constants.borderOfMultiSubAnswer * 2));

            return this.horizontalSize;
        },
        
        /**
         * getVerticalSize
         * calculates component Vertical size
         */
        getVerticalSize : function() {
            // different size calculation for visable or hidden multiSubAnswer
            this.verticalSize = this.cfg.IsPlaceholders ? this.getVisibleVerticalSize() : this.getHiddenVerticalSize();
            return this.verticalSize;
        },

        applyVerticalSize : function(){
            this.layout.verticalLayout = true;
            this.view.applyVerticalSize(this.verticalSize);
        },

        setVerticalLayout : function(){
            if (!this.layout.verticalLayout){
                this.layout.verticalLayout = true;
                this.view._view.css({'width' : '', 'height' : ''}).removeClass('horizontal');
            }

        },

        /**
         * getVisibleVerticalSize
         */
        getVisibleVerticalSize : function(){

            var child = this.children[0];
            var childSize = child.getSize();
            
            var size = {'width' : 0, 'height' : 0};

            var heightAddition = child.view._view.css('marginTop').px2int() +  child.view._view.css('marginBottom').px2int();

            size.width = childSize.width;
            size.height = (heightAddition * (this.children.length - 1)) + (childSize.width * this.children.length);
            return size;

        },
        
        /**
         * getHiddenVerticalSize
         */
        getHiddenVerticalSize : function() {
            this.verticalSize = {'width' : 0, 'height' : 0 };
            this.verticalSize.width = this.containerSize.width;
            this.verticalSize.height = this.containerSize.height;
            return this.verticalSize;
        },

        /************** Drag And Drop ************************/
        /**
         * analizeDNDMode
         * @param dndMode
         */
        analizeDNDMode : function(dndMode) {
            var dndModeConfig = constants.dndModes[dndMode];  //clickAndDrop or dragAndDrop

            if (dndModeConfig) {
                this.droppable = dndModeConfig.droppable;
                this.draggable = dndModeConfig.draggable;
                this.afterDrag = dndModeConfig.afterDrag;
                this.afterDrop = dndModeConfig.afterDrop;
                this.beforeDrop = dndModeConfig.beforeDrop || '';
            }

        },
        /**
         * analizeDNDBehaviour
         * usually it's dragAndDrop. In case of tablet PC may be clickAndDrop
         * @param dndBehaviour
         */
        analizeDNDBehaviour :function(dndBehaviour) {
            var dndBehavioursConfig = t2k.component.subAnswer.MultiSubAnswerConstants.dndBehaviour[dndBehaviour]; //event mapping object of the current behavior
            return dndBehavioursConfig;
        },

        /**
         * manageDND
         */
        manageDND : function() {
            // if the component is draggable add to DNDManager draggables
            if (!!this.draggable) {
                dndManager.addDraggable(this.view.cfg.id, this);
            } else {
                dndManager.removeDraggable(this.view.cfg.id);
            }

            // if the component is droppables add to DNDManager droppables
            if (!!this.droppable) {
                dndManager.addDroppable(this.view.cfg.id, this);
            } else {
                dndManager.removeDroppable(this.view.cfg.id);
            }
        },
        /**
         * manageSALists
         */
        manageSALists : function() {
            if (this.dndContainer == 'bank') {
                dndManager.addBankItem(this.view.cfg.id, this);
            } else {
                dndManager.addAnswerAreaItem(this.view.cfg.id, this);
            }
        },

        /**
         * registerDNDEventsNames
         * run through DND Behaviour map, check if event handler exists in the class and add it to events map
         * @returns dndEventsArray
         */
        registerDNDEventsNames : function() {
            var thi$ = this;
            var dndEventsArray = [];
            for (var dndEvent in this.dndBehaviour) {  // loop the array and check for double values
                if (jQuery.inArray(dndEvent, thi$.eventsMap) == -1) { //check for event existence in the events map array
                    dndEventsArray.push(this.dndBehaviour[dndEvent]);
                    thi$.eventsMap[this.dndBehaviour[dndEvent]] = dndEvent;
                }
            }
            return dndEventsArray;
        },

        /**
         * handling of the dragging event
         * @param event
         */
        startDraggingEvent : function(event) {
            dndManager.afterDrop(false);
        },
        /**
         * draggingEnter
         * @param event
         */
        draggingEnter : function(event) {

            if (dndManager.isInDragMode() && !dndManager.afterDrop()) {

                if (this.children.length >= this.numOfAnswers) {
                    this.droppable = false;
                    dndManager.readyToDrop(false);
                    this.manageDND();
                }

                if (this.droppable) {
                    dndManager.readyToDrop(true);
                    this.view.markAsDroppable();
                    this.view.createPlaceHolder(this.elementSizes, this.clientX, this.clientY, dndManager.overObject, this.layout.verticalLayout);
                } else {
                    dndManager.readyToDrop(false);
                    this.view.markAsNotDroppable();
                }

            } else {
                if (this.draggable && !!this.isEnabled()) { //handleCanDrag
                    this.view.markAsDraggable();
                } else { //handleCantDrag
                    this.view.markAsNotDraggable();
                }
            }
        },
        /**
         * setOverElement
         * @param overElement
         */
        setOverElement : function(overElement) {
            this.overElement = overElement;
        },
        /**
         * setMousePosition
         * @param clientX
         * @param clientY
         */
        setMousePosition : function(clientX, clientY) {
            this.clientX = clientX;
            this.clientY = clientY;
        },
        /**
         * draggingLeave
         * @param event
         *  remove all dragging related css styles
         */
        draggingLeave : function(event) {
            if (!!this.isEnabled()) {
                this.overElement = null;
                dndManager.overObject = null;
                this.view.markAsNotDroppable();
                this.view.removePlaceHolder();
            }
        },
        /**
         * applyAfterDragg function
         */
        applyAfterDragg : function() {
            this.draggable = false;
            this.droppable = false;

            if (this.afterDrag) {
                var thi$ = this;

                var afterDragParams = this.afterDrag.split(',');
                for (var param in afterDragParams) {
                    switch (afterDragParams[param]) {
                        case 'draggable' :
                            thi$.draggable = true;
                            break;
                        case 'dropabble' :
                            thi$.droppable = true;
                            break;
                        case 'disable' :
                            thi$.setEnabled(false);
                            break;
                        case 'childDelete' :
                            //check if children length now less then count of answer make this MSA dropable
                            if (thi$.children.length <= thi$.numOfAnswers) {
                                this.droppable = true;
                                dndManager.readyToDrop(true);
	                            this.view.removePlaceHolder();
                            }

                            break;
                    }
                }
            }

            this.manageDND();
        },

        /**
         * addChild function
         * @param child object
         */
        addChild:function (child) {

            if (!!!child) {
                return;
            }

            var xml = child.cfg.data;

            var childReductionStep = 0, childOptimumFontSize = 0;
            if (child.children.length > 0) {
                childReductionStep = child.children[0].view.reductionStep;
                childOptimumFontSize = child.children[0].view.optimumFontSize;
            }

            if (xml) {
                this.createChild(xml, child, childReductionStep, childOptimumFontSize); //create new subAnswer child (source of the dragged object)
            }
        },

        /**
         * perform dropping event
         * @param dropAnswerId
         */
        droppingBySystemEvent : function(dropAnswerId) {
            var draggSourceElement = dndManager.getBankItem(dropAnswerId);

            if (!!!draggSourceElement) {
                draggSourceElement = dndManager.getItem(dropAnswerId);
            }

            var sourceElement = (draggSourceElement ? draggSourceElement : dndManager.inDragObject);

            if(!!!draggSourceElement && !!!dndManager.inDragObject) {
                return;
            }

            var xml = (draggSourceElement ? draggSourceElement.cfg.data : dndManager.inDragObject.cfg.data);

            var childReductionStep = 0, childOptimumFontSize = 0;
            if (sourceElement.children.length > 0) {
                childReductionStep = sourceElement.children[0].view.reductionStep;
                childOptimumFontSize = sourceElement.children[0].view.optimumFontSize;
            }

            if (xml) {
                this.createChild(xml, draggSourceElement, childReductionStep, childOptimumFontSize); //create new subAnswer child (source of the dragged object)

                dndManager.afterDrop(true);     //set after drop flag - true

                this.applyAfterDrop(dropAnswerId, false);
            }
        },

        /**
         * droppingEvent
         * handling of the dropping event: create new subAnswer child
         * @param event
         * @param dropAnswerId
         */
        droppingEvent : function(event, dropAnswerId) {
            if (!this.isEnabled()) {
                return;
            }

            var isDroppableNow = true;

            if (!!this.beforeDrop) {
                var beforeDropParams = this.beforeDrop.split(',');
                for (var param in beforeDropParams) {
                    switch (beforeDropParams[param]) {
                        case 'checkIfDroppable' : //check multiSubAnswer full
                            isDroppableNow = (this.children.length < this.numOfAnswers);
                            break;
                    }
                }
            }

            if (!isDroppableNow) {
                dndManager.readyToDrop(false);
                return;
            }

            if (!!dropAnswerId) {  //simulate dropping event

                this.droppingBySystemEvent(dropAnswerId);

            } else if (!!dndManager.canDrop(this.view.cfg.id) && !!this.isEnabled() && !dndManager.dropStarted) {

	            dndManager.dropStarted = true;

                // dragged object bank source option - get, parse and send to factory
                var draggSourceElement = dndManager.getBankItem(dndManager.inDragObject.answerId);

                if (!this.cfg.IsBank) {
                    if (!!!draggSourceElement) {
                        draggSourceElement = dndManager.getItem(dndManager.inDragObject.answerId);
                    }
                }

                var sourceElement = (draggSourceElement ? draggSourceElement : dndManager.inDragObject);

                var xml = sourceElement.cfg.data;

	            //check for child xml inside subAnswer xml
	            if(xml.children.length == 0 && sourceElement.children.length) {
		            jQuery(xml).append(sourceElement.children[0].cfg.data);
	            }

                if (sourceElement.children.length > 0) {
                    this.childReductionStep = sourceElement.children[0].view.reductionStep;
                    this.childOptimumFontSize = sourceElement.children[0].view.optimumFontSize;
                } else {
                    this.childReductionStep = this.children[0].children[0].cfg.reductionStep;
                    this.childOptimumFontSize = this.children[0].children[0].cfg.optimumFontSize;
                }

                if (xml) {
                    this.createChild(xml, null, this.childReductionStep, this.childOptimumFontSize); //create new subAnswer child (source of the dragged object)
                    dndManager.afterDrop(true);    //set after drop flag - true
                }

                this.applyAfterDrop(dndManager.inDragObject.answerId, this.cfg.bankMode != 'dragAndCopy');
                this.view.markAsNotDroppable();

	            setTimeout(function() {
		            dndManager.dropStarted = false;
	            }, 0)
            }

        },
        /**
         * create subAnswer child
         * @param xml
         */
        createChild : function(xml, draggSourceElement, childReductionStep, childOptimumFontSize) {

            var lastChildIndex = this.lastChildIndex || 0;

            var insertBefore, insertAfter;

            if((lastChildIndex == 0) && (this.children.length > 0)){
                insertBefore = this.children[0].view._view;
            } else if((lastChildIndex > 0) && (this.children.length > 0) && (this.children.length > lastChildIndex)) {
                if(this.children[lastChildIndex]){
                    insertBefore = this.children[lastChildIndex].view._view;
                } else {
                    insertBefore = this.children[0].view._view;
                }

            } else {
               insertBefore = null;
               insertAfter = null;
            }

	        var thi$ = this;

            //create subAnswer child
            var newChild = componentFactory.create({data: xml, parent: this.view._content.attr('id'),
                checkable : true,
                dndContainer : 'mtq',
                mode : 'dragAndDropToMultiAnswer',
                IsBank : this.cfg.IsBank,
                bankMode : this.cfg.bankMode,
	            taskmode: this.cfg.taskmode,
                firstKeyDown: this.cfg.firstKeyDown,
                resetIncorrect : this.cfg.resetIncorrect,
	            taskViewDomElement : this.cfg.taskViewDomElement,
                ownerObject : thi$,
                insertAfter: insertAfter,
                insertBefore : insertBefore,
                reductionStep : childReductionStep,
                optimumFontSize : childOptimumFontSize,
                content_css : {'float' : ENV.contentDirection == "ltr" ? "left" : "right"},
                onRendered : function() {},
                applyAbsoluteMinimum: true,
                onAbsMin : function(){}
            });

            if (newChild) {
                this.insert(newChild, lastChildIndex);
            } else {
                // log something
            }

            newChild.setEnabled(true);
            newChild.view.setElementSize(this.elementSizes);
            newChild.setAnswer(true);  //mark this subAnswer as answered after drop

            if (typeof newChild.cfg.firstKeyDown == 'function') { //check for function existence
                newChild.cfg.firstKeyDown();    //trigger progress event of the task
            }

            this.lastCreatedChild = newChild;

        },
        /**
         * remove wanted child from the children array
         * @param child
         */
        removeChild : function(child) {

            if (child) {
                //DOM manipulations cancel touch events
                //child.view.dispose();
                dndManager.insertIntoRecycleBin(child.view._view);

                this.remove(child);
                this.applyAfterDragg();
            }
        },
        /**
         * applyAfterDrop function
         */
        applyAfterDrop : function() {
            var thi$ = this;

            if (dndManager.afterDrop()) { //mouseLeave after dropping

                thi$.analizeDNDMode(thi$.dndMode);    //init draggable/droppable

                thi$.draggable = false;
                thi$.droppable = false;

                dndManager.overObject = null;
                dndManager.readyToDrop(false);

                var afterDropParams = thi$.afterDrop.split(',');
                for (var param in afterDropParams) {
                    switch (afterDropParams[param]) {
                        case 'draggable' :
                            thi$.draggable = true;
                            break;
                        case 'dropabble' :
                            thi$.droppable = true;
                            break;
                        case 'removePlaceHolder' :
                            thi$.view.removePlaceHolder();
                            break;
                    }
                }

                thi$.manageDND();
            }
        }

    });

    // Add checkable behavior to MultiSubAnswer
    t2k.component.subAnswer.MultiSubAnswer.addBehavior(t2k.behavior.checkable, {
        /*
         * isEmpty - Are we empty or we have at least 1 filled subAnswer
         */
        isEmpty: function() {
            var returnVal = true;

            jQuery.each(this.children, function(index, child) {
                if (!child.isEmpty()) {
                    returnVal = false;
                    return false;
                }
            });

            return returnVal;
        },

        /**
         * checkForPartOfSequence
         * @param index
         * @param checkResult
         * @param nextCorrectAnswer
         */
        checkForPartOfSequence : function(index, checkResult, prevCorrectAnswer, firstCorrectAnswer) {

            var prev_child = this.children[index - 1],
                first_child = this.children[index - 2],
                i;

            if (prev_child && first_child && (prev_child.answerId == prevCorrectAnswer) && (first_child.answerId == firstCorrectAnswer)) {
                prev_child.setEnabled(false);
                prev_child.state = 'partiallyCorrect';
                first_child.setEnabled(false);
                first_child.state = 'partiallyCorrect';
                return true;
            }
            return false;


        },
        /**
         * runCheck perform check for all subAnswer components according to the task mode
         */
        runCheck : function(applyFeedback) {

            var checkResult = { correct: 0,
                partiallyCorrect: 0,
                predictedIncorrect: 0,
                incorrect: 0,
                expected: 0,
                checked: 0,
                empty: 0 };

            var thi$ = this;

            if (this.cfg.taskmode == 'sequencing') {  //check for correct answers in the specific order (order of set of correct answers)
                jQuery.each(thi$.cfg.answers.correct, function(index, objCorrectAnswer) {
                    var arrCorrectAnswers = objCorrectAnswer.split(',');

                    checkResult.expected = arrCorrectAnswers.length;

                    var child, index, iscorrectSequence, answer_index;

                    for (index = 0; index < thi$.children.length; index++) {
                        child = thi$.children[index];

                        if (!!child) {
                            checkResult.empty += child.isEmpty() ? 1 : 0;

                            if ((index < arrCorrectAnswers.length) && child.answerId == arrCorrectAnswers[index]) {
                                child.state = 'correct';
                            } else {
                                //check for part of sequence
                                //if answer isn't correct find index of this answer in correct answers set of 3 elements
                                answer_index = arrCorrectAnswers.indexOf(child.answerId);
                                if ((index >= 0) && (index - 2 >= 0)) {
                                    iscorrectSequence = thi$.checkForPartOfSequence(index, checkResult, arrCorrectAnswers[answer_index - 1], arrCorrectAnswers[answer_index - 2]);
                                } else {
                                    iscorrectSequence = false;
                                }

                                if (iscorrectSequence) {
                                    child.state = 'partiallyCorrect';
                                } else {
                                    child.state = 'incorrect';
                                }
                            }

	                        applyFeedback && child.setEnabled(false);
                        }
                    }

	                //set check result values and apply local feedback
	                for (var i = 0; i < thi$.children.length; i++) {
		                checkResult[thi$.children[i].state]++;
		                thi$.children[i].setLocalFeedback(thi$.children[i].state, applyFeedback);
	                }

                });


            } else {

                jQuery.each(thi$.cfg.answers.correct, function(index, objCorrectAnswer) {
                    var arrCorrectAnswers = objCorrectAnswer.split(',');

                    checkResult.expected = arrCorrectAnswers.length;

                    thi$.children.forEach(function(child) {
                        checkResult.empty += child.isEmpty() ? 1 : 0;

                        var IsCorrectAnswer = false;
                        var answerIndex = jQuery.inArray(child.answerId, arrCorrectAnswers);
                        IsCorrectAnswer = ((answerIndex > -1) && !child.isEmpty());

                        if (IsCorrectAnswer) {
                            arrCorrectAnswers.splice(answerIndex, 1);
                            checkResult.correct += 1;
	                        child.setLocalFeedback('correct', applyFeedback);
                        } else {
                            checkResult.incorrect += 1;
	                        child.setLocalFeedback('incorrect', applyFeedback);
                        }

                        if (child.view.children.length == 0) { //subAnswer is not empty
                            child.setLocalFeedback('full');
                        }

	                    applyFeedback && child.setEnabled(false);

                    });
                });
            }

            if (checkResult.empty == 0) {
                checkResult.empty = checkResult.expected - thi$.children.length;
            }

            return checkResult;
        },

	    reset: function() {
		    var copy_children = this.children.slice();

		    copy_children.forEach(function(child) {
			    child.reset();
		    });

		    delete copy_children;
	    },

        /**
         * reset all wrong children after pressing 'try again'
         */
        resetOnTryAgain : function() {

            var copy_children = this.children.slice();

            copy_children.forEach(function(child) {
                child.resetOnTryAgain();
            });

            delete copy_children;
        },
        /**
         * deleteWrongAnswers - remove wrong subAnswers after show answer
         */
        deleteWrongAnswers : function() {

            jQuery(this.children).each(function(index, child) {  //remove wrong subAnswers
                if (!child.isMarkedAsSystemCorrect() && !child.isMarkedAsCorrect()) {
                    child.deleteSubAnswer();
                }
            });

            //TODO: check for it
            if (this.children.length > this.cfg.answers.correct[0].split(',').length) {
                var child = (this.children[this.children.length - 1]);
                child.deleteSubAnswer();
            }

        },

        /**
         * onShowAnswer - after pressing show answer: set correct answer and mark as system answer
         */
        onShowAnswer : function() {
            var thi$ = this;

            if (this.cfg.taskmode == 'sequencing') {  //check for correct answers in the specific order (order of set of correct answers)

                thi$.lastChildIndex = 0;

                //get correct index children order based on set of correct answers
                //order children array based on this index

                var index_array = [], child, child_index, child_obj;

                jQuery.each(thi$.cfg.answers.correct, function(answersCount, objCorrectAnswer) {
                    var arrCorrectAnswers = objCorrectAnswer.split(',');

                    //remove distracted options
                    jQuery(thi$.children).each(function(index, child){
                        if(jQuery.inArray(child.answerId, arrCorrectAnswers) == -1) {
                            child.view.dispose();
                            thi$.remove(child);
                        }
                    });

                    //add missing answers
                    jQuery.each(arrCorrectAnswers, function (index, correctAnswerId) {
                        child_obj = thi$.findChildByAnswer(correctAnswerId);
                        if (!!!child_obj) { //this subanswer not found in the children - add it
                            thi$.droppingBySystemEvent(correctAnswerId);
                        }
                    });

                    //get correct index children order based on set of correct answers
                    jQuery.each(arrCorrectAnswers, function (index, correctAnswerId) {
                        child_obj = thi$.findChildByAnswer(correctAnswerId);

                        if(!!!child_obj) { //this subanswer not found in
                            child_index = -1
                        } else {
                            child_index = thi$.children.indexOf(child_obj);
                        }

                        if(child_index >=0) {
                            index_array.push(child_index);
                        }
                    });

                    //find missing indexes
                    thi$.orderChildren(index_array);
                });


                thi$.children.forEach(function (child) {
                    if (!child.isMarkedAsCorrect()) {
                        child.markAsSystemCorrect();
                        child.setEnabled(false);
                    }
                });

            } else if (!!!this.cfg.IsPlaceholders) {  //hidden template - keep correct answers, remove wrong and add missed

                jQuery.each(thi$.cfg.answers.correct, function (index, objCorrectAnswer) {
                    var arrCorrectAnswers = objCorrectAnswer.split(',');

                    arrCorrectAnswers.forEach(function (correctAnswerId) {
                        var child = thi$.findChildByAnswer(correctAnswerId);

                        if (!child) {
                            thi$.droppingBySystemEvent(correctAnswerId);
	                        thi$.lastCreatedChild.setLocalFeedback('systemCorrect', true);
                            thi$.lastCreatedChild.setEnabled(false);
                        } else {
	                        child.setLocalFeedback('correct', true);
                            child.setEnabled(false);
                        }

                    });

                });


            } else {

                jQuery.each(thi$.cfg.answers.correct, function(index, objCorrectAnswer) {
                    var arrCorrectAnswers = objCorrectAnswer.split(',');

	                var arrWrongChildren = [];

	                thi$.children.forEach(function(child) {
		                var IsCorrectAnswer = false;
		                var answerIndex = jQuery.inArray(child.answerId, arrCorrectAnswers);
		                IsCorrectAnswer = ((answerIndex > -1) && !child.isEmpty());

		                if (IsCorrectAnswer) {
			                arrCorrectAnswers.splice(answerIndex, 1);
			                child.setLocalFeedback('correct', true);
		                } else {
			                arrWrongChildren.push(child);
		                }
	                });

	                arrWrongChildren.forEach(function (child, i) {
		                child.setSystemAnswer(arrCorrectAnswers[0]);
		                arrCorrectAnswers.splice(0, 1);
		                child.setLocalFeedback('systemCorrect', true);
	                });
                });
            }

        },
        /**
         * findChildByAnswer
         * @param answerId
         */
        findChildByAnswer : function(answerId) {

            var correctChild;

            this.children.forEach(function(child) {
                if (child.answerId == answerId) {
                    correctChild = child;
                    return false;
                }
            });

            return correctChild;
        }

    })

})();
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
 * Private:
 * Function: prepareConfiguration
 * Extract the answers values from the xml
 *
 * Parameter:
 *  param - {XML} mSaXml The Multi subAnswer configuration XML.
 *
 * Returns:
 *  {Object} that contains answers values
 */
function prepareConfiguration(mSaXml) {
    // The result object.
    var result = {
        answers : {
            correct: []
        }
    };

    //Iterate the XML 'correct' options.
    jQuery(mSaXml).find("correct").find("set").each(function(index, elXml) {
        var answer = jQuery.trim(jQuery(elXml).text());
        result.answers.correct.push(answer);
    });

    // Return the result.
    return result;
} // End of prepareConfiguration

function getEventName(thi$, eventName) {
    var eventName;
    for (var key in thi$.eventsMap) {
        if (thi$.eventsMap[key] == eventName) {
            eventName = key;
        }
    }
    return eventName;
}
////////////////////////////////////////
// SRC End --> t2k/component/subAnswer/MultiSubAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/subQuestion/SubQuestionView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div class='subQuestion' id='{{id}}'>\
        <div id={{id}}_content></div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.subQuestion.SubQuestionView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        },
        
        /**
         * compact
         * do nothing
         */
        compact : function(){
        	// don't compact me
        }

    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/subQuestion/SubQuestionView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/subQuestion/SubQuestion.js
////////////////////////////////////////
(function() {

    t2k.component.subQuestion.SubQuestion = t2k.component.Composite.subClass({
    	
    	/** The class' name (for debugging purpose). */
        name: 't2k.component.subQuestion.SubQuestion',

        /**
         * Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef: {
            compact: [
                {spaceEater: 'textOnly'}
            ]
        },

        ctor: function(config) {
            // Delegate
            this._super(config);

            this.view = this.createNewView(t2k.component.subQuestion.SubQuestionView, this.cfg);
            this.startComposite2({parent: this.view.cfg.id + '_content'});
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();

////////////////////////////////////////
// SRC End --> t2k/component/subQuestion/SubQuestion.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/balloon/BalloonView.js
////////////////////////////////////////
(function () {

    var TEMPLATE =
        "<div id='{{id}}' class='balloon_popup hidden'>\
        	<div id='{{id}}_balloon_icon' class='balloon_icon hidden'><span id='correct'>8</span><span id='part'>5</span><span id='wrong'>></span></div>\
        	<div id='{{id}}_content' class='balloon_popup_content'></div>\
        	<div id='{{id}}_balloon_arrow' class='balloon_arrow'></div>\
        	<div id='{{id}}_balloon_close' class='balloon_close'>\
			    $\
			    <span class='mobile-touch-area'></span>\
        	</div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template:TEMPLATE,
        layout:'inline'
    }; // End of defaultConfig.

    t2k.component.balloon.BalloonView = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.balloon.BalloonView',

        /**
         * 2d0 - complete doc
         */
        ctor:function (config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

            var thi$ = this;

            this._balloon_close.add(this._balloon_icon).click(function () {
                thi$.dispatchEvent('onClose');
            });
        },

        removeContent:function () {
            this._content.html('').width('');
        },

        reset:function () {
            this._view.css('left', 0).removeClass('hidden').css('opacity', 0.01).width('');
        },

        show:function (cfg) {
            var content = this._content,
                btn = this.cfg.btn = cfg.btn,
                balloonIcon = this._balloon_icon,
                constraint = this.cfg.constraint = jQuery(cfg.constraint),
                viewport = this.cfg.viewport = jQuery(cfg.viewport),
                icon = this.cfg.icon = cfg.icon,
                dir = this.cfg.open = cfg.open || 'bottom';

            //if allready has button, unwrap and set as not active
            if (this.current) {
                this._view.stop();
                this.current.removeClass('active').unwrap();
                this.current = null;
            }

            //wrap balloon with temp container and set active
            this.current = this.cfg.btn.addClass('active').wrap('<span class="balloon_wrapper" />');

            if (icon) balloonIcon.attr('class', 'balloon_icon').addClass(icon);
            else balloonIcon.addClass('hidden');

            //set content max width
            content.addClass(icon ? 'max_width_icon' : 'max_width');

            //hide close button
            if (cfg.close === false) this._balloon_close.addClass('hidden');

			positionBalloon.call(this);

        },

        setNewWidth:function (maxTaskWidth) {
            var thi$ = this,
//                iconWidth = thi$._balloon_icon.outerWidth(true),
//                iconWidth =  (0.75 + 1.5) * ENV.REM,
            	iconWidth =  thi$._balloon_icon.css('font-size').px2int() + thi$._balloon_icon.css('margin-left').px2int() + thi$._balloon_icon.css('margin-right').px2int(),
                closeiconWidth = 18, // this is left / right coordinate + fontSize form css.
//                twoSidesBorder = this._view.css('border-width').px2int() * 2,
                twoSidesBorder =  2, //this is hardCoded 2 cause IE doesn't get the borderWidth
                contentMargins = thi$._content.css('margin-right').px2int() + thi$._content.css('margin-left').px2int(),
//                tmpWidth = ENV.behaviors.isIE ? newWidth + 4 : newWidth;
            // setting it always to max_width - according to task
                tmpWidth = this._view.css('max-width').px2int();
            	tmpWidth = (tmpWidth < maxTaskWidth) ? tmpWidth : maxTaskWidth;
            	
            	var maxContentWidth = tmpWidth - iconWidth - contentMargins - twoSidesBorder - closeiconWidth;
            	
                this._view.outerWidth(tmpWidth);

                thi$._content.outerWidth(maxContentWidth);
        },


        close:function () {
        	
            var thi$ = this;

            this._view.animate({
                'opacity':0,
                'top':this.cfg.defaultAnimationTop
            }, ENV.behaviors.balloonButtonAnimateDuration, function () {
                thi$._view.addClass('hidden');
                thi$._content.html('');

                //if allready has button, unwrap and set as not active
                if (thi$.current) thi$.current.removeClass('active').unwrap();
                thi$.current = null;
            });
        }
    });

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Private Functions.
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    function positionBalloon() {

	    function callback(css, cfg) {

		    this._view.css(css);

		    var currTop = (css.top ? css.top : this._view.css('top')),
			    arrowHeight = this._balloon_arrow.outerHeight(true);

		    if(cfg.vertical === "bottom") {
			    currTop -= arrowHeight;
		    } else {
			    currTop += arrowHeight;
		    }

		    this._balloon_arrow.removeClass('top bottom').addClass(cfg.vertical === "top" ? "bottom" : "top");
		    this._balloon_arrow.position({
			    my:'center middle',
			    at:'center' + ' ' + (cfg.vertical === "top" ? "bottom-1" : "top-1"),
			    of:this.cfg.btn.find('.balloon-button-icon'),
			    collision:"none"
		    });

		    this._view.css({
			    'opacity':0
		    }).animate({
				'opacity':1,
				'top':currTop
			}, ENV.behaviors.balloonButtonAnimateDuration);
	    }

	    this._view.appendTo(this.cfg.btn.parent());

	    var position_cfg = {
		    my:(ENV.contentDirection == 'ltr' ? 'left' : 'right') + ' top',
		    at:(ENV.contentDirection == 'ltr' ? 'left' : 'right') + ' bottom',
		    of:this.cfg.btn,
		    collision:'fit flip',
		    using:callback.bind(this),
		    within:this.cfg.viewport
	    };

	    this._view.position(position_cfg);
    }

})();


////////////////////////////////////////
// SRC End --> t2k/component/balloon/BalloonView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/balloon/Balloon.js
////////////////////////////////////////
(function () {

    t2k.component.balloon.Balloon = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.balloon.Balloon',

        /**
         * Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef:{
            init:[
//                {setBalloonSizeByChild:null},
                {showView:null},
                {setEnabled : true}

            ],
            compact:[

            ],
            loose:[

            ],
            reduce:[

            ]
        },

        ctor:function (config) {
            var thi$ = this;

            // Delegate
            this._super(config);
            // Create the view

            this.view = this.createNewView(t2k.component.balloon.BalloonView, copy(this.cfg, {
                events:{
                    onClose:function () {
                        thi$.close();
                    }
                }
            }));


        },

        show:function (cfg) {

            this.cfg = cfg;
            var cfgCopy = copy({}, cfg), thi$ = this;
            this.cfgCopy = cfgCopy;

            if (!cfgCopy.icon) this.cfg.icon = null;
            this.cfg = copy(cfgCopy, this.cfg);

            this.view.removeContent();
            this.view.reset();

            // 2d0: fix configuration - we're deleting the view template now
            delete this.cfg.template;

            this.layout.layoutSequenceCounter = 0;

            //init the composite properties to start over
            this.layout.onRenderedCounter = 0;
            this.children = [];
            this.layout.setLayoutSequence('init');
            //ends here

            //set the width of view._content , view._view according to task width
            var taskWidth = cfg.btn.parents('.task_wrapper_internal').width();
            this.view.setNewWidth(taskWidth);

            // init balloon component,
            // and show balloon on component render.
            var balloonComponent = this.startComposite2(override(this.cfg, {
                data:jQuery(this.cfg.data),
                setSrcAtStart : this.cfg.setSrcAtStart,
                parent:this.view._content,
                parentType:'balloon',
                dontEnableBlowup:true,
                container:this.view._content,
	            isBlowup: true,
                autoplay : false // this.cfg.autoplay - disable auto narration !!! up to CGT support
            }));

        },


        initCompositeLayouter:function () {
            this.cfg.data = jQuery('<data/>').attr('numOfChildren', 1);
            this._super();

        },

        showView:function () {
            this.view.show(this.cfgCopy);
            this.opened = true;
            this.compositeRenderComplete();
        },
//
//        setBalloonSizeByChild:function () {
//            var child = this.children[0];
//            //set the width of view._content , view._view according to image width
//            this.view.setNewWidth(child.view._view.width(), false);
//            this.compositeRenderComplete();
//
//        },

        close:function () {
            this.view.close();
            this.opened = false;
        },

        isOpened:function () {
            return this.opened;
        }
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();

////////////////////////////////////////
// SRC End --> t2k/component/balloon/Balloon.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/definition/DefinitionView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div class='definition' id='{{id}}'>\
            <div id='{{id}}_content'></div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.definition.DefinitionView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

	        this.maxSize = {'width' : 0, 'height' : 0}; //for mtqMathLayout
        },
        
        /**
         * getSize
         * override
         * @returns size
         */
        getSize:function () {
            //in case of empty definition return zero size
            if (this.children.length == 0) {
                return {'width':0, 'height':0};
            } else {

	            if(this.maxSize && this.maxSize.height > 0) {
		            return this.maxSize;
	            } else {
	                return this.children[0].getSize();
	            }

            }
        }
    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/definition/DefinitionView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/definition/Definition.js
////////////////////////////////////////
(function() {

    t2k.component.definition.Definition = t2k.component.Composite.subClass({

    	/** The class' name (for debugging purpose). */
        name: 't2k.component.definition.Definition',

        ctor: function(config) {
            // Delegate
            this._super(config);

            this.view = this.createNewView(t2k.component.definition.DefinitionView, this.cfg);
            this.startComposite2(copy({parent: this.view.cfg.id + '_content'}, config));
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();
////////////////////////////////////////
// SRC End --> t2k/component/definition/Definition.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mtq/MtqAreaView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mtq.MtqAreaView
     * @desc A MTQArea View class
     * @namespace t2k.component.mtq
     * @extends t2k.component.BaseComponentView
     */
    var TEMPLATE =
        "<div id='{{id}}' class='mtqArea vertical'>\
            <div id={{id}}_content></div>\
        </div>";

	var areaInnerPadding = 21;

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.mtq.MtqAreaView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        },
        
        /**
         * applyHorizontalStyle
         * @param size {width, height}
         */
        applyHorizontalStyle : function(size) {
	        this._view.find('.spacer').remove();
            this._view.css({'width' : size.areaWidth + areaInnerPadding}).removeClass('vertical').addClass('horizontal');
        },

        /**
         * applyVerticalStyle
         * @param size {width, height}
         */
        applyVerticalStyle : function(size) {
	        this._view.find('.spacer').remove();
            this._view.css('width', size.areaWidth).removeClass('horizontal').addClass('vertical');
        }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/mtq/MtqAreaView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mtq/MtqArea.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mtq.MtqArea
     * @desc A MTQ Area class
     * @namespace t2k.component.mtq
     * @extends t2k.component.Composite
     */
    t2k.component.mtq.MtqArea = t2k.component.Composite.subClass({

        name: 't2k.component.mtq.MtqArea',

        ctor: function(config) {
            // Delegate
            this._super(config);

            /**
             * Calculate DnD modes mode
             * @type {Object}
             */
            this.dndModes = calcDndModes(config);

            /**
             * check if random required
             * @type {Boolean}
             */
            this.IsRandom = !!this.cfg.IsRandom;

	        //in case of no bank randomize with flip of children
	        if (!this.cfg.dummyMode && !this.cfg.IsBank) {
		        // always random on first run
		        var firstRun = true, childrenCount = this.cfg.data.children.length;

		        while (this.allCorrect(firstRun) && childrenCount--){
			        this.xmlRandomize(this.cfg.mode == 'matching');
			        // on second run etc.. check.
			        firstRun = false;
		        }
	        }

            /**
             * MtqAreaView
             * @type {Object}
             */
            this.view = this.createNewView(t2k.component.mtq.MtqAreaView, this.cfg);

            // start composite
            this.startComposite2({
                parent:this.view.cfg.id + '_content',
                mode:this.cfg.mode,
                dndModes:this.dndModes,
                IsPlaceholders:this.cfg.IsPlaceholders,
                bankMode:this.cfg.bankMode,
                IsBank:this.cfg.IsBank,
                resetIncorrect:this.cfg.resetIncorrect,
                firstKeyDown:this.cfg.firstKeyDown,
                checkable:true,
                insertBefore:config.insertBefore,
                reductionStep:config.reductionStep,
                optimumFontSize:config.optimumFontSize,
	            taskViewDomElement:config.taskViewDomElement
            });

	        if (this.IsRandom && (this.cfg.mode != 'sequencing')) {
		        this.view.domRandomize();
	        }

        },
        
        /**
         * allCorrect
         * check if cgf.data (xml) set by correct sunAnswers
         * @param firstRun {Boolean}
         * @returns {Boolean}
         */
        allCorrect : function(firstRun){
        	
        	// on first run - all answers are correct
        	if (firstRun) return true;
        	// on second run etc.. check only the sorting mode (the rest is surely !allCorrect)
        	if (this.cfg.mode != 'sorting') return false;
        	
        	var $mSA, allCorrect = true;
        	// check sorting correctness
        	jQuery(this.cfg.data).find('multiSubAnswer').each(function(index, mSA){
        		$mSA = jQuery(mSA);
        		// get correct set array
        		var correctSetArray = $mSA.find('correct set').text().split(',');
        		
        		// loop subAnswers and check
        		$mSA.find('subAnswer').each(function(index, subAnswer){
        			var subAnswerId = jQuery(subAnswer).attr('answerId');
        			if (jQuery.inArray(subAnswerId, correctSetArray) == -1){
        				allCorrect = false;
        				return false;
        			}
        		});
        		
        		// exit each on false
        		if (!allCorrect){
        			return false;
        		}
        		
        	});
        	
        	// return value
        	return allCorrect;
        },

	    /**
	     * xmlRandomizeChildren
	     * random flip children in modes matching and sorting
	     */
	    xmlRandomizeChildren: function() {
			var xmlData = this.cfg.data, childrenCollection = xmlData.children, i, flipArray = [], placeHolder, target0, target1;

		    // init random idx
		    this.getRandomIdx(childrenCollection.length);

		    for (i = 0 ; i < childrenCollection.length / 2 ; i++) {
			    flipArray[i] = [ this.getRandomIdx(), this.getRandomIdx() ];
			    placeHolder = Compat.createNodeNextTo(this.cfg.data, 'placeHolder', true); //jQuery('<placeHolder/>') ---> IE9 fix
			    target0 = jQuery(childrenCollection[flipArray[i][0]]);
			    target1 = jQuery(childrenCollection[flipArray[i][1]]);

			    placeHolder.insertBefore(target0);
			    target0.insertBefore(target1);
			    target1.insertBefore(placeHolder);
			    placeHolder.remove();
		    }

	    },

        /**
         * xmlRandomize
         * randomize xml according to the mtq task mode - flip subAnswers or subAnswers children
         * @param flipChildren
         */
        xmlRandomize : function(flipChildren){

            var $xml = jQuery(this.cfg.data);

            var mtqAreaSubAnswersArray = $xml.children().find('subAnswer');
            var subAnswerSum = mtqAreaSubAnswersArray.length;

	        if(subAnswerSum === 0) {
		        return;
	        }

            // init random idx
            this.getRandomIdx(subAnswerSum);

            // reduce subAnswerSum to even number
            // 'flip array' [length = subAnswerSum / 2]
            // each index: [this.getRandomIdx(), this.getRandomIdx() ]

            var flipArray = [], placeHolder, target0, target1, i;

            if (!flipChildren) {  //flip subAnswers

                for (i = 0 ; i < subAnswerSum / 2 ; i++) {
                    flipArray[i] = [ this.getRandomIdx(), this.getRandomIdx() ];
                    placeHolder = Compat.createNodeNextTo(this.cfg.data, 'placeHolder', true); //jQuery('<placeHolder/>') ---> IE9 fix
                    target0 = jQuery(mtqAreaSubAnswersArray[flipArray[i][0]]);
                    target1 = jQuery(mtqAreaSubAnswersArray[flipArray[i][1]]);

                    placeHolder.insertBefore(target0);
                    target0.insertBefore(target1);
                    target1.insertBefore(placeHolder);
                    placeHolder.remove();
                }

            } else { //flip subAnswers children

                for (i = 0; i < subAnswerSum / 2; i++) {
                    flipArray[i] = [ this.getRandomIdx(), this.getRandomIdx() ];
                    placeHolder = Compat.createNodeNextTo(this.cfg.data, 'placeHolder', true); //jQuery('<placeHolder/>') ---> IE9 fix

                    // get target and subanswer answerId of 0 & 1
                    target0 = this.getSAchild(mtqAreaSubAnswersArray[flipArray[i][0]]);
                    var target0_answerId = jQuery(mtqAreaSubAnswersArray[flipArray[i][0]]).attr('answerId');

                    target1 = this.getSAchild(mtqAreaSubAnswersArray[flipArray[i][1]]);
                    var target1_answerId = jQuery(mtqAreaSubAnswersArray[flipArray[i][1]]).attr('answerId');

                    // flip xml
                    placeHolder.insertBefore(target0);
                    target0.insertBefore(target1);
                    target1.insertBefore(placeHolder);

                    // flip answerId
                    jQuery(mtqAreaSubAnswersArray[flipArray[i][0]]).attr('answerId', target1_answerId);
                    jQuery(mtqAreaSubAnswersArray[flipArray[i][1]]).attr('answerId', target0_answerId);

                    // remove place holder
                    placeHolder.remove();
                }
            }
        },

        /**
         * getSAchild
         * @param subAnswerObj
         * @return {Object}
         */
        getSAchild:function (subAnswerObj) {
            // retChild will be the subAnswer child, (not the correct tag)
            var retChild = jQuery(subAnswerObj).children('textviewer,imageviewer,mediaplayer,mathfield');
            if (retChild.length) return retChild;
            throw 'error on mtqArea getSAchild';
        },

        /**
         * getRandomIdx
         * @param val
         * @return {Number}
         */
        getRandomIdx : function(val){

            // if val, create the dummy array and return.
            if (typeof val == "number") {
                this.randomDummyArray = [];
                var i;

                for (i = 0; i < val; i++) {
                    this.randomDummyArray[i] = true;
                }

                return;
            }

            this.randomDummyArray = this.randomDummyArray || [];

            // init randomIdx with  available = false, to get in the while
            var randomIdx = {idx : 0, available : false}, count = 0;

            while (!randomIdx.available && count < this.randomDummyArray.length) {
                randomIdx.idx = Math.floor(Math.random() * this.randomDummyArray.length);
                randomIdx.available = this.randomDummyArray[randomIdx.idx];
                count++;
            }

            this.randomDummyArray[randomIdx.idx] = false;

            return randomIdx.idx;
        },

        /**
         * setEnabled
         * @param flag {Boolean}
         */
        setEnabled : function(flag){
            this._super(flag);

            this.children.forEach(function(child) {
                child.setEnabled(flag);
            });
        },

        /**
         * setMyState - override
         * set state of component
         * @param state {XML}
         */
        setMyState : function(state){

            if(state.length > 0){
                this.setEnabled(jQuery(state).attr('enabled') === 'true');

                var thi$ = this;

                //reverse current random order of bank subAnswers
                jQuery(this.view.xmlRandomRevert).children().each(function(index, line){

                    var firstElement = thi$.view.children[parseInt(jQuery(line).attr('firstindex'))];
                    var secondElement = thi$.view.children[parseInt(jQuery(line).attr('secondindex'))];

                    try {
                        if(jQuery.trim(jQuery(line).attr('action')) == 'insertBefore'){
                            firstElement._view.insertBefore(secondElement._view);
                        } else {
                            firstElement._view.insertAfter(secondElement._view);
                        }

                    } catch(e){
                        // do nothing
                    }

                });

                //apply reverse random order of bank subAnswers from state
                jQuery(state).find('randominsert').children().each(function(index, line){

                    var firstElement = thi$.view.children[parseInt(jQuery(line).attr('firstindex'))];
                    var secondElement = thi$.view.children[parseInt(jQuery(line).attr('secondindex'))];

                    try {
                        if(jQuery.trim(jQuery(line).attr('action')) == 'insertBefore'){
                            firstElement._view.insertBefore(secondElement._view);
                        } else {
                            firstElement._view.insertAfter(secondElement._view);
                        }

                    } catch(e){
                    }

                });
            }
        },

        /**
         * addMyState - override
         * get state of component
         * @return state
         */
        addMyState : function(){
            var state = jQuery('<state/>')
                .append(this.view.xmlRanDomInsert);
            return state;
        },

        /**
         * changeSize
         * @param bankElement
         */
        changeSize : function (bankElement){
            this.view.setWidth(bankElement);  // TODO: refactor on MTQ layouter
        },

        /**
         * getSqueezedSizes returns all possible sizes of the component based on current size
         * @return {Array}
         */
        getSqueezedSizes : function(parentWidth){

            var arrPermutations = [], areaWidth = 0, areaHeight = 0,
                childHeightMargin = 21, childWidthMargin = 0;

            // get vertical width
            var width = parentWidth + 1, size;

            while (width > 0 ) {
                size = this.simulateSizeByWidth(width - 1);
                areaWidth = 0; areaHeight = 0;

                if (!size) {
                    width = null;
                } else {


                    //size than we got from simulateSizeByWidth function is neto without child margins
                    areaWidth = childWidthMargin * this.children.length;
                    areaHeight = childHeightMargin * this.children.length;

                    areaWidth += size.width;
                    areaHeight += size.height;

                    arrPermutations.push({'areaWidth' : areaWidth, 'areaHeight' : areaHeight, 'vertical' : true, 'layoutStatus' : this.layoutStatus});
                    width = size.width;
                }
            }

            return arrPermutations.slice();  //return cloned copy of array
        },

        /**
         * getHiddenHorizontalSize
         * @return {Array}
         */
        getHiddenHorizontalSize : function() {
	        var compositeWidth = this.cfg.parent.width(),
		        widthCounter = 0,
		        compositeHeight = 0,
		        numOfLines = 1,
		        elementsMap = {};

	        var domChildren = this.view._content.children(), numOfChildren = domChildren.length;

	        for (var index = 0; index < numOfChildren; index++) {

		        var childId = jQuery(domChildren[index]).attr('id');
		        if (!childId) continue;

		        var childIndex = this.getChildIndexById(childId);
		        var item = {};

		        var childSize = this.children[childIndex].getHorizontalSize();

		        item.index = index;
		        item.width = childSize.width;
		        item.height = childSize.height;

		        widthCounter += item.width;

		        if (index == 0) {
			        compositeHeight += item.height;
		        }

		        if (widthCounter > compositeWidth) {
			        // increace num of lines
			        numOfLines++;
			        compositeWidth = widthCounter - item.width;
			        widthCounter = 0;
			        compositeHeight += item.height;
		        }

		        if (!elementsMap[numOfLines]) {
			        elementsMap[numOfLines] = 0;
		        }

		        elementsMap[numOfLines]++;
	        }

	        // manual 'squeezeComposite'
	        // only if there is more than one line in the area

	        if (numOfLines > 1) {
		        // calc optimum number of children per line
		        var optimumNumChildrenPerLine = Math.round(numOfChildren / numOfLines);

		        // calc the composite width
		        compositeWidth = (this.children[childIndex].getHorizontalSize().width + 1) * optimumNumChildrenPerLine;

	        } else {
		        compositeWidth = (this.children[childIndex].getHorizontalSize().width);
	        }

	        return {'areaWidth' : compositeWidth, 'areaHeight' : compositeHeight};
        },

        /**
         * getHorizontalSize
         * @return {Object}
         */
        getHorizontalSize : function(parentWidth) {

            if(!this.cfg.IsPlaceholders) {
                return this.getHiddenHorizontalSize();
            }

            var compositeWidth = parentWidth || this.cfg.parent.width(),
                widthCounter = 0,
                compositeHeight = 0,
                numOfLines = 1,
	            childMargin = 21,
                elementsMap = {},
	            childObj = null,
	            childSize = null;

            var domChildren = this.view._content.children('.mtqSubQuestion'), numOfChildren = domChildren.length;

            for (var index = 0; index < numOfChildren; index++) {

                var childId = jQuery(domChildren[index]).attr('id');
                if (!childId) continue;

                var childIndex = this.getChildIndexById(childId);
                var item = {};

	            childObj = this.children[childIndex];
	            childSize = childObj.getHorizontalSize();

                item.index = index;
                item.width = childSize.width;
                item.height = childSize.height;

                widthCounter += item.width;

                if (index == 0) {
                    compositeHeight += item.height;
                }

                if (widthCounter > compositeWidth) {
                    // increace num of lines
                    numOfLines++;
                    compositeWidth = widthCounter - item.width;
                    widthCounter = 0;
                    compositeHeight += item.height;
                }

                if (!elementsMap[numOfLines]) {
                    elementsMap[numOfLines] = 0;
                }

                elementsMap[numOfLines]++;
            }

	        // manual 'squeezeComposite'
	        // only if there is more than one line in the area
	        if (numOfLines > 1) {
		        // calc optimum number of children per line
		        var optimumNumChildrenPerLine = Math.round(numOfChildren / numOfLines);

		        // calc the composite width
		        compositeWidth = 0;
		        for(var i = 0; i<optimumNumChildrenPerLine; i++) {
			        compositeWidth += this.children[i].getHorizontalSize().width + childMargin;
		        }

		        compositeWidth -= childMargin;
	        } else {
		        compositeWidth = 0;
		        for(var i = 0; i<this.children.length; i++) {
			        compositeWidth += this.children[i].getHorizontalSize().width + childMargin;
		        }
		        compositeWidth -= childMargin;
	        }

            var bordersWidth = (this.view._view.css("borderLeftWidth").px2int() + this.view._view.css("borderRightWidth").px2int());

            compositeWidth += bordersWidth;

            return {'areaWidth' : compositeWidth, 'areaHeight' : compositeHeight};
        },

        /**
         * setVerticalLayout
         */
        setVerticalLayout : function(){
            this._super();
            this.view._view.css({'width' : '', 'height' : ''}).removeClass('horizontal').removeClass('vertical');
        },

        /**
         * applyHorizontalStyle
         * @param size {width, height}
         */
        applyHorizontalStyle : function(size) {
            this.view.applyHorizontalStyle(size);

            this.children.forEach(function(child) {
                if (child.applyHorizontalStyle) {
                    child.applyHorizontalStyle();
                }
            });
        },

        /**
         * applyVerticalStyle
         * @param size
         */
        applyVerticalStyle : function(size) {
	        if(size.layoutStatus && (size.layoutStatus != this.layoutStatus)) {
		        !!this[size.layoutStatus] && this[size.layoutStatus]();
	        }

            this.view.applyVerticalStyle(size);
            this.children.forEach(function(child) {
                if (child.applyVerticalStyle) {
                    child.applyVerticalStyle();
                }
            });
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /*
     * calcDndMode - calculate subAnswer/multiSubAnswer DnD mode by the specified config
     * @param config - {Object} configuration
     */
    function calcDndModes(config) {
        // Consts
        var modes = {
            dragAndDropNoReplace: 'dragAndDropNoReplace',
            dragAndDropAndReplace: 'dragAndDropAndReplace',
            dragAndDropToMultiAnswer: 'dragAndDropToMultiAnswer',
            dragAndDropAndInsert: 'dragAndDropAndInsert'
        };

        var subAnswerDndMode = null;
        var multiSubAnswerDndMode = null;
        var dndModes = null;

        switch (config.mode) {
            case 'matching' :
                // Set mode for bank / no bank
                subAnswerDndMode = (config.IsBank) ? modes.dragAndDropNoReplace : modes.dragAndDropAndReplace;
                break;
            case 'sorting' :
            case 'sequencing' :
                // Set mode for hidden / visible
                if (config.IsPlaceholders) {
                    // Set mode for bank / no bank
                    subAnswerDndMode = (config.IsBank) ? modes.dragAndDropNoReplace : modes.dragAndDropAndReplace;

                } else { // (!config.IsPlaceholders)
                    subAnswerDndMode = modes.dragAndDropToMultiAnswer;
                    multiSubAnswerDndMode = modes.dragAndDropAndInsert;
                }

                break;
        }

        dndModes = {
            subAnswer: subAnswerDndMode,
            multiSubAnswer: multiSubAnswerDndMode
        };

        return dndModes;
    }

})();

////////////////////////////////////////
// SRC End --> t2k/component/mtq/MtqArea.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mtq/MtqSubQuestionView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mtq.MtqSubQuestionView
     * @desc A MtqSubQuestion View class
     * @namespace t2k.component.mtq
     * @extends t2k.component.BaseComponentView
     */
    var TEMPLATE =
        "<div id='{{id}}' class='mtqSubQuestion' >\
            <div id='{{id}}_content' class='mtqSubQuestion_content'></div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    t2k.component.mtq.MtqSubQuestionView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(override({}, config, defaultConfig));
        },

         /**
         * applyHorizontalStyle
         * @param size {width, height}
         */
        applyHorizontalStyle : function(size) {
            this.verticalLayout = false;
            this._view.css({'width' : size.width, 'display' : 'inline-block'}).removeClass('vertical').addClass('horizontal');
        },

	    applyVerticalStyle : function(size) {
		    this.verticalLayout = true;
		    this._view.css({'width' : size.width, 'display' : 'inline-block'}).removeClass('horizontal').addClass('vertical');

	    }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/mtq/MtqSubQuestionView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mtq/MtqSubQuestion.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mtq.MtqSubQuestion
     * @desc A MTQSubQuestion class
     * @namespace t2k.component.mtq
     * @extends t2k.component.Composite
     */
    t2k.component.mtq.MtqSubQuestion = t2k.component.Composite.subClass({

    	/** The class' name (for debugging purpose). */
        name: 't2k.component.mtq.MtqSubQuestion',

        ctor: function(config) {
            // Delegate
            this._super(config);

	        this.horizontalSize = null;
	        this.verticalSize = null;

            this.view = this.createNewView(t2k.component.mtq.MtqSubQuestionView, this.cfg);

            this.startComposite2(copy({
                parent: this.view.cfg.id + '_content',
                dndContainer : 'mtq',
                mode : this.cfg.dndModes.subAnswer,
                taskmode : this.cfg.mode,
                IsBank : this.cfg.IsBank,
                bankMode : this.cfg.bankMode
            }, config));

            /**
             * @property
             * @type {String}
             */
            this.layoutStatus = 'loose';
        },
        
        /**
         * returns component horizontal size {'width' : Int, 'height' : Int}
         * @return {Object}
         */
        getHorizontalSize : function() {
            var horizontalSize = {'width' : 0, 'height' : 0};

            var childrenMap = [], childSize;

            jQuery(this.children).each(function(index, child) {

                if (child.name.toLowerCase().indexOf('definition') >= 0) {
                    childSize = child.getSize(false);
                    if (childSize) {
                        childSize.name = 'definition';
                        childrenMap.push(childSize);
                    }
                } else {
                    // subAnswer only
                    childSize = child.getSize();
                    if (childSize) {
                        childSize.name = 'subAnswer';
                        childrenMap.push(childSize);
                    }
                }

            });

            var definitionHSize = {'width' : 0, 'height' : 0};
            var subAnswerHSize = {'width' : 0, 'height' : 0};
	        var widthAddition = 30; //2*14 - margins + 2*1 borders
	        var heightAddition = 21; //bottom margin
	        var definitionCompactWidthAddition = 21; //right-margin 21px from css

            if (this.layoutStatus == 'loose') {  // get loose horizontal size

                childrenMap.forEach(function(child) {
                    if (child.name == 'definition') { // get definition size
                        definitionHSize.width = child.width;
                        definitionHSize.height = child.height;
                    } else {
                        subAnswerHSize.width = child.width;
                        subAnswerHSize.height = child.height;
                    }
                });
                
                horizontalSize.width = (definitionHSize.width > subAnswerHSize.width ? definitionHSize.width : subAnswerHSize.width) + widthAddition;
                horizontalSize.height =  definitionHSize.height + subAnswerHSize.height + heightAddition;

            } else { // get compact horizontal size

                childrenMap.forEach(function(child) {
                    if (child.name == 'definition') { // get definition size
                        definitionHSize.width = child.width + definitionCompactWidthAddition;
                        definitionHSize.height = child.height;
                    } else {
                        subAnswerHSize.width = child.width;
                        subAnswerHSize.height = child.height;
                    }
                });

                horizontalSize.width = definitionHSize.width + subAnswerHSize.width + widthAddition;
                horizontalSize.height = (definitionHSize.height > subAnswerHSize.height ? definitionHSize.height : subAnswerHSize.height) + heightAddition;
            }

	        this.horizontalSize = horizontalSize;
            return this.horizontalSize;
        },

        /**
         * returns component vertical size {'width' : Int, 'height' : Int}
         * @return {Object}
         */
        getVerticalSize : function() {
            var verticalSize = {'width' : 0, 'height' : 0};

            var childrenMap = [], childSize;

            jQuery(this.children).each(function(index, child){

                if (child.name.toLowerCase().indexOf('definition') >= 0) {
                    childSize = child.getSize(true);
                    if (childSize) {
                        childSize.name = 'definition';
                        childrenMap.push(childSize);
                    }
                } else {
                    // multiSubAnswer only
                    childSize = child.getSize();
                    if (childSize) {
                        childSize.name = 'subAnswer';
                        childrenMap.push(childSize);
                    }
                }

            });

            var definitionVSize = {'width' : 0, 'height' : 0};
            var subAnswerVSize = {'width' : 0, 'height' : 0};
            var widthAddition, heightAddition;

            if (this.layoutStatus == 'loose') {  // get loose horizontal size
                childrenMap.forEach(function(child) {
                    if (child.name == 'definition') { // get definition size
                        definitionVSize.width = child.width;
                        definitionVSize.height += child.height;
                    } else {
                        subAnswerVSize.width = child.width;
                        subAnswerVSize.height = child.height;
                    }
                });

                heightAddition = 21;
                widthAddition = 21;

                //in loose state definitions are in the top and in the bottom of the multiSubAnswer
                verticalSize.width = (definitionVSize.width > subAnswerVSize.width ? definitionVSize.width : subAnswerVSize.width) + widthAddition;
                verticalSize.height = definitionVSize.height + subAnswerVSize.height + heightAddition;

            } else { // get compact horizontal size

                childrenMap.forEach(function(child) {
                    if (child.name == 'definition') { // get definition size
                        definitionVSize.width = child.width + 21;
                        definitionVSize.height += child.height;
                    } else {
                        subAnswerVSize.width = child.width;
                        subAnswerVSize.height = child.height;
                    }
                });

                heightAddition = 21;
                widthAddition = 30;

                verticalSize.width = definitionVSize.width + subAnswerVSize.width + widthAddition;
                verticalSize.height = (definitionVSize.height > subAnswerVSize.height ? definitionVSize.height : subAnswerVSize.height) + heightAddition;
            }

            this.verticalSize = verticalSize;

            return this.verticalSize;
        },

	    applyHorizontalStyle: function() {
		    this.view.applyHorizontalStyle(this.horizontalSize);
	    },

	    applyVerticalStyle: function() {
		    this.view.applyVerticalStyle(this.verticalSize);
	    }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();
////////////////////////////////////////
// SRC End --> t2k/component/mtq/MtqSubQuestion.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mtq/MtqMultiSubQuestionView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mtq.MtqMultiSubQuestionView
     * @desc A MtqMultiSubQuestion View class
     * @namespace t2k.component.mtq
     * @extends t2k.component.BaseComponentView
     */
    var template = "<div id='{{id}}' class='mtqMultiSubQuestion'>\
                        <div id='{{id}}_content' class='mtqMultiSubQuestion_content' />\
                    </div>";
    
    /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
        layout: 'inline',
        /** The mustache template to render. */
        template: template
    }; // End of defaultConfig.

    t2k.component.mtq.MtqMultiSubQuestionView = t2k.component.BaseComponentView.subClass({

        /*
         * @constructor
         * @param config - {Object} configuration
         */
        ctor: function(config) {
            this._super(override({}, config, defaultConfig));
            this.verticalLayout = true;
        },

        /**
         * in case of hidden template - put definitions on the top of the multiSubAnswer
         * @param layoutStatus
         */
        adjustDefinitionStyle : function(layoutStatus) {
            if (!this.verticalLayout && !this.cfg.IsPlaceholders) {
                if (layoutStatus == 'loose') {
                    if (this._content.children('.definition').length > 1) {
                        //put definitions on top of the multiSubAnswer
                        this._content.children('.definition').css({'width' : '', 'display': 'block'});  //

                        //put last definition on the right side of the multiSubAnswer
                        if(ENV.contentDirection == "ltr"){
                            this._content.children('.definition').last().css({'right': '14px', 'position' : 'absolute', 'top' : 0});
                            
                        }else{
                            this._content.children('.definition').last().css({'left': '14px', 'position' : 'absolute', 'top' : 0});
                            
                        }
                        

                    }
                } else { //place definitions on both sides of the multiSubAnswer
                    if(ENV.contentDirection == "ltr"){
                        this._content.children('.definition').css({'display': 'inline-block', 'right': '', 'position' : '', 'top' : ''});
                            
                        }else{
                            this._content.children('.definition').css({'display': 'inline-block', 'left': '', 'position' : '', 'top' : ''});
                            
                        }
                }
            } else {
	            (layoutStatus == 'loose') && this._content.children('.definition').css({'display': 'block'});
            }

        },

        /**
         * applyHorizontalStyle
         * @param size {width, height}
         */
        applyHorizontalStyle : function(size) {
            this.verticalLayout = false;
	        //add this view inner padding to the width
	        var widthAddition = 14;
            this._view.css({'width' : size.width + widthAddition, 'display' : 'inline-block'}).removeClass('vertical').addClass('horizontal');
        },

        /**
         * applyVerticalStyle
         * @param size {width, height}
         */
        applyVerticalStyle : function(size) {
            this.verticalLayout = true;
	        var widthAddition = 28;
	        this._view.css({'width' : size.width + widthAddition, 'display' : 'inline-block'}).removeClass('horizontal').addClass('vertical');
        }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/mtq/MtqMultiSubQuestionView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mtq/MtqMultiSubQuestion.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mtq.MtqMultiSubQuestion
     * @desc Collection of MTQ definitions and subAnswers
     * @namespace t2k.component.mtq
     * @extends t2k.component.Composite
     */
    t2k.component.mtq.MtqMultiSubQuestion = t2k.component.Composite.subClass({

        name: 't2k.component.mtq.MtqMultiSubQuestion',

        /*
         * @constructor
         * @param config - {Object} configuration
         */
        ctor: function(config) {
            // delegate 
            this._super(config);

            /**
             * @property
             * @type {Object}
             */
            this.view = this.createNewView(t2k.component.mtq.MtqMultiSubQuestionView, config);

            // start composite functionality
            this.startComposite2(copy({
                parent: this.view.cfg.id + '_content',
                mode: this.cfg.dndModes.multiSubAnswer,
                taskmode : this.cfg.mode,
                dndContainer : 'mtq',
                dndModes: this.dndModes,
                IsPlaceholders : this.cfg.IsPlaceholders,
                IsBank : this.cfg.IsBank,
                bankMode : this.cfg.bankMode,
	            taskViewDomElement : this.cfg.taskViewDomElement
            }, config));

            /**
             * @property
             * @type {String}
             */
            this.layoutStatus = 'loose';
	        this.view._view.css('display', 'block');
            this.view.adjustDefinitionStyle(this.layoutStatus);
	        this.remSize = jQuery('body').css('font-size').px2int();

        }, // end of ctor

        /**
         * compact
         */
        compact : function(){
            this._super();
	        this.view._view.css('display', 'block');
            this.view.adjustDefinitionStyle(this.layoutStatus);
        },
        
        /**
         * loose
         */
        loose : function(){
            this._super();
	        this.view._view.css('display', 'block');
            this.view.adjustDefinitionStyle(this.layoutStatus);
        },

        /**
         * applyHorizontalStyle
         *
         */
        applyHorizontalStyle : function() {
            this.view.applyHorizontalStyle(this.getHorizontalSize());
            this.view.adjustDefinitionStyle(this.layoutStatus);

            this.children.forEach(function(child) {
                if (child.applyHorizontalStyle) {
                    child.applyHorizontalStyle();
                }
            });
        },

        /**
         * applyVerticalStyle
         */
        applyVerticalStyle : function() {
            this.view.applyVerticalStyle(this.getVerticalSize());
            this.view.adjustDefinitionStyle(this.layoutStatus);

            this.children.forEach(function(child) {
                if (child.applyVerticalStyle) {
                    child.applyVerticalStyle();
                }
            });
        },

        /**
         * setVerticalLayout
         */
        setVerticalLayout : function(){
            this._super();
            this.view._view.css({'width' : '', 'height' : ''}).removeClass('horizontal');
        },

        /**
         * returns component horizontal size {'width' : Int, 'height' : Int}
         * @return {Object}
         */
        getHorizontalSize : function(){

            var horizontalSize = {'width' : 0, 'height' : 0};

            var childrenMap = [], childSize;

            jQuery(this.children).each(function(index, child){

                if (child.name.toLowerCase().indexOf('definition') >= 0) {
                    childSize = child.getSize();
                    if (childSize) {
                        childSize.name = 'definition';
                        childrenMap.push(childSize);
                    }
                } else if (child.getHorizontalSize) {
                    // multiSubAnswer only
                    childSize = child.getHorizontalSize();
                    if (childSize) {
                        childSize.name = 'multiSubAnswer';
                        childrenMap.push(childSize);
                    }
                }

            });

            var definitionHSize = {'width' : 0, 'height' : 0};
            var multiSubAnswerHSize = {'width' : 0, 'height' : 0};
            var marginAddition = 2 * this.remSize, paddingAddition = this.remSize;

            if (this.layoutStatus == 'loose') {  // get loose horizontal size

                childrenMap.forEach(function(child) {
                    if (child.name == 'definition') { // get definition size
                        definitionHSize.width += child.width;
                        definitionHSize.height = child.height;
                    } else {
                        multiSubAnswerHSize.width += child.width;
                        multiSubAnswerHSize.height = child.height;
                    }
                });
                
                //in loose state definitions are above the multiSubAnswer, first on the left edge and second is in the right edge
                horizontalSize.width = (definitionHSize.width > multiSubAnswerHSize.width ?
	                definitionHSize.width : multiSubAnswerHSize.width) +
	                (this.cfg.IsPlaceholders ? 0 : paddingAddition * 2);
                horizontalSize.height = definitionHSize.height + multiSubAnswerHSize.height + ((childrenMap.length) * marginAddition);

            } else { // get compact horizontal size

                childrenMap.forEach(function(child) {
                    if (child.name == 'definition') { // get definition size
                        definitionHSize.width += child.width + marginAddition;
                        definitionHSize.height = child.height;
                    } else {
                        multiSubAnswerHSize.width += child.width;
                        multiSubAnswerHSize.height = child.height;
                    }
                });

                //in compact state definitions are on both sides of the multiSubAnswer, first in the left and the second is in the right
                horizontalSize.width = definitionHSize.width + multiSubAnswerHSize.width;
                horizontalSize.height = (definitionHSize.height > multiSubAnswerHSize.height ? definitionHSize.height : multiSubAnswerHSize.height) + marginAddition;

            }

            this.horizontalSize = horizontalSize;
            return this.horizontalSize;
        },
        /**
         * returns component vertical size {'width' : Int, 'height' : Int}
         * @return {Object}
         */
        getVerticalSize : function(includeFullOuterSize) {
            var verticalSize = {'width' : 0, 'height' : 0};

            var childrenMap = [], childSize, definitionsCount = 0;

            jQuery(this.children).each(function(index, child){

                if (child.name.toLowerCase().indexOf('definition') >= 0) {
	                definitionsCount ++;
                    childSize = child.getSize();
                    if (childSize) {
                        childSize.name = 'definition';
                        childrenMap.push(childSize);
                    }
                } else if (child.getVerticalSize) {
                    // multiSubAnswer only
                    childSize = child.getVerticalSize();
                    if (childSize) {
                        childSize.name = 'multiSubAnswer';
                        childrenMap.push(childSize);
                    }
                }

            });

            var definitionVSize = {'width' : 0, 'height' : 0};
            var multiSubAnswerVSize = {'width' : 0, 'height' : 0};

            childrenMap.forEach(function(child) {
                if (child.name == 'definition') { // get vertical size
                    definitionVSize.width = child.width;
                    definitionVSize.height += child.height + 21;
                } else {
                    multiSubAnswerVSize.width = child.width;
                    multiSubAnswerVSize.height = child.height;
                }
            });

            //in loose state definitions are in the top and in the bottom of the multiSubAnswer
            verticalSize.width = (definitionVSize.width > multiSubAnswerVSize.width ? definitionVSize.width : multiSubAnswerVSize.width) +
            (includeFullOuterSize ? (this.remSize * 2) : 0);
            verticalSize.height = definitionVSize.height + multiSubAnswerVSize.height;

            this.verticalSize = verticalSize;
            return this.verticalSize;
        }

    });
    
})();
////////////////////////////////////////
// SRC End --> t2k/component/mtq/MtqMultiSubQuestion.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/bank/BankConfig.js
////////////////////////////////////////

// Bank constant values
t2k.component.bank.BankConstants = {
	
		minOffsetTop  : 70,
		minOffsetBottom  : 50,
		scrollableSelector : 'div.sequence_content_scrollable',
		parentSelector : 'div.sequence_body',
		bankAppendToElement : 'div.player',
		maxWidthFactor : 3,
		bankPaddingReadOnly : 25,
		scrollBarWidth : 17,
        marginTop : 28,
        minViewportHeight: 600 //px

};


////////////////////////////////////////
// SRC End --> t2k/component/bank/BankConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/bank/BankView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.bank.BankView
     * @desc A bank view class
     * @namespace t2k.component.bank
     * @extends t2k.component.BaseComponentView
     */

    var TEMPLATE =
        "<div id='{{id}}' class='bank not_selectable'>\
        	<div id='{{id}}_content' class='bank_content'></div>\
        </div>";

    var TEMPLATE_READONLY =
        "<div id='{{id}}' class='bank_readonly not_selectable'>\
        	<div id='{{id}}_content' class='bank_content'></div>\
        </div>";

    /**
     * @name defaultConfig
     * @desc private, Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
        layout: 'tile',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    var defaultConfigReadOnly = {
        layout: 'tile',
        /** The mustache template to render. */
        template: TEMPLATE_READONLY
    };

    //copy all constants from BankConstants
    var constants = t2k.component.bank.BankConstants;

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Class Declaration
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    t2k.component.bank.BankView = t2k.component.BaseComponentView.subClass({
        /**
         * @constructor
         * @desc see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, (config.bankMode == 'readOnly' ? defaultConfigReadOnly : defaultConfig)));

            /**
             * @property
             * @desc The bank's view parent, jquery object
             * @type {Object}
             */
            this._parent = this._view.parent();

            /**
             * @property
             * @type {Object}
             * @desc log of actions to make random movement (insertBefore/insertAfter) of children
             */
            this.xmlRanDomInsert;

            /**
             * @property
             * @type {Object}
             * @desc log of actions in order to revert random movement of children (return to feeding order)
             */
            this.xmlRandomRevert;
        },

        /**
         * @name setEnabled
         * @param flag
         */
        setEnabled : function(flag) {
            this._super(flag);
            this.initScroll(flag);
        },

        /**
         * @name initScroll
         * @desc listen to the scroll event of scrollable div, in order to slide bank element up/down
         */
        initScroll : function(flag) {

            // ref
            var thi$ = this;

            var beSideComponent = thi$.cfg.getComponentBeSideToBank();
            var beSideElement = beSideComponent.view._view;
            var divWithScroll = jQuery(constants.scrollableSelector);  //div element with scrollbars

            var offset_top = 0;
            var bankWrapperDiv = null;
            var bankOffsetLeft = 0;

            //handler for scroll event on scrollable div
            function fncScrollHandler(e) {
		        var bankOuterWidth = thi$._view.outerWidth();
		        var bankOuterHeight = thi$._view.outerHeight();

	            if (!!thi$.isEnabled()) {

		            var div_scrollTop = (jQuery(this).scrollTop());
		            offset_top = (div_scrollTop - beSideElement.offset().top + constants.minOffsetTop);

		            bankWrapperDiv = jQuery(document.getElementById('bankWrapper' + thi$.cfg.id));

		            if (beSideElement.offset().top < constants.minOffsetTop) {  //bank element is near beside component - make bank position fixed
			            // create a div that append to the body
			            if (!bankWrapperDiv.length) {
				            if ((bankOffsetLeft == 0)) {
					            bankOffsetLeft = thi$._view.offset().left;
				            }

				            bankWrapperDiv = Perf.create("div").attr('id', 'bankWrapper' + thi$.cfg.id).css({'position':'fixed', 'top':constants.minOffsetTop + 'px',
					            'left':bankOffsetLeft + 'px', 'width':bankOuterWidth + 'px', 'height':'10px', 'zIndex':4}).appendTo(jQuery(constants.bankAppendToElement));

				            thi$._view.css({position:'absolute', top:0, left:0});
				            bankWrapperDiv.append(thi$._view);

			            } else if(bankWrapperDiv.children().length == 0) {
				            thi$._view.css({position:'absolute', top:0, left:''});
				            bankWrapperDiv.css({'position':'fixed', 'top':constants.minOffsetTop + 'px',
					            'left':bankOffsetLeft + 'px', 'width':bankOuterWidth + 'px', 'height':'10px', 'zIndex':4});
				            bankWrapperDiv.append(thi$._view);
			            }

		            } else if (beSideElement.offset().top >= constants.minOffsetTop) {

			            if (bankWrapperDiv.length > 0) {
				            var dv = thi$._view.detach();
				            thi$.cfg.parent.append(dv);
				            bankWrapperDiv = null; dv = null;
			            }

			            //set absolute position to the bank when scroll got to the top of the beside component
			            thi$._view.css({position:'absolute', top:0, left:'',
				            'width':bankOuterWidth + 'px', 'height':bankOuterHeight + 'px'});
		            }

		            //set absolute position when gets to the bottom of the beside component
		            if (beSideElement.offset().top + (beSideElement.height() - bankOuterHeight) <= constants.minOffsetBottom) {

			            if (bankWrapperDiv && bankWrapperDiv.length > 0) {
				            var dv = thi$._view.detach();
				            thi$.cfg.parent.append(dv);
				            bankWrapperDiv = null; dv = null;
			            }

			            thi$._view.css({position:'absolute', top:(beSideElement.height() - bankOuterHeight) + 'px', left:'',
				            'width':bankOuterWidth + 'px', 'height':bankOuterHeight + 'px'});
		            }
	            }
            }

	        // unbind scroll (prevent duplication)
            divWithScroll.unbind('scroll', fncScrollHandler);

            //don't scroll disabled bank
            if(!flag){
                return;
            }
            
            divWithScroll.scroll(fncScrollHandler);
        },

        /**
         * @name getElementSize
         * @desc return subAnswer width and height
         * @return {Object}
         */
        getElementSize: function() {
          if(this.children.length == 0) {
              return null;
          }

          var childSize = this.children[0].getSize();

          return childSize;
        },

        /**
         * @name adjustBankStyle
         * @param adjustChildren {Boolean}
         * @desc chech bank width vs taskWidth, set bank width max(0.33 * taskWidth),
         * check bankHeight vs. viewport Height
         * on adjustChildren = true, adjust childen style for correct alignment
         */
        adjustBankStyle : function(adjustChildren) {

            var sidesPadding = (parseInt(this._view.css('padding-right')) + parseInt(this._view.css('padding-left')));

            if (this.children.length > 0) {
                this.bankWidth = this.children[0]._view.outerWidth(false);

                this.bankWidth += (this.cfg.bankMode == "readOnly" ? constants.bankPaddingReadOnly : sidesPadding);

                if(this._view.css('overflow-y') == 'auto') {
                    this.bankWidth += constants.scrollBarWidth;
                }

            } else {
                this.bankWidth = Compat.fullOuterWidth(this._view);
            }

            this._view.width(this.bankWidth);
            this.bankHeight = this._view.outerHeight(true);

            //Maximum width of the bank
            var parentDiv = this._view.parent(), vpDiv = this._view.parents(constants.parentSelector);

            var vpWidth = jQuery(parentDiv).innerWidth();
            var vpHeight = jQuery(parentDiv).innerHeight() - constants.marginTop;

            if (this.bankHeight > vpHeight && vpHeight >= constants.minViewportHeight ) {
                var tmp = Math.ceil(this.bankHeight / vpHeight);
                var newWidth = (this.bankWidth * tmp) - ((tmp - 1) * (sidesPadding / 2));

                //check if the new width is smaller then one third of the working area's width
                var maxWidth = Math.floor(vpWidth / constants.maxWidthFactor);

                this._view.find('.spacer').remove();

                if (maxWidth < newWidth) {
                    newWidth = this.bankWidth + constants.scrollBarWidth;
                    this._content.height(vpHeight - constants.marginTop);
                    this._view.css('overflow-y', 'auto');
                }

                this.bankWidth = newWidth;
                this._view.width(this.bankWidth);
            }

            this.bankHeight = this._view.outerHeight(true);

            this._view.css('direction', this.direction);
        },

        /**
         * @name markAsEnable
         * @param removeReusable
         */
        markAsEnable : function(removeReusable) {
            this._view.removeClass('disabled');

        },

        /**
         * @name markAsDisable
         */
        markAsDisable : function() {
            this._view.addClass('disabled');

            var bankWrapperDiv = document.getElementById('bankWrapper' + this.cfg.id);
            if (!!bankWrapperDiv) {
                this._view.css({top : '', left : ''});
	            var dv = this._view.detach();
	            this.cfg.parent.append(dv);

	            bankWrapperDiv.parentNode.removeChild(bankWrapperDiv);
	            dv = null; bankWrapperDiv = null;
            }

        },

        /**
         * @name markAsActive
         * @param flag {Boolean}
         */
        markAsActive : function(flag) {
            if (!!flag) {
                this._view.removeClass('disabled');
            } else {
                this._view.addClass('disabled');
            }

        },

	    markAsDroppable:function () {
		    if (!this._view.parent().length) {
			    this._view = jQuery(document.getElementById(this.cfg.id));
		    }

		    this._view.removeClass('not_droppable').addClass('droppable');
	    },

	    markAsNotDroppable:function () {
		    if (!this._view.parent().length) {
			    this._view = jQuery(document.getElementById(this.cfg.id));
		    }

		    this._view.removeClass('droppable').addClass('not_droppable');
	    }

    });

})();

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Private Functions.
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
////////////////////////////////////////
// SRC End --> t2k/component/bank/BankView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/bank/Bank.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.bank.Bank
     * @desc A bank class
     * @namespace t2k.component.bank
     * @extends t2k.component.Composite
     */
    t2k.component.bank.Bank = t2k.component.Composite.subClass({
    	
    	/** The class' name (for debugging purpose). */
        name: 't2k.component.bank.Bank',

        /**
         * @desc Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef: 'tileSequence',

        /**
         * @name ctor
         * @param config
         * @desc constructor
         */
        ctor: function(config) {
        	// Delegate
        	this._super(config);

            /**
             * @property
             * @desc The bank's mode (readOnly, dragAndDisable, dragAndCopy)
             * @type {String}
             */
        	this.mode = this.cfg.bankMode;

            /**
             * @property
             * @type {Boolean}
             */
            this.IsBankRandom = this.cfg.IsBankRandom;

            this.initView();

            // add to special configuration.
            // special configuration is a configuration for subAnswer,
            // that init by closeAnswer or mtqAnswer
            this.addToSpecialConfiguration({
                parent:this.view.cfg.id + '_content',
                data: this.cfg.data,
                dndContainer:'bank',
                mode:this.mode,
                taskmode:this.cfg.mode,
                checkable:false,
	            taskViewDomElement:this.cfg.taskViewDomElement
            });

            // start composite
            this.startComposite2({
                parent:this.view.cfg.id + '_content',
                data: this.cfg.data,
                style:this.cfg.style,
                fontColor:this.cfg.fontColor,
                reductionStep:this.cfg.reductionStep,
                optimumFontSize:this.cfg.optimumFontSize});

            if(this.IsBankRandom){  //don't apply randomize
                this.view.domRandomize();
            }

            if (!!!this.cfg.type)  //if bank type is mtq - don't apply style manipulations
                var thi$ = this;
		        window['globalEvents'].add({
			        fnc:function () {
				        (!!thi$) && (!!thi$.view) && thi$.view.adjustBankStyle(thi$.mode);
			        }
		        });

        },

        /**
         * @name initView
         * @desc bank view initiation
         */
        initView : function(){
            /**
             * @desc bank view
             * @type {Object}
             */
             this.view = this.createNewView(t2k.component.bank.BankView,copy(this.cfg, {bankMode: this.mode}));
        },

        /**
         * @name setEnabled
         * @param flag {Boolean}
         */
        setEnabled: function(flag){
        	
        	if(!flag){
        		this.view.markAsDisable();
        	} else {
        		this.view.markAsEnable();
        	}

            jQuery(this.children).each(function(i, child) {
			   	child.setEnabled(true);
		    });

        	this._super(flag);

	        if (this.mode.toLowerCase() !== "readonly") {
		        dndManager.addItem(this.view.cfg.id, this);
	        }
        },
        
        resetBankLockState: function () {
             jQuery(this.children).each(function(i, child) {
                child.resetBankLockState();
            });
            
        },

        /**
         * @name setMyState
         * @desc override, set state of component
         * @param flag {Boolean}
         */
        setMyState : function(state){

            if(state.length > 0){
                this.setEnabled(jQuery(state).attr('enabled') === 'true');
                
                var thi$ = this;

                //reverse current random order of bank subAnswers
                jQuery(this.view.xmlRandomRevert).children().each(function(index, line){

                    var firstElement = thi$.view.children[parseInt(jQuery(line).attr('firstindex'))];
                    var secondElement = thi$.view.children[parseInt(jQuery(line).attr('secondindex'))];

                    try {
                        if(jQuery.trim(jQuery(line).attr('action')) == 'insertBefore'){
                            firstElement._view.insertBefore(secondElement._view);
                        } else {
                            firstElement._view.insertAfter(secondElement._view);
                        }

                    } catch(e){
                        // do nothing
                    }

                });

                //apply reverse random order of bank subAnswers from state
                jQuery(state).find('randominsert').children().each(function(index, line){

                    var firstElement = thi$.view.children[parseInt(jQuery(line).attr('firstindex'))];
                    var secondElement = thi$.view.children[parseInt(jQuery(line).attr('secondindex'))];

                    try {
                        if(jQuery.trim(jQuery(line).attr('action')) == 'insertBefore'){
                            firstElement._view.insertBefore(secondElement._view);
                        } else {
                            firstElement._view.insertAfter(secondElement._view);
                        }

                    } catch(e){
                    }

                });
            }
        },

        /**
         * @name addMyState
         * @desc override, returns state of the bank component
         * @return Object
         */
        addMyState : function(){
           var state = jQuery('<state/>')
                .append(this.view.xmlRanDomInsert);
           return state;
        },

        /**
         * @name getElementSize
         * @desc returns bank subAnswer size (width, height)
         * @return Object
         */
        getElementSize: function(){
        	return this.view.getElementSize();
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();
////////////////////////////////////////
// SRC End --> t2k/component/bank/Bank.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mtq/MtqBankView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mtq.MtqBankView
     * @desc A MTQ bank view class
     * @namespace t2k.component.mtq
     * @extends t2k.component.bank.BankView
     */
     var TEMPLATE =
        "<div id='{{id}}' class='mtqBank vertical not_selectable'>\
        	<div id='{{id}}_content' class='mtqBank_content'></div>\
        </div>";
     /**
     * Private: defaultConfig
     * Hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	layout: 'tile',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.
    
    t2k.component.mtq.MtqBankView = t2k.component.bank.BankView.subClass({
         /** The class' name (for debugging purpose). */
        name: 't2k.component.mtq.MtqBankView',

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            config = override(config, defaultConfig);
            this._super(config);
        },
        /**
         * initScroll
         * listen to the scroll event of scrollable div, in order to slide bank element up/down
         */
        initScroll : function(flag) {
            
        }
    })
        
})();
////////////////////////////////////////
// SRC End --> t2k/component/mtq/MtqBankView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mtq/MtqBank.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mtq.MtqBank
     * @desc A MTQ Bank class
     * @namespace t2k.component.mtq
     * @extends t2k.component.bank.Bank
     */
    var bankMargin = 21;

    t2k.component.mtq.MtqBank = t2k.component.bank.Bank.subClass({

    	/** The class' name (for debugging purpose). */
        name: 't2k.component.mtq.MtqBank',

        /**
         * @name layoutSequenceDef
         * @desc Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         * @member
         * @type Object
         */
        layoutSequenceDef: 'tileSequence',

        ctor: function(config) {
            config.type = 'mtqBank';
            this._super(config);
        },

        /**
         * initView
         */
        initView : function(){
            this.view = this.createNewView(t2k.component.mtq.MtqBankView, copy(this.cfg, {bankMode: this.mode}));
        },
        
        /**
         * setVerticalLayout
         */
        setVerticalLayout : function(){
            var sideObjectWidth = parseInt(Compat.fullOuterWidth(this.cfg.getComponentBeSideToBank().view._view));
            
        	var parentWidth = this.view.cfg.parent.width();

            var remainderWidth = (parentWidth - sideObjectWidth);
            var size = this.simulateSizeByWidth(remainderWidth);

            this.view._view.find('.spacer').remove();
            this.view.setWidth(size ? size.width - (bankMargin * 2) : '');
            this.view._view.css({'height' : ''}).removeClass('horizontal').addClass('vertical');
        },

         /**
         * applyVerticalStyle
         * @param size
         */
        applyVerticalStyle : function(size) {
            this.view._view.find('.spacer').remove();
            this.view._view.removeClass('horizontal').addClass('vertical');
            this.view.setWidth(size.bankWidth - bankMargin);
        },

        /**
         * applyHorizontalStyle
         * @param size
         */
        applyHorizontalStyle: function(size) {
            this.view._view.find('.spacer').remove();
            this.view._view.removeClass('vertical').addClass('horizontal');
            this.view.setWidth(size.bankWidth - (this.view._view.hasClass('compact') ? 0 : bankMargin));
        }
    })

})();
////////////////////////////////////////
// SRC End --> t2k/component/mtq/MtqBank.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/cloze/ClozeConfig.js
////////////////////////////////////////

// Cloze constant values
t2k.component.cloze.ClozeConstants = {	
	clozeSpacing : 30,
	childWidthReduction: 0,
    'errorClass' : 'masc_error',
    'errorText' : 'ERROR : width of the cloze task is not wide enough to contain the bank component'

};


////////////////////////////////////////
// SRC End --> t2k/component/cloze/ClozeConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/cloze/ClozeArea.js
////////////////////////////////////////
(function () {
    /**
     * @class t2k.component.cloze.ClozeArea
     * @desc A cloze area class
     * @namespace t2k.component.cloze
     * @extends t2k.component.Composite
     * @type {Object}
     */
    t2k.component.cloze.ClozeArea = t2k.component.Composite.subClass({
        /**
         * The class' name (for debugging purpose)
         * @member name
         * @type String
         */
        name:'t2k.component.cloze.ClozeArea',

        /**
         * @name ctor
         * @param config
         */
        ctor:function (config) {
            // Delegate
            this._super(config);

            /**
             * Cloze area View
             * @property
             * @type Object
             */
            this.view = this.createNewView(t2k.component.cloze.ClozeAreaView, this.cfg);

            // get cloze dnd mode
            var modeData = analyzeClozeDNDMode(this.cfg.specialConfiguration.mode);

            // add members to special configuration
            // these configuration will latter initialize cloze's subAnswers
            this.addToSpecialConfiguration({dndContainer:'cloze', mode : modeData, bankMode : this.cfg.bankMode, checkable : true, showMFEmptyIcon : true});

            // start composite
            this.startComposite2({parent:this.view.cfg.id + '_content'});

            /**
             * @desc array of all subAnswers in cloze area
             * @type {children}
             */
            this.subAnswersArray = this.getChildrenRec(this.children, 'subanswer');
        },

        /**
         * @name getChildrenRec
         * @param childrenArray
         * @param childName
         * @returns {Array}
         * @desc array of children with wanted class name only
         */
        getChildrenRec:function (childrenArray, childName) {
            // if (!children) stop rec
            if (!childrenArray) return null;

            var name, childrenReducedArray = [], childRec, thi$ = this;
            // loop children
            jQuery(childrenArray).each(function (index, child) {
                // get class's last name
                name = child.name.split('.');
                name = name[name.length - 1].toLowerCase();
                // if option was found, push
                if (name == childName) {
                    childrenReducedArray.push(child);
                } else {
                    // rec child children
                    childRec = thi$.getChildrenRec(child.children, childName);
                    // and push results
                    jQuery(childRec).each(function (index, child) {
                        childrenReducedArray.push(child);
                    });
                }
            });

            return childrenReducedArray;
        },

        /**
         * @name setMyState
         * @desc set state of component
         * @param state {Object}
         */
        setMyState:function (state) {
            if (state.length > 0) {
                this.setEnabled(jQuery(state).attr('enabled') === 'true');
            }
        },

        /**
         * @name addMyState
         * @desc return state of component
         * @return state {Object}
         */
        addMyState:function () {
            var state = jQuery('<state/>');
            return state;
        },

        /**
         * @name changeSize
         * @param bankWidth
         * @param bankHeight
         */
        changeSize : function(bankWidth, bankHeight) {
            this.view.changeSize(bankWidth, bankHeight);
        },

        /**
         * @name evenSubAnswers
         * @desc calls from clozeAnswer method
         * @param subAnswerSize {Object}
         */
        evenSubAnswers:function (subAnswerSize) {
            this.subAnswersArray.forEach(function (subAnswer) {

                if (subAnswer.view.setStyle) {
                    subAnswer.view.setStyle(subAnswerSize);
                }

            });
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * @name analyzeClozeDNDMode
     * @param mode
     * @return {String}
     * @desc return cloze area mode (write, dragAndDropAndReplaceAndReturn) accordingly to the task mode (write, dragAndDisable, dragAndCopy)
     */
    function analyzeClozeDNDMode(mode){
    	switch(mode){
    		case 'write' :
    			mode = 'write';
    			break;
    		case 'dragAndDisable' :
    			mode = 'dragAndDropAndReplaceAndReturn';
    			break;
    		case 'dragAndCopy' :
    			mode = 'dragAndDropAndReplaceAndReturn';
    			break;
    		default : mode = 'write';
    	}

    	return mode;
    }

})();
////////////////////////////////////////
// SRC End --> t2k/component/cloze/ClozeArea.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/cloze/ClozeAreaView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.cloze.ClozeAreaView
     * @desc A cloze area view class
     * @namespace t2k.component.cloze
     * @extends t2k.component.BaseComponentView
     * @type {Object}
     */

    var TEMPLATE =
        "<div id='{{id}}' class='clozeArea {{mode}}'>\
            <div id={{id}}_content></div>\
        </div>";

    /**
     * @name defaultConfig
     * @desc Hold sensible defaults for the cloze area view to use.
     */
    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    var constants = t2k.component.cloze.ClozeConstants;

    t2k.component.cloze.ClozeAreaView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor
         * @desc see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

	        //set min-width according to max width of sub-answer
	        if(!!this.cfg.fieldsSize) {
		        this._view.css('min-width', this.cfg.fieldsSize + 'em');
	        }
        },

        /**
         * @name changeSize
         * @desc calls from clozeAnswer method, to change clozeArea's size accordingly to the bank width and height
         * @param bankWidth
         * @param bankHeight
         */
        changeSize : function(bankWidth, bankHeight) {

            var newWidth = (this.cfg.parent.width() - bankWidth - constants.clozeSpacing);
	        var minWidth = this._view.css('min-width').px2int();

		        //check if there is enough width to contain bank and beside component
            if ((newWidth + bankWidth > this.cfg.parent.width()) || (newWidth < bankWidth) || (newWidth < minWidth)) {
            	
            	var thi$ = this ;
            	
                function onNoSpaceReloadRejection() {
                	//ERROR
                	var mascDiv = Perf.create("div").css({'width' : thi$.cfg.parent.width(), height : thi$.cfg.parent.height()})
                	.addClass(constants.errorClass).html(constants.errorText);
                	thi$.cfg.parent.append(mascDiv);
	                ENV.host.playParams.config.afterCollapse = true;
                };

	            if (!ENV.host.playParams.config.afterCollapse) {
		            ENV.host.reload({
			            forceCollapsedShared:true,
			            reloadInitiator:"ClozeAreaView"
		            }, onNoSpaceReloadRejection);
	            }

	            //onNoSpaceReloadRejection();

            } else {
                this.width = newWidth;
	            this.setWidth(newWidth);
	            jQuery(this.children).each(function(index, child) {
		            child.setWidth(newWidth);
	            });

                if (this._view.height() < bankHeight) {
                    this._view.height(bankHeight);
                }
            }
        }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/cloze/ClozeAreaView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/cloze/ClozeView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.cloze.ClozeView
     * @desc A cloze component class
     * @namespace t2k.component.cloze
     * @extends t2k.component.textViewer.TextViewerView
     * @type {Object}
     */

    var TEMPLATE = "";

    /**
     * @name defaultConfig
     * @desc Private, hold sensible defaults for the question's view to use.
     */
    var defaultConfig = {
    	 layout: 'tile',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.
    
    var constants = t2k.component.cloze.ClozeConstants;

    t2k.component.cloze.ClozeView = t2k.component.textViewer.TextViewerView.subClass({    	
        /** The class' name (for debugging purpose). */
        name: 't2k.component.cloze.ClozeView',

        /**
         * @name ctor
         * @desc class constructor
         */
        ctor: function(config) {
            // Delegate.        	
        	this._super(copy(config, defaultConfig));
	        this.children = new Array();  //subAnswers components array
        	
        },

        /**
         * @name startManualComposite
         * @desc override super class method, increment manual composite, to handle subAnswer's creation
         */
        startManualComposite : function(){
        	this._super();        	
        	this._createSubAnswers();
        },
               
        /**
         * @name _createSubAnswers
         * @desc dispatchEvent onClozeViewReady in order to create cloze component children (subAnswers)
         */
        _createSubAnswers:function () {
            var thi$ = this;
            this.dispatchEvent("onBeforeClozeRebuild");

            var clozeFontColor = this._view.css('color');

            //create all subAnswer components
            this._view.find('subanswer').each(function (index, value) {
                thi$.dispatchEvent("onClozeViewReady", copy({'answerCfg':value, 'insertBefore':this, 'reductionStep':thi$.reductionStep,
                    'optimumFontSize':thi$.optimumFontSize, 'fieldsSize':thi$.cfg.fieldsSize, 'fieldsWidth':thi$.cfg.fieldsWidth,
                    'style':thi$._view.attr('class'), 'fontColor':clozeFontColor}, thi$));

                jQuery(value).remove();  //remove the source xml  <subAnswer> tag

            });
        },

	    /**
	     * on a new child, view dispatch event to presenter, that adds the child to itself
	     * and calls this function, to let view add the child also
	     * @param child
	     */
	    addChild : function(child) {
		    this.textViewerChildren.push(child);
	    },

	    setLineHeight: function() {
		    this._super();

		    //set line-height according to subAnswers height
		    var thi$ = this, compHeight, compFactorHeight, margin;

		    if (this.lineHeightConfig == 'keepEven') {

			    jQuery(this.children).each(function (index, child) {
				    compHeight = child.view._view.height();
				    thi$.setMaxLineHeight((compHeight * t2k.component.textViewer.TextViewerConstants.lineHeightEvenFactor) / 2);
			    });
			    this._view.css('line-height', this.maxLineHeight + 'px');

		    } else {

			    jQuery(this.children).each(function (index, child) {
				    compHeight = child.view._view.height();
				    compFactorHeight = compHeight * t2k.component.textViewer.TextViewerConstants.lineHeightCompactFactor;
				    child.view._view.parent().css('margin-top', (compFactorHeight - compHeight) + 'px');
			    });
		    }
	    }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/cloze/ClozeView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/cloze/Cloze.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.cloze.Cloze
     * @desc A cloze component class
     * @namespace t2k.component.cloze
     * @extends t2k.component.textViewer.TextViewer
     * @type {Object}
     */
    t2k.component.cloze.Cloze = t2k.component.textViewer.TextViewer.subClass({
    	
    	/** The class' name (for debugging purpose). */
        name: 't2k.component.cloze.Cloze',

        /**
         * @desc Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef: 'tileSequence',

        /**
         * @name ctor
         * @param config
         */
        ctor: function(config) {

            // init cloze members
            this.initMembers(config);

            // Delegate
            var clzCfg = override(config, this.prepareConfiguration(config));
        	this._super(clzCfg);

        },

        /**
         * @name initMembers
         * @param config
         */
        initMembers:function (config){

            /**
             * @property
             * @desc The cloze component mode (write, dragAndDropAndReplaceAndReturn)
             * @type {String}
             */
            this.mode = config.specialConfiguration.mode;

            /**
             * @property
             * @desc longest answer option
             * @type {Object}
             */
            this.fieldsSize = config.specialConfiguration.fieldsSize;

            this.fieldsWidth = config.specialConfiguration.fieldsWidth;

            // get data from special configuration
            config.lineHeightConfig = config.specialConfiguration.lineHeightConfig;
            config.additionLineHeight = config.specialConfiguration.additionLineHeight;
            config.optimumFontSize = config.specialConfiguration.optimumFontSize;
            config.bankMode = config.specialConfiguration.bankMode;
	        config.ignoreChecking = config.specialConfiguration.ignoreChecking;

            this.children = new Array();  //subAnswers components array
        },

        /**
         * @name initView
         * @desc Cloze component view initiation
         */
        initView : function(){   
        	var thi$ = this;
            /**
             * @desc cloze component view
             * @type {Object}
             */
        	this.view = this.createNewView(t2k.component.cloze.ClozeView,merge(copy(this.prepareTextViewerConfiguration(this.cfg), this.cfg), {
        		events:{
            		onAbsMin : function(){
            			thi$.cfg.onAbsMin();
            		},
            		
            		childSum : function(val){
            			thi$.layout.numOfChildren = val;
            		},
            		
            		childRendered : function(view){
            			thi$.layout.onRenderedCounter++;
            		},
            		
            		onTextViewerChildrenRendered : function(view){
			            view.children = thi$.children;
			            thi$.textViewerChildrenRendered(view);
            		}
            	}
        	}));
        },

        /**
         * @name reduce
         * @param val
         */
        reduce:function (val) {

            this._super(val);

            if (this.children == 0) {
                this.layout.canReduce = false;
                this.layout.onRendered();
                return;
            }

            this.children.forEach(function (child) {
                child.reduce();
            });
        },

        /**
         * @name setEnabled
         * @desc dispatch flag to children (as a composite)
         * @param flag {Boolean}
         */
        setEnabled : function(flag){        	 
        	this._super(flag);        	
        	
        	this.children.forEach(function(child) {
                 child.setEnabled(flag);
            });
        },

        /**
         * @name setMyState
         * @desc set state of component
         * @param state
         */
        setMyState : function(state){

            // ref
            var thi$ = this;

            jQuery(state).children().each(function(index, childState) {
               thi$.children[index].setState(childState);
            });
        },

        /**
         * @name addMyState
         * @desc override, returns state of the bank component
         * @return Object
         */
        addMyState : function(){
           var state = jQuery('<state>');
            
           jQuery(this.children).each(function(index, child) {
                state.append(child.getState());
           });
            
           return state;
        },

        /**
         * @name prepareConfiguration
         * @param config
         * @return {Object}
         */
        prepareConfiguration : function(config){
        	var result;
            var thi$ = this;

            result = {
                events:{
                    // This event is called when the view completes its construction. subAns
                    onClozeViewReady:function (config) {

                        // build data for subAnswers from special configuration
                        var newConfig =  override(config, {
                            data: config.answerCfg,
                            mode:thi$.mode,
                            bankMode:thi$.cfg.bankMode,
                            checkable:true,
                            insertBefore:config.insertBefore,
                            style:config.style,
                            fontColor:config.fontColor,
                            reductionStep:config.reductionStep,
                            optimumFontSize:config.optimumFontSize,
                            dummyMode : thi$.cfg.dummyMode,
	                        ignoreChecking : thi$.cfg.ignoreChecking,
                            fieldsSizeMode: thi$.cfg.specialConfiguration.fieldsSizeMode, 
                            fieldsSize: thi$.cfg.specialConfiguration.fieldsSize,
                            fieldsWidth : thi$.cfg.specialConfiguration.fieldsWidth,
                            fieldsType: thi$.cfg.specialConfiguration.fieldsType,
                            firstKeyDown: thi$.cfg.specialConfiguration.firstKeyDown,
                            getBankElement: thi$.cfg.specialConfiguration.getBankElement,
                            getComponentBeSideToBank: thi$.cfg.specialConfiguration.getComponentBeSideToBank,
                            getSubAnswerWidth: thi$.cfg.specialConfiguration.getSubAnswerWidth,
                            resetIncorrect: thi$.cfg.specialConfiguration.resetIncorrect,
                            taskmode: thi$.cfg.specialConfiguration.taskmode,
                            showMFEmptyIcon : thi$.cfg.specialConfiguration.showMFEmptyIcon,
                            onRendered : function(){}});

                        var newComponent = componentFactory.create(newConfig);

                        // add subAnswer component to subAnswers array
                        if (newComponent) {
                            thi$.children.push(newComponent);
                        }
                    },

                    onBeforeClozeRebuild:function () {
                        reset(thi$);
                    }

                }
            };
        	return result;
        }
       
    });

 // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // Private Functions.
 // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * @name reset
     * @desc private function, reset of cloze component
     * @param thi$
     */
    function reset(thi$) {
	    thi$.children.forEach(function (subAnswer) {
		    dndManager.removeSubAnswer(subAnswer.view.cfg.id, true);
	    });

	    thi$.children = new Array();  //delete all subAnswers
    }
    
})();
////////////////////////////////////////
// SRC End --> t2k/component/cloze/Cloze.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/group/GroupView.js
////////////////////////////////////////
(function() {

    var TEMPLATE = "<div class='group {{type}} {{SharedLayout}}' id='{{id}}'>\
        	<div id='{{id}}_content' class='group_content {{type}} {{SharedLayout}}'></div>\
        </div>";

    /**
     * Private: defaultConfig Hold sensible defaults for the question's view to
     * use.
     */
    var defaultConfig = {
        layout : 'inline',
        /** The mustache template to render. */
        template : TEMPLATE
    }; // End of defaultConfig.

    t2k.component.group.GroupView = t2k.core.View.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor : function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        }

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/group/GroupView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/group/Group.js
////////////////////////////////////////
(function() {

    t2k.component.group.Group = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.group.Group',

        /**
         * Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef: {
            init: [
                {layoutGroup: null}
            ]
        },

        ctor: function(config) {
            // Delegate
            this._super(config);
            
            this.view = this.createNewView(t2k.component.group.GroupView, copy(this.cfg , {}));

            this.startComposite2( copy( { 	parent: this.view.cfg.id + '_content',
            								container: this.view._content,
            								useMax: !!this.cfg.useMax,
            								dontEnableBlowup: !!this.cfg.dontEnableBlowup
            								
            							}, config));


        },
        
        /**
         * layoutGroup
         */
        layoutGroup : function(){
        	
        	var maxHeight = this.cfg.parent.height();
        	var actualHeight = this.view._content.height();
        	
        	if (actualHeight == 0){
        		jQuery(this.children).each(function(index, child){
        			actualHeight += child.view._view.outerHeight();
        		});
        	}
        	
        	if ((actualHeight > maxHeight) && this.reductionAvailable()){
        		this.reduce();
        	} else {
        		this.compositeRenderComplete() ;
        	}
        
        }
        
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();

////////////////////////////////////////
// SRC End --> t2k/component/group/Group.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/sharedarea/SharedAreaView.js
////////////////////////////////////////
(function() {

    var TEMPLATE = "<div class='sharedarea {{cssType}} {{orientation}}' id='{{id}}'>\
        	<div id='{{id}}_content' class='sharedarea_content {{cssType}} {{orientation}}'></div>\
        </div>";

    /**
     * Private: defaultConfig Hold sensible defaults for the question's view to
     * use.
     */
    var defaultConfig = {
        layout : 'inline',
        /** The mustache template to render. */
        template : TEMPLATE
    }; // End of defaultConfig.

    t2k.component.sharedarea.SharedAreaView = t2k.core.View.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor : function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
            
        },
        
        updateStyles: function() {
        	
            if( this.getComponentOverflow() ) {
            	this._view.addClass( 'overflow' ) ;
            }
            
        },
        
        getComponentOverflow: function() {
        	
        	

        	var componentView = this.children[0];
        	
        	var sharedViewClientHeight = this._view[0].clientHeight ;
        	var sharedViewScrollHeight = this._view[0].scrollHeight ;
        	var compViewClientHeight = componentView._view[0].clientHeight ;
        	var compViewScrollHeight = componentView._view[0].scrollHeight ;
        	
        	var over =  compViewScrollHeight > compViewClientHeight
				    	||
				    	compViewClientHeight > sharedViewScrollHeight
				    	||
				    	sharedViewScrollHeight > sharedViewClientHeight
				        ;
        	
        	return over ;
        },
        
        getViewSize: function() {
        	var size = { width: this._view.width(), height: this._view.height() };
        	return size;
        },

        getContentSize: function() {
        	
            var componentView = this.children[0];

            var sharedViewClientWidth = this._view[0].clientWidth ;
            var sharedViewScrollWidth = this._view[0].scrollWidth ;
            var sharedViewClientHeight = this._view[0].clientHeight ;
            var sharedViewScrollHeight = this._view[0].scrollHeight ;
            
            var size = { width: sharedViewClientWidth, height: sharedViewClientHeight } ;
            
            if( componentView._view ) {
            	
            	var compViewClientWidth = componentView._view[0].clientWidth ;
            	var compViewScrollWidth = componentView._view[0].scrollWidth ;
            	
            	var compViewClientHeight = componentView._view[0].clientHeight ;
            	var compViewScrollHeight = componentView._view[0].scrollHeight ;
            	
            	size = { width: compViewClientWidth, height: compViewClientHeight };
            	
            	if( compViewScrollWidth > compViewClientWidth ){
            		size.width = compViewScrollWidth ;
            	} else if( compViewClientWidth > sharedViewScrollWidth ) {
            		size.width = compViewClientWidth ;
            	} else if( sharedViewScrollWidth > sharedViewClientWidth ) {
            		size.width = sharedViewScrollWidth ;
            	}
            	
            	if( compViewScrollHeight > compViewClientHeight ){
            		size.height = compViewScrollHeight ;
            	} else if( compViewClientHeight > sharedViewScrollHeight ) {
            		size.height = compViewClientHeight ;
            	} else if( sharedViewScrollHeight > sharedViewClientHeight ) {
            		size.height = sharedViewScrollHeight ;
            	}
            	
            }
        	
            return size;
        }

    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/sharedarea/SharedAreaView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/sharedarea/SharedArea.js
////////////////////////////////////////
(function() {

    t2k.component.sharedarea.SharedArea = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.sharedarea.SharedArea',

        /**
         * Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef: {
            init: [
                {layoutSharedArea: null},
                {onDone: null}
            ]
        },

        ctor: function(config) {
            // Delegate
            this._super(config);
            
            this.view = this.createNewView(t2k.component.sharedarea.SharedAreaView, copy(this.cfg , {cssType: 'type_' + config.type}));

            var maxSize = { width: this.view._content.width(), height: this.view._content.height() } ;
            this.cfg.maxSize = maxSize ;
            
            var reductionStopper = 0 ;
            
            var useMax = true ;

            switch( config.type ) {

	        	case 'tre_applet' :
	        	case 'interactive_swf' :
	        		reductionStopper = 0.75 ;
	        		break ;

	        	case 'text' :
	        	case 'dialog' :
	        		useMax = this.cfg.isCollapse ;
	        		break ;

                case 'image' :
                case 'applet' :
                case 'media' :
	        		break ;
	        		
	        	default :
	        		console.warn( 'shared type --> '+ config.type + ' is not supported. check component used in shared area' ) ;
	        		break ;

            }

            this.startComposite2( copy( { 	parent: this.view.cfg.id + '_content',
            								container: this.view._content,
            								reductionStopper: reductionStopper,
            								useMax: useMax,
            								maxSize: maxSize
            								
            							}, config));


        },
        
        onDone: function() {
        	this.view.updateStyles() ;
        },
        
        /**
         * layoutSharedArea
         */
        layoutSharedArea : function(){

        	var maxHeight = this.cfg.maxSize.height;
        	var actualHeight = this.view._content.height();
        	
        	if (actualHeight == 0){
        		jQuery(this.children).each(function(index, child){
        			actualHeight += child.view._view.outerHeight();
        		});
        	}
        	
        	if ((actualHeight > maxHeight) && this.reductionAvailable()){
        		this.reduce();
        	}
        	else {
        		this.compositeRenderComplete();
        	}
        
        },

        getViewSize: function() {
        	return this.view.getViewSize() ;
        },
        
        getContentSize: function() {
        	return this.view.getContentSize() ;
        },
        
        getType: function() {
        	return this.cfg.type ;
        },

        getReductionReport:function(){
            //there is only one child in shared
            return this.children[0].getReductionReport();
        },
        getState: function(){

            //dont collect shared children state when its collapsed mode without Clicking on collapse
            if(this.cfg.isCollapse && !this.collapseClicked && this.initialState){
                return this.initialState;
            }
            //get shared area current state
            return this._super();
        },
        setState: function(state){

            if(this.cfg.isCollapse){
                //in shared area collapsed we will save the initial state , for possible future use 
                //( if no one opened the shared area the initial state will be sent )
                this.initialState = state;

            }
            //set the state
            this._super(state);
        }
        
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();

////////////////////////////////////////
// SRC End --> t2k/component/sharedarea/SharedArea.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/AnswerView.js
////////////////////////////////////////
(function() {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	// TODO: style as css !!
    var TEMPLATE =
        "<div class='answer' id='{{id}}'>\
            <div id={{id}}_content class='answer_content' style='position:relative;'></div>\
        </div>";

    var defaultConfig = {
    	 layout: 'inline',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.AnswerView
     * The view for the answer part of tasks.
     */
    t2k.component.answer.AnswerView = t2k.component.BaseComponentView.subClass({

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        } // End of ctor

    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/answer/AnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/Answer.js
////////////////////////////////////////
(function () {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//  add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.Answer
     * The answer part of tasks.
     */
    t2k.component.answer.Answer = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.Answer',

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor:function (config) {

            var thi$ = this;
            // Delegate.
            this._super(config);

            this.interactable = true;
            this.isAssessmentStateDone = false;

            // Init progress configuration.
            this.defaultProgressConfig = {
                buttonModes:{
                    currMode:"progress"
                },
                allowDefaultInstruction:false,
                allowDefaultFeedback:false,
                allowDefaultHint:false,
                allowDefaultAutocheck:false,
                multipleAttempts: false
            };

            thi$.cfg.eventsManager.registerEvent('onAnswerCheck', function(){
               thi$.onCheck();
            });

            thi$.cfg.eventsManager.registerEvent('onAnswerTryAgain', function(){
                thi$.onTryAgain();
            });

            thi$.cfg.eventsManager.registerEvent('onAnswerShowAnswer', function(){
               thi$.onShowAnswer();
            });

            thi$.cfg.eventsManager.registerEvent('progress', function(){
               thi$.onProgress();
            });
            
            if( ENV.viewMode.showMyAnswerButton ) {
				thi$.cfg.eventsManager.registerEvent('onMyAnswerShow', function(){
					thi$.onShowMyAnswer();
				});
				thi$.cfg.eventsManager.registerEvent('onMyAnswerHide', function(){
					thi$.onHideMyAnswer();
				});
            }
            
            // Assessment
            if( /*AssessmentENV.isNotAssessmentModeTest*/ENV.viewMode.showCorrectAnswerButton ) {
				thi$.cfg.eventsManager.registerEvent('onCorrectAnswerShow', function(){
					thi$.onShowCorrectAnswer();
				});
				thi$.cfg.eventsManager.registerEvent('onCorrectAnswerHide', function(){
					thi$.onHideCorrectAnswer();
				});
            }

        }, // End of ctor
        
        isCheckable: function() {
        	return false ;
        },
        
        updateProgressData: function( progressData ) {
        	this.progressData = $.extend( {}, progressData ) ;
        },
        
        setInteractable: function(flag) {
            this.interactable = flag;
        },

        isInteractable: function() {
            return this.interactable;
        },

        setAutoCheck: function(flag){
            this.autocheck = flag;
        },

        onCheck: function(){
            // TODO: documentation
        },

        onTryAgain: function(){

        },

        onShowAnswer: function(ignoreProgress){
	        if(!ignoreProgress) {
		        this.cfg.eventsManager.dispatchEvent('setProgressProgress');
	        }
        },

         onProgress: function(){

        },
        
        getAsyncState: function( callback ) {
        	
        	StateUtil.collectState( this, callback ) ;
        	
        },
        
        onShowCorrectAnswer: function(){
        	
        	var thi$ = this ;
        	
        	this.getAsyncState( function( state ) {
        		
        		thi$.currentState = state ;
        		thi$.onShowAnswer( true ) ;
        		
			} ) ;
    		
        },

	    reset: function(resetAll) {
		  //placeholder
	    },
        
        onHideCorrectAnswer: function(){
	        this.setInteractable(true);
	        this.reset(true);
	        this.setState( this.currentState ) ;
        },
        
        onShowMyAnswer: function(){
        	if( this.hasFinalAttemptState ) {
        		this.setState( this.finalAttemptState ) ;
    	        this.setInteractable(true);
        	}
        },
        
        onHideMyAnswer: function(){
	        this.setInteractable(true);
	        this.onShowAnswer( true ) ;
        },
        
        storeFinalAttemptState: function( state ) {
        	this.hasFinalAttemptState = true ;
        	this.finalAttemptState = state ;
        },
        
        setDefaultProgressConfig: function(defaultProgressConfig) {
            this.defaultProgressConfig = override(this.defaultProgressConfig, defaultProgressConfig);
        },

        /**
         * setState
         * Return the answer to specified state
         * @param state - {jQuery} State xml
         */
        setState:function (state) {
        	this._super(state);

	        this.setInteractable(state.children('interactable').text() === "true");
	        this.cfg.enabled = (jQuery(state).attr('enabled') === 'true');

	        this.cfg.checkAnswerOnState = false;
	        var sha1 = state.children('sha1') && state.children('sha1').text().trim();

	        if(sha1 && sha1 != this.cfg.sha1) {
//		        this.cfg.checkAnswerOnState = true;
	        }

			if((this.cfg.checkAnswerOnState && !this.isInteractable())
			  || ENV.viewMode.checkAnswerOnState ) { /*AssessmentENV.isNotAssessmentModeTest*/
				this.onCheck();
			}
        },

//        /**
//         * getState
//         * Return answer state xml
//         * @return state - {jQuery} State xml
//         */
//        getState:function () {
//            return this._super();
//        },

	    addMyState : function() {
		    var state = jQuery('<state/>')
			    .append(jQuery('<interactable/>').text(this.interactable))
			    .append(jQuery('<sha1/>').text(this.cfg.sha1));

		    return state;
	    },

        setEnabled:function (flag) {
            this._super(flag);
        },

        //assessment
        isAssessable:function(){
            //default
            return false
        },

        assessmentScore:function(returnCallback){
          //stub for now
	        returnCallback(this.progressData.points ? 0 : null);
        },
        
        getAssessmentMaxScore: function() {
        	return this.progressData.points ;
        }
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/answer/Answer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/OpqAnswerView.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the opq's view to use.
     */
    var defaultConfig = {
        /** The default layout used by the opq's view */
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.component.answer.OpqAnswerView = t2k.component.answer.AnswerView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        },
        
        /**
		 * onViewRendered
		 * override with an empty function.
		 * textViewerView will dispatch the 'onRendered' event himself.
		 */
		onViewRendered : function(){
		} // end of onViewRendered
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/answer/OpqAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/OpqAnswer.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.opq.OpqTask
     * The open-question task.
     */
    t2k.component.answer.OpqAnswer = t2k.component.answer.Answer.subClass({
        /** The class' name (for debugging purpose). */
        name:'t2k.component.answer.OpqAnswer',

        /**
         * Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         */
        layoutSequenceDef:{
            init:[
                {setProgressionReadyByFirstKeyDown:null}
            ]
        },

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The task's configuration.
         */
        ctor:function (config) {
            // Delegate
            this._super(config);

            this.setDefaultProgressConfig({allowDefaultInstruction:true, allowDefaultHint:true});

            // Create the opq view.
            this.view = this.createNewView(t2k.component.answer.OpqAnswerView, this.cfg);

            //default value is init
            this.progressType = jQuery(this.cfg.progressData).children("type").first().text() || "input";

            //Create the answer composite.
            this.startComposite2({parent:this.view.cfg.id + '_content'});
        },

        /**
         * getEditableComponentRec
         * @param childrenArray
         * @returns option array
         */
        getEditableComponentRec:function (childrenArray) {
            // if (!children) stop rec
            if (!childrenArray) return null;

            var name, editableComponentsArray = [], ret, thi$ = this;
            // loop children
            jQuery(childrenArray).each(function (index, child) {
                // get class's last name
                name = child.name.split('.');
                name = name[name.length - 1].toLowerCase();

                // if option was found, push
                if (name == 'mathfield' || name == 'texteditor' || name == 'minitexteditor') {
                    editableComponentsArray.push(child);
                } else {
                    // rec child children
                    var editableComponentRec = thi$.getEditableComponentRec(child.children);
                    // and push results
                    jQuery(editableComponentRec).each(function (index, child) {
                        editableComponentsArray.push(child);
                    });
                }
            });

            return editableComponentsArray;
        },

        setProgressionReadyByFirstKeyDown:function() {

            var thi$ = this;

            if (this.progressType == 'input' && !this.cfg.dummyMode) {

                // rec this.children and get TE and MF comp.

                // get editableComponentsArray
                this.editableComponentsArray = this.getEditableComponentRec(this.children);
                // set firstKeyDown function on each comp.
                jQuery(this.editableComponentsArray).each(function (index, child) {
                    child.setFirstKeyDownFunction(function () {
                        if (thi$.isEnabled() && (this.getValue ? this.getValue().length : true)) {
                            thi$.cfg.eventsManager.dispatchEvent('setProgressReady');
                        } else {
	                        thi$.cfg.eventsManager.dispatchEvent('setProgressUnready');
                        }
                    });
                });
            }

            this.compositeRenderComplete();
        },

        /**
         * setEnabled - override
         * @param flag
         */
        setEnabled:function (flag) {
            this._super(flag);

            if (flag && this.progressType == 'init') {
                this.cfg.eventsManager.dispatchEvent('setProgressReady');
            }
        }
    });

})();

////////////////////////////////////////
// SRC End --> t2k/component/answer/OpqAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/QuestionOnlyAnswerView.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the opq's view to use.
     */
    var defaultConfig = {
        /** The default layout used by the opq's view */
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.component.answer.QuestionOnlyAnswerView = t2k.component.answer.AnswerView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
            
        }
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/answer/QuestionOnlyAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/QuestionOnlyAnswer.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.opq.OpqTask
     * The open-question task.
     */
    t2k.component.answer.QuestionOnlyAnswer = t2k.component.answer.Answer.subClass({
        /** The class' name (for debugging purpose). */
		name: 't2k.component.answer.QuestionOnlyAnswer',

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The task's configuration.
         */
        ctor: function(config) {
            // Delegate
            this._super(config);

            // Create the opq view.
            this.view = this.createNewView(t2k.component.answer.QuestionOnlyAnswerView, this.cfg);
          },
          
          //override
          setEnabled: function(flag) {
              this._super( flag ) ;
              
              if(flag){
              	this.cfg.eventsManager.dispatchEvent('setProgressReady');
              }
          },
          
          compact : function(){
        	  this.layout.onRendered();
          },
          
          
          loose : function(){
        	  this.layout.onRendered();
          },
          
          
          reduce : function(){
        	  this.layout.canReduce = false;
              this.layout.onRendered();

          }
          
          
    	});

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/answer/QuestionOnlyAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/BaseClozeAnswerConfig.js
////////////////////////////////////////
// Cloze Answer constant values
t2k.component.answer.BaseClozeAnswerConstants = {
    lineHeightMFExpansion:'0.1em',
    lineHeightMFSecondLevelExpansion:'0.1em',
    lineHeightWithHintExpansion:30,
    lineHeightNoHintExpansion:20,
    mathfieldWidthFactor : 1.3,
    clozeObjectClassName:'t2k.component.cloze.ClozeArea',
    viewObjectClassName:'t2k.component.answer.BaseClozeAnswerView',
	bankObjectClassName:'t2k.component.bank.Bank',
    'errorClass':'masc_error',
    'errorText':'ERROR : width of the cloze task is not wide enough to contain the bank component'
};


////////////////////////////////////////
// SRC End --> t2k/component/answer/BaseClozeAnswerConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/BaseClozeAnswerView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.answer.BaseClozeAnswerView
     * @desc A cloze task view
     * @namespace t2k.component.answer
     * @extends t2k.component.answer.AnswerView
     */
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * @singleton
     * @name defaultConfig
     * @desc Hold sensible defaults for the cloze's view to use.
     * @type {Object}
     */
    var defaultConfig = {
        /** The default layout used by the cloze's view */
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.component.answer.BaseClozeAnswerView = t2k.component.answer.AnswerView.subClass({

        /**
         * @constructor
         * @desc see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        }
       
    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/answer/BaseClozeAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/BaseClozeAnswer.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.answer.BaseClozeAnswer
     * @desc A base cloze task class
     * @namespace t2k.component.answer
     * @extends t2k.component.answer.Answer
     */
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    var constants = t2k.component.answer.BaseClozeAnswerConstants;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    t2k.component.answer.BaseClozeAnswer = t2k.component.answer.Answer.subClass({
        /**
         * The class' name (for debugging purpose)
         * @member name
         * @type String
         */
        name: 't2k.component.answer.BaseClozeAnswer',

        /**
         * @name ctor
         * @desc Class constructor
         * @constructor
         * @param config - {Object} The task's configuration
        */
        ctor: function(config) {
            // Delegate        	
            this._super(config);

            this.initMembers();

	        this.setViewClass();

            this.view = this.createNewView(this.viewClass, this.cfg);

            var newConfig = this.prepareConfiguration(this.cfg);
            newConfig.specialConfiguration = copy({},newConfig);

            //call composite method - create children
            this.startComposite2(newConfig);

	        var thi$ = this;
	        window['globalEvents'].add({
		        fnc:function () {
			        thi$.changeSizeClozeArea.call(thi$);
		        }
	        })
        },

	    setViewClass: function() {
		  this.viewClass = t2k.component.answer.BaseClozeAnswerView;
	    },

        /**
         * @name initMembers
         * @desc Initiation of all class members
         */
        initMembers : function() {

	        this.checkable = this.cfg.data.attributes.getNamedItem('checkable')  ? //if this task is checkable
		        (this.cfg.data.attributes.getNamedItem('checkable').value === "true") : false;

            this.progressType = jQuery(this.cfg.progressData).children('type').text() || 'init'; // init / oneCompletion / fullCompletion

            this.setDefaultProgressConfig({
                buttonModes: {
                    currMode: (this.checkable ? "check" : "progress")
                },
                allowDefaultInstruction:this.checkable,
                allowDefaultFeedback:this.checkable,
                allowDefaultHint:this.checkable,
                allowDefaultAutocheck:this.checkable,
                multipleAttempts: this.checkable,
	            progressType: this.progressType
            });

            this.mode = jQuery(this.cfg.modeData).text() || 'write';  //cloze task modes : write / dragAndDisable / dragAndCopy
            this.bankMode = getBankMode(this.mode);  //dragAndCopy / dragAndDisable

	        var dataResetIncorrect = jQuery(this.cfg.progressData).find('resetIncorrect').text();
            this.resetIncorrect = dataResetIncorrect.length ? (dataResetIncorrect === "true") : true;  //true / false

            this.showAnswer = jQuery(this.cfg.progressData).find('showAnswer').text() || true;  //true / false
            this.fieldsSizeMode = getFieldsSizeMode(this); //manual / maxBank / maxAnswer / maxBankAndAnswer

            var fieldsSizesObj = getFieldsSize(this);
            this.fieldsSize = fieldsSizesObj.fieldsSize;                 //number of characters for TE
            this.fieldsWidth = fieldsSizesObj.fieldsWidth;

            var objDependency = getMutualDependency(this.cfg);
            this.mutualDependency = objDependency.dependencyArray;           //array of mutual dependency rules
            this.dependencyAnswerIds = objDependency.dependencyAnswerIds;    //array of subAnswers Id, that taking part in mutual dependency rules

            this.fieldsType = (getFieldsType(this.cfg)); //textOnly fields or text and MF

            this.subAnswerWidth = 0;
            this.reductionStep = 0;
            this.reductionStepSize = t2k.component.textViewer.TextViewerConstants.reductionStepSize;
            this.isMinimunReadable = false;


            this.subAnswersArray = []; //array of all subAnswers in task
        },

        /**
         * @name initMembersAfterRendered
         * @desc calls on first rendered only after all components are in place, init members like bank, cloze etc..
         */
        initMembersAfterRendered : function(){

            /**
             * @member clozeArea
             * @type Object
             */
            this.clozeArea = _getChildByClass(this, constants.clozeObjectClassName);   //cloze area member

            /**
             * @member bankElement
             * @type Object
             */
            this.bankElement = _getChildByClass(this, constants.bankObjectClassName);  //bank member

            /**
             * @member subAnswersArray
             * @type {Array}
             */
            this.subAnswersArray = this.getChildrenRec(this.children, 'subanswer');    //array of all subAnswers in task

            /**
             * @member optimumFontSize
             * @type {Number}
             */
            this.optimumFontSize = this.optimumFontSize || parseInt((this.clozeArea.view._view).css('font-size'));  //optimum font size of the task

            this.compositeRenderComplete();
        },

        /**
         * @name setEnabled
         * @desc setEnabled of cloze task + reset dndManager*
         * @param flag {Boolean}
         */
        setEnabled: function(flag) {
            if (flag) {
                dndManager.reset();  //reset dndManager when task is enabled
            }

            this._super(flag);

            if (flag && this.progressType == 'init' && !ENV.viewMode.preventEmptyAnswer ) {
                this.cfg.eventsManager.dispatchEvent('setProgressReady');
            }
        },

        /**
         * @name compact
         * @desc Dynamic layout method override, do nothing - just rendered
         */
        compact : function() {
            this.layout.onRendered();
        },

        /**
         * @name loose
         * @desc Dynamic layout method override, resize all subAnswers
         */
        loose : function() {
            if(this.bankElement) {
                this.bankElement.looseChildrenHeight();
                this.bankElement.looseChildrenWidth();

                var maxSize = this.bankElement.getChildrenMaxSize();
                this.bankElement.resizeChildren(maxSize);
                this.bankElement.view.adjustBankStyle(true);

                if (this.mode != "write") {
                    this.subAnswersArray.forEach(function (element) {
                        if (element.dndContainer != 'bank')
                            element.resetElementSize();
                    });

                    this.clozeArea.evenSubAnswers(maxSize);
                }

            }

            this.layout.onRendered();
        },

        /**
         * @name prepareConfiguration
         * @desc firstKeyDown is a callback that calls by subAnswer children on the first real keyDown
         the current function check if the task is enable before the button activation
         * @param config
         * @returns cloze task config
         */
        prepareConfiguration : function(config) {

            var thi$ = this;

            //in case of hints or MF's in task we need to add missing height to TV line-height
            //MF can be in to maxHeight configurations : basic or secondLevel
            var fontSize = this.view._view.css('font-size').px2int();

            var _additionLineHeight = constants.lineHeightNoHintExpansion;

	        switch(this.fieldsType){
		        case 'textAndMathfield' : {
			        _additionLineHeight = constants.lineHeightMFExpansion.em2int() * fontSize;
			        break;
	        }

		        case   'textAndMathfieldSecondLevel' : {
			        _additionLineHeight = constants.lineHeightMFSecondLevelExpansion.em2int() * fontSize;
			        break;
		        }
	        }

	        //checkingExcludes
	        var ignorecheckingList = [], ignorechecking = [], checking_type = '';
	        config.progressData.children.forEach(function(item, index){
		        if(item.tagName.toLowerCase() === "ignorechecking") {
			        ignorecheckingList = item.children;
			        return false;
		        }
	        });

	        ignorecheckingList.forEach(function(item, index) {
		        checking_type = item.getAttribute('type');
		        checking_type.length && ignorechecking.push(checking_type);
	        });

	        var result = { parent:this.view.cfg.id + '_content',
		        mode:this.mode,
		        bankMode:this.bankMode,
		        IsBankRandom: true,
                fieldsSizeMode : this.fieldsSizeMode,
		        fieldsSize:this.fieldsSize,
                fieldsWidth: this.fieldsWidth,
		        resetIncorrect:this.resetIncorrect,
		        reductionStep:this.reductionStep,
		        optimumFontSize:this.optimumFontSize,
		        fieldsType:this.fieldsType,
		        additionLineHeight:_additionLineHeight,
		        lineHeightConfig:'keepEven',
		        ignoreChecking: ignorechecking,

                getComponentBeSideToBank : function() {
                    return  _getChildByClass(thi$, constants.clozeObjectClassName);
                },

                getBankElement : function() {
                    return  _getChildByClass(thi$, constants.bankObjectClassName);
                },

                getSubAnswerWidth : function() {
                    return thi$.subAnswerWidth;
                },

                firstKeyDown : function() {
                    if (thi$.isEnabled()) {
                    	
                    	var progType = thi$.progressType ;
                    	
                    	if( ENV.viewMode.preventEmptyAnswer ) {
                    		progType = "oneCompletion" ;
                    	}
                    	
                        switch (progType) {
                            case 'fullCompletion':
                            { //progress type is fullCompletion - check that all subAnswers is answered
                                var asnwersSum = 0;
                                thi$.subAnswersArray.forEach(function(subAnswer) {
                                    asnwersSum = asnwersSum + (subAnswer.isEmpty() || subAnswer.dndContainer == 'bank' ? 0 : 1);
	                                subAnswer = null;
                                });

                                if (asnwersSum == thi$.subAnswersArray.length) {  //check if answers count is equal to the subAnswers count
                                    thi$.cfg.eventsManager.dispatchEvent('setProgressReady');
                                } else {
                                    thi$.cfg.eventsManager.dispatchEvent('setProgressUnready');
                                }
                                break;
                            }
                            case 'oneCompletion' :
                            {
                                var asnwersSum = 0;
	                            thi$.subAnswersArray.forEach(function(subAnswer) {
                                    asnwersSum = asnwersSum + (subAnswer.isEmpty() || subAnswer.dndContainer == 'bank' ? 0 : 1);
		                            subAnswer = null;
                                });

                                if (asnwersSum > 0) {
                                    thi$.cfg.eventsManager.dispatchEvent('setProgressReady');
                                } else {
                                    thi$.cfg.eventsManager.dispatchEvent('setProgressUnready');
                                }
                                break;
                            }

                            default:
                                thi$.cfg.eventsManager.dispatchEvent('setProgressReady');
                        }
                    }
                }
            };

            return result;
        },

	    /**
	     * @name setState
	     * @desc override - set state of answer
	     * @param state
	     */
	    setState : function(state) {
		    if (state && !!this.cfg.task.exposed) {
			    dndManager.reset();
		    }

		    if (this.mode !== 'write') {
			    //insert all sub-answers into dndManager array
			    this.subAnswersArray.forEach(function (subAnswer) {
				    subAnswer.manageSALists();
			    });


			    if (this.bankElement && this.bankElement.children) {
				    this.bankElement.children.forEach(function (bankItem) {
					    bankItem.manageSALists();
				    });
			    }
		    }

		    this._super(state);
	    },

        /**
         * @desc change cloze area size according to bank size
         */
        changeSizeClozeArea : function() {
            if (this.bankElement && this.bankElement.view) {  //Check the existence of bank
	            this.bankElement.view.adjustBankStyle(this.bankElement.mode);

	            var bankSize = this.bankElement.view.getSize();
                this.clozeArea.changeSize(bankSize.width, bankSize.height);
            }
        },

        /**
         * @name checkForBankOverFlowWidth
         * @desc Check if there no available space for the bank - throw layout error
         */
        checkForBankOverFlowWidth : function(){

	        if(!this.bankElement) {
		        this.compositeRenderComplete();
		        return;
	        }

            var reduce = false, $tableContent, clozeAreaWidth, tableContentWidth;

            if (!this.cfg.dummyMode){

                this.view._view.find('.clozeArea .table_content').each(function(index, tableContent){
                    $tableContent = jQuery(tableContent);
                    clozeAreaWidth = $tableContent.parents('.clozeArea').width();
                    tableContentWidth = $tableContent.width();

                    if (tableContentWidth > clozeAreaWidth){
                        reduce = true;
                    }
                });
            }

            //check if bank can be reduced - doesn't include MF in secondLevel
            //if not don't reduce all task - but put red screen - layout error
            //if after reduction total width of table + bank is wider than task width - layout error
            if (reduce && this.layout.canReduce){
                this.reduce();
            } else {
                this.compositeRenderComplete();
            }
        },

        /**
         * @name evenSubAnswers
         * @desc Resize all task subAnswers by max size
         */
        evenSubAnswers : function () {
            if (this.bankElement && this.mode != "write") {  //Check the existence of bank
                var maxSize = this.bankElement.getChildrenMaxSize();

                this.clozeArea.evenSubAnswers(maxSize);  //adjust the width of the cloze component
            } else {
                this.clozeArea.evenSubAnswers(null);
            }

            this.compositeRenderComplete();

        },

        /**
         * @name adjustHeight
         * @desc in case of bank existence - adjusting cloze height according to the bank height
         */
        adjustHeight : function() {
            if (this.bankElement) {  //Check the existence of bank
                if (this.clozeArea.view._view.height() < this.bankElement.view._view.height()){
                    this.clozeArea.view.setHeight(this.bankElement.view.bankHeight);
                }
            }
        },

        /**
         * @method looseSubAnswerSize
         * @desc Layouter function - reset size of all cloze area subAnswers
         */
        looseSubAnswerSize : function(){
            if(this.mode != "write") {
                this.subAnswersArray.forEach(function (element) {
                    if (element.dndContainer != 'bank')
                        element.resetElementSize();
                });
            }

            this.compositeRenderComplete();
        },

        /**
         * @name compactBank
         * @desc Layouter function for the bank compact
         */
        compactBank : function(){
            if (this.bankElement){
                this.layout.onRenderedCounter++;

                this.bankElement.looseComposite();
                this.bankElement.compactChildren();
                this.bankElement.view.adjustBankStyle(false);

            } else {
                this.compositeRenderComplete();
            }
        },

        /**
         * @name checkSubAnswer
         * @desc parse dependencyAnswerIds array if id is found in array - return false. else - return true
         * @param subAnswerId
         * @returns {Boolean}
         */
        checkSubAnswer : function (subAnswerId) {
            var notFoundFlag = true;
            this.dependencyAnswerIds.forEach(function(answerId) {
                if (eval(answerId) == eval(subAnswerId)) {
                    notFoundFlag = false;
                    return false;
                }
            });
            return notFoundFlag;
        },

        /**
         * @name onCheck
         * @desc fires after check button pressed, must be present in all checkable tasks
         */
        onCheck: function() {
            var cfg = this.cfg;
            var thi$ = this;

            //loop through dependency rules
            this.mutualDependency.forEach(function(objDependency) {  //rule : [5] = [7]
                var evalRule = '';
                var checkType = objDependency.checkType;

                evalRule = objDependency.rule.replace(/\[(\d)\]/g,
                    function(str, p1, p2, offset) {
                        return (((checkType == 'value') ? 'findSubAnswerValueById' : 'findSubAnswerMarkUpValueById') + '(thi$, ' + str + ')');
                    });
                evalRule = evalRule.replace(/\[/g, '').replace(/\]/g, '').replace(/=+/g, '==');
                evalRule = evalRule.replace(/bigger/g, ">");
                evalRule = evalRule.replace(/smaller/g, "<");
                evalRule = evalRule.replace(/AND/g, "&&");
                evalRule = evalRule.replace(/OR/g, "||");

                var ruleIsTrue = false;
                try {
                    ruleIsTrue = eval(evalRule);
                } catch (e) {
                    console.log(e);
                }

                if (ruleIsTrue) { //mark all subAnswers in rule as correct
                    objDependency.Ids.forEach(function(answerId) {
                        var subAnswer = findSubAnswerById(thi$, answerId);
                        //subAnswer.markAsCorrect();   //When dependency check is defined, local feedback on sub-answers should not appear
                        subAnswer.view.markAsDisable();
                        subAnswer.setCorrect('true');
                        subAnswer.setEnabled(false);
                    });

                } else { //mark all subAnswers in rule as incorrect
                    objDependency.Ids.forEach(function(answerId) {
                        var subAnswer = findSubAnswerById(thi$, answerId);
                        //subAnswer.markAsWrong();   //When dependency check is defined, local feedback on sub-answers should not appear
                        subAnswer.view.markAsDisable();
                        subAnswer.setCorrect('false');
                        subAnswer.setEnabled(false);
                    });
                }
            });

            // Iterate the subAnswers and mark correct and wrong ones.
            this.subAnswersArray.forEach(function(subAnswer) {
                if (thi$.checkSubAnswer(subAnswer.answerId)) {
                    var checkCorrectness = subAnswer.isCorrect(true);                    
                    if (checkCorrectness.IsCorrectAnswer) {
                        subAnswer.markAsCorrect();
                        subAnswer.setCorrect('true');
                        var insideAnswerValue = subAnswer.dndMode =="write" ? checkCorrectness.checkValue : subAnswer.initAnswerId;

                        var sfValue = thi$.getSpecificFeedbackValue(subAnswer.initAnswerId, 'correct', insideAnswerValue );
                        if(sfValue){
                            subAnswer.setSpecificFeedback(sfValue);
                        }
                    } else {
                        subAnswer.setCorrect('false');
                        if (subAnswer.view.children.length > 0) { //subAnswer is not empty
                            checkCorrectness = subAnswer.ispartiallyCorrect(true)
                            if (checkCorrectness.IsCorrectAnswer) {
                                subAnswer.markAsPartiallyCorrect();
                                subAnswer.setCorrect('part');
                                var sfValue = thi$.getSpecificFeedbackValue(subAnswer.initAnswerId, 'partially', checkCorrectness.checkValue );
                                if(sfValue){
                                    subAnswer.setSpecificFeedback(sfValue);                            
                                }
                            } else {
                                checkCorrectness = subAnswer.isIncorrectPredicted(true)
                                if (checkCorrectness.IsCorrectAnswer) {
                                    subAnswer.markAsWrong();
                                    var sfValue = thi$.getSpecificFeedbackValue(subAnswer.initAnswerId, 'wrong', checkCorrectness.checkValue );
                                    if(sfValue){
                                        subAnswer.setSpecificFeedback(sfValue);                            
                                    }
                                } else {
                                    subAnswer.markAsWrong();
                                    var insideAnswerValue;
                                    if(subAnswer.dndMode =="write"){
                                        insideAnswerValue = subAnswer.getValue();
                                    }else{
                                        //incorrect answer with d&d- we need to find the id that the bank item answerd is related to

                                        answer = thi$.subAnswersArray.filter(function(item){
                                                return item.getOriginalBankId() == subAnswer.answerId;
                                            });
                                        if(answer.length){
                                            //get the original subanswer id of that answered bank item
                                            insideAnswerValue = answer[0].initAnswerId;                                        
                                        }else{
                                            // we couldn't find item in answer to match the bank- it means we need the bank id itself ( it is not duplicated subanswer)
                                            insideAnswerValue =subAnswer.answerId
                                        }

                                    }
                                    var sfValue = thi$.getSpecificFeedbackValue(subAnswer.initAnswerId, 'wrong',insideAnswerValue);
                                    if(sfValue){
                                        subAnswer.setSpecificFeedback(sfValue);                            
                                    }
                                }
                                
                            }
                        } else { //empty subAnswer
                            //subAnswer.reset() ;
                            subAnswer.markAsFull();
                            subAnswer.markAsWrong();
                            var sfValue = thi$.getSpecificFeedbackValue(subAnswer.initAnswerId, 'wrong', 'default' );
                            if(sfValue){
                                subAnswer.setSpecificFeedback(sfValue);                            
                            }
                        }
                    }
                }
                subAnswer.setEnabled(false);

            });


            if (this.bankElement) {
                this.bankElement.setEnabled(false);
            }

            this.countCorrect = countAnswers(this.subAnswersArray, 'true');
            this.countInCorrect = countAnswers(this.subAnswersArray, 'false');
            this.countPartCorrent = countAnswers(this.subAnswersArray, 'part');

            // see if we're all correct, allow progress
            if ((!ENV.viewMode.showTaskScore) && (this.countCorrect == this.subAnswersArray.length && this.countInCorrect == 0)) {
                this.cfg.eventsManager.dispatchEvent('setProgressDone');
            } else {
                var msgType = null;

	            if (this.countCorrect == this.subAnswersArray.length) {
		            msgType = t2k.util.FeedbackUtils.TYPE_ALL_CORRECT;
	           } else if( this.subAnswersArray.length ==1 && this.countPartCorrent ==1){
                    msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT;
               }else if (this.countCorrect == 0) {
		            msgType = t2k.util.FeedbackUtils.TYPE_ALL_INCORRECT;
	            }
	            else {
		            msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT;
	            }

                var msgData = FeedbackService.createMessage(msgType), scoreData;
	            if (ENV.viewMode.showTaskScore) {
		            if (this.subAnswersArray.length) {
			            scoreData = {'correctRatio': (this.countCorrect / this.subAnswersArray.length)};
		            }
	            }

	            this.cfg.eventsManager.dispatchEvent('setProgressProgress', [msgData, scoreData]);
            }
        },
        getSpecificFeedbackValue : function(checkbleElementId , checkingType, checkbleElementValue ){
            var feedbackValue ;
            try{
                feedbackValue = this.progressData.specificFeedbackMessages[checkbleElementId][checkingType][checkbleElementValue]
                if(feedbackValue == undefined){
                    feedbackValue = this.progressData.specificFeedbackMessages[checkbleElementId][checkingType]['default'];
                }
                if(feedbackValue == undefined){
                    feedbackValue = this.progressData.specificFeedbackMessages['default'][checkingType]['default'];
                }
            }catch(error){
                try{
                    feedbackValue = this.progressData.specificFeedbackMessages['default'][checkingType]['default'];
                }
                catch(error){
                    return false;                    
                }
            }
            return feedbackValue;

        },
        
        logicCheckOnly: function() {
            var cfg = this.cfg;
            var thi$ = this;

            //loop through dependency rules
            this.mutualDependency.forEach(function(objDependency) {  //rule : [5] = [7]
                var evalRule = '';
                var checkType = objDependency.checkType;

                evalRule = objDependency.rule.replace(/\[(\d)\]/g,
                    function(str, p1, p2, offset) {
                        return (((checkType == 'value') ? 'findSubAnswerValueById' : 'findSubAnswerMarkUpValueById') + '(thi$, ' + str + ')');
                    });
                evalRule = evalRule.replace(/\[/g, '').replace(/\]/g, '').replace(/=+/g, '==');
                evalRule = evalRule.replace(/bigger/g, ">");
                evalRule = evalRule.replace(/smaller/g, "<");
                evalRule = evalRule.replace(/AND/g, "&&");
                evalRule = evalRule.replace(/OR/g, "||");

                var ruleIsTrue = false;
                try {
                    ruleIsTrue = eval(evalRule);
                } catch (e) {
                    console.log(e);
                }

                if (ruleIsTrue) { //mark all subAnswers in rule as correct
                    objDependency.Ids.forEach(function(answerId) {
                        var subAnswer = findSubAnswerById(thi$, answerId);
                        //subAnswer.markAsCorrect();   //When dependency check is defined, local feedback on sub-answers should not appear
//                        subAnswer.view.markAsDisable();
                        subAnswer.setCorrect('true');
//                        subAnswer.setEnabled(false);
                    });

                } else { //mark all subAnswers in rule as incorrect
                    objDependency.Ids.forEach(function(answerId) {
                        var subAnswer = findSubAnswerById(thi$, answerId);
                        //subAnswer.markAsWrong();   //When dependency check is defined, local feedback on sub-answers should not appear
//                        subAnswer.view.markAsDisable();
                        subAnswer.setCorrect('false');
//                        subAnswer.setEnabled(false);
                    });
                }
            });

            // Iterate the subAnswers and mark correct and wrong ones.
            this.subAnswersArray.forEach(function(subAnswer) {
                if (thi$.checkSubAnswer(subAnswer.answerId)) {
                    if (subAnswer.isCorrect()) {
//                        subAnswer.markAsCorrect();
                        subAnswer.setCorrect('true');
                    } else {
                        subAnswer.setCorrect('false');
                        if (subAnswer.view.children.length > 0) { //subAnswer is not empty
                            if (subAnswer.ispartiallyCorrect()) {
//                                subAnswer.markAsPartiallyCorrect();
                            } else if (subAnswer.isIncorrectPredicted()) {
//                                subAnswer.markAsWrong();
                            } else {
//                                subAnswer.markAsWrong();
                            }
                        } else { //empty subAnswer
                            //subAnswer.reset() ;
//                            subAnswer.markAsFull();
//                            subAnswer.markAsWrong();
                        }
                    }
                }
//                subAnswer.setEnabled(false);

            });


//            if (this.bankElement) {
//                this.bankElement.setEnabled(false);
//            }

            this.countCorrect = countAnswers(this.subAnswersArray, 'true');
            this.countInCorrect = countAnswers(this.subAnswersArray, 'false');

            // see if we're all correct, allow progress
//            if ((!ENV.viewMode.showTaskScore) && (this.countCorrect == this.subAnswersArray.length && this.countInCorrect == 0)) {
//                this.cfg.eventsManager.dispatchEvent('setProgressDone');
//            } else {
//                var msgType = this.countCorrect == 0 ?
//                    t2k.util.FeedbackUtils.TYPE_ALL_INCORRECT
//                    :
//                    t2k.util.FeedbackUtils.TYPE_PART_CORRECT;
//
//                var msgData = FeedbackService.createMessage(msgType), scoreData;
//	            if(ENV.viewMode.showTaskScore) {
//		            scoreData = {'correctRatio' : (this.countCorrect / this.subAnswersArray.length)};
//	            }
//
//                this.cfg.eventsManager.dispatchEvent('setProgressProgress', [msgData, scoreData]);
//            }
            
            // stupid bollean descision 
            var isCorrect = this.countCorrect == this.subAnswersArray.length && this.countInCorrect == 0 ;
            
            return isCorrect ;
        },

	    isAssessable:function() {
		    return true
	    },
        
        assessmentScore:function(returnCallback) {
        	var maxScore = this.getAssessmentMaxScore() ;
        	
        	var isCorrect = this.logicCheckOnly() ;

	        returnCallback(isCorrect ? maxScore : 0 );
        },
        
        /**
         * @name onTryAgain
         * @desc fires after Try Again button is pressed
         */
        onTryAgain: function() {
            this.reset();
            this.cfg.eventsManager.dispatchEvent('setProgressProgress');
        },

        /**
         * @name onShowAnswer
         * @desc fires after Show Answer is pressed
         */
        onShowAnswer: function(ignoreProgress) {

            // Iterate the subAnswers and fill with correct bank options.
	        var subAnswer, l = this.subAnswersArray.length;

	        for (var i = 0; i < l; i++) {
		        subAnswer = this.subAnswersArray[i];
		        if (!subAnswer.isCorrect() && !!subAnswer.cfg.answers.correct) {
			        subAnswer.markAsSystemCorrect();
		        }
		        subAnswer.setEnabled(false);
	        }

	        this._super(ignoreProgress);
        },

        /**
         * @name reset
         * @desc run reset and disable on all subAnswers
         */
        reset: function() {
            if (this.bankElement) {
                this.bankElement.setEnabled(true);
                this.bankElement.view.markAsActive(true);
            }

            this.subAnswersArray.forEach(function(subAnswer) {
                if (!subAnswer.isMarkedAsCorrect()) {
                    subAnswer.reset();
                    subAnswer.setEnabled(true);
                } else {
                    subAnswer.disableBankOption(subAnswer.getCorrectAnswer());
                }
                subAnswer.removeSpecificFeedback();
            });


        }, // End of reset

        /**
         * @name getChildrenRec
         * @desc returns array of children with wanted class name only
         * @param childrenArray
         * @param childName
         * @returns Array
         */
        getChildrenRec:function (childrenArray, childName) {
            // if (!children) stop rec
            if (!childrenArray) return null;

            var name, childrenReducedArray = [], childRec, thi$ = this;
            // loop children
            jQuery(childrenArray).each(function (index, child) {
                // get class's last name
                name = child.name.split('.');
                name = name[name.length - 1].toLowerCase();
                // if option was found, push
                if ((name == childName) && (!!child.cfg.checkable)) {
                    childrenReducedArray.push(child);
                } else {
                    // rec child children
                    childRec = thi$.getChildrenRec(child.children, childName);
                    // and push results
                    jQuery(childRec).each(function (index, child) {
                        if (!!child.cfg.checkable) {
                            childrenReducedArray.push(child);
                        }

                    });
                }
            });

            return childrenReducedArray;
        }
    });


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * @desc private function, Returns child based on class name
     * @method
     * @name _getChildByClass
     * @param thi$ {Object}
     * @param className {String}
     * @return Object
     */
    function _getChildByClass(thi$, className) {
        var element;
        thi$.children.forEach(function(child) {
            if (Object.getPrototypeOf(child).name === className) {
                element = child;
            }
        });
        return element;
    }

    /**
     * @name findSubAnswerById
     * @desc private function, find subAnswer object value by specific answerId attribute
     * @param thi$
     * @param answerId
     * @return {String}
     */
    function findSubAnswerValueById(thi$, answerId) {
        var result = '';

        thi$.subAnswersArray.forEach(function(subAnswer) {
            if (subAnswer.answerId == answerId) {
                result = eval(subAnswer.getValue());
                return false;
            }
        });

        return result;
    }

    /**
     * @name findSubAnswerMarkUpValueById
     * @desc private function, find subAnswer object markup value by specific answerId attribute
     * @param thi$
     * @param answerId
     * @return {String}
     */
    function findSubAnswerMarkUpValueById(thi$, answerId) {
        var result = '';

        thi$.subAnswersArray.forEach(function(subAnswer) {
            if (subAnswer.answerId == answerId) {
                result = (subAnswer.getMarkUpValue());
                return false;
            }
        });

        return result;
    }

    /**
     * @name findSubAnswerById
     * @desc private function, finds subAnswer object by specific answerId attribute (answerId is unique per task)
     * @param thi$
     * @param answerId
     * @return Object
     */
    function findSubAnswerById(thi$, answerId) {
        var obj = null;

        thi$.subAnswersArray.forEach(function(subAnswer) {
            if (subAnswer.answerId == answerId) {
                obj = subAnswer;
                return false;
            }
        });

        return obj;
    }

    /**
     * @name getFieldsSizeMode
     * @desc private function, if fieldsSize is not manual - find correct fieldsSize type (maxBank, maxBankAndAnswer) according to task mode
     * @return String
     * @param thi$ Class
     */
    function getFieldsSizeMode(thi$) {
        var fieldsSize = jQuery(thi$.cfg.fields_sizeData).text();  //manual

        if (thi$.mode != 'write') {
            fieldsSize = 'maxBank';
        }
        else if (!fieldsSize) {
            fieldsSize = 'maxBankAndAnswer';
        }

        return fieldsSize;
    }

    /**
     * @name getFieldsSize
     * @desc private function, switch on fieldsSizeMode to find subAnswer size by the longest answer option
     * @return returnObj Object {'fieldsSize' : 0, fieldsWidth : em}
     * @param thi$ Class
     */
    function getFieldsSize(thi$) {
        var returnObj = {'fieldsSize' : 0};

        switch (thi$.fieldsSizeMode) {
            case 'manual' :  //will override fieldSize Mode. And it's means that I'm looking for a specific mode for each component
                break;
            case 'maxBank' :
                var maxBankOption = calcMaxBankOption(thi$.cfg);
                returnObj.fieldsSize = maxBankOption.optionLen;
                returnObj.fieldsWidth = maxBankOption.optionWidth;
                
                // add 30% to subanswer size if ist from type mathfield 
                if(maxBankOption.isMathfield){
                    returnObj.fieldsSize = returnObj.fieldsSize * constants.mathfieldWidthFactor;
                    returnObj.fieldsWidth = returnObj.fieldsWidth * constants.mathfieldWidthFactor;
                }
                returnObj.ignoreSizeOnMathfield = maxBankOption.ignoreSizeOnMathfield;

                break;
            case 'maxAnswer' :
                var maxAnswerOption = calcMaxAnswer(thi$.cfg, thi$.mode);
                returnObj.fieldsSize = maxAnswerOption.optionLen;
                returnObj.fieldsWidth = maxAnswerOption.optionWidth;
                // add 30% to subanswer size if ist from type mathfield 
                if(maxAnswerOption.isMathfield){
                    returnObj.fieldsSize = returnObj.fieldsSize * constants.mathfieldWidthFactor;
                    returnObj.fieldsWidth = returnObj.fieldsWidth * constants.mathfieldWidthFactor;
                }
                returnObj.ignoreSizeOnMathfield = maxAnswerOption.ignoreSizeOnMathfield;

                break;
            case 'maxBankAndAnswer' :
                var maxAnswerOption = calcMaxAnswer(thi$.cfg, thi$.mode);
                var maxBankOption = calcMaxBankOption(thi$.cfg);

                returnObj.fieldsWidth = (maxAnswerOption.optionWidth > maxBankOption.optionWidth) ? maxAnswerOption.optionWidth : maxBankOption.optionWidth;
                returnObj.fieldsSize =  (maxAnswerOption.optionWidth > maxBankOption.optionWidth) ? maxAnswerOption.optionLen : maxBankOption.optionLen;
                // add 30% to subanswer size if ist from type mathfield 
                if(maxAnswerOption.isMathfield){
                    returnObj.fieldsSize = returnObj.fieldsSize * constants.mathfieldWidthFactor;
                    returnObj.fieldsWidth = returnObj.fieldsWidth * constants.mathfieldWidthFactor;
                }
                returnObj.ignoreSizeOnMathfield = maxAnswerOption.ignoreSizeOnMathfield;
                break;
        }

        //ignoreSizeOnMathfield - backward support for old content with mathfield but without widthEM- 
        //we dont want to set a size, but send null, to allow the  mathfiled have flexible width  

        if(returnObj.ignoreSizeOnMathfield){
            returnObj.fieldsWidth = null;
        }

        return returnObj;
    }


    /**
     * @name calcMaxBankOption
     * @desc private function, loops through bank answers options and find the longest one
     * @param cfg
     * @return {Object}
     */
    function calcMaxBankOption(cfg) {
        var fontSize = parseInt(cfg.parent.css('font-size'));
        var maxBankOption = {optionLen : 0, optionText : '', optionWidth : 0};
        var ignoreSizeOnMathfield = false;

        jQuery(cfg.data).find('bank subAnswer').each(function(index, subAnswerElement) { //loop throw bank subAnswers in order to find max long option

            var answerObject = {optionText : '', optionLen: 0, optionWidth: 0};;
            
            var optionElem = jQuery(subAnswerElement).find('mathfield');
            if(!optionElem.length){
                optionElem =  jQuery(subAnswerElement).find('textviewer');
                answerObject.optionText = optionElem.text().trim();
                answerObject.optionLen = answerObject.optionText.length;
                answerObject.optionWidth = answerObject.optionLen * fontSize;
                answerObject.isMathfield = false;
            }else{
                var widthEM = optionElem.attr('widthEM');
                answerObject.optionLen = parseInt(widthEM);
                answerObject.optionWidth = widthEM * fontSize;
                answerObject.isMathfield = true;
                if((widthEM === undefined || widthEM === "") && answerObject.isMathfield){
                    ignoreSizeOnMathfield = true;

                }
            }

            if (answerObject.optionWidth > maxBankOption.optionWidth) {
                maxBankOption = answerObject;
            }
        });
        maxBankOption.optionWidth = maxBankOption.optionWidth / fontSize;
        maxBankOption.ignoreSizeOnMathfield =  ignoreSizeOnMathfield ;

        return maxBankOption;
    }

    /**
     * @name calcMaxAnswer function
     * @param cfg
     * @param mode - cloze task modes : write / dragAndDisable / dragAndCopy
     * @desc private function, exp. loops through all answers options and find the longest one
     */
    function calcMaxAnswer(cfg, mode) {
        var maxAnswer = {optionLen : 0, optionText : '', optionWidth: 0};
        var ansArray = [];
        var fontSize = parseInt(cfg.parent.css('font-size'));
        var ignoreSizeOnMathfield = false;

        jQuery(cfg.data).find('correct ans_option').each(function(index, correctElem) {
            if (typeof jQuery(correctElem).text() != 'undefined') {
	            var checkType = jQuery(correctElem).attr('checkType') || 'value';
	            var answerObject = {optionWidth: 0, optionLen: 0, optionText: ''};

	            if (mode != 'write') {
		            var answerId = parseInt(jQuery(correctElem).text());
		            answerObject.optionText = jQuery.trim(jQuery(cfg.data).find('bank').find('subAnswer[answerId="' + answerId + '"]').text());
	            } else if (checkType == 'value' || checkType == 'markupValue') {
		            answerObject.optionText = jQuery(correctElem).text().trim();
	            }
                var widthEM = jQuery(correctElem).attr('widthEM');
	            if (widthEM !== undefined && widthEM !== "") {
		            answerObject.width = widthEM * fontSize;
		            answerObject.optionLen = parseInt(widthEM);
		            answerObject.isMathfield = true;
	            } else if(!!answerObject.optionText) {
		            answerObject.width = answerObject.optionText.length * fontSize;
		            answerObject.optionLen = answerObject.optionText.length;
		            answerObject.isMathfield = false;
	           }
               if((widthEM === undefined || widthEM === "") && checkType == 'markupValue'){
                    ignoreSizeOnMathfield = true;
               }

                ansArray.push(answerObject);
            }
        });

        jQuery(cfg.data).find('partiallyCorrect ans_option').each(function(index, optionElem) {
	        var checkType = jQuery(optionElem).attr('checkType') || 'value';
	        var answerObject = {optionWidth: 0, optionLen: 0, optionText: ''};
	        if (checkType == 'value' || checkType == 'markupValue') {
		        answerObject.optionText = jQuery(optionElem).text().trim();
	        }

            var widthEM = jQuery(optionElem).attr('widthEM');

	        if (widthEM !== undefined && widthEM !== "") {
		        answerObject.width = widthEM * fontSize;
		        answerObject.optionLen = parseInt(widthEM);
		        answerObject.isMathfield = true;
	        } else if (!!answerObject.optionText) {
		        answerObject.width = answerObject.optionText.length * fontSize;
		        answerObject.isMathfield = false;
	        }
            if((widthEM === undefined || widthEM === "") && checkType == 'markupValue'){
                ignoreSizeOnMathfield = true;
            }
	        ansArray.push(answerObject);
        });

        jQuery(cfg.data).find('incorrectPredicted ans_option').each(function(index, optionElem) {
	        var checkType = jQuery(optionElem).attr('checkType') || 'value';
	        var answerObject = {optionWidth: 0, optionLen: 0, optionText: ''};
	        if (checkType == 'value' || checkType == 'markupValue') {
		        answerObject.optionText = jQuery(optionElem).text().trim();
	        }

            var widthEM = jQuery(optionElem).attr('widthEM');
	        if (widthEM !== undefined && widthEM !== "") {
		        answerObject.width = (widthEM * fontSize);
		        answerObject.optionLen = parseInt(widthEM);
		        answerObject.isMathfield = true;
	        } else if (!!answerObject.optionText) {
		        answerObject.width = answerObject.optionText.length * fontSize;
		        answerObject.isMathfield = false;
	        }
            if((widthEM === undefined || widthEM === "") && checkType == 'markupValue'){
                ignoreSizeOnMathfield = true;
            }

            ansArray.push(answerObject);
        });

        ansArray.forEach(function(subAnswer) {
            if (subAnswer.width > maxAnswer.optionWidth) {
                maxAnswer.optionText = subAnswer.optionText;
                maxAnswer.optionLen = subAnswer.optionText.length;
                maxAnswer.optionWidth = subAnswer.width;
                maxAnswer.isMathfield= subAnswer.isMathfield;
            }
        });

        maxAnswer.optionWidth = (maxAnswer.optionWidth / fontSize);
        maxAnswer.ignoreSizeOnMathfield = ignoreSizeOnMathfield;
        return maxAnswer;
    }

    /**
     * @name getMutualDependency function
     * @desc private function, loops through mutual dependency in order to find all rules and subAnswer Ids inside it
     * @param cfg
     * @return {Object}
     */
    function getMutualDependency(cfg) {
        var result = {
            dependencyArray : [
                {'checkType': '', 'rule': '', 'Ids' : []}
            ],
            dependencyAnswerIds : []
        };

        jQuery(cfg.data).children('mutualDependency').find('option').each(function(index, optionElem) {
            var checkType = jQuery(optionElem).attr('checkType') || 'value';
            var optionText = jQuery(optionElem).text();
            var arrIds = [];
            var arrTmp = optionText.match(/(\[)\d(\])/g);

            arrTmp.forEach(function(value) {
                arrIds.push(parseInt(value.replace(/\[/g, '').replace(/\]/g, '')));
            });

            result.dependencyAnswerIds = result.dependencyAnswerIds.concat(arrIds);

            result.dependencyArray.push({'checkType': checkType, 'rule': jQuery.trim(optionText), 'Ids' : arrIds });
        });

        return result;
    }

    /**
     * @name countAnswers
     * @desc private function, calculates sum of correct / incorrect / partlyCorrect answers according to the type parameter
     * @param arrSubAnswers
     * @param type correct / incorrect / partlyCorrect
     * @return {Int}
     */
    function countAnswers(arrSubAnswers, type) {
        var result = 0;

        arrSubAnswers.forEach(function(subAnswer) {
            if (subAnswer.getCorrect() == type) {
                result++;
            }
        });
        return result;
    }

    /**
     * @name getFieldsType
     * @param cfg
     * @return {String}
     * @desc private function, check if this is textOnly or textAndMathfield type of subAnswers children inside the task
     */
    function getFieldsType(cfg) {
        var fieldsType = 'textOnly', mfMaxHeight, mfChild, mfAutoComma;

        jQuery(cfg.data).find('clozearea').find('subAnswer').each(function (index, subAnswer) {
	        if (jQuery(subAnswer).children('mathfield').length > 0) {
		        fieldsType = 'textAndMathfield';

		        mfChild = jQuery(subAnswer).children('mathfield');

		        mfAutoComma = mfChild.attr('autoComma');
		        if(!mfAutoComma) {
			        mfChild.attr('autoComma', true);
		        }

		        mfMaxHeight = (mfChild.attr('maxHeight') || '').toLowerCase();

		        if (mfMaxHeight == 'dynamic') {
			        mfMaxHeight = 'secondlevel';
			        mfChild.attr('maxHeight', 'secondLevel');
		        }

		        if (mfMaxHeight == 'secondlevel') {
			        fieldsType = 'textAndMathfieldSecondLevel';
		        }
	        }
        });

        jQuery(cfg.data).find('bank').find('subAnswer').each(function (index, subAnswer) {
            if (jQuery(subAnswer).children('mathfield').length > 0) {
                fieldsType = 'textAndMathfield';
                if ((jQuery(subAnswer).children('mathfield').attr('maxHeight') || '').toLowerCase() == 'secondlevel') {
                    fieldsType = 'textAndMathfieldSecondLevel';
                }

                return false;
            }
        });

        return fieldsType;
    }

    /**
     * @name getBankMode
     * @desc private function get BankMode accordingly to the task mode
     * @param taskMode
     * @return {String}
     */
    var getBankMode = function (taskMode) {
        var mode = null;

        switch (taskMode) {
            case 'write' :
                mode = 'readOnly';
                break;
            case 'dragAndDisable' :
                mode = 'dragAndDisable';
                break;
            case 'dragAndCopy' :
                mode = 'dragAndCopy';
                break;
            default :
                mode = 'readOnly';
        }

        return mode;
    }

})();

////////////////////////////////////////
// SRC End --> t2k/component/answer/BaseClozeAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/ClozeAnswerConfig.js
////////////////////////////////////////
// Cloze Answer constant values
t2k.component.answer.ClozeAnswerConstants = {
    lineHeightMFExpansion:'1.3em',
    lineHeightMFSecondLevelExpansion:'3.3em',
    lineHeightWithHintExpansion:30,
    lineHeightNoHintExpansion:20,
    clozeObjectClassName:'t2k.component.cloze.ClozeArea',
    bankObjectClassName:'t2k.component.bank.Bank',
    'errorClass':'masc_error',
    'errorText':'ERROR : width of the cloze task is not wide enough to contain the bank component'
};


////////////////////////////////////////
// SRC End --> t2k/component/answer/ClozeAnswerConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/ClozeAnswerView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.answer.ClozeAnswerView
     * @desc A cloze task view
     * @namespace t2k.component.answer
     * @extends t2k.component.answer.AnswerView
     */
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * @singleton
     * @name defaultConfig
     * @desc Hold sensible defaults for the cloze's view to use.
     * @type {Object}
     */
    var defaultConfig = {
        /** The default layout used by the cloze's view */
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.component.answer.ClozeAnswerView = t2k.component.answer.AnswerView.subClass({

        /**
         * @constructor
         * @desc see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/answer/ClozeAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/ClozeAnswer.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.answer.ClozeAnswer
     * @desc A cloze task class
     * @namespace t2k.component.answer
     * @extends t2k.component.answer.BaseClozeAnswer
     */
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	var constants = t2k.component.answer.ClozeAnswerConstants;
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    t2k.component.answer.ClozeAnswer = t2k.component.answer.BaseClozeAnswer.subClass({
        /**
         * The class' name (for debugging purpose)
         * @type String
         */
        name: 't2k.component.answer.ClozeAnswer',

        /**
         * @name layoutSequenceDef
         * @desc Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         * @type Object
         */
        layoutSequenceDef: {
            init: [
                {initMembersAfterRendered: null},
                {looseSubAnswerSize: null},
                {evenSubAnswers: null},
                {checkForBankOverFlowWidth: null}
            ],
            reduce: [
                {compactBank: null},
                {looseSubAnswerSize: null},
                {evenSubAnswers: null},
                {checkForBankOverFlowWidth: null}
            ]
        },

        /**
         * @name ctor
         * @desc Class constructor
         * @constructor
         * @param config - {Object} The task's configuration
        */
        ctor: function(config) {
            // Delegate        	
            this._super(config);
        },

	    setViewClass: function() {
		    this.viewClass = t2k.component.answer.ClozeAnswerView;
	    }

    });


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();
////////////////////////////////////////
// SRC End --> t2k/component/answer/ClozeAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/ShortAnswerAnswerView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.answer.ShortAnswerAnswerView
     * @desc A cloze task view
     * @namespace t2k.component.answer
     * @extends t2k.component.answer.AnswerView
     */
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * @singleton
     * @name defaultConfig
     * @desc Hold sensible defaults for the task view to use.
     * @type {Object}
     */
    var defaultConfig = {
        /** The default layout used by the task view */
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.component.answer.ShortAnswerAnswerView = t2k.component.answer.AnswerView.subClass({

        /**
         * @constructor
         * @desc see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        }
       
    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/answer/ShortAnswerAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/ShortAnswerAnswer.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.answer.ShortAnswerAnswer
     * @desc A cloze task class
     * @namespace t2k.component.answer
     * @extends t2k.component.answer.BaseClozeAnswer
     */
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	var constants = t2k.component.answer.ClozeAnswerConstants;
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    t2k.component.answer.ShortAnswerAnswer = t2k.component.answer.BaseClozeAnswer.subClass({
        /**
         * The class' name (for debugging purpose)
         * @type String
         */
        name: 't2k.component.answer.ShortAnswerAnswer',

        /**
         * @name layoutSequenceDef
         * @desc Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         * @type Object
         */
        layoutSequenceDef: {
            init: [
                {initMembersAfterRendered: null},
                {looseSubAnswerSize: null},
                {evenSubAnswers: null},
                {checkForBankOverFlowWidth: null}
            ],
            reduce: [
                {compactBank: null},
                {looseSubAnswerSize: null},
                {evenSubAnswers: null},
                {checkForBankOverFlowWidth: null}
            ]
        },

        /**
         * @name ctor
         * @desc Class constructor
         * @constructor
         * @param config - {Object} The task's configuration
        */
        ctor: function(config) {
            // Delegate        	
            this._super(config);
        },

	    setViewClass: function() {
		    this.viewClass = t2k.component.answer.ShortAnswerAnswerView;
	    }

    });


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();
////////////////////////////////////////
// SRC End --> t2k/component/answer/ShortAnswerAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/MtqAnswerView.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.answer.MtqAnswerView
     * @desc A MTQ task view
     * @namespace t2k.component.answer
     * @extends t2k.component.answer.AnswerView
     */
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the mtq's view to use.
     */
    var defaultConfig = {
        /** The default layout used by the mtq's view */
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.component.answer.MtqAnswerView = t2k.component.answer.AnswerView.subClass({

        /**
         * @constructor
         * @desc see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        },

        /**
         * @name destroy
         * @desc remove task DOM
         */
        destroy : function(){
        	this._content.html('');
        }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/answer/MtqAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/MtqAnswer.js
////////////////////////////////////////
(function() {
    /**
          * @class t2k.component.answer.MtqAnswer
          * @desc A MTQ task class
          * @namespace t2k.component.answer
          * @extends t2k.component.answer.Answer
          */
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	function getScore(checkResult) {
		var scoreVal;
		if (checkResult.correct == checkResult.expected) {
			scoreVal = 1;
		}
		else if (checkResult.correct == 0) {
			scoreVal = 0;
		}
		else {
			scoreVal = 0.5;
		}

		return scoreVal;
	}

	/**
	 * Class: t2k.component.answer.MtqAnswer
	 * The open-question task.
	 */
	t2k.component.answer.MtqAnswer = t2k.component.answer.Answer.subClass({
        /** The class' name (for debugging purpose). */
        name: 't2k.component.answer.MtqAnswer',

        /**
         * @name layoutSequenceDef
         * @desc Layout sequence handlers' definition.
         * Valid sections are: init, reduce, loose, compact
         * @member
         * @type Object
         */
        layoutSequenceDef: {
            init: [
                {getMtqCheckablesComponents: null},
                {tileSubAnswers: null},
                {getDefinitionsArray: null},
                {setMaxDefinitionsWidth: true},
                {setMaxDefinitionsHeight: null},
                {MtqMathLayout: null}
            ],
            compact: [
                {tileSubAnswers: null},
                {getDefinitionsArray: null},
                {setMaxDefinitionsWidth: false},
                {setMaxDefinitionsHeight: null},
                {mtqAreaChildrenSqueezeComposite: null},
                {MtqMathLayout: null}
            ],
            loose: [
                {tileSubAnswers: null},
                {getDefinitionsArray: null},
                {setMaxDefinitionsWidth: true},
                {setMaxDefinitionsHeight: null},
                {MtqMathLayout: null}
            ],
            reduce: [
                {tileSubAnswers: null},
                {getDefinitionsArray: null},
                {setMaxDefinitionsWidth: true},
                {setMaxDefinitionsHeight: null}
            ]
        },

        /**
         * @name ctor
         * @desc Class constructor
         * @constructor
         * @param config - {Object} The task's configuration
         */
        ctor: function(config) {
            // Delegate
            this._super(config);

            this.setDefaultProgressConfig({
                buttonModes: {
                    currMode: "check"
                },
                allowDefaultInstruction:true,
                allowDefaultFeedback:true,
                allowDefaultHint:true,
                multipleAttempts: true
            });

            //init params
            this.initParams();

            // Create the mtq view.
            this.view = this.createNewView(t2k.component.answer.MtqAnswerView, this.cfg);

            this.build();
        },

        /**
         * @method
         */
        initParams : function() {

            /**
             * mtq task modes : matching / sorting / sequence
             * @type {String}
             */
            this.mode = jQuery(this.cfg.modeData).text();

            /**
             * IsPlaceholders (true / false)
             * @type {Boolean}
             */
            this.IsPlaceholders = (jQuery(this.cfg.placeholdersData).text() === 'true');

            /**
             * IsBank (true / false)
             * @type {Boolean}
             */
            this.IsBank = (jQuery(this.cfg.bankData).text() === 'true');

            /**
             * IsBankRandom (true / false)
             * @type {Boolean}
             */
            this.IsBankRandom = true;

	        this.IsRandom = (jQuery(this.cfg.bankrandomData).text() === 'true');

            /**
             * bankMode (dragAndCopy / dragAndDisable)
             * @type {String}
             */
            this.bankMode = jQuery(this.cfg.bankmodeData).text();

            /**
             *
             * @type {String}
             */
            this.progressType = jQuery(this.cfg.progressData).find("type").text() || 'init';

            //TODO: configure resetIncorrect by table modes
            /**
             * resetIncorrect
             * @type {Boolean}
             */
            var resetIncorrectText = jQuery(this.cfg.progressData).find('resetIncorrect').text();
	        resetIncorrectText = (resetIncorrectText === '' ? 'true' : resetIncorrectText);
            this.resetIncorrect = (!this.IsBank) ? false : (resetIncorrectText === 'true');

            //TODO: configure resetAllAnswers by table modes
            this.resetAllAnswers = true;

            this.mistakeFactor = jQuery(this.cfg.mistakefactorData).text() || 0;

            /**
             * reductionStep
             * @type {Number}
             */
            this.reductionStep = 0;
            /**
             * subAnswersArray
             * @type {Array}
             */
            this.subAnswersArray = null;
            /**
             * maxSubAnswerSizes
             * @type {*}
             */
            this.maxSubAnswerSizes = null;
            /**
             * definitionsArray
             * @type {Array}
             */
            this.definitionsArray = null;

            /**
             * checkingMode
             * @type {String} ( advanced / generic)
             */
            this.checkingMode = $(this.cfg.data).attr("checkingMode");

        },
        /**
         * @name setState
         * @desc override - set state of answer
         * @param state
         */
        setState : function(state) {
	        if (state && !!this.cfg.task.exposed) {
		        this.resetAnswer();
	        }

	        this._super(state);
        },
        /**
         * @name build
         * @desc builds view + creates children + adjusting width and height and line height
         */
        build : function () {
            // Create the answer composite.
            this.startComposite2(this.prepareConfiguration(this.cfg));
        },
        /**
         * @name getMtqCheckablesComponents
         * @desc getMtqCheckablesComponents runs after onRendered
         */
        getMtqCheckablesComponents : function(){
            this.subAnswersArray = this.getChildrenRec(this.children, 'subanswer');
            this.mtqArea = this.getChildrenByClass('t2k.component.mtq.MtqArea')[0];
            this.bankElement = this.getChildrenByClass('t2k.component.mtq.MtqBank')[0];
            
            this.checkableArray = this.getCheckablesComponents();
            this.compositeRenderComplete();
        },
        /**
         * @name mtqAreaChildrenSqueezeComposite
         * @desc mtqAreaChildrenSqueezeComposite runs after onRendered
         */
        mtqAreaChildrenSqueezeComposite : function(){
            this.mtqArea.squeezeComposite(false);
            this.compositeRenderComplete();
        },

        /**
         * @name setEnabled
         * @param flag
         */
        setEnabled: function(flag) {
            if (flag) {
                dndManager.reset();
            }

            this._super(flag);

            if (flag) {
                this.performSampleMatch();   //perform sample match only after task is set enable
            }

            if (flag && this.progressType == 'init') {
                this.cfg.eventsManager.dispatchEvent('setProgressReady');
            }
        },

        /**
         * prepareConfiguration
         * prepare startComposite configuration
         * @param config
         * @returns mtq task config
         */
        prepareConfiguration : function(config) {

            var thi$ = this;

            return { 
            	parent: this.view.cfg.id + '_content', 
            	mode: this.mode, 
            	resetIncorrect : this.resetIncorrect, 
            	IsPlaceholders : this.IsPlaceholders,
                reductionStep : this.reductionStep, 
                optimumFontSize : this.optimumFontSize,
                bankMode : this.bankMode, 
                IsBank : this.IsBank, 
                IsBankRandom : this.IsBankRandom,
	            IsRandom : this.IsRandom,
	            data: this.cfg.data,
	            taskViewDomElement : this.view._view.parent().parent(),
	            checkAnswerOnState: this.cfg.checkAnswerOnState,

                // return component that appears beside to bank in this task
                getComponentBeSideToBank : function() {
                    return thi$.getChildrenByClass('t2k.component.mtq.MtqArea')[0];
                },

                // firstKeyDown is a callback that calls by children on the first real keyDown
                firstKeyDown : function() {
                    //the current function check if the task is enable before the button activation
                    thi$.progressHandlerAnswer();
                }
            };

        },

        /**
         * progressHandlerAnswer
         * check if the task is enable before the button activation
         */
        progressHandlerAnswer : function() {
            if (this.isEnabled()) {

                var asnwersSum = 0, thi$ = this;

                switch (this.progressType) {

                    case 'fullCompletion':
                    { //progress type is fullCompletion - check that all children is answered
                        this.checkableArray.forEach(function(child) {
                            asnwersSum = asnwersSum + (thi$.IsPlaceholders ? (child.isEmpty() ? 0 : 1) : child.children.length);
                        });

                        if (asnwersSum >= this.countOfAnswers) {  //check if answers count is equal to the childrens count
                            this.cfg.eventsManager.dispatchEvent('setProgressReady');
                        } else {
                            this.cfg.eventsManager.dispatchEvent('setProgressUnready');
                        }
                        break;
                    }
                    case 'oneCompletion' :
                    {
                        this.checkableArray.forEach(function(child) {
                            asnwersSum = asnwersSum + (thi$.IsPlaceholders ? (child.isEmpty() ? 0 : 1) : child.children.length);
                        });

                        if (asnwersSum > 0) {
                            this.cfg.eventsManager.dispatchEvent('setProgressReady');
                        } else {
                            this.cfg.eventsManager.dispatchEvent('setProgressUnready');
                        }
                        break;
                    }

                    default:
                        this.cfg.eventsManager.dispatchEvent('setProgressReady');
                }
            }
        },

        /**
         * adjustHeight
         * in case of bank existence - adjusting mtq height according to it
         */
        adjustHeight : function() {
            if (this.bankElement) {  //Check the existence of bank
                this.mtqArea.view.setHeight(this.bankElement.view._view.outerHeight(true));
            }
        },
        /**
         * resetSubAnswerSizes
         */
        resetSubAnswerSizes : function() {
            this.subAnswersArray.forEach(function(subAnswer) {
                if (subAnswer.view.resetElementSize) {
                    subAnswer.view.resetElementSize();
                }
            });
        },

        /**
         * get array of checkable components based of task mode
         */
        getCheckablesComponents : function() {

            var arrComponents = [];

            var childArray = [];

            var thi$ = this;

            if (this.mtqArea) {
                this.mtqArea.children.forEach(function(child) {
                    childArray = child.getChildrenByClass((thi$.mode == 'matching') ? 't2k.component.subAnswer.SubAnswer' : 't2k.component.subAnswer.MultiSubAnswer');

                    jQuery.merge(arrComponents, childArray);
                });
            }

            return arrComponents;

        },
        /**
         * loop through multiSubAnswers in order to find max length of correct answers array
         */
        getMultiSubAnswersExpectedCorrects : function() {
            var countOfAnswers = 0;
            var childCountOfAnswers = 0;

            this.checkableArray.forEach(function(child) {
                if (child.getMaxCountOfExpectedCorrects) {
                    childCountOfAnswers = child.getMaxCountOfExpectedCorrects();
                    if (childCountOfAnswers > countOfAnswers) {
                        countOfAnswers = childCountOfAnswers;
                    }
                }
            });

            return countOfAnswers;
        },
        
        /**
         * sets size of hidden multiSubAnswers
         */
        setMultiSubAnswersSize : function(countOfAnswersWithMistake) {
            var elementSizes =  this.getSubAnswerSize();

            this.checkableArray.forEach(function(child) {
                child.setSize(countOfAnswersWithMistake, elementSizes);
            });
        },

	    iterateCheckableArray:function (applyFeedback) {
		    var prop = null,
			    checkResult = {},
			    childCheck = {};

		    // Iterate the checkable array and count correct and wrong ones.
		    this.checkableArray.forEach(function (child) {
			    childCheck = child.check(applyFeedback);
			    for (prop in childCheck) {
				    if (!checkResult.hasOwnProperty(prop)) {
					    checkResult[prop] = 0;
				    }
				    checkResult[prop] += childCheck[prop];
			    }
		    });

		    return checkResult;
	    },

	    /**
	     * onCheck function - fires after check button pressed
	     */
	    onCheck: function() {
            var scoreData, msgData;

		    var checkResult = this.iterateCheckableArray(true);

		    if (this.bankElement) {
                jQuery(this.bankElement.children).each(function(i, subAnswer) {
                    subAnswer.setEnabled(false);
                });
                this.bankElement.view.markAsActive(false);
            }

            // see if we're all correct, allow progress
            if ((!ENV.viewMode.showTaskScore) && (checkResult.correct == checkResult.expected && checkResult.incorrect == 0)) {
                this.cfg.eventsManager.dispatchEvent('setProgressDone');
            } else {
                var msgType = '';

                switch (this.checkingMode){

                    case 'advanced' :
                        //advanced partially correct feedback : 
                        if (this.mode == 'sequencing' && (checkResult.partiallyCorrect > 0)) {
                            if (Math.floor((checkResult.correct / checkResult.expected) * 100) > 80) {
                                msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT_MORE_80_PERCENT;
                            } else{
                                msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT_LESS_80_PERCENT;
                            }
                        } else if ((checkResult.empty > 0) && (checkResult.correct > 0) && (checkResult.incorrect > checkResult.empty)) {
                            msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT_PART_MISSING;
                        } else if ((checkResult.empty > 0) && (checkResult.correct > 0) && (checkResult.incorrect === checkResult.empty)) {
                            msgType = t2k.util.FeedbackUtils.TYPE_ALL_CORRECT_PART_MISSING;
                        } else if (checkResult.correct === 0) {
                            msgType = t2k.util.FeedbackUtils.TYPE_ALL_INCORRECT;
                        } else if (Math.floor((checkResult.correct / checkResult.expected) * 100) > 80) {
                            msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT_MORE_80_PERCENT;
                        } else if (Math.floor((checkResult.correct / checkResult.expected) * 100) <= 80) {
                            msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT_LESS_80_PERCENT;
                        } else {
                            msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT;
                        }
                        break;

                    case 'generic' :
                        // only 3 feedback types: all correct, all incorrect, partially correct
                        if (checkResult.correct === 0) {
                            msgType = t2k.util.FeedbackUtils.TYPE_ALL_INCORRECT;
                        } else {
                            msgType = t2k.util.FeedbackUtils.TYPE_PART_CORRECT;
                        }
                }

                msgData = FeedbackService.createMessage(msgType);
	            if(ENV.viewMode.showTaskScore) {
		            scoreData = {'correctRatio' : getScore(checkResult)};
	            }

                this.cfg.eventsManager.dispatchEvent('setProgressProgress', [msgData, scoreData]);
            }
        },
        /**
         * onTryAgain function - fires after Try Again button is pressed
         */
        onTryAgain: function() {
            this.reset();
            this.cfg.eventsManager.dispatchEvent('setProgressProgress');
        },

		resetAnswer:function (){
			//if(!(ENV.viewMode.allExposed && !ENV.viewMode.readOnly)) { //not 'ASSESSMENT_RUNTIME' view mode
				dndManager.reset();
			//}

			this.subAnswersArray = this.getChildrenRec(this.children, 'subanswer');    //array of all subAnswers in task

			//insert all sub-answers into dndManager array
			this.subAnswersArray.forEach(function (subAnswer) {
				subAnswer.manageSALists();
			});
		},

		/**
		 * onShowAnswer function - fires after Show Answer is pressed
         */
        onShowAnswer: function(ignoreProgress) {

	        if (ignoreProgress) {
		        this.resetAnswer();
	        }

            jQuery(this.checkableArray).each(function(i, child) {
                child.onShowAnswer();
            });


            if (!this.IsPlaceholders && !this.cfg.IsBank) { //in case of hidden template without bank
                jQuery(this.checkableArray).each(function(i, child) {
                    child.deleteWrongAnswers();
                });
            }

            if (this.bankElement) {
                jQuery(this.bankElement.children).each(function(i, subAnswer) {
                    subAnswer.setEnabled(false);
                });
                this.bankElement.view.markAsActive(false);
            }

	        this._super(ignoreProgress);
        },

	    isAssessable:function() {
		    return true;
	    },

	    assessmentScore:function(callback) {
		    var maxScore = this.getAssessmentMaxScore(),
			    checkResult = this.iterateCheckableArray(false), scoreVal = getScore(checkResult);

		    callback(maxScore * scoreVal);
	    },

        /**
         * reset function
         * run reset and disable on all children
         */
        reset: function(resetAll) {

            if (this.bankElement) {
                this.bankElement.resetBankLockState();
                this.bankElement.setEnabled(true);
                this.bankElement.view.markAsActive(true);
            }

            jQuery(this.checkableArray).each(function(i, child) {
                !!resetAll ? child.reset() : child.resetOnTryAgain();
            });

        }, // End of reset
        /**
         * performSampleMatch
         */
        performSampleMatch : function() {
            var thi$ = this;

            if (this.IsBank) {  //do animation
                if (this.mode == 'matching') {
                    this.recursiveAnimation(jQuery.extend([], this.checkableArray));  //checkableArray holds subAnswer objects
                } else {   //checkableArray holds multiSubAnswer objects

                    var subAnswersArray = [];

                    this.checkableArray.forEach(function(element) {
                        jQuery.merge(subAnswersArray, element.children);
                    });

                    thi$.recursiveAnimation(subAnswersArray);
                }
            } else {
                if (this.mode == 'matching') {
                    this.doSampleMatch(jQuery.extend([], this.checkableArray));
                } else { //checkableArray holds multiSubAnswer objects
                    var subAnswersArray = [];

                    this.checkableArray.forEach(function(element) {
                        jQuery.merge(subAnswersArray, element.children);
                    });

                    this.doSampleMatch(jQuery.extend([], subAnswersArray));
                }
            }

        },
        /**
         * doSampleMatch - perform sample match without animation
         * @param arrOfElements
         */
        doSampleMatch : function(arrOfElements){
            var thi$ = this;

            arrOfElements.forEach(function(element) {
                if (element.sampleMatchMode && element.getCorrectAnswer) {
                    var correctAnswer = element.getCorrectAnswer();

                    var elementAnswerId = element.answerId;
                    element.view.dispatchEvent('doDroppingEvent', {'dropAnswerId' : correctAnswer});

                    if (!this.IsBank) {
                        var answerSubAnswer = thi$.findSubAnswerByAnswer(correctAnswer);  //find subAnswer that holds current correct answer
                        answerSubAnswer.view.dispatchEvent('doDroppingEvent', {'dropAnswerId' : elementAnswerId});

                        if(thi$.mode == 'matching'){
                            answerSubAnswer.answerId = elementAnswerId;  //subAnswer is already exists
                        } else {
                            answerSubAnswer.initAnswerId = elementAnswerId;  //subAnswer is created
                        }

                        answerSubAnswer.draggable = true;
                        answerSubAnswer.manageDND();
                    }

                    if (element.sampleMatchMode == 'static') {  //in case of static sample match set subAnswer not draggable and not droppable
                        setObjectDisabled(element);
                    }
                }
            });
        },

        /**
         * recursiveAnimation
         * do dragging, animate and then dropping event of all subAnswers with sample match
         * @param arrOfElements
         */
        recursiveAnimation : function(arrOfElements) {

            if(arrOfElements.length == 0){
                return;
            }

            var thi$ = this;
            var draggedElement;

            var child = arrOfElements[0];

            if (child.sampleMatchMode && child.getCorrectAnswer) {
                var correctAnswer = child.getCorrectAnswer();

                var answerSubAnswer = thi$.findSubAnswerByAnswer(correctAnswer);  //find subAnswer that holds current correct answer

                if (answerSubAnswer) {
                    draggedElement = answerSubAnswer.triggerDraggingEvent();      //trigger start dragg event of subAnswer that holds correct answer

                    if (draggedElement) {

                        draggedElement.css({top: answerSubAnswer.view._view.offset().top, left: answerSubAnswer.view._view.offset().left});
                        Perf.select('body')[0].style.cursor = 'none';

                        //animation started
                        dndManager.animated(true);
                        draggedElement.animate({top: child.view._view.offset().top, left: child.view._view.offset().left}, 500, 'swing', function() {

                            //animation ended
                            dndManager.animated(false);

                            //do dropping event
                            var childAnswerId = child.answerId;
                            child.view.dispatchEvent('doDroppingEvent', {'dropAnswerId' : correctAnswer});  //after animation ends do dropping correct answer

                            if(!thi$.IsBank){
                               answerSubAnswer.view.dispatchEvent('doDroppingEvent', {'dropAnswerId' : childAnswerId});
                            }

                            draggedElement.remove();
                            draggedElement = null;

                            if (child.draggedElement) {
                                child.draggedElement.remove();
                                child.draggedElement = null;
                            }

                            dndManager.inDragObject = null; //clean dndManager in dragg object
                            dndManager.readyToDrop(false);
                            dndManager.afterDrop(false);
                            dndManager.overObject = null;

                            if (child.sampleMatchMode == 'static') {  //in case of static sample match set subAnswer not draggable and not droppable
                               setObjectDisabled(child);
                            }

                            arrOfElements.splice(0, 1);              //remove this subAnswer from array
                            thi$.recursiveAnimation(arrOfElements);  //call recursion function

                            Perf.select('body')[0].style.cursor = 'auto';

                        });

                    }
                }
            } else {
                 arrOfElements.splice(0, 1);              //remove this subAnswer from array
                 thi$.recursiveAnimation(arrOfElements);  //call recursion function
            }

        },

        /**
         * findSubAnswerByAnswer
         * @param answerId
         */
        findSubAnswerByAnswer : function(answerId) {

            var correctChild = null;

            this.subAnswersArray.forEach(function(child) {
                if (child.answerId == answerId) {
                    correctChild = child;
                    return false;
                }
            });

            return correctChild;
        },
        /**
         * getDefinitionsArray
         */
        getDefinitionsArray : function(){
	        //set mtqarea max-width
	        var maxWidth = this.view._view.parent().width();

	        !!this.mtqArea && this.mtqArea.setMaxWidth(maxWidth);

            this.definitionsArray = this.getChildrenRec(this.children, 'definition');

            this.layout.resetRenderedCounter();

            this.definitionsArray.forEach(function(definition) {
	            definition.setMaxWidth(maxWidth);
	            definition.view.maxSize = {'width' : 0, 'height' : 0};
                definition.compactChildren();
            });

            this.compositeRenderComplete();
        },
        /**
         * setMaxDefinitionsWidth
         */
        setMaxDefinitionsWidth : function(tileWithSubAnswers) {
	        if(this.mode === "sequencing") {
		        this.compositeRenderComplete();
		        return;
	        }

            var elementSizes = {'width': 0, 'height' : 0};
            var maxSizes = {'width': 0, 'height' : 0};

            var thi$ = this;

            this.definitionsArray.forEach(function(definition) {
                elementSizes = definition.getSize(false);
                maxSizes.width = (elementSizes.width > maxSizes.width) ? elementSizes.width : maxSizes.width;
            });

            if (!!tileWithSubAnswers && (thi$.maxSubAnswerSizes.width > maxSizes.width)) {
                maxSizes.width = thi$.maxSubAnswerSizes.width;
            }

	        this.definitionsArray.forEach(function(definition) {
		        definition.view.maxSize.width = maxSizes.width;
		        definition.view.maxSize.height = 0;
	        });

	        var thi$ = this;
	        var applyWidth = function() {
	            if ((maxSizes.width > 0) && (thi$.mode != 'sequencing')) {  //don't tile definitions on hidden template in sequencing
		            thi$.definitionsArray.forEach(function(definition) {
	                    definition.setWidth(maxSizes.width, true); // true- because we want to ovverride the laydown size of the text viewer
	                    definition.looseHeight();
	                });
	            }
	        }

	        if(thi$.setMaxDefinitionsWidthFuncIndex > -1) {
		        delete globalEvents.events[thi$.setMaxDefinitionsWidthFuncIndex];
	        }

	        globalEvents.add({
		        fnc: function(){
			        applyWidth();
		        }
	        });

	        thi$.setMaxDefinitionsWidthFuncIndex = globalEvents.events.length - 1;

            this.compositeRenderComplete();
        },
        /**
         * setMaxDefinitionsHeight
         */
        setMaxDefinitionsHeight : function() {
	        if(this.mode === "sequencing") {
		        this.compositeRenderComplete();
		        return;
	        }

            var elementSizes = {'width': 0, 'height' : 0};
            var maxSizes = {'width': 0, 'height' : 0};

            this.definitionsArray.forEach(function(definition) {
                elementSizes = definition.getSize(false);
                maxSizes.height = (elementSizes.height > maxSizes.height) ? elementSizes.height : maxSizes.height;
            });

	        this.definitionsArray.forEach(function(definition) {
		        definition.view.maxSize.height = maxSizes.height;
	        });

	        var thi$ = this;
	        var applyHeight = function() {
		        if (maxSizes.height > 0) {
			        thi$.definitionsArray.forEach(function(definition) {
				        definition.setHeight(maxSizes.height);
			        });
		        }
	        }

	        if(thi$.setMaxDefinitionsHeightFuncIndex > -1) {
		        delete globalEvents.events[thi$.setMaxDefinitionsHeightFuncIndex];
	        }

	        globalEvents.add({
		        fnc: function(){
			        applyHeight();
		        }
	        });

	        thi$.setMaxDefinitionsHeightFuncIndex = globalEvents.events.length - 1;

            this.compositeRenderComplete();
        },

        /**
         * getSubAnswerSize - loop subAnswers array in order to find max subAnswer size
         */
        getSubAnswerSize : function() {
            var maxSizes = {'width': 0, 'height' : 0};
            var elementSizes = {'width': 0, 'height' : 0};

            this.subAnswersArray.forEach(function(element) {
                elementSizes = element.getElementSize();
                maxSizes.width = (elementSizes.width > maxSizes.width) ? elementSizes.width : maxSizes.width;
                maxSizes.height = (elementSizes.height > maxSizes.height) ? elementSizes.height : maxSizes.height;
            });

            return maxSizes;
        },
        /**
         * tileSubAnswers_resetTile - reset tile of subAnswers
         */
        tileSubAnswers_resetTile : function(){
            this.subAnswersArray.forEach(function(element) {
                if (element.dndContainer != 'bank')
                    element.resetElementSize();
            });
        },

        /**
         * tileSubAnswers - tile all subAnswers components according to max subAnswer size
         */
        tileSubAnswers : function() {
            this.tileSubAnswers_resetTile();
            this.maxSubAnswerSizes = this.getSubAnswerSize();

            var thi$ = this;
            this.subAnswersArray.forEach(function(element) {
                if (element.dndContainer != 'bank')
                    element.setElementSize(thi$.maxSubAnswerSizes);
            });

            if (this.mode != 'matching' && !!this.IsPlaceholders) {  //in case of multiSubAnswer we have to set his width according to the subAnswers width
                this.checkableArray.forEach(function(child) {
                    child.setWidth(thi$.maxSubAnswerSizes.width);
                });
            }

            if (!this.IsPlaceholders) { //calculate hidden multiSubAnswer size
                var countOfAnswersWithMistake = this.getMultiSubAnswersExpectedCorrects() + parseInt(this.mistakeFactor);
                this.setMultiSubAnswersSize(countOfAnswersWithMistake);

                this.countOfAnswers = (countOfAnswersWithMistake - parseInt(this.mistakeFactor));
            } else {
                this.countOfAnswers = this.checkableArray.length;
            }

            this.compositeRenderComplete();
        },

        /**
         * mtq Math layouting method, calculates all possible sizes of components
         * in both vertical and horizontal types and choozes min height
         */
        MtqMathLayout : function() {
            var parentWidth = this.view.cfg.parent.parents('.task_wrapper_internal').width(),
                arrPermutations = [],
                mtqAreaHorizontalSize,
                bankSqueezedSize, 
                thi$ = this, 
                child_index = -1,
                remainderWidth,
                marginFactor,
                borderFactor,
                newAreaHeight = 0, 
                minHeight = 0, 
                minHeightIndex = -1, 
                bankMargin = 21,
                prmElement;
                
            
            if (this.mtqArea.children.length > 0) {
                //get all squeezed sizes of mtqArea (vertical)    
	            arrPermutations = this.mtqArea.getSqueezedSizes(parentWidth);  
                
                // get mtqArea's horizontal size    
	            mtqAreaHorizontalSize = this.mtqArea.getHorizontalSize(parentWidth); 

                // validate mtqAreaHorizontalSize and push to arrPermutations
                if (mtqAreaHorizontalSize && mtqAreaHorizontalSize.areaWidth > 0) {
                    
                    mtqAreaHorizontalSize.vertical = false;
                    
                    if (mtqAreaHorizontalSize.areaWidth <= parentWidth) {
                        arrPermutations.push(mtqAreaHorizontalSize);
                    }
                }

                if (this.bankElement) {
                    jQuery(arrPermutations).each(function(index, child) {
                         remainderWidth = parentWidth - child.areaWidth;
                         marginFactor = 21;
                         
						// get bank size vertical | horizontal
                        if (!!child.vertical) {
                            //get bank simulated size based on remainder width
                           // bankSqueezedSize = thi$.bankElement.simulateSizeByWidth(remainderWidth - marginFactor );
                            bankSqueezedSize = thi$.bankElement.simulateSizeByWidth(remainderWidth - marginFactor );
                            
                            // if bank width is larger than remainderWidth, bankSqueezedSize will get null
                        } else {
                            // on horizontal calculete size
                            bankSqueezedSize = thi$.bankElement.simulateSizeByWidth(parentWidth);
                        }

                        // validate bankSize
                        if (!!bankSqueezedSize) {
                            child.bankWidth = bankSqueezedSize.width;
                            child.bankHeight = bankSqueezedSize.height;
                        }

                        if (!!!child.bankHeight) {
                            child_index = (jQuery.inArray(child, arrPermutations));

                            if (child_index > -1) {
                                //remove element from the permutations array
                                arrPermutations.splice(child_index, 1);  
                            }
                        }
                    });
                }
                else {
                    jQuery(arrPermutations).each(function(index, child) {
                        child.bankWidth = 0;
                        child.bankHeight = 0;
                    });
                }

                /*  
                    *************************************
                    ***** fully arrPermutations END *****
                    *************************************
                */
                
                //loop through the permutations array in order to find minimal [ mtq area combined with bank ] height
                jQuery(arrPermutations).each(function(index, child) {

                    // set newAreaHeight by vertical/horizontal
                    if (!!arrPermutations[index].vertical) {
                        // on vertical, newAreaHeight will be the larger height (bank || mtqArea)
                        newAreaHeight = (child.areaHeight > child.bankHeight) ? child.areaHeight : child.bankHeight;
                    } else {
                        // on horizontal, newAreaHeight will be the totalHeight (bank + mtqArea)
                        newAreaHeight = child.areaHeight + child.bankHeight + bankMargin;
                    }

                    // get arrPermutations min Height of mtqArea combined with bank
                    // on first run
                    if ((minHeightIndex == -1) || (newAreaHeight < minHeight)) {
                        minHeightIndex = index;
                        minHeight = newAreaHeight;
                    }
                });

                //check if after all calculations we got smaller height
                if (minHeight > 0) { //found smaller height
                    // get best permutation
                    prmElement = arrPermutations[minHeightIndex];

	                var applyMtqLayout = function() {
		                if (!!prmElement.vertical) {  
                            //apply vertical layout
			                !!this.mtqArea && this.mtqArea.applyVerticalStyle(prmElement);
		                } else { 
                            //apply horizontal layout
			                !!this.mtqArea && this.mtqArea.applyHorizontalStyle(prmElement);
		                }

		                if (this.bankElement) {  
                            //apply new bank width according to the optimal permutation
			                if (!!prmElement.vertical) {  
                                //apply vertical layout
				                this.bankElement.applyVerticalStyle(prmElement);
			                } else {
				                this.bankElement.applyHorizontalStyle(prmElement);
			                }
		                }
                    }.bind(this);

	                if(this.mtqLayoutFuncIndex > -1) {
		                delete globalEvents.events[this.mtqLayoutFuncIndex];
	                }

	                globalEvents.add({
		                fnc: function(){
			                applyMtqLayout();
		                }
	                });

	                this.mtqLayoutFuncIndex = globalEvents.events.length - 1;
                }
            }

            this.compositeRenderComplete();
        },

        /**
         * getChildrenRec
         * @param childrenArray
         * @param childName
         * @returns children with wanted class name only array
         */
        getChildrenRec: function(childrenArray, childName){
            // if (!children) stop rec
            if (!childrenArray) return null;

            var name, childrenReducedArray = [], childRec, thi$ = this;
            // loop children
            jQuery(childrenArray).each(function(index, child) {
                // get class's last name
                name = child.name.split('.');
                name = name[name.length - 1].toLowerCase();
                // if option was found, push
                if (name == childName) {
                    childrenReducedArray.push(child);
                } else {
                    // rec child children
                    childRec = thi$.getChildrenRec(child.children, childName);
                    // and push results
                    jQuery(childRec).each(function(index, child) {
                        childrenReducedArray.push(child);
                    });
                }
            });

            return childrenReducedArray;
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    function setObjectDisabled(objectElement) {
        objectElement.draggable = false;
        objectElement.droppable = false;
        objectElement.manageDND();
        objectElement.setEnabled(false);
    }
})();
////////////////////////////////////////
// SRC End --> t2k/component/answer/MtqAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/McAnswerView.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the mc's view to use.
     */
    var defaultConfig = {
        /** The default layout used by the mc's view */
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.component.answer.McAnswerView = t2k.component.answer.AnswerView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
        },
        /**
		 * onViewRendered
		 * override with an empty function.
		 * textViewerView will dispatch the 'onRendered' event himself.
		 */
		onViewRendered : function(){
		} // end of onViewRendered
		
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/answer/McAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/McAnswer.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.answer.McAnswer
     * The multi-choice task.
     */
	t2k.component.answer.McAnswer = t2k.component.answer.Answer.subClass({
        /** The class' name (for debugging purpose). */
        name: 't2k.component.answer.McAnswer',

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The task's configuration.
         */
        ctor: function(config) {
            // Delegate
            this._super(config);

            // Closure refs.
            var thi$ = this;
            var cfg = this.cfg;

            this.setDefaultProgressConfig({
                buttonModes: {
                    currMode: "check"
                },
                allowDefaultInstruction:true,
                allowDefaultFeedback:true,
                allowDefaultHint:true,
                allowDefaultAutocheck:false,
                multipleAttempts: true
            });
            //currently autocheck should be disabled (also in Progress)
            this.cfg.autocheck = false;
            
            this.tryAgainMode = false;
            
            this.currentCorrect = 0 ;

            this.cfg.lastSelected = this.cfg.currSelected = -1;

	        this.checkingMode = $(this.cfg.data).attr("checkingMode");
            
            // Create the view.
            this.view = this.createNewView(t2k.component.answer.McAnswerView, cfg);
            
            // Create the options.
            override(cfg, prepareOptionsConfiguration(cfg.data, {
            	autocheck: this.cfg.autocheck,
                parent: thi$.view,
                events: {
                    onSelect: function(index) {
                        thi$.optionSelect(index);
                    }
                }
            }));

            this.mcType = this.cfg.type = this.cfg.isMmc ? 'mmc' : 'mc';

            // start composite
            this.startComposite2(override(this.cfg, {parent: this.view.cfg.id + '_content', mode: 'mc'}));

            // get optionArray 
            this.optionArray = this.getOptionRec(this.children);
            
            // configure options and register option event - onSelect
            jQuery(this.optionArray).each(function(index, child){
            	
            	// config option
            	child.setIndex(index);
            	child.setType(thi$.mcType);
            	
            	// register onSelect event
            	child.view.registerEvent('onSelect', function(index){
            		thi$.optionSelect(index);
            	});
            });
            
        },
        /**
         * getOptionRec
         * @param childrenArray
         * @returns option array
         */
        getOptionRec: function(childrenArray){
        	// if (!children) stop rec
        	if (!childrenArray) return null;
        	
        	var name, optionArray = [], ret, thi$ = this;
        	// loop children
        	jQuery(childrenArray).each(function(index, child){
        		// get class's last name
        		name = child.name.split('.');
        		name = name[name.length-1].toLowerCase();
        		// if option was found, push
        		if (name == 'option'){
        			optionArray.push(child);
        		} else {
        			// rec child children
        			var optionRec = thi$.getOptionRec(child.children);
        			// and push results
        			jQuery(optionRec).each(function(index, child){
        				optionArray.push(child);
        			});
        		}
        	});
        	
        	return optionArray;
        },
        
		/**
		 * onCheck
		 */
		onCheck: function() {
			var cfg = this.cfg;
            var numCorrect = 0;
            var numIncorrect = 0;
            var thi$ = this;
            var selectedList = [] ;
            
            this.setInteractable(false);
            // Iterate the options and match the correct selection.

			this.optionArray.forEach(function(option, i) {
	            var isEnabled = (option.isSelected() && !thi$.cfg.checkAnswerOnState) ||
		            (thi$.cfg.autocheck || (!ENV.viewMode.readOnly && ENV.viewMode.isAssessment));

                if (option.isSelected()) {
                    if (option.isCorrect) {
                        option.markAsCorrect();
                        numCorrect++;
                    } else {
                        numIncorrect++;
                        option.markAsWrong();
                    }
                    selectedList.push( thi$.cfg.optionsConfig[i].name ) ;

                    var specificFeedbackValue;
                    try {
                       specificFeedbackValue = thi$.progressData.specificFeedbackMessages[option.cfg.data.id][option.isCorrect ? 'correct' : 'wrong'][option.cfg.data.id];
                    }catch(error){
                        specificFeedbackValue = undefined;
                    }
                    if(specificFeedbackValue !== undefined){
                        option.setSpecificFeedback(specificFeedbackValue, 'option');
                    }
                }
                option.setEnabled( isEnabled ) ;
            });
            
            this.currentCorrect = numCorrect ;
            
            var fbUtil = t2k.util.FeedbackUtils ;
            var msgType ;
            var msgData ;
            var scoreData ;
            
            // see if we're all correct, allow progress
            if ( numCorrect == cfg.numCorrect && numIncorrect == 0 ) {
	            msgType = fbUtil.TYPE_ALL_CORRECT;
	            msgData = FeedbackService.createMessage(msgType);
	            
	            if(ENV.viewMode.showTaskScore) {
		            scoreData = {
		            		correctRatio: (numCorrect / cfg.numCorrect)
		            } ;
	            }
	            
	            this.cfg.eventsManager.dispatchEvent('setProgressDone', [ msgData, scoreData ]);
	            // if we're autocheck, don't forget to deactivate the options.
	            if (thi$.cfg.autocheck) {
		            jQuery(this.optionArray).each(function (i, option) {
			            option.setEnabled(false);
		            });
	            }
            } else {

            	var noneCorrect = numCorrect == 0 ;            	
            	var correctPercent = 100 * numCorrect / cfg.numCorrect ;
            	
            	msgType = fbUtil.TYPE_ALL_INCORRECT ;

            	if( this.cfg.isMmc ) {

		            switch (this.checkingMode){

			            case 'advanced' :

                            if(noneCorrect){
                                //all incorrect
                                msgType = fbUtil.TYPE_ALL_INCORRECT ;

                            }else if((numIncorrect == 0) && (numCorrect < cfg.numCorrect)){
                                //all correct + missing                                
                                msgType = fbUtil.TYPE_ALL_CORRECT_PART_MISSING;
                            }else if((correctPercent < 80) && (numCorrect + numIncorrect == cfg.numCorrect)){
                                //less than 80% correct  + Number of items composing the correct answer is met 
                                 msgType = fbUtil.TYPE_PART_CORRECT_LESS_80_PERCENT ;

                            }else if((correctPercent >= 80) &&  (numCorrect + numIncorrect == cfg.numCorrect)){
                                 //more than 80% correct  + Number of items composing the correct answer is met
                                msgType = fbUtil.TYPE_PART_CORRECT_MORE_80_PERCENT ;
                            }else if((numCorrect > 0) && (numIncorrect > 0) && (numCorrect < cfg.numCorrect)){
                                //part correct + missing     
                                msgType = fbUtil.TYPE_PART_CORRECT_PART_MISSING;

                            }else if((numCorrect == cfg.numCorrect) && (numIncorrect > 0)){ 
                                //all correct + wrong                                
                                msgType = fbUtil.TYPE_ALL_CORRECT_PART_INCORRECT
                            }
                           
				            break;
			            case 'generic' :
				            if (noneCorrect) {
					            msgType = fbUtil.TYPE_ALL_INCORRECT;
				            }
				            else {
					            msgType = fbUtil.TYPE_PART_CORRECT;
				            }
				            break;

            	    }
	            }

            	var predictedFeedback;
            	var sortedSelectedList = selectedList.sort() ;
            	if( sortedSelectedList.length > 1 ) {
            		predictedFeedback = this.cfg.predictedCombinations[ selectedList.join( "," ) ] ;
            	} else {
            		predictedFeedback = sortedSelectedList[0] ;
            	} 

	            msgData = FeedbackService.createMessage( msgType, null, predictedFeedback );

	            if(ENV.viewMode.showTaskScore) {
		            scoreData = {'correctRatio' : (numCorrect / cfg.numCorrect)};
	            }

                thi$.cfg.eventsManager.dispatchEvent('setProgressProgress', [msgData, scoreData]);
            }
		},
		
		/**
		 * onTryAgain
		 */
		onTryAgain: function() {
			this.reset() ;
			this.setInteractable(true);
            this.cfg.eventsManager.dispatchEvent('setProgressProgress');

			if( 	!this.cfg.autocheck &&
					this.cfg.isMmc &&
					this.currentCorrect > 0 ) {
                this.cfg.eventsManager.dispatchEvent('setProgressReady');
			}
		},
		
		/**
		 * onShowAnswer
		 */
		onShowAnswer: function(ignoreProgress) {
			
			var cfg = this.cfg;
            var thi$ = this;
            // Iterate the options and match the correct selection.
            jQuery(this.optionArray).each(function(i, option) {
                if (option.isCorrect) {
                    option.markAsSystemCorrect();
                	option.setEnabled(true);
                } else {
					option.reset() ;
                	option.setEnabled(false);
                }
            });

			this._super(ignoreProgress);
		},
		
		/**
		 * reset
		 */
        reset: function() {
        	var thi$ = this ;
            var cfg = this.cfg;
            jQuery(this.optionArray).each(function(i, option) {
                option.setEnabled(true);
                if (!option.isMarkedAsCorrect()) {
                    option.reset();
                }
            });
        }, // End of reset
        
        /**
         * optionSelect handler
         * @param index
         */
        optionSelect: function(index) {
            // Closure refs.
            var cfg = this.cfg;
			if ( !this.isInteractable() || !this.optionArray[index].isEnabled()) return;
			
            var optionsSelected = 0;

            jQuery(this.optionArray).each(function(i, option) {
                if (option.isMarkedAsCorrect()){
	                return;
                };

                if (i == index) {
                    option.setSelected(!option.isSelected());
                } else {
                    if (!cfg.isMmc) option.setSelected(false);
                }
                if (option.isSelected()) {
                    optionsSelected++;
                    cfg.lastSelected = cfg.currSelected;
                    cfg.currSelected = option.cfg.index;
                }
            });

			var allSelected = ( optionsSelected + this.currentCorrect ) == this.optionArray.length ;

	        var allCorrectSelected = (this.currentCorrect == this.cfg.numCorrect);
			
            if ((allCorrectSelected && this.cfg.isMmc)  //in mmc mode all correct options is selected
	            || (optionsSelected && ( !allSelected || this.cfg.autocheck)) ) {
                this.cfg.eventsManager.dispatchEvent('setProgressReady');
            } else {
                this.cfg.eventsManager.dispatchEvent('setProgressUnready');
            }
        },


        //assessment

        //assessment

        isAssessable:function() {
            return true
        },

        assessmentScore:function(returnCallback) {
	        var numOfExpectedAnswers = (this.mcType === "mmc") ?
		        _.filter(this.optionArray,function (opt) { return opt.isCorrect }).length : 1;

	        var maxScore = this.getAssessmentMaxScore(),
	            numCorrect = 0,
	            numIncorrect = 0;

	        jQuery(this.optionArray).each(function (i, option) {
		        if (option.isSelected()) {
			        if (option.isCorrect) {
				        numCorrect++;
			        } else {
				        numIncorrect++;
			        }
		        }
	        });

	        returnCallback(( numCorrect == numOfExpectedAnswers ) ? maxScore : 0);
        	///////////////////////////////////////////////////
        	

        	///////////////////////////////////////////////////
            // old assessment code - supporting options weight
        	///////////////////////////////////////////////////
//            var calculatedScore = 0 ;
//            
//            jQuery (this.optionArray ).each( function( i, option ) {
//            	
//                if( option.isSelected() ) {
//                    
//                	var optWeight = option.cfg.optionsConfig[i].weight ;
//                	calculatedScore += ( optWeight / 100 ) * maxScore ;
//                    
//                }
//                
//            });
//            
//            // normalize value to 0 --> maxScore
//            calculatedScore = Math.min( calculatedScore, maxScore ) ;
//            calculatedScore = Math.max( calculatedScore, 0 ) ;
//            
//            // round
//            calculatedScore = Math.round( calculatedScore ) ;
//            
//            return calculatedScore ? calculatedScore : 0 ;
        	///////////////////////////////////////////////////
        },
        /**
         * allCorrectAnswersSelected
         * @returns {Boolean}
         */
        allCorrectAnswersSelected: function() {
            var result = true;
            // Closure ref.
            var cfg = this.cfg;
            jQuery(this.optionArray).each(function(i, option) {
                if (option.isCorrect && !option.isMarkedAsCorrect()) {
                    result = false;
                }
            });
            return result;
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private:
     * Function: prepareOptionsConfiguration
     * Extract the options configuration from the xml and find out if this task is MC or MMC. If none of the options is
     * marked as the right answer an error is thrown.
     *
     * Parameter:
     *  param - {XML} taskXml The task's configuration XML.
     *  optSupplConfig - {Object} Supplemental configuration that is common for all options.
     *
     * Returns:
     *  {Object} that contains two values: optionsConfig, isMmc (boolean), isRandom (boolean), isAutocheck (boolean).
     */
	// TODO: clear 
    function prepareOptionsConfiguration(taskXml, optSupplConfig) {
        // The result object.
        var result = {
            optionsConfig: [],
            predictedCombinations: {},
            isMmc: false,
            isRandom: false,
            numCorrect: 0
        };

        // Get the options element.
        var jqXml = jQuery(taskXml).find("options");
        result.isRandom = jqXml.attr("random") === "true";
        
        // Count correct answers.
        var correctAnswersCount = 0;
        
        var isAssessment = ENV.viewMode.isAssessment ;
        
        // Iterate the XML 'option' elements.
	    function iterateOption(index, optionXml) {
		    // Extract the option's values from the option XML.
		    var jqOptionXml = jQuery(optionXml);
		    var optName = jqOptionXml.attr("id") ;
		    optName = optName ? optName : index+1 ;
		    // Create option configuration.
		    var cfg = {
			    name: optName,
			    data: optionXml,
			    autocheck: optSupplConfig.autocheck ? 'autocheck' : '',
			    correct: jqOptionXml.attr("correct") === "true",
			    origIndex: index
		    };

		    if( isAssessment ) {
			    cfg.weight = jqOptionXml.attr("weight") * 1 ;
		    }

		    // Add the supplemental configuration values.
		    copy(cfg, optSupplConfig);
		    // Push the configuration to the result object.
		    result.optionsConfig.push(cfg);
		    // Check for correct answer and increment the count.
		    if (cfg.correct) correctAnswersCount++;
	    }
        jqXml.find("option").each(iterateOption);

        // Validate.
        if (correctAnswersCount == 0) throw "No correct answers";

	    var taskType = taskXml.getAttribute('type');

	    if (taskType) {
		    result.isMmc = (taskType === 'mmc');
	    } else { // Set the MMC flag.
		    if (correctAnswersCount > 1) result.isMmc = true;
	    }

        result.numCorrect = correctAnswersCount;
        
        var predictedXML = jQuery( taskXml ).find("predicted") ;
        if( predictedXML.length > 0 ) {
	        jQuery( predictedXML ).find("combination").each(function(index, combinationXml) {
	        	var jCombXml = jQuery(combinationXml);
	        	var options =  jCombXml.attr("options").split( ',' ) ;
	        	var name = jCombXml.attr("feedbackName") ;
	        	options.sort() ;
	        	result.predictedCombinations[ options.join( ',' ) ] = name ; 
	        } ) ;
	    }
        // Return the result.
        return result;
    } // End of prepareOptionsConfiguration


})();

////////////////////////////////////////
// SRC End --> t2k/component/answer/McAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/AppletAnswerView.js
////////////////////////////////////////
(function() {

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Singleton, Private Members.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/**
	 * Private: defaultConfig Hold sensible defaults for the mc's view to use.
	 */
	// var defaultConfig = {
	// /** The default layout used by the mc's view */
	// layout: 'inline'
	// }; // End of defaultConfig.
	t2k.component.answer.AppletAnswerView = t2k.component.answer.AnswerView
			.subClass({

				/**
				 * @constructor
				 * @see superclass documentation
				 */
				ctor : function(config) {
					// Delegate.
					this._super(config);
				},
				/**
				 * onViewRendered override with an empty function.
				 * textViewerView will dispatch the 'onRendered' event himself.
				 */
				onViewRendered : function() {
				} // end of onViewRendered

			});

})();

////////////////////////////////////////
// SRC End --> t2k/component/answer/AppletAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/AppletAnswer.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.answer.AppletAnswer
     * The multi-choice task.
     */
	t2k.component.answer.AppletAnswer = t2k.component.answer.Answer.subClass({
        /** The class' name (for debugging purpose). */
        name: 't2k.component.answer.AppletAnswer',
        
        firstTimeEnabled: false,

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The task's configuration.
         */
        ctor: function(config) {
            // Delegate
            this._super(config);

            // Closure refs.
            var thi$ = this;
            var cfg = this.cfg;
            
        	var isCheckable = this.isCheckable() ;
            
            this.setDefaultProgressConfig({
                buttonModes: {
                    currMode: isCheckable ? "check" : "progress"
                },
                allowDefaultInstruction:true,
                allowDefaultFeedback:true,
                allowDefaultHint:true,
                allowDefaultAutocheck:false,
                multipleAttempts: true
            });
            
            this.tryAgainMode = false;
            
            this.currentCorrect = 0 ;

            
            // Create the view.
            this.view = this.createNewView(t2k.component.answer.AppletAnswerView, cfg);
            
            override(cfg, {
            	autocheck: this.cfg.autocheck,
                parent: this.view
            });
           
            // start composite
            this.startComposite2( override( this.cfg, {
            	parent: this.view.cfg.id + '_content',
            	dontEnableBlowup : true,
            	onReadyToBeChecked: _.bind( this.onReadyToBeChecked, this )
            } ) ) ;

            // get optionArray 
            this.applet = this.getAppletRec(this.children);
            
        },
        
        isCheckable: function() {
        	return $(this.cfg.data).attr( "checkable" ) === "true" ;
        },
        
        onReadyToBeChecked:function( flag ){
        	flag ? 
        			this.cfg.eventsManager.dispatchEvent('setProgressReady')
        		:
        			this.cfg.eventsManager.dispatchEvent('setProgressUnready') ;
        },
        /**
         * getOptionRec
         * @param childrenArray
         * @returns option array
         */
        getAppletRec: function(childrenArray){
        	// if (!children) stop rec
        	if (!childrenArray) return null;
        	
        	var name, applet, ret, thi$ = this;
        	// loop children
        	jQuery(childrenArray).each(function(index, child){
        		// get class's last name
        		name = child.name.split('.');
        		name = name[name.length-1].toLowerCase();
        		// if option was found, push
        		if (name == 'applet'){
        			applet = child;
        		}
        	});
        	
        	return applet;
        },
        
		/**
		 * onCheck
		 */
		onCheck: function() {
			var cfg = this.cfg;
            var thi$ = this;
            
            this.setInteractable(false);

			this.applet.check(false, function (result) {

				var fbUtil = t2k.util.FeedbackUtils,
					msgType,
					msgData,
					eventType,
					scoreVal = 0,
					scoreData;

				if (result == "correct") {
					msgType = fbUtil.TYPE_ALL_CORRECT;
					eventType = "setProgressDone";
					scoreVal = 1;
				}
				else if (result == "partly") {
					msgType = fbUtil.TYPE_PART_CORRECT;
					eventType = "setProgressProgress";
					scoreVal = 0.5;
				}
				else {
					msgType = fbUtil.TYPE_ALL_INCORRECT;
					eventType = "setProgressProgress";
					scoreVal = 0;
				}

				msgData = FeedbackService.createMessage(msgType);

				if (ENV.viewMode.showTaskScore) {
					if(result) {
						scoreData = {'correctRatio':scoreVal};
					}
				}

				thi$.cfg.eventsManager.dispatchEvent(eventType, [msgData, scoreData]);

			});
        	//correct / wrong / partly
            
		},
		
		/**
		 * onTryAgain
		 */
		onTryAgain: function() {
			this.setInteractable(true);
            this.cfg.eventsManager.dispatchEvent('setProgressProgress');
			this.cfg.eventsManager.dispatchEvent('setProgressReady');
            
            this.applet.tryAgain();
		},
		
		/**
		 * onShowAnswer
		 */
		onShowAnswer:function (ignoreProgress) {
			this._super(ignoreProgress);
			this.applet.showAnswer();
		},

		setEnabled:function (flag) {
			this._super(flag);

			if (flag == true && this.firstTimeEnabled == false) {
				this.onReadyToBeChecked( this.applet.apiFlags.progressAlwaysEnabled );
				this.firstTimeEnabled = true;
			}
		},

        isAssessable:function() {
            return true;
        },

        assessmentScore:function(returnCallback) {
	        var maxScore = this.getAssessmentMaxScore(), scoreVal = 0;

	        if (this.applet.apiFlags.getScore) {
		        this.applet.getScore(function (result) {
			        scoreVal = result.score;
			        returnCallback(scoreVal * maxScore);
		        });
	        } else {
		        this.applet.check(true, function (result) {
			        if (result == "correct") {
				        scoreVal = 1;
			        }
			        else if (result == "partly") {
				        scoreVal = 0.5;
			        }
			        else {
				        scoreVal = 0;
			        }

			        returnCallback(scoreVal * maxScore);
		        });
	        }

        },
        
        // don't reduce me 
        reductionAvailable : function() {
            return false;
        }

    });



})();

////////////////////////////////////////
// SRC End --> t2k/component/answer/AppletAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/StatementAnswerView.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the Statement's view to use.
     */
    var defaultConfig = {
        /** The default layout used by the Statement's view */
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.component.answer.StatementAnswerView = t2k.component.answer.AnswerView.subClass({

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));
            
        }
    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/answer/StatementAnswerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/answer/StatementAnswer.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.component.answer.StatementAnswer
     * The open-question task.
     */
    t2k.component.answer.StatementAnswer = t2k.component.answer.Answer.subClass({
        /** The class' name (for debugging purpose). */
        name:'t2k.component.answer.StatementAnswer',

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The task's configuration.
         */
        ctor:function (config) {
            // Delegate
            this._super(config);

            // Create the opq view.
            this.view = this.createNewView(t2k.component.answer.StatementAnswerView, this.cfg);
        },

        //override
        setEnabled:function (flag) {
            this._super(flag);

            // set progress = ready on flag = true
            if (flag) {
                this.cfg.eventsManager.dispatchEvent('setProgressReady');
            }
        },

        getState:function () {
            // create xml
            var state = this._super();
            // collect all text editor state from view

            return state;
        },

        setState:function (state) {
            this._super(state);
            // set state for all state items
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/component/answer/StatementAnswer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/textEditor/TextEditorConfig.js
////////////////////////////////////////
// toolbar objects
t2k.component.textarea.TextEditorViewToolbarConfig = {
		
	student : {
		
		fontSize 	: [],
		undo  		: [],
		redo  		: [],
		bold 		: [],
		italic 		: [],
		underline 	: [],
		lists 		: [],
		aligns 		: [],
		indents 	: [],
		//dirs 		: [],
		marker		: [],
		setColor	: []
		
	},
	
	marker : {
		
		marker		: []
	
	},
	
	studentMath : {
		
		fontSize 	: [],
		undo  		: [],
		redo  		: [],
		bold 		: [],
		italic 		: [],
		underline 	: [],
		lists 		: [],
		aligns 		: [],
		indents 	: [],
		//dirs 		: [],
		marker		: [],
		setColor	: [],
		mf			: []
		
	},
    studentMath1 : {

    		fontSize 	: [],
    		undo  		: [],
    		redo  		: [],
    		bold 		: [],
    		italic 		: [],
    		underline 	: [],
    		lists 		: [],
    		aligns 		: [],
    		indents 	: [],
    		//dirs 		: [],
    		marker		: [],
    		setColor	: []
//	,
//    		mf			: []

    	},

	onlyMath : {
		mf			: []
	}
		
};

// opacity values
t2k.component.textarea.TextEditorViewOpacity = { 

		hide : "hide",
		fade : "0.99",
		show : "1",
		
		opacityDuration : 200
			
};


// styles attributes config for exec command
t2k.component.textarea.TextEditorViewStylesAttr = { 
		font		: "fontName",
		color		: "foreColor",
		size		: "fontSize",		
		bold   		: "bold",
		italic 		: "italic",
		underline 	: "underline"
		
};

// TextEditor constant values
t2k.component.textarea.TextEditorViewConstants = { 

		// overflow space at right / left
		spacer					: 10,
		constantTriangleTop 	: 1,
		constantTriangleSpace 	: 7,
		constantTriangleBGSpace	: 8,
		tasksHolderClass		: ".player_content",
		panelClass				: "themable_widget_ta_toolbar_panel",
		themableClass			: "themable_widget",
		themableClass_ta		: "themable_widget_ta",
		toolbarClass			: "themable_widget_ta_toolbar",
		widthHeightExpansion	: 8,
		maxTextAreaWidth		: 714, // must be 51rem. example: 51 * 14(html/body font-size) = 714
		minTextAreaWidth		: 294,
		widthRefrence			: 0.9,
		fontAspectRatio			: 1.2,
		defaultCssClass			: 'style1',
		textEditorCssClass		: 'css/textEditor.css',
		mathFieldCssClass		: 'css/mathField.css',
        fontsCss                : 'css/fonts.css'
};

// mode object
t2k.component.textarea.TextEditorViewModes = { 

		letter : {
			displayMaxChar 		: "1",
			charLimit 			: true,
			scrollBar		 	: false,
			keyScroll      		: false,
			enableEnter 		: false,
			displayToolbar		: false,
			width				: "fixByStyle",
			height				: "fixByStyle"
		},
		
		word : {
			displayMaxChar 		: "22",
			minDisplayMaxChar 	: "2",
			maxDisplayMaxChar 	: "45",
			charLimit 			: true,
			scrollBar		 	: false,
			keyScroll      		: false,
			enableEnter 		: false,
			displayToolbar		: false,
			width				: "fixByStyle",
			height				: "fixByStyle"
		},
		
		sentence : {
			displayMaxChar 		: "45",
			charLimit 			: false,
			scrollBar		 	: false,
			keyScroll      		: true,
			enableEnter 		: false,
			displayToolbar		: false,
			width				: null,
			height				: "fixByStyle"
		},
		
		paragraph : {
			displayMaxChar 		: "150",
			charLimit 			: false,
			scrollBar		 	: true,
			keyScroll      		: false,
			enableEnter 		: true,
			displayToolbar		: true,
			width				: null,
			height				: null
		},
		
		fullText : {
			displayMaxChar 		: "500",
			charLimit 			: false,
			scrollBar		 	: true,
			keyScroll      		: false,
			enableEnter 		: true,
			displayToolbar		: true,
			width				: null,
			height				: null
		}
			
};
////////////////////////////////////////
// SRC End --> t2k/component/textEditor/TextEditorConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/textEditor/TextEditorView.js
////////////////////////////////////////
/**
 * TextAreaParams
 * the object that will be received by TextArea's @constructor
 */

t2k.component.textarea.TextEditorViewParams = function() {
    this.id                 = "";
    this.width              = "";  // size + 'px'
    this.height             = "";  // size + 'px'
    this.initText           = "";  // markup
    this.setClass           = "";  // css
    this.parentId           = "";
    this.maxChar            = "";
    this.direction          = "";  // 'ltr' (default)/ 'rtl'
    this.keyUpFunction      = "";  // todo: remove
    this.toolBarPreset      = "";  // TextAreaToolbarConfig
    this.mode               = "";  // t2k.component.textarea.TextEditorViewModes
    this.enableCharLimit    = "";  // optional, mode override
    this.enableScrollbar    = "";  // optional, mode override
    this.enableKeyscroll    = "";  // optional, mode override
    this.enableToolbar      = "";  // optional, mode override
    this.firstKeyDown       = "";  // callback
    this.setClass           = "";  // callback
};


(function() {

    /**
     * Private: TEMPLATE
     * The Mustache template used by the tasks's view.
     * 2d0 - Implement Roman's way of managing templates.
     */
    var TEMPLATE = "";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the task's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.


    t2k.component.textarea.TextEditorView = t2k.component.BaseComponentView.subClass({

        /**
         * @constructor TextArea
         * @param TextAreaParams
         */
        ctor: function(config) {
            // Delegate.
            this._super(override(config, defaultConfig));
            var TextAreaParams = config;

            /**
             * @constructor TextArea
             * @param id
             * @param width
             * @param height
             * @param initText
             * @param setClass
             * @param parentId
             * @param maxChar
             * @param direction - must be "rtl" or "ltr"
             * @param keyUpFunction
             * @param toolBarPreset - must be "studentToolbar" or "teacherToolbar" or any other toolbar name that appears at TextAreaConfig.js
             */

                // data members
            this.id              = TextAreaParams.id;
            this.width           = TextAreaParams.width;
            this.maxWidth        = TextAreaParams.maxWidth;
            this.height          = TextAreaParams.height;
            this.maxChar         = TextAreaParams.maxChar;
            this.initText        = TextAreaParams.initText;
            this.setClass        = TextAreaParams.setClass;
            this.setAnswer       = TextAreaParams.setAnswer;
            this.parentId        = TextAreaParams.parentId;
            this.keyUpFunction   = TextAreaParams.keyUpFunction;
            this.toolBarPreset   = TextAreaParams.toolBarPreset;
            this.firstKeyDown    = TextAreaParams.firstKeyDown;
            this.removeContent   = this._removeContent;
            this._firstKeyPressed = false;
            this._ctrlDown       = false ;
            this._toolbarOpacityMode;
            this._iframeDoc;
            this._bodyElement;
            this._toolbarElement;
            this._enable;
            this._Range;

            this.isMinimunReadable = false;
            this.isAbsoluteMinimun = false;
            this.reductionStepSize = t2k.component.textViewer.TextViewerConstants.reductionStepSize;
            this.reductionStep   = 0;
            this.optimumFontSize = TextAreaParams.optimumFontSize;
            this.setFontSize = TextAreaParams.setFontSize;
            this.fontColor = TextAreaParams.fontColor;

            // browser params
            this._browser = this._getBrowserType();

            // mode params
            this._displayMaxChar;
            this._enableCharLimit = TextAreaParams.enableCharLimit || '';
            this._enableScrollbar = TextAreaParams.enableScrollbar;
            this._enableKeyscroll = TextAreaParams.enableKeyscroll;
            this._enableEnter     = true; // default
            this._enableToolbar   = TextAreaParams.enableToolbar;
            this._mode            = TextAreaParams.mode;

            //current style according to the css class this.setClass
            this.style = null;

            // set mode params by mode
            this._setModeParams();

            // default direction: ltr
            if (!TextAreaParams.direction) {
                TextAreaParams.direction = "ltr";
            }
            this.direction  = TextAreaParams.direction;

            this._undoIndex = 0;
            this._undoArray = [];

            this._clipboard = null;
            this._undoMode  = false;

            // get and set the control toolbar
            this.textAreaControls = this._textAreaControlsHashCreate();
            this.textAreaTollBarZone = this._setTextAreaToolBar(this.textAreaControls);



            // create textarea iframe
            this.textAreaIframe  = this._createTextAreaIframe();

            // create textarea outer div, append it the toolbar and iframe and appent the div to the parent
            this._buildTextAreaOuterDiv();

            // creates toolbar's triangle
            this._buildTollbarTriangle();

            // hide toolbar
            this._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.hide);

            // set iframe design mode
            this._setTextAreaDesignMode();

            // set initText, direction, keyUp handle, maxChar handle exc..
            this._initTextArea();

            // default textarea behavior - disable
            this.enable(false);

            // set undo disable
            this._enableControl("undo","no");

            // set Init Style
            this._setInitStyle("onInitTA");

            this._initUndo();

            // set & check height & width for 'paragraph' or 'fullText' modes
            this._setAndCheckTextareaSizes();
        },

	    resetBody:function (TextArea) {
		    !!TextArea._iframeDoc.activeElement && TextArea._iframeDoc.activeElement.blur();

		    var bodyElementParent = TextArea._bodyElement.parent(),
			    bodyElement = TextArea._bodyElement.detach();

		    bodyElementParent.append(bodyElement);
		    bodyElement = null;
		    bodyElementParent = null;
	    },

	    onBodyClick: function(flag) {

		    var TextArea = this;

		    function onClickBody(e){
                
			    if(!!ENV.behaviors.isTablet) {
				    var $target = jQuery(e.target);
				    if (($target.parents('#body_texteditor').length == 0) &&
					    ($target.parents(".themable_widget_ta_toolbar").length == 0)) {
					    TextArea.resetBody(TextArea);
				    }
				    $target = null;
			    }

			    if (TextArea._toolbarOpacityMode > 0 && TextArea._toolbarOpacityMode < 1 && !TextArea._holdToolbarDisplay){
				    TextArea._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.hide); //hide toolbar on focusOut
				    TextArea._removePanel();
				    TextArea._iframeDoc && TextArea._iframeDoc.getSelection() && TextArea._iframeDoc.getSelection().removeAllRanges();  //cancel selection
			    }


		    }

		    var eventName = !!ENV.behaviors.isTablet ? 'touchstart' : 'click';
		    
		    jQuery('body').unbind(eventName, onClickBody);

		    if(flag) {
		    	
			    jQuery('body').bind(eventName, onClickBody);
			
				if( ENV.behaviors.fireUIEvents ) {
                    ENV.host.onUIEvent( "blur" ) ;
				}

		    }

	    },

        //override - set state of component
        setMyState : function(state){
            this.state = state;

            this.setEnabled(jQuery(state).attr('enabled') === 'true');

            this.replaceContent(jQuery(state).children('initText').text());

        },

        //override - get state of component
        addMyState : function(state){
            var state = jQuery('<state/>')
                .append(jQuery('<initText/>').text(this.getMarkUpValue()));

            return state;
        },

	    remove : function() {
		    this._view.remove();
		    this._bodyElement.remove();
		    this._toolbarElement.remove();
		    jQuery(this.textAreaIframe).remove();
		    jQuery(this.textAreaTollBarZone).remove();
		    jQuery('#' + this.id + 'outerDiv').remove();
	    },

        // public functions:
        /**
         * calcFontSizeByReduction
         * @param val - reduction value (if null - set 1)
         */
        calcFontSizeByReduction : function(val){

            if (!this.isMinimunReadable && this.optimumFontSize != undefined && this.reductionStep > 0){
                // if val == null set val = 1
                var reductionValue = (val != undefined && val > 0) ? val : 1;
                // add the val to the current reductionStep
                this.reductionStep = this.reductionStep + reductionValue;
                // calc font size by reductionStep
                this.setFontSize = this.optimumFontSize - (this.reductionStep * this.reductionStepSize);
                // if fontSize is less then fontSizeMinReadable
                if (this.setFontSize < t2k.component.textViewer.TextViewerConstants.minimumReadableFontSize){
                    // set fontSize = minimumReadable (not less)
                    this.setFontSize = parseInt(t2k.component.textViewer.TextViewerConstants.minimumReadableFontSize);
                    // min readable flag
                    this.isMinimunReadable = true;
                    // if absolute minimum if apply
                    if (!!this.applyAbsoluteMinimum && !this.isAbsoluteMinimum){
                        // set the markup for a number of chars + '...'
                        this.initMarkup = jQuery('#' + this.id).text().substring(0,t2k.component.textViewer.TextViewerConstants.absMinStrLen) + '...';
                        // set absoluteMinimum flag = true
                        this.isAbsoluteMinimum = true;
                        // let the textViewer's presenter know that you'r on absoluteMinimum
                        this.dispatchEvent("onAbsMin", this);
                    }
                }
            }
        },
        /**
         * reduce
         * start reduction
         * @param val - reduction value (if null - set 1)
         */
        reduce:function (val) {
            this.dispatchEvent('cantReduce');
            this.dispatchEvent('onRendered');
        },

        setFirstKeyDownFunction : function(fnc){
            this.firstKeyDown = fnc;
        },

        /**
         * setKeyUpFunction
         * set new external function for textarea keyup
         *
         * @param newKeyUpFunction
         */
        setKeyUpFunction : function(newKeyUpFunction){
            var iframe = this.textAreaIframe,
                iframeDoc = this._iframeDoc;

            jQuery(this._bodyElement).attr("keyUpFunction", newKeyUpFunction);
        },


        _eliminateForcedBR : function(){
            console.log('**********************************************************************')
            console.log('_eliminateForcedBR : that there needs to be done ? ');
            console.log('**********************************************************************')
        },
        _rebuildTextViewer : function(){
            console.log('**********************************************************************')
            console.log('_rebuildTextViewer : that there needs to be done ? ');
            console.log('**********************************************************************')
        },

        _removeContent : function(){
            jQuery(this._bodyElement).html('');
        },

        /**
         * getContent -
         * @returns textarea content HTML markup string
         */
        getContent : function(){
//            var iframe = this.textAreaIframe;
//            var iframeDoc = this._iframeDoc;
            var bodyHTML = jQuery(this._bodyElement).html(),
                bodyDir  = jQuery(this._bodyElement).css("direction" ),
                bodyLineSpacing = jQuery(this._bodyElement).css("line-height" ),
                span = jQuery("<div/>")
                    .css({
                        "direction":    bodyDir,
                        "line-height":  bodyLineSpacing
                    })
                    .html(bodyHTML ),
                div  = jQuery("<div/>").append(span);

            return jQuery(div).html();
        },

        /**
         * replaceContent
         * @param htmlContent
         */
        replaceContent : function(htmlContent){
            jQuery('body', jQuery('#' + this.textAreaIframe.id)[0].contentDocument).html(htmlContent);

        },

        /**
         * getValue function
         * @returns texteditor text
         */
        getValue : function(){
            return jQuery('body', jQuery('#' + this.textAreaIframe.id)[0].contentDocument).text().trim();
        },

        /**
         * getMarkUpValue function
         * @returns texteditor html
         */
        getMarkUpValue : function(){
            return jQuery('body', jQuery('#' + this.textAreaIframe.id)[0].contentDocument).html();
        },

        /**
         * getNumChar -
         *
         * @returns textarea's number of chars; text length only (not html length)
         */
        getNumChar : function(){
//            var iframe = this.textAreaIframe;
//            var iframeDoc = this._iframeDoc;
            return jQuery(this._bodyElement).text().length;
        },

        setFirstKeyPressed : function(flag){
            this._firstKeyPressed = flag;
        },

        /**
         * enable -
         * enable or disable textarea
         *
         * @param enabled - boolean value
         */
        enable : function(enabled){

            this._enable = enabled;
            var attrArray = ["keydown", "mouseup", "mousedown", "click", "mouseenter", "mouseleave", "select", "focus"];

            // enabled or disabled accomplish by binding blur function to focus events
            if (enabled) {

                for (var i=0 ; i < attrArray.length ; i++){
                    jQuery(this._bodyElement).unbind(attrArray[i]);
                }

            } else {

                for (var i=0 ; i < attrArray.length ; i++){
                    ENV.behaviors.isIE || jQuery(this._bodyElement).bind(attrArray[i],function(){
                        this.blur();
                    });
                }

                // on disable mode, hide toolbar
                this._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.hide);
            }

	        this.onBodyClick(enabled);
        },

        // private variables

        /**
         * _textArea_toolbarControlsHash -
         * master hash for toolbar's controls.
         * the toolbar's preset that delivers to textArea will get this hash arguments according to preset's controls.
         */
        _textArea_toolbarControlsHash : {

            bold : {
                command : "bold",
                tags : [ "b", "strong" ],
                setActiveToolbar: true
            },

            italic : {
                command : "italic",
                tags : [ "i", "em" ],
                setActiveToolbar: true
            },

            underline : {
                command : "underline",
                tags : [ "u" ],
                setActiveToolbar: true
            },

            undo : {
                handler : "_undo",
                on2on   : true,
                startAsDisable : true
            },

            redo : {
                handler : "_redo",
                on2on   : true,
                startAsDisable : true
            },

            fontSize : {
                title : "fontSize",
                select : '<select>  <option value="default">-</option>  <option value="14">14</option>  <option value="16">16</option>  <option value="18">18</options> <option value="20">20</option>  <option value="22">22</options> <option value="24">24</option>  <option value="26">26</options></select>    ',
                tags : [ "font" ],
                initValueDisplay : "16",
                dropDown: true,
                handler: "_fontSize",
                dropDownElements : ["14","16","18","20","22","24","26"]
            },

            lists : {
                dropDown: true,
                handler: "_insertLists",
                tags : [ "ul", "ol" ],
                dropDownElements : ["squareList", "discList", "numberList"]
            },
            // lists dropdown
            squareList : {
                tag : "UL",
                icon : "square",
                execCmdStr : "insertUnorderedList"
            },
            // lists dropdown
            discList : {
                tag : "UL",
                icon : "disc",
                execCmdStr : "insertUnorderedList"
            },
            // lists dropdown
            numberList : {
                tag : "OL",
                icon : null,
                execCmdStr : "insertOrderedList"
            },

            aligns : {
                dropDown: true,
                handler: "_aligns",
                dropDownElements : ["justifyLeft", "justifyCenter", "justifyRight"]

            },
            // aligns dropdown
            justifyLeft :{
                tag : null,
                icon : null,
                execCmdStr : "justifyLeft"
            },
            // aligns dropdown
            justifyCenter :{
                tag : null,
                icon : null,
                execCmdStr : "justifyCenter"
            },
            // aligns dropdown
            justifyRight :{
                tag : null,
                icon : null,
                execCmdStr : "justifyRight"
            },

            indents : {
                dropDown: true,
                handler: "_indents",
                dropDownElements : ["indent", "outdent"]
            },
            // indents dropdown
            indent : {
                tag : null,
                icon : null,
                execCmdStr : "indent"
            },
            // indents dropdown
            outdent : {
                tag : null,
                icon : null,
                execCmdStr : "outdent"
            },

            dirs : {
                dropDown: true,
                handler: "_dirs",
                dropDownElements : ["dirRightToLeft", "dirLeftToRight"]
            },
            // dirs dropdown
            dirRightToLeft : {
                tag : "rtl",
                icon : null,
                execCmdStr : null
            },
            // dirs dropdown
            dirLeftToRight : {
                tag : "ltr",
                icon : null,
                execCmdStr : null
            },

            marker : {
                command : "backColor",
                tags : [ "font" ],
                setActiveToolbar: true,
                args : "yellow",
                tags : ["span"]
            },

            setColor : {
                dropDown: true,
                handler: "_setColor",
                /* Chrome needs this color to be different from #000, hence 000001. Do not change. */
                colorArray : ["#ffffff","#000001","#2F6028","#004E98","#7A4179","#9C4941","#AB1707","#504A1F","#9F5C1C"],
                colorColumns : "3",
                initValueDisplay : " "
            },

            mf : {
                handler: "_displayMF",
                on2on   : true
            }
        }, 

        // private functions:

        /**
         *
         */
        _getBrowserType : function(){
            var ret = 'OTHERS';
            var browser = navigator.userAgent;

            if (browser.indexOf('Safari') != -1){
                ret = 'SAFARI';
            }

            if (browser.indexOf('Chrome') != -1){
                ret = 'CHROME';
            }

            if (browser.indexOf('MSIE') != -1){
                ret = 'IE';
            }
            return ret;
        },

        /**
         * setUnselectable
         * if the browser is IE, set 'unselectable' on.
         * @param element
         */
        _setUnselectable : function(element){
            if (this._browser == 'IE'){
                jQuery(element).attr("unselectable","on");
            }
        },

        /**
         * _displayMF -
         * mockup (writes 'math field' on the ta. will handle after the mf dev.)
         */
        _displayMF : function(){

            var thi$ = this;

            var placeHolderId = genId();
            this._replaceSelectionWith('<div style="display: inline-block" id="' + placeHolderId + '" ></div>');

            var mfPlaceHolder = this._bodyElement.find('#' + placeHolderId);

            var mfData = jQuery('<mathField/>').attr({
                keyboardPreset:'fullMathField',
                type:'singleLine',
                editMode:'on',
                autoComma:'true',
                validate:'false',
                devMode:'false',
                maxHeight:'dynamic',
	            showMFEmptyIcon: true
            });

	        function onRenderedMF() {
		        !!thi$._iframeDoc.activeElement && thi$._iframeDoc.activeElement.blur();

		        if (ENV.behaviors.isIpad) {
		            document.activeElement.blur();
			        document.body.blur();
		        }
	        }

	        function onStartEditMF() {
		        if (ENV.behaviors.isTablet) {
			        !!thi$._iframeDoc.activeElement && thi$._iframeDoc.activeElement.blur();
			        thi$._bodyElement.blur();
			        if(ENV.behaviors.isIpad) {
				        jQuery('body').trigger('touchstart');
			        }
		        }

		        thi$._iframeDoc.designMode = 'off';
		        thi$.mfInEditMode = true;
		        thi$._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.hide);
	        }

	        function onEndEditMF() {
	            thi$._iframeDoc.designMode = 'on';

		        thi$.mfInEditMode = false;
		        thi$._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.show);
	        }

            this.mathField = [];
	        this.mathField[0] = new t2k.component.mathField.MathField({
		        parent : mfPlaceHolder,
		        data   : mfData,
		        container : this._bodyElement,
		        targetDocument : this._iframeDoc,
		        onRendered : onRenderedMF,
		        onStartEdit : onStartEditMF,
		        onEndEdit : onEndEditMF //TODO : open toolbar
	        });

            this.mathField[0].setEnabled(true);
        },

        /**
         * _beep
         * play the beep
         */
        _beep : function(){
            SOUND.beep();
        },

        /**
         * _setAndCheckTextareaSizes -
         * checks the width & height params for right capacity, only for 'paragraph' or 'fullText' modes.
         * check min width = 296px and output 'console.log' for exceptions
         * set max width = 714px
         * output 'console.log' msg for error
         * (params use by constant)
         */
        _setAndCheckTextareaSizes : function(){

            var obj_outerDiv = jQuery('#' + this.id + 'outerDiv'),
                textareaWidth = obj_outerDiv.outerWidth(),
                textareaHeight = obj_outerDiv.outerHeight();

            //set actual textarea width in px
            if(this.width == '100%'){
                this.width = textareaWidth;
                obj_outerDiv.width(this.width);
            }

            //set actual textarea height in px
            if(this.height == '100%'){
                this.height = textareaHeight;
            }   obj_outerDiv.height(this.height);

            // max & min width issue
            if (this._mode == 'sentence' || this._mode == 'paragraph' || this._mode == 'fullText'){
                // set max width case the width is greater then the max width
                if (textareaWidth > t2k.component.textarea.TextEditorViewConstants.maxTextAreaWidth){
                    this.width = t2k.component.textarea.TextEditorViewConstants.maxTextAreaWidth + 'px';
                    obj_outerDiv.width(this.width);
                }

                if (textareaWidth < t2k.component.textarea.TextEditorViewConstants.minTextAreaWidth){
                    // TODO: compile error
                    // console.log("ERROR - TextArea Width is under " + t2k.component.textarea.TextEditorViewConstants.minTextAreaWidth + "px, on id [" + this.id + "]");
                }
            }

            if (this._mode == 'paragraph' || this._mode == 'fullText'){

                var displayMaxChar  = this._displayMaxChar,
                    letterWidth     = Math.floor(this.style.size * t2k.component.textarea.TextEditorViewConstants.widthRefrence),
                    letterHeight    = Math.floor(t2k.component.textarea.TextEditorViewConstants.fontAspectRatio * letterWidth),
                    currLettersInOneLine = Math.floor(textareaWidth / letterWidth),
                    linesRequire    = Math.ceil(displayMaxChar / currLettersInOneLine),
                    heightRequire   = (linesRequire * letterHeight) + t2k.component.textarea.TextEditorViewConstants.widthHeightExpansion;

                this.height = heightRequire + 'px';
                obj_outerDiv.height(this.height);

                jQuery(this.textAreaIframe).height('100%');

                // if height is greater then the required height, set heightRequire as the textarea height. else - output console.log(or compile error)
                /*if (textareaHeight > heightRequire){
                 this.height = heightRequire + 'px';
                 } else {
                 // TODO: compile error
                 // console.log("ERROR - TextArea Height is too short, on id [" + this.id + "]");
                 }*/
            }

             // set width & height to body element to support Ipad ( otherwise text ovelaps body area out of the iframe)
            var bodyPaddingAdditionY = parseInt(this._bodyElement.css('padding-bottom')) + 
                                                parseInt(this._bodyElement.css('padding-top'));

            var bodyPaddingAdditionX = parseInt(this._bodyElement.css('padding-left')) + 
                                                parseInt(this._bodyElement.css('padding-right'));

            this._bodyElement.width(obj_outerDiv.width()- bodyPaddingAdditionX);
            this._bodyElement.height(obj_outerDiv.height()- bodyPaddingAdditionY);
        },
        
        /**
         * _getStyleClass -
         * find css class rules based on css class name
         * @param document, className - current textEditor class name
         */
        _getStyleClass : function (document, className) {

            var styleSheet = null,
                rule = null,
                rules;

            jQuery.each(document.context.styleSheets, function(i, styleObj){
                if(styleObj.href && styleObj.href.match(/textEditor.css$/)){
                    styleSheet =  styleObj;
                }
            });

            // Check if browser uses [rules] - cssStyleRule object
            if (styleSheet && styleSheet.rules){
                rules = styleSheet.rules;
            }

            // Check if browser uses [cssRules]
            if (styleSheet && styleSheet.cssRules){
                rules = styleSheet.cssRules;
            }

            // Check if browser supports css rules
            if (rules){
                // Loop rules in css stylesheet
                jQuery.each(rules, function(i, ruleObj){
                    if(ruleObj.selectorText == className){
                        rule = ruleObj;
                    }
                });
            }

            return rule;
        },
        /**
         * _setModeParams
         * set the mode params by mode
         */
        _setModeParams : function(){

            var currMode = t2k.component.textarea.TextEditorViewModes[this._mode];

            this._displayMaxChar = currMode.displayMaxChar;
            if (this._displayMaxChar == null || this._displayMaxChar == 'undefined'){
                this._displayMaxChar = '';
            }

            if (this.maxChar){
                this._displayMaxChar = this.maxChar;
            }

            // set maxChar 'word' mode
            if (this._mode == "word"){
                if(parseInt(this.maxChar) > parseInt(currMode.maxDisplayMaxChar)) {
                    this._displayMaxChar = currMode.maxDisplayMaxChar;
                } else {
                    if(parseInt(this.maxChar) < parseInt(currMode.minDisplayMaxChar)) {
                        this._displayMaxChar = currMode.minDisplayMaxChar;
                    }
                }
            }


            /**
             * TODO: there are potentially many more bugs here related to automatic type casting.
             * In JavaScript, (false == '') is true, so please use === operator.  -- Mark V.
             */
            if (typeof this._enableCharLimit != 'boolean') {
                // this._enableCharLimit = currMode.charLimit;
                this._enableCharLimit = parseInt(this._displayMaxChar) > 0 ? true : currMode.charLimit;
            }

            this.maxChar = this._enableCharLimit? parseInt(this._displayMaxChar): 5000;


            if ((this._enableScrollbar != true && this._enableScrollbar != false)
                || (this._enableScrollbar == '' && this._enableScrollbar != true && this._enableScrollbar != false) ){

                this._enableScrollbar = currMode.scrollBar;
            }

            if ((this._enableKeyscroll != true && this._enableKeyscroll != false) || this._enableKeyscroll ==''){
                this._enableKeyscroll = currMode.keyScroll;
            }

            this._enableEnter = currMode.enableEnter;

            // set _enableToolbar
            if (this._enableToolbar == 'false' || this._enableToolbar == 'true'){
                this._enableToolbar = eval(this._enableToolbar);
            } else {
                this._enableToolbar = currMode.displayToolbar;
            }

            // set currStyle by constructor
            var currStyle = this.setClass;

            // if the constructor doesn't provide any style, use the default style
            if (currStyle == null || currStyle == ''){
                currStyle = t2k.component.textarea.TextEditorViewConstants.defaultCssClass;
            }

            var cssRule = this._getStyleClass(jQuery('document'), '.ta .' +currStyle);
            if(cssRule){
                this._ruleToStyle(cssRule);
            }


            // if currMode.width is "fixByStyle", set width by 'displayMaxChar'
            // on 'word' mode, set with with 'widthRefrence' to reducr 'word' width
            if (currMode.width){
                if (this._mode == "word"){
                    this.width = (this.style.size * t2k.component.textarea.TextEditorViewConstants.widthRefrence * this._displayMaxChar) + "px";
                } else {
                    this.width = (this.style.size * currMode.displayMaxChar) + t2k.component.textarea.TextEditorViewConstants.widthHeightExpansion + "px";
                }
            }

            if (currMode.height){
                this.height = (Math.floor(t2k.component.textarea.TextEditorViewConstants.fontAspectRatio * this.style.size)) + t2k.component.textarea.TextEditorViewConstants.widthHeightExpansion + "px";
            }

// set maxChar = 350 for sentence to avoid forced enter
if (this._mode == "sentence" && this._enableCharLimit !== true){
    this.maxChar = 350;
}

            // set maxChar = 1 for 'letter' mode
            if (this._mode == "letter"){
                this.maxChar = 1;
            }

            // 'letter' mode exception - init text should be one letter or less
            if (this._enableCharLimit == true){
                var initTextTempDiv = jQuery("<div></div>").html(this.initText ),
                    initTextStr = jQuery(initTextTempDiv).text() ;

                if (initTextStr.length > this.maxChar){
                    this.initText = initTextStr.substring(0, this.maxChar);
                }
            }

            // set default for toolBarPreset
	        if (ENV.behaviors.isTablet) {
		        this.toolBarPreset = 'onlyMath';
	        } else if (this.toolBarPreset == '' || this.toolBarPreset == null || this.toolBarPreset == 'undefined') {
		        this.toolBarPreset = 'student';
	        }

	        if(this.width.px2int() > this.maxWidth) { //TE width is larger then container width
		        this.maxWidth = this.width.px2int();
	        }

        },
        /**
         * _ruleToStyle -
         * get the cssRule object and set this.style according to it
         *
         * @param body - cssRule element
         */
        _ruleToStyle : function(cssRule)
        {
            this.style =  {
                bold        : cssRule.style.fontWeight == 'bold',
                italic      : cssRule.style.fontStyle == 'italic',
                underline   : cssRule.style.textDecoration == 'underline',

                font        : cssRule.style.fontFamily || $(document).find("html").css('font-family'),
                size        : (typeof this.setFontSize != 'undefined') ? this.setFontSize : cssRule.style.fontSize
            };

            if(this.style.size != '' && this.style.size != null)
                this.style.size = parseInt(this.style.size);  //remove px
            else
                this.style.size = this.optimumFontSize || 22;

            if(this.fontColor){
                this.style.color = this.fontColor;
            }

            if(this.style.font == null){
                this.style.font = '';
            }
        },

        /**
         * _setInitStyle -
         * get the textArea style, implenet style's arguments by execCommand(execCmd()), and set selected controls
         *
         * @param status - on init, _setInitStyle gets status = "onInitTA", for style implementation of initText markup
         */
        _setInitStyle : function(status){
            // get textArea style
            var style = this.setClass;

            if (style){

                var iframe = this.textAreaIframe;
                var iframeDoc = this._iframeDoc;
                var body = jQuery(iframeDoc).contents().find("body").get(0);

                var bodyHTML = jQuery(body).html().replace(/^\s+|\s+$/, '');
                var currElement = this._getSelectedElement();

                // checks if the textArea has content if full TA
                if (bodyHTML != '' && bodyHTML != '<br>' && bodyHTML != '<P>&nbsp;</P>'){

                    // if there is no content, and init apply
                    if (status == "onInitTA"){
                        this._setInitStyleOnInitTaForInitText();
                    }

                } else {    // if empty

                    // set default color selection
                    jQuery("#" + this.id + "ToolBar").find(".setColorDisplay").find("td").css("background-color","#000000");

                    // TextAreaStylesAttr is a convertor object that converts a style argument to execCommand argument
                    var stylesExecCmdStr = t2k.component.textarea.TextEditorViewStylesAttr;

                    // loop the textArea style
                    for (var styleItem in this.style){

                        // if the selected styleItem is false, do nothing
                        if (!this.style[styleItem] || typeof this.style[styleItem] == 'undefined'){
                            continue;
                        }

                        // execute the styleItem
                        this._execCmd(stylesExecCmdStr[styleItem], this.style[styleItem], true);

                        // set the relevant control at selected mode
                        jQuery("#" + this.id + "ToolBar").find("." + styleItem).attr("class", styleItem + "-selected").attr("active","yes");

                        // toolbar's display - correct size selection
                        if (styleItem == "size") {
                            jQuery("#" + this.id + "ToolBar").find(".fontSizeDisplay").find("td").first().html(this.style[styleItem]);
                        }

                        // toolbar's display - correct color selection
                        if (styleItem == "color"){
                            jQuery("#" + this.id + "ToolBar").find(".setColorDisplay").find("td").css("background-color",this.style[styleItem]);
                        }
                    }

                }
            }
        },

        /**
         * _setInitStyleOnInitTaForInitText -
         * calls only once, at init.
         * textArea style implementation for initText.
         * write the relevant markup and 'psate' it to the textArea's body
         */
        _setInitStyleOnInitTaForInitText : function(){
            // get textArea style
            var style = this.setClass;

            // get style object, and style to eceCommand convertor object
            var stylesExecCmdStr = t2k.component.textarea.TextEditorViewStylesAttr;
            var startMarkup, endMarkup;

            if (style){

                // set default color selection
                jQuery("#" + this.id + "ToolBar").find(".setColorDisplay").find("td").css("background-color","#000000");

                // check for font tag requirement

                if (this.style.font || this.style.size || this.style.color){

                    // write font tag full markup
                    startMarkup = "<font class='font-t2k' ";
                    endMarkup   = "</font>";

                    if (this.style.font){
                        startMarkup += "face=" + this.style.font + " ";
                        this._bodyElement.css('font-family', this.style.font);
                    }

                    if (this.style.size){
                        startMarkup += "style='font-size:" + this.style.size + "px' ";
                        this._bodyElement.css('font-size', this.style.size + "px'");
                    }

                    if (this.style.color){
                        startMarkup += "color='" + this.style.color + "' ";
                        this._bodyElement.css('color', this.style.color);
                    }

                    startMarkup += ">";
                }

                // check for b / i / u  tags requirement
                if (this.style.bold){
                    startMarkup += "<b class='b-t2k'>";
                    endMarkup = "</b>" + endMarkup;
                }

                if (this.style.italic){
                    startMarkup += "<i class='i-t2k'>";
                    endMarkup = "</i>" + endMarkup;
                }

                if (this.style.underline){
                    startMarkup += "<u class='u-t2k'>";
                    endMarkup = "</u>" + endMarkup;
                }

                // place the markup
//                var iframe = this.textAreaIframe;
                var iframeDoc = this._iframeDoc,
                    body = jQuery(iframeDoc).contents().find("body").get(0 ),
                    bodyHTML = jQuery(body).html(),
                    newBodyHtml = startMarkup + bodyHTML + endMarkup;

                jQuery(body).html(newBodyHtml);
            }
        },

        /**
         * Recover style for the body element
         * @return {[type]} [description]
         */
        setBodyStyle : function(){
            var tmpObjStyle = {};

            if (this.style.font){
                tmpObjStyle['font-family'] = this.style.font;
            }
            if (this.style.size){
                tmpObjStyle['font-size'] = this.style.size + 'px';
            }
            if (this.style.color){
                tmpObjStyle['color'] = this.style.color;
            }

            if (this._enableKeyscroll){
                tmpObjStyle = jQuery.extend(tmpObjStyle, {
                    'white-space':'nowrap',
                    'width':this.width -8,
                    'unicode-bidi':'embed',
                    'padding-right':'2px',
                    'padding-left':'2px'
                });
            }

            jQuery(this._bodyElement).css(tmpObjStyle);

        },

        /**
         * _createTextAreaIframe -
         * creates textarea iframe
         *
         * @returns iframe element
         */
        _createTextAreaIframe : function(){

            var iframe = document.createElement('iframe');

            jQuery(iframe)
                .attr({
                    'id' : this.id + 'Iframe',
                    'frameborder' : '0'
                })
                .css({
                    'width' : this.width,
                    'max-width' : this.maxWidth
                });
            
            return iframe;
        },

        /**
         * _setTextAreaDesignMode -
         * sets the textarea iframe for designMode on
         */
        _setTextAreaDesignMode : function(){

            var iframe = this.textAreaIframe;
            try {
                var iframeDoc = iframe.contentWindow.document;
            }
            catch (xxx) {
                var iframeDoc = iframe.document;
            }

            // set iframeDoc as a member
            this._iframeDoc = iframeDoc;

            try {
                iframeDoc.designMode = 'on';
                
            } catch (error) {
                jQuery(iframeDoc).focus(function(){
                    iframeDoc.designMode();
                });
            }


        },

        /**
         * _setTextAreaToolBar -
         * gets the toolbar hash and set the textarea toolbar as:
         * <div toolbar> <ul> <li control 1> <div control 1></div> </li> <li control 2> <div control 1></div> </li> ... </ul> </div>
         *
         * @param textAreaControls
         * @returns div element - toolbar
         */
        _setTextAreaToolBar : function (textAreaControls) {

            //set ref for the object (events has their own 'this')
            var textArea = this,
                controlDivElement,
                controlHTML,
            // build toolbar container as div element
                toolBarDiv = jQuery("<div id='" + textArea.id + "ToolBar'></div>");

            // prevents selected area inside the toolbar
            jQuery(toolBarDiv).dblclick(function(e){
                e.preventDefault();
            });

            // set toolbar element as a member
            this._toolbarElement = toolBarDiv;

            // exit if do not need toolbar
            if(!this._enableScrollbar){
                return toolBarDiv;
            }

            // set toolbar class for themable css
            jQuery(toolBarDiv).addClass(t2k.component.textarea.TextEditorViewConstants.toolbarClass);

            // append ul tag to toolbar
            jQuery(toolBarDiv).append(jQuery("<ul></ul>"));

            toolBarDiv.width(0);

            // loop the toolbar's hash and build the controls
            for (var controlName in textAreaControls) {
                
                toolBarDiv.width(toolBarDiv.width() + 42);
                // get tooltip from LanguageUtil object
                var tooltip = LanguageUtil.getString("textarea.tooltips." + controlName);

                // *************** build and configure the control as a div element ******************** //

                // set tooltip as a title, "rel" attr (controlName)
                controlDivElement = jQuery("<div></div>").attr("title",tooltip).attr("rel", controlName);
                textArea._setUnselectable(controlDivElement);

                /**
                 * controlDivElement - mouseUp
                 * set the control's mouseUp appropriate behavior
                 */
                jQuery(controlDivElement).mouseup(function(i){

                    // the control may set as disable on runtime. in that case, do nothing
                    if (jQuery(this).attr("enable") != "no"){

                        // thisRel is the control's name
                        var thisRel = jQuery(this).attr("rel");

                        if (textAreaControls[thisRel].setActiveToolbar){
                            var activeAttr = jQuery(this).attr("active");
                            // toggle activeAttr (sample: if bold fired, it's active mode as well as it's display should toggle)
                            if (activeAttr == "yes"){
                                activeAttr = "no";
                                jQuery(this).attr("class",thisRel);
                            } else {
                                activeAttr = "yes";
                                jQuery(this).attr("class",thisRel+"-selected");
                            }
                            jQuery(this).attr("active", activeAttr);
                        }

                        // on2on situation happens at controls like undo/redo. when enable it's always on (not selected)
                        if (textAreaControls[thisRel].on2on){
                            jQuery(this).attr("class",thisRel);
                        }

                        // and now handle the click for textArea manipulations
                        textArea._toolbarClick(this, textAreaControls[thisRel]);
                    }
                });

                /**
                 * controlDivElement - mouseDown
                 * set the control's mouseDown behavior (usually "press" class only)
                 */
                jQuery(controlDivElement).mousedown(function(){

                    // mouseDown will remove the Panel (dropDown)
                    textArea._removePanel();

                    if (jQuery(this).attr("enable") != "no"){
                        var thisRel = jQuery(this).attr("rel");
                        jQuery(this).attr("class", thisRel+"-press");
                    }
                });

                /**
                 * controlDivElement - mouseOver
                 * set the control's mouseOver behavior (usually "-over" class only)
                 */
                jQuery(controlDivElement).mouseover(function(){

                    var thisPressClass = jQuery(this).attr("rel") + "-press";

                    if ((jQuery(this).attr("class") != thisPressClass) && (jQuery(this).attr("enable") != "no")){
                        var controlElementClass = jQuery(this).attr("class");
                        jQuery(this).attr("class", controlElementClass+"-over");
                    }
                });

                /**
                 * controlDivElement - mouseOver
                 * set the control's mouseOver behavior
                 * (deletes the "-over" from class name; rel-over to rel; rel-selected-over to rel-selected)
                 */
                jQuery(controlDivElement).mouseout(function(){
                    if (jQuery(this).attr("enable") != "no"){
                        var controlElementClass = jQuery(this).attr("class");
                        jQuery(this).attr("class", controlElementClass.replace("-over",""));
                    }
                });

                /**
                 * controlDivElement - double click
                 * cancel toolbar selection on double click
                 */
                jQuery(controlDivElement).dblclick(function(e){
                    this.onselectstart = function(){
                        return false;
                    };
                });

                // build the control

                // if control should start at disabe mode
                if (textAreaControls[controlName].startAsDisable){
                    controlHTML = jQuery("<li></li>").append(controlDivElement.addClass(controlName + "-disable"));
                    jQuery(controlDivElement).attr("enable","no");

                } else {
                    controlHTML = jQuery("<li></li>").append(controlDivElement.addClass(controlName));
                }

                // set toolbar button init value where needed (fontSize and fontColor mostly)
                try {
                    if (textAreaControls[controlName].initValueDisplay){
                        var cell = jQuery("<td></td>").html(textAreaControls[controlName].initValueDisplay);
                        textArea._setUnselectable(cell);
                        var line  = jQuery("<tr></tr>").append(cell);
                        var table = jQuery("<table></table>").attr("class", controlName + "Display").append(line);
                        textArea._setUnselectable(table);
                        jQuery(controlDivElement).append(table);
                    }
                } catch(e) {
                    // do nothing (means that the control has no initValueDisplay)
	                console.warn(e);
                }

                // append the control (div) to the ul element
                jQuery("ul", toolBarDiv).append(controlHTML);
            }

            /**
             * toolBarDiv - mouseEnter
             * set max toolbar opacity
             */
            toolBarDiv.mouseenter(function(){
                textArea._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.show);
            });

            /**
             * toolBarDiv - mouseLeave
             * set low toolbar opacity
             */
            toolBarDiv.mouseleave(function(){
                textArea._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.fade);
            });

            return toolBarDiv.get(0);
        },

        /**
         * _buildTextAreaOuterDiv -
         * create textarea outer div, append it the toolbar and iframe and appent the div to the parent
         */
        _buildTextAreaOuterDiv : function(){
            // create textarea outer div
            var outerDiv = document.createElement('div');
            jQuery(outerDiv)
                .attr({
                    'id': this.id + 'outerDiv',
                    'class': 'ta '+t2k.component.textarea.TextEditorViewConstants.themableClass +' '
                                  +t2k.component.textarea.TextEditorViewConstants.themableClass_ta
                })
                .css({
                    "position":"relative",
                    'max-width':this.maxWidth+'px',
                    'height': (parseInt(this.height) + 1)+'px'
                });

            if (this._mode == "sentence"  || this._mode == "paragraph" || this._mode == "fullText"){
                $(outerDiv).css('width', this.maxWidth);
            }



            // set toolbar zone position absolute
            jQuery(this.textAreaTollBarZone).css("position", "absolute");

            // append it to the outerDiv
            jQuery(outerDiv).append(jQuery(this.textAreaTollBarZone));
            jQuery(outerDiv).append(jQuery(this.textAreaIframe));

            // append div to parent
            jQuery("#" + this.parentId).append(outerDiv);
            jQuery("#" + this.id + "Iframe").height(this.height);
        },

        /**
         * _buildTollbarTriangle -
         * build the toolbar triangle as two divs (one on the other)
         * the first div is for the outline, and the second is for the inner color of the triangle.
         * the triangle appends to the outerDiv.
         */
        _buildTollbarTriangle : function(){
            var outerDiv = jQuery("#" + this.id + "outerDiv");
            var outerDivWidth = outerDiv.outerWidth();

            // constant values that position the triangle on the left / right side of outerDiv
            var constantTop = t2k.component.textarea.TextEditorViewConstants.constantTriangleTop;
            var constantSpaceTriangle = t2k.component.textarea.TextEditorViewConstants.constantTriangleSpace;
            var constantSpaceTriangleBG = t2k.component.textarea.TextEditorViewConstants.constantTriangleBGSpace;

            // set the divs and append them
            var taTriangleDivShadow = Perf.create("div").addClass("arrow-down-shadow").css("position", "absolute").hide();
            var taTriangleDivBG     = Perf.create("div").addClass("arrow-down-BG").css("position", "absolute").hide();
            var taTriangleDiv       = Perf.create("div").addClass("arrow-down").css("position", "absolute").hide();

            outerDiv.append(taTriangleDivShadow).append(taTriangleDivBG).append(taTriangleDiv);

            // constant's calibration according to textArea direction
            if (this.direction == "ltr"){
                constantSpaceTriangle = "-" + constantSpaceTriangle;
                constantSpaceTriangleBG = "-" + constantSpaceTriangleBG;
            } else {
                constantSpaceTriangle = outerDivWidth - constantSpaceTriangle;
                constantSpaceTriangleBG = outerDivWidth - constantSpaceTriangleBG;
            }

            // spacer's execution :)
            jQuery(taTriangleDivShadow).css("top", constantTop + "px").css("left", constantSpaceTriangleBG + "px");
            jQuery(taTriangleDivBG).css("top", constantTop + "px").css("left", constantSpaceTriangleBG + "px");
            jQuery(taTriangleDiv).css("top",constantTop + "px").css("left",constantSpaceTriangle + "px");

            jQuery(taTriangleDivShadow).show();
            jQuery(taTriangleDivBG).show();
            jQuery(taTriangleDiv).show();
        },

        /**
         * _setToolbarPotision -
         * set the toolbar position according to textArea direction and screen position
         */
        _setToolbarPotision : function(){

            if (!this._enable) {return;}

            var outerDiv = jQuery("#" + this.id + "outerDiv"),
                outerDivWidth = outerDiv.outerWidth();

            var toolbar = jQuery(this._toolbarElement),
                toolbarWidth = toolbar.width();

            // if the toolbar is shorter than outerDiv, set toolbar position by direction
            if ((outerDivWidth + (t2k.component.textarea.TextEditorViewConstants.spacer * 2)) > toolbarWidth){
                this._setToolbarPosition_byDirection();
                return;
            }

            // if toolbar will overflow on right, set toolbar position right align with screen
            if (this._toolbarOverFlowOnRight()){
                this._setToolbarPosition_rightAlign();
                return;
            }

            // if toolbar will overflow on left, set toolbar position left align with screen
            if (this._toolbarOverFlowOnLeft()){
                this._setToolbarPosition_leftAlign();
                return;
            }

            // if all the above if false, set the toolbar position align center with outerDiv
            this._setToolbarPosition_centerAlign();
        },

        /**
         * _setToolbarPosition_byDirection -
         * set toolbar align with outerDiv according to textArea direction
         */
        _setToolbarPosition_byDirection : function(){
            if (this.direction == "ltr"){
                this._setToolbarPosition_leftAlign_toTextArea();
            } else {
                this._setToolbarPosition_rightAlign_toTextArea();
            }

        },

        /**
         * _toolbarOverFlowOnRight
         * checks if the toolbar will overflow on the right side of the screen
         *
         * @returns {Boolean}  true for overflow
         */
        _toolbarOverFlowOnRight : function(){
            var ret = true;
            var outerDiv = jQuery("#" + this.id + "outerDiv");
            var outerDivWidth = outerDiv.outerWidth();
            var outerDivLeft = outerDiv.offset().left;

            var toolbar = jQuery(this._toolbarElement);
            var toolbarWidth = toolbar.width();

            var task = jQuery(t2k.component.textarea.TextEditorViewConstants.tasksHolderClass);
            var taskWidth = task.width();
            var taskLeft = task.offset().left;
            var expectedTaskRight = taskLeft + taskWidth;

            var toolbarSideOverflow = (toolbarWidth - outerDivWidth) / 2;

            var expectedToolbarRight = outerDivLeft + outerDivWidth + toolbarSideOverflow;

            if (expectedToolbarRight < expectedTaskRight){
                ret = false;
            }

            return ret;
        },

        /**
         * _toolbarOverFlowOnLeft
         * checks if the toolbar will overflow on the left side of the screen
         *
         * @returns {Boolean}  true for overflow
         */
        _toolbarOverFlowOnLeft : function(){
            var ret = true;
            var outerDiv = jQuery("#" + this.id + "outerDiv");
            var outerDivWidth = outerDiv.outerWidth();
            var outerDivLeft = outerDiv.offset().left;

            var toolbar = jQuery(this._toolbarElement);
            var toolbarWidth = toolbar.width();

            var task = jQuery(t2k.component.textarea.TextEditorViewConstants.tasksHolderClass);
            var taskWidth = task.width();
            var taskLeft = task.offset().left;
            var expectedTaskRight = taskLeft + taskWidth;

            var toolbarSideOverflow = (toolbarWidth - outerDivWidth) / 2;

            var expectedToolbarLeft = outerDivLeft - toolbarSideOverflow;

            if (expectedToolbarLeft > taskLeft){
                ret = false;
            }
            return ret;
        },

        /**
         * _setToolbarPosition_leftAlign -
         * set toolbar align left with screen
         */
        _setToolbarPosition_leftAlign : function(){
            var toolbar = jQuery(this._toolbarElement);
            var task = jQuery(t2k.component.textarea.TextEditorViewConstants.tasksHolderClass);
            var taskLeft = task.offset().left;
            
            toolbar.offset({left:taskLeft});
        },

        /**
         * _setToolbarPosition_rightAlign -
         * set toolbar align right with screen
         */
        _setToolbarPosition_rightAlign : function(){

            var toolbar = jQuery(this._toolbarElement);
            var toolbarWidth = toolbar.width();
            var taskWidth = jQuery(t2k.component.textarea.TextEditorViewConstants.tasksHolderClass).width();
            var setToolbarLeft = taskWidth - toolbarWidth;
            
            toolbar.offset({left:setToolbarLeft});
        },

        /**
         * _setToolbarPosition_centerAlign -
         * set the toolbar align center with outerDiv
         */
        _setToolbarPosition_centerAlign : function(){

            var outerDiv = jQuery("#" + this.id + "outerDiv");
            var outerDivWidth = outerDiv.outerWidth();
            var outerDivLeft = outerDiv.offset().left ;
            var toolbar = jQuery(this._toolbarElement);
            var toolbarWidth = toolbar.width();
            var taskWidth = jQuery(t2k.component.textarea.TextEditorViewConstants.tasksHolderClass).width();
            var toolbarSideOverflow = (toolbarWidth - outerDivWidth) / 2;
            var expectedToolbarLeft = outerDivLeft - toolbarSideOverflow;

            toolbar.offset({left:expectedToolbarLeft});
        },

        /**
         * _setToolbarPosition_leftAlign_toTextArea -
         * set the toolbar align left with outerDiv
         */
        _setToolbarPosition_leftAlign_toTextArea : function(){

            var outerDiv = jQuery("#" + this.id + "outerDiv");
            var outerDivLeft = outerDiv.offset().left;

            var toolbar = jQuery(this._toolbarElement);

            // t2k.component.textarea.TextEditorViewConstants.spacer = the gui space between the outerDiv and the toolbar
            var expectedToolbarLeft = outerDivLeft - t2k.component.textarea.TextEditorViewConstants.spacer;

            if (expectedToolbarLeft < 0){
                expectedToolbarLeft = 0;
            }

            toolbar.offset({left:expectedToolbarLeft});
        },

        /**
         * _setToolbarPosition_rightAlign_toTextArea -
         * set the toolbar align right with outerDiv
         */
        _setToolbarPosition_rightAlign_toTextArea : function(){

            var outerDiv = jQuery("#" + this.id + "outerDiv");
            var outerDivWidth = outerDiv.outerWidth();
            var outerDivLeft = outerDiv.offset().left;

            var toolbar = jQuery(this.textAreaTollBarZone);
            var toolbarWidth = toolbar.width();

            var taskWidth = jQuery(t2k.component.textarea.TextEditorViewConstants.tasksHolderClass).width();
            var taskLeft = jQuery(t2k.component.textarea.TextEditorViewConstants.tasksHolderClass).offset().left;
            var taskRight = taskWidth + taskLeft;

            var expectedToolbarLeft = (outerDivLeft + outerDivWidth + t2k.component.textarea.TextEditorViewConstants.spacer) - toolbarWidth ;

            var expectedToolbarRight = expectedToolbarLeft + toolbarWidth ;

            if (expectedToolbarRight > taskRight){
                this._setToolbarPosition_rightAlign();
            } else {
                toolbar.offset({left: expectedToolbarLeft});
            }
        },

        /**
         * _setToolbarOpacity -
         * set toolbar opacity (hide, fade, show), for one toolbar appearence at sequence.
         * on "hide" there will no fadeTo
         *
         * @param value (hide, fade, show)
         */
        _setToolbarOpacity : function(value){

            this._toolbarOpacityMode = value;
            var toolbar = jQuery("#" + this.id + "ToolBar");
            var triangle = jQuery("#" + this.id + "outerDiv").find(".arrow-down");
            var triangleBG = jQuery("#" + this.id + "outerDiv").find(".arrow-down-BG");
            var triangleShadow = jQuery("#" + this.id + "outerDiv").find(".arrow-down-shadow");

            if (value == "hide"){
                toolbar.hide();
                triangle.hide();
                triangleBG.hide();
                triangleShadow.hide();
            } else {
                // handles the this._enableToolbar issue
                if (this._enable && this._enableToolbar) {

                    // t2k.component.textarea.TextEditorViewOpacity.opacityDuration = TextAreaOpacity object from TextAreaConfig.js
                    toolbar.fadeTo(t2k.component.textarea.TextEditorViewOpacity.opacityDuration, value);
                    triangle.fadeTo(t2k.component.textarea.TextEditorViewOpacity.opacityDuration, value);
                    triangleBG.fadeTo(t2k.component.textarea.TextEditorViewOpacity.opacityDuration, value);
                    triangleShadow.fadeTo(t2k.component.textarea.TextEditorViewOpacity.opacityDuration, value);
                }
            }
        },

        /**
         * _innocentKeyDown -
         * check if 'innocent key' down (pressed)
         * innocent key is a key that doesn't increase the ta char's sum
         * the range beween 32-41 (33,34,35,36,37,38,39,40) is the arrows, home, end, pgUp, pgDn.
         * 46 & 46 are insert and delete
         * 8 is backspace
         *
         * @param keyCode
         *
         * @returns true or false (is innocent down - returns true)
         */
        _innocentKeyDown : function(keyCode){

            var ret = false;

            if ((keyCode > 32 && keyCode < 41) || keyCode == 45 || keyCode == 46 || keyCode == 8){
                ret = true;
            }

            return ret;
        },

        /**
         * _initTextArea -
         * set initText, direction, keyUp handle, maxChar handle exc..
         */
        _initTextArea : function() {
            //dataUtil.logXcode("init text area");
            var iframe          = this.textAreaIframe,
                iframeDoc       = this._iframeDoc,
                maxChar         = this.maxChar,
                TextArea        = this,
                isMaxChar       = false,
                setInitStyle    = false,
                tempTextAreaHtml;
            var styleFilePath = LocaleUtil.getStyleFilePath() ;

            iframe._ta_obj = this;  // save ref to self

            // set initHTML that will inject to textArea iframe
            var initHTML = "<!DOCTYPE html><html style='overflow: hidden;'><head><link type='text/css' rel='stylesheet' href='css/style.css' />" +
                "<link type='text/cs's rel='stylesheet' href='" + t2k.component.textarea.TextEditorViewConstants.fontsCss + "' />" +
                "<link type='text/css' rel='stylesheet' href='" + t2k.component.textarea.TextEditorViewConstants.textEditorCssClass + "' />" +
//                "<link type='text/css' rel='stylesheet' href='" + ENV.customizationPackPath + "/" + "mathfield/mathfield.css" + " />" +
                "<link type='text/css' rel='stylesheet' href='" + t2k.component.textarea.TextEditorViewConstants.mathFieldCssClass + "' />" +
                "<link rel='stylesheet' type='text/css' href='"+ styleFilePath +"' />" +
                "</head>" +
                "<body id='body_texteditor' spellcheck='false' class='texteditor " + this.setClass + "' style='direction: " + this.direction + ";' keyUpFunction='" + this.keyUpFunction + "'>" +
                this.initText + "</body></html>";

            // inject html to the iframe
            iframeDoc.open();
            iframeDoc.write(initHTML);
            iframeDoc.close();
            
            var thi$ = this,
                bodyElement_inlineStyle = {"overflow-x":"hidden"};// set overflow-x for all browsers

            // set body as a member
            this._bodyElement = jQuery('body', jQuery('#' + this.textAreaIframe.id)[0].contentDocument);

            if (this._browser == 'IE'){
                bodyElement_inlineStyle["display"] = "inline-block";
            }

            // set body CSS according to the current style
            if (this.style){

                if (this.style.font){
                    jQuery(this._bodyElement).css("p","font-family:" + this.style.font);
                    merge(bodyElement_inlineStyle, {
                        'font-family':this.style.font,
                        'font':this.style.font
                    });
                } else {
                    bodyElement_inlineStyle["font-family"] = this.style.font;
                }
                if (this.style.size){
                    bodyElement_inlineStyle["font-size"] = this.style.size + 'px';
                }
                if (this.style.color){
                    bodyElement_inlineStyle["color"] = this.style.color;
                }
            }

            /**
             * iframeDoc - mouseDown
             * remove panel (dropdown)
             * and blur all others text Editors
             */
            function mouseDownIframeDoc(e){
	           // dataUtil.logXcode("mousedown>" + e.type );
                if(!!TextArea.mfInEditMode) {
		            return;
	            }
                //alert('v3');
                
               
                var $target = jQuery(e.target);

	            if(TextArea.mathField && $target.parents('.mathField').length) { //mouse down on math field prevent default behavior
		            e.preventDefault();
		            return false;
	            }

	            // remove panel
	            TextArea._removePanel();

	            // find body element
	            var body = TextArea.cfg.parent.parents('body');

	            // clear selection on the body element
	            Compat.clearSelection(window);

	            // for each iframe, blur its body
	            body.find('iframe').each(function() {
		            if (typeof(this._ta_obj) != "undefined" && TextArea.textAreaIframe.id != this.id) {
			            var localTextArea = this._ta_obj;

			            if (localTextArea._toolbarOpacityMode > 0 && localTextArea._toolbarOpacityMode < 1 && !localTextArea._holdToolbarDisplay){
				            localTextArea._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.hide);
				            localTextArea._removePanel();
				            localTextArea._iframeDoc.getSelection().removeAllRanges();  //cancel selection
			            }
		            }
		            /* jQuery(this).parent('ta').length && */
		            ENV.behaviors.isIE || jQuery(this).contents().find('body').blur();
	            });
                dataUtil.logXcode("appstr" + navigator.appVersion.toLowerCase());
            }
          
           jQuery(iframeDoc).mousedown(mouseDownIframeDoc.bind(this));

          $(this._bodyElement).on("demoTrigger",function (){
                var task = $(this.cfg.parent).closest('.task');
                if($(task).hasClass('disabled')) {
                    return;
                }
                var taskOffset = $(this.cfg.parent).offset(),
                    taskHeight = $(this.cfg.parent).height(),
                    viewPortHeight = $(window).height();
  	                 halfViewPortHeight = viewPortHeight / 2 ;
               
               if (halfViewPortHeight < taskOffset.top + 112){
                    var scrollerPosition = TextArea.cfg.parent.parents('body').find('.sequence_content_scrollable')[0].scrollTop;
                        result = scrollerPosition + taskOffset.top - halfViewPortHeight + (halfViewPortHeight * 0.75);
                    
                    $(this.cfg.parent).trigger("scrollTask",{value : result });
                    
                    $(this._iframeDoc).find('body').trigger('focus.triggered');
                }
                
              }.bind(this));
          
		   

            /**
             * iframeDoc - mouseUp
             * fade toolbar and set selected controls
             */
            function mouseUpIframeDoc(e){
                dataUtil.logXcode("mouse up");
	            if(!!TextArea.mfInEditMode) {
		            return;
	            }
                
	            var $target = jQuery(e.target);

	            //mouse up on math field prevent default behavior pr MF is in edit mode
	            if(TextArea.mathField && $target.parents('.mathField').length) {
		            TextArea._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.hide);
		            e.stopImmediatePropagation();
		            e.preventDefault();
					return false;
	            } else {
					// clear toolbar from other textEditors, but not from this textArea !
		            TextArea._holdToolbarDisplay = true;
		            TextArea._bodyElement.trigger('click');  //jQuery('body').trigger('click');
		            TextArea._holdToolbarDisplay = false;

		            if (iframeDoc.selection){
			            TextArea.range = iframeDoc.selection.createRange();
		            }

		            var selectedElement = TextArea._getSelectedElement();

		            //if there is math field inside selectedElement
		            //disable toolbar
		            var selectedHTML = TextArea._getSelectedHtml();
		            if(selectedHTML.search('class="mathField') > -1) {
			            TextArea._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.hide);
		            } else {
			            TextArea._setToolbarOpacity(t2k.component.textarea.TextEditorViewOpacity.fade);
			            TextArea._set_selected_controls(selectedElement, TextArea.textAreaControls);
			            TextArea._setInitStyle();
			            TextArea._setToolbarPotision();
		            }
	            }

                if(ENV.behaviors.autoScrollOnTextEditorFocus){
                  _.delay(function (){$(this._bodyElement).trigger("demoTrigger")}.bind(this),500);
                }
            }
            
            jQuery(iframeDoc).mouseup(mouseUpIframeDoc.bind(this));

	        if (!!ENV.behaviors.isIpad) {
		        var action, now, lastTouch, delta;


		        function preventFreezeOnDoubleTouch(event) {
			        dataUtil.logXcode("preventFreezeOnDoubleTouch");
                    if(!!TextArea.mfInEditMode) {
				        return;
			        }

			        now = new Date().getTime();
			        lastTouch = jQuery(this).data('lastTouch') || (now + 1); //the first time this will make delta a negative number
			        delta = now - lastTouch;
			        clearTimeout(action);

			        if (delta > 750) {
				        jQuery(this).data('lastTouch', 2);

				        // the second touchend event happened. Here is where we invoke the double tap code
				        var e = jQuery.Event("keyup");
				        e.which = 13; //enter releases textarea freeze
				        e.keyCode = 13;
				        jQuery(iframeDoc).trigger(e, [{'preventDefaultEnter' : true}]);

			        } else {
				        jQuery(this).data('lastTouch', now);
				        action = setTimeout(function (e) {
					        clearTimeout(action);   // clear the timeout
				        }, 750, [event]);
			        }
			        jQuery(this).data('lastTouch', now);
		        }

		        jQuery(iframeDoc).bind('touchend', preventFreezeOnDoubleTouch);

		        jQuery(iframeDoc).doubletap(function(event){
			        dataUtil.logXcode("doubletap");
                    event.preventDefault();
			        event.stopImmediatePropagation();
			        event.stopPropagation();
			        return false;
		        });

		        jQuery(iframeDoc).taphold(function(event){
                    dataUtil.logXcode("taphold");
			        event.preventDefault();
			        event.stopImmediatePropagation();
			        event.stopPropagation();

			        return false;
		        });
            }

            /**
             * iframeDoc keyDown
             * handle undo/redo hotkeys and start handle maxChar issue
             */
            function documentKeyDown(e){
	            if(!!TextArea.mfInEditMode) {
		            return;
	            }

	            TextArea._bodyElement.focus();

	            var selection = TextArea._iframeDoc.getSelection();

	            if (!selection || !selection.anchorNode) {
		            return; // in case we dont have an anchore node
	            }

	            TextArea.lastSelection = selection;

	            if(e.keyCode == 8) {
		            //special case MF backspace removal
		            if(jQuery(selection.anchorNode).children().last().hasClass('mathField')) {
			            jQuery(selection.anchorNode).children().last().remove();
		            }

		            if(jQuery(selection.anchorNode).children().last().children().last().hasClass('mathField')) {
			            jQuery(selection.anchorNode).children().last().children().last().remove();
		            }


		            e.stopPropagation();
	            }

	            // handle space in keyScroll
	            if (e.keyCode == 32 && TextArea._enableKeyscroll == true && TextArea._browser == 'IE'){
		            e.preventDefault();
	            }

	            // if enter is disabled - prevent default, and run forest run :)
	            if (e.keyCode == 13 && TextArea._enableEnter == false) {
		            e.preventDefault();
		            TextArea._beep();
		            return;
	            }

	            if(typeof TextArea.setAnswer == 'function' && e.keyCode == 17 ){
		            TextArea._ctrlDown = false;
		            cancelDefault(e);
		            return;
	            } 
                else if (e.keyCode == 17){ // ctrl down will save it's state at this._ctrlDown
		            TextArea._ctrlDown = true;
		            return;
	            }

	            // ctrl+z (undo) down: trigger undo
	            if (e.ctrlKey && e.keyCode == 90){
		            e.preventDefault();
		            jQuery("#" + TextArea.id + "ToolBar").find("div[rel=undo]").trigger("mousedown").trigger("mouseup");
		            return;
	            }

	            // ctrl+y (redo) down : trigger redo
	            if (e.ctrlKey && e.keyCode == 89){
		            e.preventDefault();
		            jQuery("#" + TextArea.id + "ToolBar").find("div[rel=redo]").trigger("mousedown").trigger("mouseup");
		            return;
	            }

	            // disable space(32) and tab(9) at 'letter' mode
	            if ((TextArea._mode == 'letter' && e.keyCode == 32) || (TextArea._mode == 'letter' && e.keyCode == 9)){
		            e.preventDefault();
		            return;
	            }

	            // disable 'capsLock' (20) or 'alt' (18) or 'shift' (16)
	            if (e.keyCode == 20 || e.keyCode == 18 || e.keyCode == 16){
		            e.preventDefault();
		            return;
	            }

	            // remove panel (dropDown)
	            TextArea._removePanel();

	            // save the textArea inner html. if maxChar, "keyUp" will replace the inner html to tempTextAreaHtml
	            tempTextAreaHtml = jQuery(iframeDoc).contents().find("body").html();
	            /**
	             * Unicode has the zero-width characters.
	             * Letter mode in fashion they are considered as symbols , maxChar = 1 so ..... DREADFUL AND TERRIBLE BUG
	             * U+200B zero width space
	             * U+200C zero width non-joiner Unicode code point
	             * U+200D zero width joiner Unicode code point
	             * U+FEFF zero width no-break space Unicode code point
	             * and more ...
	             * To remove them from a string in JavaScript, we can use a simple regular expression:
	             */
	            var tmp = jQuery(iframeDoc).text();
	            tmp = tmp.replace(/[\u200B-\u200D\uFEFF]/g, '');
	            var textAreaCharsLength = thi$._mode == "letter" ? jQuery.trim(tmp).length : tmp.length;
	            if (textAreaCharsLength < maxChar){
		            isMaxChar = false;
	            }

	            var containsMF = false;
	            if(thi$.mathField && thi$.mathField.length) {
		            containsMF = true;
	            }

	            // if maxChar is true, allow only ctrl, and keys that doesn't increase the char num (innocent)
	            if (!containsMF && (textAreaCharsLength >= maxChar) && (isMaxChar == false) && (maxChar != '')){

		            // only if ctrl is down and nothing is selected, allow only innocent chars. else, set isMaxChar = true
		            // and continue the handle with keyUp
		            if (!e.ctrlKey && TextArea._getSelectedHtml() == ''){

			            // if the keDown is not innocent (one that will increase the char num)
			            if (!TextArea._innocentKeyDown(e.keyCode)){
				            e.preventDefault();
				            TextArea._beep();
				            return;
			            }

		            } else {
			            isMaxChar = true;
		            }

                }
            }
            
            jQuery(iframeDoc).keydown(documentKeyDown);

            /**
             * iframeDoc paste -
             * check max char on paste
             */
            jQuery(iframeDoc).bind('paste', function(e) {

	            if(!!TextArea.mfInEditMode) {
		            return;
	            }

                //* Process browser events, then update pasted text. *//
                window.setTimeout(function(e) {

                    var pastedHtmlCleaning = function(elem) {
                        if (elem.style && elem.style.fontSize) {
                            if (thi$._textArea_toolbarControlsHash.fontSize.dropDownElements.indexOf(parseInt(elem.style.fontSize)) == -1 ) {
                                elem.style.fontSize = '';
                                if ( elem.attributes && elem.attributes['style'] && (elem.attributes['style'].value == '') ) {
                                    elem.removeAttribute('style');
                                }
                            }  
                        }
                    }

                    var pastedHtmlSizeLimit = function(elem, n) {
                        
                        if ( thi$.pastedLength > n ) {
                            TextArea._beep();
                            return;
                        }

                        var $elem = $(elem);
                        if ($elem[0] && $elem[0].childNodes) {
                            $.each($elem[0].childNodes, function(index, child) {
                                if (child && child.nodeType === 3) {// TEXT_NODE
                                    thi$.pastedLength += child.nodeValue ? child.nodeValue.length : 0;
                                    // cut off excess
                                    if (thi$.pastedLength > n) {
                                        child.nodeValue = child.nodeValue.substring(0, child.nodeValue.length-(thi$.pastedLength - n));
                                    }
                                } else if(child && child.nodeType === 1) {// ELEMENT_NODE
                                    pastedHtmlCleaning(child);
                                    (thi$.pastedLength < n) || pastedHtmlSizeLimit(child, n);
                                } else {
                                    /*  
                                        ATTRIBUTE_NODE = 2;
                                        CDATA_SECTION_NODE = 4;
                                        ENTITY_REFERENCE_NODE = 5;
                                        ENTITY_NODE = 6;
                                        PROCESSING_INSTRUCTION_NODE = 7;
                                        COMMENT_NODE = 8;
                                        DOCUMENT_NODE = 9;
                                        DOCUMENT_TYPE_NODE = 10;
                                        DOCUMENT_FRAGMENT_NODE = 11;
                                        NOTATION_NODE = 12;
                                    */
                                    child && child.remove();
                                }
                            })
                        }
                    }

                    var PastedTxt = jQuery(iframeDoc).text(),
                        pastedHtml = jQuery(iframeDoc.body).html(),
                        maxVal = parseInt(thi$.maxChar,10);
                    thi$.pastedLength = 0;

                    if(!!pastedHtml) {
                        var $allListElements = $('<div />').html(pastedHtml);
                        $.each($allListElements , function(index, value) {
                            pastedHtmlSizeLimit(this,maxVal);
                        });
                        // apply html to ta
                        thi$._bodyElement.html( $allListElements.html() );
                    }
                    // set carret position to end
                    thi$._bodyElement.attr('contenteditable','true');
                    thi$.setCaretPositionEnd( thi$._bodyElement[0] , thi$._bodyElement.context.getSelection());

                    thi$.setBodyStyle();

                }, 0);

	            //textEditor is part of progression
	            var textAreaCharsLength = jQuery(iframeDoc).text().length;
	            //check for deleting all content
	            !!TextArea.setAnswer && TextArea.setAnswer.call(TextArea, !(textAreaCharsLength == 0));
	            !!TextArea.firstKeyDown && TextArea.firstKeyDown.call(TextArea);

            });
            
            // TODO: duplicate
                    
            /**
             * iframeDoc selectstart -
             * check max char on paste
             */  
            jQuery(iframeDoc).bind('selectstart', function(){
                 // Process browser events, then update pasted text. 
	            var checkTextLength = true;

	            if(thi$.mathField && !!thi$.mathField.length) {
		            checkTextLength = false;
	            }

	            if(checkTextLength) { //don't cut text if text editor contains a math field
	                window.setTimeout(function(e) {

	                    var PastedTxt = thi$._bodyElement.text().trim(),
	                        maxVal = parseInt(thi$.maxChar,10);

	                    if (PastedTxt.length > maxVal){
	                        TextArea._beep();

	                        PastedTxt = PastedTxt.substring(0, maxVal);
	                        thi$._bodyElement.text( PastedTxt );
	                    }

	                    thi$.setBodyStyle();

	                }, 0);
	            }

            });

            /**
             * iframeDoc keyUp -
             * finish handle the hotkeys
             * finish handle maxChar issue
             * fire constructor's keyUpFunction
             * set selected controls
             * disable redo if textArea is at "undoMode" (means that undo pressed, and redo is enable)
             */
            function documentKeyUp(e, data){

	            if(!!TextArea.mfInEditMode) {
		            return false;
	            }

	            if(e.keyCode == 8) {
		            e.stopPropagation();
	            }

	            TextArea.setBodyStyle();

	            //don't fire hot keys if textEditor is part of cloze
	            if(typeof TextArea.setAnswer != 'function'){
		            // handle space in keyScroll
		            if (e.keyCode == 32 && TextArea._enableKeyscroll == true && TextArea._browser == 'IE'){
			            e.preventDefault();
			            TextArea._replaceSelectionWith("&nbsp;");
		            }
		            // ctrl up
		            if (e.keyCode == 17) {
			            TextArea._ctrlDown = false;
			            return;
		            }

		            // ctrl+z (undo) up
		            if (e.ctrlKey && e.keyCode == 90){
			            return;
		            }

		            // ctrl+y (undo) up
		            if (e.ctrlKey && e.keyCode == 89){
			            return;
		            }

		            // ctrl+u (underline) up - safari only
		            if (e.ctrlKey && e.keyCode == 85 && TextArea._browser == 'SAFARI'){
			            TextArea._execCmd('underline', '');
			            return;
		            }

		            // ctrl + u indication
		            if (e.ctrlKey && e.keyCode == 85){
			            TextArea._toggleControl(TextArea._toolbarElement.find('div[rel=underline]'));
			            return;
		            }
		            // ctrl + i indication
		            if (e.ctrlKey && e.keyCode == 73){
			            TextArea._toggleControl(TextArea._toolbarElement.find('div[rel=italic]'));
			            return;
		            }

		            // ctrl + b indication
		            if (e.ctrlKey && e.keyCode == 66){
			            TextArea._toggleControl(TextArea._toolbarElement.find('div[rel=bold]'));
			            return;
		            }

		            // enter pressed
		             if (e.keyCode == 13){
		                TextArea._execCmd('fontname', TextArea.style.font);

			             if(data && data.preventDefaultEnter) {
				            //
			             } else {
				             TextArea._iframeDoc.execCommand("insertHtml", false, "<br>");
			             }

		             }
	            }


	            // disable redo at undoMode
	            if (TextArea._undoMode){
		            TextArea._resetUndo();
		            TextArea._enableControl("redo","no");
	            }

	            // disable 'capsLock' (20) or 'alt' (18) or 'shift' (16)
	            if (e.keyCode == 20 || e.keyCode == 18 || e.keyCode == 16){
		            e.preventDefault();
		            return;
	            }

	            //progress task based on input value
	            if (!TextArea._innocentKeyDown(e.keyCode) || e.keyCode == 8 || e.keyCode == 46){
		            TextArea.setAnswer && TextArea.setAnswer.call(TextArea, true);
		            TextArea.firstKeyDown && TextArea.firstKeyDown.call(TextArea);

		            (!TextArea._firstKeyPressed) && (TextArea._firstKeyPressed = true);
	            }

	            TextArea._pushUndo(iframeDoc);

	            var textAreaCharsLength = TextArea.getValue().length;
	            // check for maxChar (the key can be 'del' or 'backspace' or arrows...)
	            if (textAreaCharsLength <= maxChar){
		            isMaxChar=false;
	            }

	            // if maxChar replace textArea inner html to tempTextAreaHtml (that saved at keyDown)
	            if ((isMaxChar == true) && (e.keyCode != 8 && e.keyCode !== 46)) {
		            jQuery(iframeDoc).contents().find("body").html(tempTextAreaHtml);
		            TextArea._beep();
		            isMaxChar = false;
	            }

	            TextArea._setInitStyle();

	            // fire keyUpFunction
	            var keyUpFunction = jQuery(iframeDoc).contents().find("body").attr("keyUpFunction");

	            if(keyUpFunction){
		            eval(keyUpFunction);
	            }

	            // set selected controls
	            var selectedElement = TextArea._getSelectedElement();
	            TextArea._set_selected_controls(selectedElement, TextArea.textAreaControls);
            }
            
            jQuery(iframeDoc).keyup(documentKeyUp);


            // hack for the buggy ie9
            if (this._browser == 'IE'){
                if (this._mode == 'paragraph' || this._mode == 'fullText'){
                    merge(bodyElement_inlineStyle, {
                        'overflow-x': '',
                        'margin': 0
                    });

                    jQuery(iframe).width(jQuery(iframe).width() - 10);
                    jQuery(iframe).height(jQuery(iframe).height() - 10);

                    jQuery(iframe).parent().css("text-align","right");
                }
            }

            // on paragraph || fullText only - this._enableScrollbar case - hide/show scroll
            if(this._mode == "paragraph" || this._mode == "fullText"){

                if (this._enableScrollbar){
                    if(!ENV.behaviors.isIE){
                        jQuery(iframeDoc).find("html").css("overflow-y","auto");
                    }
                } else {
                    if (this._browser == 'IE'){
                        bodyElement_inlineStyle["overflow"] = "hidden";
                    }
                }
            }

            // letter mode exception - set center alignment for the iframe
            if (this._mode == "letter"){
                bodyElement_inlineStyle["text-align"] = "center";
            } else if(this._mode == 'word' || this._mode == 'sentence') {
                bodyElement_inlineStyle["padding"] = "2px 4px";
            } else {
                if(ENV.behaviors.isIE){
                    bodyElement_inlineStyle["padding"] = "0px";
                }else{
                    bodyElement_inlineStyle["padding"] = "6px";
                }
            }


            if (this._enableKeyscroll){
                this.maxChar = "300";
            } else {
                // if keyScroll is disables, force line breakes (that's cancel the h. scroll)
                bodyElement_inlineStyle["word-wrap"]= "break-word";
            }

            jQuery(this._bodyElement).css(bodyElement_inlineStyle);

        },

        /**
         * _toggleControl
         */
        _toggleControl : function(controlElement){

            var controlName = controlElement.attr('rel');
            var controlActive = controlElement.attr('active');
            var controlClass = controlElement.attr('class');

            if (controlActive == 'yes'){
                controlElement.attr('active','no').attr('class', controlClass.replace('-selected',''));
            } else {
                controlElement.attr('active','yes').attr('class', controlClass + '-selected');
            }
        },

        /**
         * _toolbarClick
         * toolbar click handle
         *
         * @param f
         * @param controlElement
         */
        _toolbarClick : function(fullControl, controlElement){

            var b, controlArguments;
            if(!!controlElement) {
                b = controlElement.exec;
                controlArguments = controlElement.args || [];
            }

            // thisRel is the control's name
            var thisRel = jQuery(fullControl).attr("rel");

            if (!controlElement.dropDown){
                this._removePanel();
            }

            if (controlElement.handler && this[controlElement.handler]) {
                this[controlElement.handler](controlElement);
            }

            // marker control issue
            if (controlElement.command == "backColor"){

                var activeButton = jQuery("#" + this.id + "ToolBar").find(".marker").attr("active");
                var bgColor = controlArguments;

                if (activeButton == "no"){
                    bgColor = "white";
                }

                if (this._getSelectedHtml() == '' && this._browser != 'IE'){

                    // append 'markerTest' SPAN to the ta
                    this._replaceSelectionWith('<span style="background-color: '+bgColor+';" id="markerTest">&nbsp;</span>');
                    var maerkerEle = jQuery(this._bodyElement).find("#markerTest");

                    // finds the selection & range
                    var iframeRange = null;
                    var iframe = this.textAreaIframe;
                    var iframeDoc = this._iframeDoc;
                    var iframeContentWindow = iframe.contentWindow;

                    var iframeRange, iframeSelection;

                    if (iframeContentWindow.getSelection){
                        iframeRange = iframeContentWindow.getSelection().getRangeAt();
                        iframeSelection = iframeContentWindow.getSelection();
                    } else {
                        this.range.select();
                        iframeRange = iframeDoc.selection.createRange();
                        iframeSelection = iframeDoc.selection;
                    }

                    // removes curr ranges
                    iframeSelection.removeAllRanges();

                    // get the span element
                    var srcObj = iframeDoc.getElementById("markerTest");

                    // creates new range for the span selection
                    if (iframeDoc.createRange){
                        var rangeObj = iframeDoc.createRange();
                        rangeObj.selectNode(srcObj);
                        iframeSelection.addRange(rangeObj);
                    }

                    // removes the 'markerTest' id
                    jQuery(srcObj).removeAttr("id");

                } else {
                    this._execCmd("backColor", bgColor);
                }

            } else if (controlElement.command) {
                this._execCmd(controlElement.command, true, controlArguments);
            }

            //this._clearHTML();

            if (thisRel != "undo" && thisRel != "redo"){
                // console.log("pushUndo in toolbarClick")
                this._pushUndo();
            }
        },

        /**
         * exeCmd
         * execute control command
         *
         * @param controlCommand
         * @param controlArguments
         * @param dontFocus do not attempt to set focus on the iframe.
         */
        _execCmd : function(controlCommand, controlArguments, dontFocus) {
             //dataUtil.logXcode("execCmd - "  + controlCommand)   ;
            var iframe = this.textAreaIframe;
            var iframeDoc = this._iframeDoc;
            var iframeContentWindow = iframe.contentWindow;

            if (!dontFocus) {
                (ENV.behaviors.isIE? this._bodyElement: iframe.contentWindow).focus();
            }

            if(controlCommand == 'fontSize') {
                var selectionHTML = this._getSelectedHtml();
                var selectionRange = this._getSelectionRange();

                /**
                 * This is only done to disable creation of additional CSS rules.
                 */
                try {
                    iframeDoc.execCommand("styleWithCSS", 0, false);
                }
                catch (notUsed) {
                    try {
                        iframeDoc.execCommand("useCSS", 0, true);
                    }
                    catch (notUsed) {
                    }
                }

                while (selectionHTML.indexOf('font-size') != -1){

                    var fontSizeIndex = selectionHTML.indexOf('font-size');
                    var xIndex = fontSizeIndex + 11;

                    while (selectionHTML.charAt(xIndex) != 'x'){
                        xIndex++;
                    }

                    selectionHTML = selectionHTML.substring(0, fontSizeIndex) + selectionHTML.substring(xIndex+1);
                    selectionHTML = selectionHTML.replace('style=""','').replace('style="; "','');
                }

                //iframeDoc.execCommand("delete", false, false);
                var pasteHTML = '<span style="font-size: ' + controlArguments + 'px"></span>';
                if(selectionHTML){
                    pasteHTML = '<span style="font-size: ' + controlArguments + 'px">' + selectionHTML + '</span>';
                }

                this._replaceSelectionWith(pasteHTML, !selectionHTML.length);

            } else {

                if(!!this.mathField) {
                    this.mathField.forEach(function(mfObject){
                        mfObject.view._view.addClass('readwrite');
                    });
                }


                /**
                 * This is only done to disable creation of additional CSS rules.
                 */
                try {
                    iframeDoc.execCommand("styleWithCSS", 0, false);
                }
                catch (notUsed) {
                    try {
                        iframeDoc.execCommand("useCSS", 0, true);
                    }
                    catch (notUsed) {
                    }
                }

                controlArguments = controlArguments || false;

                try {
                    iframeDoc.execCommand(controlCommand, false, controlArguments);
                }
                catch (error) {
                    // console.error("id: " + this.id + "; cmd: " + controlCommand + "; args: " + controlArguments+"; error: " + error.message);
                }


                if (!!this.mathField) {
                    this.mathField.forEach(function (mfObject) {
                        mfObject.view._view.removeClass('readwrite');
                    });
                }

            }

            if (!dontFocus) {
                (ENV.behaviors.isIE? this._bodyElement: iframe.contentWindow).focus();
            }
        },

        /**
         * _textAreaControlsHashCreate -
         * base hash for different toolbar creation
         * build the textarea controls (as hash) by preset
         *
         * @returns textAreaControlsHash
         */
        _textAreaControlsHashCreate : function(){

            // init two toolbar preset objects. (same for now)
            var toolbar = eval('t2k.component.textarea.TextEditorViewToolbarConfig.' + this.toolBarPreset);
            var toolbarPreset = this._cloneObj(toolbar);

            // place the full object in the preset object
            for (var controlName in toolbar){
                toolbar[controlName] = this._textArea_toolbarControlsHash[controlName];
            }

            // place the preset new arguments
            for (var cName in toolbarPreset){
                if (toolbarPreset[cName].length > 0){
                    toolbar[cName][toolbarPreset[cName][0]] = toolbarPreset[cName][1];
                }
            }

            return toolbar;
        },

        /**
         * _cloneObj -
         * clone an object
         *
         * @param oldObject
         * @returns newObject
         */
        _cloneObj : function(oldObject){
            var newObject = jQuery.extend(true, {}, oldObject);
            return (newObject);
        },

        /**
         * _set_selected_controls -
         * inds out all the srcElement tags and set active the relevant control at the toolbar
         *
         * @param srcElement
         * @param textAreaControls
         */
        _set_selected_controls : function(srcElement, textAreaControls) {

            var toolbar = this.textAreaTollBarZone;

            // set default values for fontSize and fontColor
            var styleDefaultFontSize = this.style.size;
            jQuery("#" + this.id + "ToolBar").find(".fontSizeDisplay").find("td").first().html(styleDefaultFontSize);
            jQuery("#" + this.id + "ToolBar").find(".setColorDisplay").find("td").css("background-color","none");

            var controlName, analyzedElement, controlElement, controlObj, controlTagName;
            var fontFace = null;
            var fontSize = null;
            var color  = null;
            var bold = false;
            var italic = false;
            var underline = false;

            var setColor  = true;
            var setFontSize = true;
            var setMarker = true;

            try {
                // looping the toolbar controls | set the toolbar's controls view not selected
                for (controlName in textAreaControls) {
                    controlObj = textAreaControls[controlName];

                    // set the control view not selected
                    var controlElement = jQuery("#" + this.id + "ToolBar").find("div[rel='" + controlName + "']");
                    var currRel = jQuery(controlElement).attr("rel");
                    jQuery(controlElement).attr("class",currRel);
                    jQuery(controlElement).attr("active","no");
                }


                // looping the toolbar controls
                for (controlName in textAreaControls) {
                    controlObj = textAreaControls[controlName];

                    // set the control view not selected
                    var controlElement = jQuery("#" + this.id + "ToolBar").find("div[rel='" + controlName + "']");
                    var currRel = jQuery(controlElement).attr("rel");

                    // check for disabled buttons view
                    if (jQuery(controlElement).attr("enable") == "no"){
                        jQuery(controlElement).attr("class", currRel + "-disable");
                    }


                    if (!controlObj.tags) {
                        continue;
                    }

                    analyzedElement = srcElement;

                    do {
                        if (analyzedElement.nodeType != 1) {
                            continue;
                        }
                        markupTagName = analyzedElement.nodeName.toLowerCase();

                        if (jQuery.inArray(markupTagName, controlObj.tags) < 0) {
                            continue;
                        }

                        // marker indication

                        var backColor = jQuery(analyzedElement).css("background-color");
                        // console.log("backColor: " + backColor)

                        if (setMarker){
                            if (backColor == "yellow" || backColor == "rgb(255, 255, 0)"){
                                // console.log('backColorYellow')
                                jQuery("#" + this.id + "ToolBar").find("div[rel=marker]").attr("class","marker-selected");
                                jQuery("#" + this.id + "ToolBar").find("div[rel=marker]").attr("active","yes");
                                setMarker = false;
                            } else {
                                if (backColor == "white" || backColor == "rgb(255, 255, 255)"){
                                    setMarker = false;
                                }
                            }
                        }

                        // color indication

                        var color = jQuery(analyzedElement).attr("color");

                        if (color == null || !color || color==''){
                            color = jQuery(analyzedElement).css("color");
                        }

                        if (color != null && color != '' && setColor){
                            jQuery("#" + this.id + "ToolBar").find(".setColorDisplay").find("td").css("background-color",color.toLowerCase());
                            setColor = false;
                        }

                        // bold by font-weight
                        if (jQuery(analyzedElement).css("font-weight") == "bold"){
                            bold = true;
                            jQuery("#" + this.id + "ToolBar").find("div[rel=bold]").attr("class","bold-selected");
                            jQuery("#" + this.id + "ToolBar").find("div[rel=bold]").attr("active","yes");
                        }

                        // italic by font-style
                        if (jQuery(analyzedElement).css("font-style") == "italic"){
                            italic = true;
                            jQuery("#" + this.id + "ToolBar").find("div[rel=italic]").attr("class","italic-selected");
                            jQuery("#" + this.id + "ToolBar").find("div[rel=italic]").attr("active","yes");
                        }

                        if (markupTagName == "ul"){
                            var listType = jQuery(analyzedElement).css("list-style-type");
                            jQuery("#" + this.id + "ToolBar").find("div[rel=lists]").attr("listType",listType + "List");
                        }

                        if (markupTagName == "ol"){
                            jQuery("#" + this.id + "ToolBar").find("div[rel=lists]").attr("listType","numberList");
                        }

                        // if srcElement tagName is 'font', sets the fontFace and fontSize
                        if (markupTagName == "span" || markupTagName == "font"){
                            fontSize = jQuery(analyzedElement).css("font-size").replace('px','');

                            if (fontSize && setFontSize){
                                jQuery("#" + this.id + "ToolBar").find(".fontSizeDisplay").find("td").first().html(fontSize);
                                setFontSize = false;
                            }
                        }

                        // get the active markup for style analyzer
                        switch (markupTagName){
                            case "b" :
                            case "strong":
                                bold      = true;
                                jQuery(controlElement).attr("class",currRel+"-selected");
                                jQuery(controlElement).attr("active","yes");
                                break;
                            case "i" :
                                italic    = true;
                                jQuery(controlElement).attr("class",currRel+"-selected");
                                jQuery(controlElement).attr("active","yes");
                                break;
                            case "u" :
                                underline = true;
                                jQuery(controlElement).attr("class",currRel+"-selected");
                                jQuery(controlElement).attr("active","yes");
                        }

                        if (currRel == "lists"){
                            listsElement = jQuery("#" + this.id + "ToolBar").find("div[rel=lists]");
                            jQuery(listsElement).attr("class","lists-selected");
                            jQuery(listsElement).attr("active","yes");
                        }

                        // looping the DOM, from selection to body
                    } while (analyzedElement = analyzedElement.parentNode);
                }
            } catch (error) {
                //console.log("setSelectedControls: failed looping toolbar, error = [" + error.markupTagNameessage + "]");
            }
        },

        /**
         * _indent -
         * set the indent by the direction
         *
         * @param controlElement
         */
        _indent : function(controlElement){

            this._execCmd('indent');

            var iframe = this.textAreaIframe;
            var iframeDoc = this._iframeDoc;

            jQuery(iframeDoc).find("blockquote").removeAttr("class");

            if (this.direction=='rtl') {
                jQuery(iframeDoc).find("blockquote").css("margin","0px");
                jQuery(iframeDoc).find("blockquote").css("margin-right","40px");
            }
        },

        /**
         * _undo -
         * display the saved html from undoArray by undoIndex--
         */
        _undo : function() {
            // console.log("undo start this._undoIndex: " + this._undoIndex)
            this._undoIndex --;

            if (this._undoArray[this._undoIndex] == false && this._undoArray[this._undoIndex] != ''){
                this._undoIndex ++;
                // console.log("undo return false this._undoIndex: " + this._undoIndex)
            } else {
                // console.log("undo OK this._undoIndex: " + this._undoIndex)
                this._undoMode = true;

                var iframe = this.textAreaIframe;
                var iframeDoc = this._iframeDoc;
                jQuery(iframeDoc).contents().find("body").html(this._undoArray[this._undoIndex]);

                // set redo enable
                this._enableControl("redo","yes");

                if (this._undoIndex == 0) {
                    // set undo disable
                    this._enableControl("undo","no");
                }
            }
        },

        /**
         * _redo -
         * display the saved html from undoArray by undoIndex++
         */
        _redo : function() {

            // console.log("redo start this._undoIndex: " + this._undoIndex)
            this._undoIndex++;

            var iframe = this.textAreaIframe;
            var iframeDoc = this._iframeDoc;
            jQuery(this._bodyElement).html(this._undoArray[this._undoIndex]);

            // set undo enable
            this._enableControl("undo","yes");

            if (this._undoArray.length == parseInt(this._undoIndex)+1) {
                // set redo disable
                this._enableControl("redo","no");
            }

            //  console.log("redo end this._undoIndex: " + this._undoIndex)
        },

        /**
         * _pushUndo -
         * push the current html to undoArray
         *
         * @param iframeDoc
         */
        _pushUndo : function(iframeDoc) {

            //  console.log("_pushUndo START: " + this._undoIndex)

            if (!iframeDoc) {
                var iframe = document.getElementById(this.id+"Iframe");
                var iframeDoc = iframe.contentWindow.document;
            }

            var currHTML = jQuery(iframeDoc).contents().find("body").html();

            if (currHTML == this._undoArray[this._undoIndex]){
                return false ;
            }

            this._undoIndex++ ;
            this._undoArray[this._undoIndex] = currHTML;

            if (this._undoIndex > 100) {
                this._undoArray[this._undoIndex-100] = false;
            }

            // set undo enable
            this._enableControl("undo","yes");

            // console.log("_pushUndo END: " + this._undoIndex)
        },

        /**
         * _initUndo -
         * set final init html body markup as #0 index of this._undoIndex
         */
        _initUndo : function(){

            this._undoIndex = 0 ;

            var iframe = this.textAreaIframe;
            var iframeDoc = this._iframeDoc;
            this._undoArray[this._undoIndex] = jQuery(this._bodyElement).html();

            this._enableControl("undo","no");
            this._enableControl("redo","no");
        },

        /**
         * _enableControl -
         * set enable or disable toolbars controls - view and functionality
         *
         * @param controlRel (controlName)
         * @param enable     (yes/no)
         */
        _enableControl : function(controlRel, enable){

            var className = controlRel;

            if (enable == "no"){
                className += "-disable";
            }

            jQuery(this.textAreaTollBarZone).find("div[rel='"+controlRel+"']").attr("class",className).attr("enable",enable);
        },

        /**
         * _resetUndo -
         * delete nodes from undoArray from the current undoIndex positon
         */
        _resetUndo : function(){
            while (this._undoArray.length > this._undoIndex + 1){
                this._undoArray.pop();
            }

            this._undoMode = false;
        },

        /**
         * _setDirection -
         * set the TA's body dir, and handle the indend margin issue
         *
         * @param controlElement
         */
        _setDirection : function (controlElement) {

            var iframe = this.textAreaIframe;
            var iframeDoc = this._iframeDoc;
            jQuery(this._bodyElement).css("direction",controlElement.dir);

            if (controlElement.dir=="rtl") {
                jQuery(this._bodyElement).find("blockquote").css("margin","0 40px 0 0");
            } else {
                jQuery(this._bodyElement).find("blockquote").css("margin","0 0 0 40px");
            }
        },

        /**
         * _getSelectedHtml -
         * find the selected html by range
         *
         * @return selectedHTML
         */
        _getSelectedHtml : function() {

            var selectedHTML = null;
            var iframe = document.getElementById(this.id+"Iframe");
            var iframeContentWindow = iframe.contentWindow;
            var selectionRange = this._getSelectionRange();

            if (selectionRange) {
                // get selected content and clone it to div element

                if (this._browser != 'IE') {
                    var tempDivEle = document.createElement("div");
                    tempDivEle.appendChild(selectionRange.cloneContents());
                    selectedHTML = tempDivEle.innerHTML;
                } else {
                    selectedHTML = selectionRange.htmlText;
                }
            }

            // selectedHTML is the innerHTML of the cloned div
            return selectedHTML;
        },

        /**
         * _getSelectionRange -
         * a range is a pointer to the specific selection
         *
         * @return iframeRange
         */
        _getSelectionRange : function(){

            var iframeRange = null;
            var iframe = this.textAreaIframe;
            var iframeDoc = this._iframeDoc;
            var iframeContentWindow = iframe.contentWindow;

            //if (iframeContentWindow.getSelection) {
            if (this._browser != 'IE'){
                if(iframeContentWindow.getSelection().rangeCount > 0)
                    iframeRange = iframeContentWindow.getSelection().getRangeAt();
                else
                    iframeRange = iframeDoc.createRange();
            } else {
                iframeRange = iframeDoc.selection.createRange();
            }

            return iframeRange;
        },

        /**
         * _replaceSelectionWith -
         * delete the current selection and paste "htmlToReplace" instead
         *
         * @param htmlToReplace
         * @return true/false
         */
        _replaceSelectionWith : function(htmlToReplace, caretBeforeClosingTag){
            var selectionRange = this._getSelectionRange();

            var iframe = document.getElementById(this.id + "Iframe");
            var iframeContentWindow = iframe.contentWindow;
            var iframeDoc = this._iframeDoc;
            var ret = true;

            if (selectionRange) {

                // removeFormat will prevent a broken markup after removing the current selection
                // this._execCmd("removeFormat");

                // selection case
                if (this._browser != 'IE') {

                    if (caretBeforeClosingTag) {
                        try {
                            var wrapper = jQuery(htmlToReplace)[0];
                            selectionRange.insertNode(selectionRange.createContextualFragment("&#8203;"));
                            selectionRange.surroundContents(wrapper);
                            // selectionRange.setStart(wrapper, 0);
                            // selectionRange.setEnd(wrapper, 1);

                            var selection = iframeContentWindow.getSelection();
                            selection.selectAllChildren(wrapper);
                            selection.collapseToEnd();
                            // selection.deleteFromDocument(wrapper);
                            // selection.removeAllRanges();
                            // selection.addRange(selectionRange);
                        }
                        catch (xxx) {
                            // do nothing
                        }
                    }
                    else {
                        selectionRange.deleteContents();
                        // selectionRange.selectNodeContents(this._bodyElement[0]);
                        try {
                            selectionRange.insertNode(selectionRange.createContextualFragment(htmlToReplace));

                            var selection = iframeContentWindow.getSelection();
                            selection.removeAllRanges();
                            selection.addRange(selectionRange);
                        }
                        catch (xxx) {
                            // do nothing
                        }
                    }

                    // non selection case
                }
                else {
                    // MSIE (9) support
                    var iframeRange;

                    if (iframeContentWindow.getSelection().rangeCount) {
                        iframeRange = iframeContentWindow.getSelection().getRangeAt(0);
                    }
                    else {
                        iframeRange = iframeDoc.createRange();
                    }

                    if (caretBeforeClosingTag) {
                        try {
                            var sp = iframeDoc.createTextNode("\u200b");
                            var wr = Compat.importNodeToDocument(iframeDoc, jQuery(htmlToReplace)[0], 1);
                            /**
                             * This fails with "DOM Exception: WRONG_DOCUMENT_ERR (4)"
                             * when not using importNodeToDocument() hack
                             */
                            iframeRange.insertNode(sp);
                            iframeRange.surroundContents(wr);

                            var sel = iframeContentWindow.getSelection();
                            sel.selectAllChildren(wr);
                            sel.collapseToEnd();
                        }
                        catch (xxx) {
                            // do nothing
                        }
                    }
                    else {
                        // this._execCmd("delete");
                        selectionRange.pasteHTML(htmlToReplace);
                    }
                }
            }
            else {
                ret = false;
            }

            return ret;
        },

        /**
         * _createPanel -
         * drop dowm menu creation
         *
         * @param controlLeft
         * @param controlTop
         * @param panelHTML
         */
        _createPanel : function(controlLeft, panelHTML, relateToToolbarBotton){
            var TextArea = this;
            var toolbar = jQuery(this.textAreaTollBarZone);
            var toolbarHeight = toolbar.height();
            var toolbarTop = toolbar.offset().top;
            var dropDownTop = parseInt(toolbarHeight) + parseInt(toolbarTop);

            var shadow = jQuery("<div></div>").addClass("dropDownUpperShadow").width("100%").css("background-repeat","repeat-x");

            var panel = jQuery("<div></div>").attr("id", this.id + "_panel").attr("relateTo" ,relateToToolbarBotton);
            this._setUnselectable(panel);
            jQuery(panel).addClass(t2k.component.textarea.TextEditorViewConstants.panelClass).hide().append(shadow).append(panelHTML);

            jQuery("#" + this.id + "outerDiv").append(panel);

            jQuery(panel).fadeIn(100);

            if (relateToToolbarBotton == "setColor"){
                var panelWidth = "40";
                jQuery(panel).width((panelWidth*3) + 2);
                controlLeft -= (panelWidth * 2);
            }

            jQuery(panel).offset({left: controlLeft});
            jQuery(panel).css({top: "4px"});

            jQuery(panel).mouseover(function(){
                TextArea._setToolbarOpacity('show');
            });

            jQuery(panel).mouseout(function(){
                TextArea._setToolbarOpacity('fade');
            });
        },

        /**
         * _setListByType -
         * set the "lists" control by icon selection
         *
         * @param icon - square or disc
         * @parag tag  - UL or OL
         * @param execCmdStr - str for execCmd
         */
        _setListByType : function(icon, tag, execCmdStr){

            var selectionRange = this._getSelectionRange();
            var currElement = this._getSelectedElement();

            while (currElement.tagName!= tag && currElement.tagName!="BODY"){
                currElement = currElement.parentNode;
            }

            if (currElement.tagName == "BODY"){
                this._execCmd(execCmdStr);
                currElement = this._getSelectedElement();

                while (currElement.tagName != tag && currElement.tagName != "BODY"){
                    currElement = currElement.parentNode;
                }
            }

            if (icon != 'null'){
                jQuery(currElement).css("list-style-type", icon);
            } else {
                jQuery(currElement).removeAttr("style");
            }

            var currSize = jQuery(this._toolbarElement).find("div[rel='fontSize']").text();
            var currColor = jQuery(this._toolbarElement).find("div[rel='setColor']").find("td").css("background-color");

            if(currColor.indexOf('rgb') == 0){
                currColor = rgb2hex(currColor);
            }

            var fontSize = currSize + 'px';

            jQuery(currElement).css("font-size",fontSize);
            jQuery(currElement).css("color",currColor);

            jQuery(currElement).attr("setFontSize",fontSize);
            jQuery(currElement).attr("setColor",currColor);
        },

        /**
         * _removeListByType -
         * when list is on, and the same list type is fired by the controls,
         * the function will call execCmd with the same list type.
         *
         * @param icon
         * @param tag
         * @param execCmdStr
         */
        _removeListByType : function(icon, tag, execCmdStr){
            this._execCmd(execCmdStr);
        },

        /**
         * _removePanel -
         * fade out current panel
         */
        _removePanel : function(){
            var relateTo = jQuery("#" + this.id + "_panel").attr("relateto");
            jQuery("#" + this.id + "outerDiv").find("." + t2k.component.textarea.TextEditorViewConstants.panelClass).fadeOut(100).remove();
            jQuery("#"+this.id+"ToolBar [rel='"+relateTo+"']").attr("class",relateTo);
        },

        /**
         * _getSelectedElement -
         * get selected element by range
         *
         * @return returnElement
         */
        _getSelectedElement : function(){
            var iframe = document.getElementById(this.id + "Iframe");
            var iframeContentWindow = iframe.contentWindow;
            var returnElement, selection, selectionRange;

            // if the user marked some text
            if (iframeContentWindow.getSelection){
                try {
                    selection = iframeContentWindow.getSelection();
                    selectionRange = selection.getRangeAt(0);
                    returnElement = selectionRange.commonAncestorContainer;
                } catch (error) {
                    //console.log("_getSelectedElement: failed to create range by selection, error = [" + error.message + "]");
                    returnElement = false;
                }
                // text is not marked
            } else {
                try {
                    selection = iframeContentWindow.document.selection;
                    selectionRange = selection.createRange();
                    returnElement = selectionRange.parentElement();
                } catch (error) {
                    //console.log("_getSelectedElement: failed to create range, error = [" + error.message + "]");
                    returnElement = false;
                }
            }
            return returnElement;
        },

        /**
         * _clearHTML -
         * HTML markup cleaner -
         * removes the "Apple-style-span" class
         */
        _clearHTML : function() {
            return;
            // console.log("_clearHTML");

            var iframe = this.textAreaIframe;
            var iframeDoc = this._iframeDoc;
            var bodyHTML = jQuery(iframeDoc).contents();

            bodyHTML.find("font").each(function(){
                if (jQuery(this).attr("class") == "Apple-style-span"){
                    jQuery(this).removeAttr("class");
                }
            });

            bodyHTML.find("span").each(function(){
                // Chrome related issue - adds this class automatically
                if (jQuery(this).attr("class") == "Apple-style-span"){
                    jQuery(this).removeAttr("class");
                }
            });

            bodyHTML.find("font").each(function(){
                if (jQuery(this).text() == ''){
                    jQuery(this).remove();
                }
            });

            bodyHTML.find("div").each(function(){
                if (jQuery(this).text() == ''){
                    jQuery(this).remove();
                }
            });

            bodyHTML.find("span").each(function(){
                if (jQuery(this).text() == ''){
                    jQuery(this).remove();
                }
            });

            bodyHTML.find("ul").each(function(){
                var setFontSize = jQuery(this).attr("setFontSize");
                var setColor = jQuery(this).attr("setColor");

                jQuery(this).css("font-size", setFontSize);
                jQuery(this).css("color", setColor);
            });

        },

        /**
         * _setColor
         * diaplays the color drop down menu and sets the new color
         *
         * @param controlElement
         */
        _setColor : function(controlElement){

            var TextArea = this;
            var colorsArray = controlElement.colorArray,
                colorColumns = controlElement.colorColumns,
                control = jQuery("#" + this.id + "ToolBar [rel=setColor]").parent(),
	            controlLeft = jQuery(control).offset().left,
	            controlTop  = jQuery(control).offset().top;

            // get the color drop down menu HTML and display it
            var dropDownToolbarHTML = this._setColorHTMLdropDown(colorsArray,colorColumns);

            this._createPanel(controlLeft, dropDownToolbarHTML, "setColor");

            // set the drop down menu onClick event
	        function onClickColorPicker() {
		        TextArea._execCmd("foreColor", jQuery(this).attr("title"));
		        TextArea._removePanel();
		        var selectedColor = jQuery(this).attr("title");
		        jQuery("#" + TextArea.id + "ToolBar").find(".setColorDisplay").find("td").css("background-color", selectedColor);
	        }
            jQuery(".colorPicker").click(onClickColorPicker);

            if (this._browser == 'IE'){

                var whiteCell = jQuery(".colorPicker[title='#ffffff']");
                jQuery(whiteCell).css("outline-color", "none").css("outline-width", "0px");

                var whiteCellHeight = jQuery(whiteCell).height();
                var whiteCellWidth = jQuery(whiteCell).width();

                var divElement = jQuery('<div/>').width(whiteCellWidth+2).height(whiteCellHeight+2).css('border','1px solid #ccc').appendTo(whiteCell);
                jQuery(divElement).css('background-position','0 -12000px;').css('margin-left','-1px').css('margin-top','-1px');

                this._setUnselectable(divElement);
            }

            var currColor = jQuery("#" + this.id + "ToolBar").find(".setColorDisplay").find("td").css("background-color");

            jQuery(".colorPicker").each(function(){
                if (jQuery(this).css('background-color').toLowerCase() == currColor.toLowerCase()){
                    jQuery(this).attr('class','currentColorPicker');
                }
            });
        },

        /**
         * _setColorHTMLdropDown -
         * builds the color drop down menu HTML by colorsArray and colorColumns
         *
         * @param colorsArray
         * @param colorColumns
         * @returns color drop down menu HTML markup
         */
        _setColorHTMLdropDown : function(colorsArray,colorColumns){

	        var TextArea = this;

	        var colorsArraySum = colorsArray.length;
	        var rows = Math.ceil(colorsArraySum / colorColumns);

	        // drop down HTML table
	        var table = jQuery("<table></table>").attr("cellspacing", "0").attr("cellpadding", "0");
	        TextArea._setUnselectable(table);
	        for (var lineIndex = 0; lineIndex < rows; lineIndex++) {

		        var line = jQuery("<tr></tr>");

		        for (var cellIndex = 0; cellIndex < colorColumns; cellIndex++) {
			        if (((lineIndex * colorColumns) + cellIndex) < colorsArraySum) {
				        var cell = jQuery("<td></td>");
				        var color = colorsArray[(lineIndex * colorColumns) + cellIndex];
				        var button = jQuery("<a href='#'></a>").addClass("colorPicker").css("background-color", color).attr("title", color);
				        TextArea._setUnselectable(button);

				        if (color == "#ffffff") {
					        jQuery(button).css("outline", "1px solid #ccc").css("outline-offset", "-3px");
				        }

				        cell.append(button);
				        line.append(cell);
			        }
		        }
		        table.append(line);
	        }

	        var div = jQuery("<div></div>").append(table);
	        return jQuery(div).html();
        },

        /**
         * _insertLists -
         * calls when hit "lists" control.
         * create panel (dropdown) and set it's buttons behavior
         *
         * @param controlElement
         */
        _insertLists : function(controlElement){

	        var TextArea = this, control = jQuery("#" + this.id + "ToolBar [rel=lists]");

	        var controlLeft = jQuery(control).offset().left;

	        var listType = null;

	        if (jQuery(control).attr("active") == "yes") {
		        listType = jQuery(control).attr("listType");
	        }

            // get panel html
            var dropDownToolbarHTML = this._setButtonsDropDownMenuHtml(controlElement.dropDownElements);

            // create panel
            this._createPanel(controlLeft, dropDownToolbarHTML, "lists");

            // set panel button's behavior
            TextArea._setUnselectable("#" + this.id + "_panel");
            jQuery("#" + this.id + "_panel").find("div").each(function(){

                if (jQuery(this).attr("execCmdStr")) {

                    var icon     = jQuery(this).attr("icon") ;
                    var tag      = jQuery(this).attr("tag") ;
                    var execCmdStr = jQuery(this).attr("execCmdStr") ;
                    var rel      = jQuery(this).attr("rel") ;


                    if (rel == listType){
                        jQuery(this).attr("class", rel + "-selected");
                    }

                    TextArea._setUnselectable(this);

                    jQuery(this).css("cursor","pointer");

                    jQuery(this).mousedown(function(){
                        jQuery(this).attr("class", rel + "-press");
                    });

                    jQuery(this).mouseover(function(){
                        var thisClass = jQuery(this).attr("class");
                        jQuery(this).attr("class", thisClass + "-over");
                    });

                    jQuery(this).mouseout(function(){
                        var thisClass = jQuery(this).attr("class");
                        jQuery(this).attr("class", thisClass.replace("-over",""));
                    });

                    jQuery(this).mouseup(function(){

                        if (rel == listType){
                            TextArea._removeListByType(icon, tag, execCmdStr);
                        } else {
                            TextArea._setListByType(icon, tag, execCmdStr);
                        }
                        TextArea._pushUndo();
                        TextArea._removePanel();
                    });
                }
            });
        },

        /**
         * _setButtonsDropDownMenuHtml
         * common function for all the dropDown's
         * get buttons array and return full html markup
         *
         * @param buttonsArray
         * @returns html
         */
        _setButtonsDropDownMenuHtml : function(buttonsArray){

            var DropDownMenuHtml = jQuery("<div></div>"), buttonTag, buttonExecCmdStr, buttonIcon, tooltip, buttonDiv;
            this._setUnselectable(DropDownMenuHtml);

	        for (var i = 0; i < buttonsArray.length; i++) {
		        buttonTag = this._textArea_toolbarControlsHash[buttonsArray[i]].tag;
		        buttonExecCmdStr = this._textArea_toolbarControlsHash[buttonsArray[i]].execCmdStr;
		        buttonIcon = this._textArea_toolbarControlsHash[buttonsArray[i]].icon;
		        tooltip = LanguageUtil.getString("textarea.tooltips." + buttonsArray[i]);

		        buttonDiv = jQuery("<div></div>").attr("title", tooltip).attr("class", buttonsArray[i]);
		        this._setUnselectable(buttonDiv);
		        jQuery(buttonDiv).attr("tag", buttonTag).attr("execCmdStr", buttonExecCmdStr).attr("icon", buttonIcon).attr("rel", buttonsArray[i]);
		        jQuery(DropDownMenuHtml).append(buttonDiv);
	        }

            return jQuery(DropDownMenuHtml).html();
        },

        /**
         * _setTextDropDownMenuHtml
         * create dropdown html markup for text dropDown
         *
         * @param textArray
         * @returns html
         */
        _setTextDropDownMenuHtml : function(textArray){

	        var DropDownMenuHtml = jQuery("<div></div>"), buttonTag, buttonExecCmdStr;

	        for (var i = 0; i < textArray.length; i++) {

		        buttonTag = textArray[i];
		        buttonExecCmdStr = "fontSize";
		        var tooltip = LanguageUtil.getString("textarea.tooltips." + textArray["fontSize" + i]);

		        var buttonDiv = jQuery("<div></div>").attr("class", "fontSize").attr("rel", "fontSize").attr("tag", textArray[i]).attr("execCmdStr", buttonExecCmdStr).html(parseInt(textArray[i]));
		        this._setUnselectable(buttonDiv);
		        jQuery(DropDownMenuHtml).append(buttonDiv);
	        }

            return jQuery(DropDownMenuHtml).html();
        },

        /**
         * _aligns -
         * calls when hit "_aligns" control.
         *
         * @param controlElement
         */
        _aligns : function(controlElement){
            this.handleToolbarDropDownMenuItem(controlElement,"aligns");
        },

        /**
         * handleToolbarDropDownMenuItem -
         * calls when hit some of the dropDown menu item control.
         * create panel (dropdown) and set it's buttons behavior
         *
         * @param controlElement
         * @param menuItemName
         */
        handleToolbarDropDownMenuItem : function(controlElement, menuItemName){

            var TextArea = this ;

            var control = jQuery("#" + this.id + "ToolBar [rel = " + menuItemName + "]").parent();
            var controlLeft = jQuery(control).offset().left;

            // get dropdown html
            var dropDownToolbarHTML = this._setButtonsDropDownMenuHtml(controlElement.dropDownElements);

            // create dropdown
            this._createPanel(controlLeft, dropDownToolbarHTML, menuItemName);

            // go over each drop button in panel
            jQuery("#" + this.id + "_panel").find("div").each(function(){

                if (jQuery(this).attr("execCmdStr")) {

                    var rel = jQuery(this).attr("rel");

                    jQuery(this).css("cursor","pointer");

                    jQuery(this).mousedown(function(){
                        jQuery(this).attr("class", rel + "-press");
                    });

                    jQuery(this).mouseover(function(){
                        var thisClass = jQuery(this).attr("class");
                        jQuery(this).attr("class", thisClass + "-over");
                    });

                    jQuery(this).mouseout(function(){
                        var thisClass = jQuery(this).attr("class") ;
                        jQuery(this).attr("class", thisClass.replace("-over",""));
                    });

                    jQuery(this).mouseup(function(){
                        TextArea._execCmd(jQuery(this).attr("execCmdStr"));
                        TextArea._pushUndo();
                        TextArea._removePanel();
                    });
                }
            });

        },

        /**
         * _indents -
         * calls when hit "_indents" control.
         *
         * @param controlElement
         */
        _indents : function(controlElement){

            // set right display direction for indent & outdent (it's changes between 'ltr' and 'rtl')
            if(this.direction == 'ltr'){
                // toggle the execCommand of indent and outdent
                this._textArea_toolbarControlsHash['indent'].execCmdStr = 'outdent';
                this._textArea_toolbarControlsHash['outdent'].execCmdStr = 'indent';

                // toggle the tooltip of indent and outdent
                var indentTooltip  = LanguageUtil.strings.textarea.tooltips.indent;
                var outdentTooltip = LanguageUtil.strings.textarea.tooltips.outdent;

                LanguageUtil.strings.textarea.tooltips.outdent = indentTooltip;
                LanguageUtil.strings.textarea.tooltips.indent  = outdentTooltip;

                // toggle the display order of indent and outdent
                this._textArea_toolbarControlsHash['indents'].dropDownElements = ["outdent" ,"indent"];
            }

            this.handleToolbarDropDownMenuItem(controlElement,"indents");
        },

        /**
        * SET CURSOR POSITION TO END
        * calls on Paste event.
        *
        * @params : 
        * targetEl = element with contenteditable true
        * selection = document.getSelection()
        */
        setCaretPositionEnd : function (targetEl, selection) {
            var range = document.createRange();

            range.selectNodeContents(targetEl);//Select the entire contents of the element with the range 
            range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start 
            selection.removeAllRanges();//remove any selections already made 
            selection.addRange(range); 
            targetEl && $(targetEl).focus();
        },

        setCursor : function(el,st,end) {
            // console.log("setCursor")
            if (el.setSelectionRange){
                // console.log("setCursor #1 IF")
                el.focus();
                el.setSelectionRange(st,end);
            } else {

                if(el.createTextRange) {
                    // console.log("setCursor #2 IF")
                    var range=el.createTextRange();
                    range.collapse(true);
                    range.moveEnd('character',end);
                    range.moveStart('character',st);
                    range.select();

                } else {
                    // console.log("noLand")
                }
            }
        },

        /**
         * _fontSize -
         * calls when hit "_fontSize" control.
         * create panel (dropdown) and set it's buttons behavior
         *
         * @param controlElement
         */
        _fontSize : function(controlElement){

            var TextArea = this ;

	        var control = jQuery("#" + this.id + "ToolBar [rel=fontSize]").parent();
            var controlLeft = jQuery(control).offset().left;

            if(controlElement.dropDownElements.indexOf((TextArea.style.size).toString()) == -1){  //check if current font size is exists in the font sizes drop down deff
                controlElement.dropDownElements.push((TextArea.style.size).toString());  //insert new font size in to the font sizes array
                controlElement.dropDownElements.sort();                     //sort the font-sizes array
            }

            // get fontSize drop down html
            var dropDownToolbarHTML = this._setTextDropDownMenuHtml(controlElement.dropDownElements);

            // create fontSize panel
            this._createPanel(controlLeft, dropDownToolbarHTML,"dirs");

            jQuery("#" + this.id + "_panel").find("div").each(function(){

                if (jQuery(this).attr("tag")){

                    var rel = jQuery(this).attr("rel");

                    jQuery(this).css("cursor","pointer");

	                function onMouseDown(){
		                jQuery(this).attr("class", rel + "-press");
	                }
                    jQuery(this).mousedown(onMouseDown);

	                function onMouseOver(){
		                var thisClass = jQuery(this).attr("class");
		                jQuery(this).attr("class", thisClass + "-over");
	                }
                    jQuery(this).mouseover(onMouseOver);

	                function onMouseOut(){
		                var thisClass = jQuery(this).attr("class");
		                jQuery(this).attr("class", thisClass.replace("-over", ""));
	                }
                    jQuery(this).mouseout(onMouseOut);

	                function onMouseUp(){
		                TextArea._execCmd("fontSize", jQuery(this).attr("tag"));
		                TextArea._removePanel();
		                var fontSizeSelected = jQuery(this).attr("tag");
		                jQuery("#" + TextArea.id + "ToolBar").find(".fontSizeDisplay").find("td").first().html(fontSizeSelected);
		                jQuery("#" + TextArea.id + "ToolBar [rel=fontSize]").attr("class", "fontSize");
	                }
                    jQuery(this).mouseup(onMouseUp);
                }
            });

	        delete control;
        }
    });
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
    //Function to convert hex format to a rgb color
    function rgb2hex(rgb){
        // make sure that the variable is not in hex ​​format
        if(!rgb.match(/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/)){
            rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            rgb = "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
        }

        function hex(x) {
            var hexDigits = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];
            return isNaN(x) ? "00" : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];
        }

        return rgb;

    }

    function cancelDefault(e) {
        if (e && e.preventDefault) { e.preventDefault(); }
        if (window.event) { window.event.returnValue =
            false; }
        return false;
    }
})();
////////////////////////////////////////
// SRC End --> t2k/component/textEditor/TextEditorView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/textEditor/TextEditor.js
////////////////////////////////////////
(function() {

	t2k.component.textarea.TextEditor = t2k.component.BaseComponent.subClass({
		name: 't2k.component.textarea.TextEditor',

            ctor: function(config) {
                // Delegate
                this._super(config);
                this.configuration = prepareTextEditorConfiguration(config);
                this.configuration.setFontSize = (!!!this.configuration.setFontSize ? this.configuration.optimumFontSize : this.configuration.setFontSize) || 22;
                this.view = this.createNewView(t2k.component.textarea.TextEditorView, this.configuration);
            },
            
            // override - don't call _super historical unsupported
            setEnabled: function(flag) {
	            this.cfg.enabled = flag;
                this.view.enable(flag);
            },

            // override - don't call _super historical unsupported
            setMyState : function(state){
	            this.setEnabled(state.attr('enabled') === 'true');
                this.view.setMyState(state);
            },

            addMyState : function(){
                var state = this._super();
                return this.view.addMyState(state);
            },

            reduce : function(){
                if (this.configuration.setFontSize > 18) {
                    this.configuration.setFontSize = this.configuration.setFontSize - 1;
                    this.view.remove();
                    // add firstKeyDown to configuration
                    this.view = this.createNewView(t2k.component.textarea.TextEditorView, override(this.configuration, {firstKeyDown: this.view.firstKeyDown}));
                } else {
                    this.layout.canReduce = false;
                    this.layout.onRendered();
                }
            },

        setFirstKeyDownFunction : function(fnc){
            this.view.setFirstKeyDownFunction(fnc);
        }
            
        });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
function prepareTextEditorConfiguration(config) {
    	
    	// The result object.    
    	var result, textEditorMarkup = '';
    	var textEditorElement = config.data;    

    	if (textEditorElement){

            var container = config.container ? config.container : Perf.select('#' + config.parent).parents('.task_container');

    		// it text editor have init markup
    		if (textEditorElement.textContent || textEditorElement.nodeValue) {
    			textEditorMarkup = jQuery.xmlToString(textEditorElement) || "";
    			textEditorMarkup = textEditorMarkup.substring(textEditorMarkup.indexOf('>') + 1,
                    textEditorMarkup.length - 'textEditor'.length - 3);
    		}

    		var textEditorParam = new t2k.component.textarea.TextEditorViewParams();
    		
    		textEditorParam.id 					= genId();    			
    		textEditorParam.reductionStep 		= config.reductionStep ? config.reductionStep : 0;
    		textEditorParam.optimumFontSize 	= config.optimumFontSize ? config.optimumFontSize : null;
    		textEditorParam.fontColor			= config.fontColor ? config.fontColor : null;
    		textEditorParam.setAnswer			= config.setAnswer;     // function of subAnswer that marks it as answered
    		textEditorParam.width 				= jQuery(textEditorElement).attr('width') || ( (config.widthEm ? (config.widthEm + 'em') : '100%'));
            textEditorParam.maxWidth            = container.width();//limit the maximum size by container
    		textEditorParam.height 				= jQuery(textEditorElement).attr('height') || '';
    		textEditorParam.setClass 			= jQuery(textEditorElement).attr('style') || 'style1';  // CSS ! :)
    		textEditorParam.parentId 			= config.parent;
    		textEditorParam.parent	 			= Perf.select('#' + config.parent);
    		textEditorParam.firstKeyDown 		= config.firstKeyDown || (config.specialConfiguration && config.specialConfiguration.firstKeyDown);
    		textEditorParam.keyDown 			= config.keyDown;
    		textEditorParam.maxChar 			=  config.maxChar || jQuery(textEditorElement).attr('maxChar');
    		textEditorParam.direction 			= jQuery(textEditorElement).attr('direction') || ENV.contentDirection; 
    		textEditorParam.toolBarPreset 		= jQuery(textEditorElement).attr('toolBarPreset');  // TextAreaToolbarConfig
    		textEditorParam.mode 				= jQuery(textEditorElement).attr('mode');  // t2k.component.textarea.TextAreaModes
    		textEditorParam.enableCharLimit 	= jQuery(textEditorElement).attr('enableCharLimit'); // optional, mode override
    		textEditorParam.enableScrollbar 	= jQuery(textEditorElement).attr('enableScrollbar'); // optional, mode override
            textEditorParam.enableKeyscroll 	= jQuery(textEditorElement).attr('enableKeyscroll') == "true";  // optional, mode override
    		textEditorParam.enableToolbar	 	= jQuery(textEditorElement).attr('enableToolbar');  // optional, mode override    		
    		
    		// text editor state

    		textEditorParam.initText = jQuery.trim(textEditorMarkup);
    		
    		// set the result.
    		result = textEditorParam;
    	} else {
    		result = null;
    	}
    	return result;
    	
    } // End of preparetextEditorConfiguration


})();

////////////////////////////////////////
// SRC End --> t2k/component/textEditor/TextEditor.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/textEditor/MiniTextEditorView.js
////////////////////////////////////////
/**
 * TextAreaParams
 * the object that will be received by TextArea's @constructor
 */

t2k.component.textarea.TextEditorViewParams = function() {
    this.id 				= "";
    this.width 				= "";  // size + 'px'
    this.height 			= "";  // size + 'px'
    this.initText 			= "";  // markup
    this.setClass 			= "";  // css
    this.parentId 			= "";
    this.maxChar 			= "";
    this.direction 			= "";  // 'ltr' (default)/ 'rtl'
    this.keyUpFunction 		= "";  // todo: remove
    this.mode 				= "";  // t2k.component.textarea.TextEditorViewModes
    this.enableCharLimit 	= "";  // optional, mode override
    this.enableScrollbar 	= "";  // optional, mode override
    this.enableKeyscroll 	= "";  // optional, mode override
    this.firstKeyDown 		= "";  // callback
};


(function() {

    /**
     * Private: TEMPLATE
     * The Mustache template used by the textEditor view.
     */
    var TEMPLATE = "<div class='miniTextEditor' id='{{id}}'>\
				    		{{#multiLine}}<textarea id='{{id}}_te'></textarea>{{/multiLine}}\
					    	{{^multiLine}}<input id='{{id}}_te' type='text' value='' size='10'>{{/multiLine}}\
			        </div>";

    t2k.component.textarea.MiniTextEditorView = t2k.component.BaseComponentView.subClass({

        /**
         * ctor function
         * @param config
         */
        ctor: function(config) {
            // Delegate.
            this._super(override(config, {
                template: TEMPLATE,
                layout: 'inline',
                multiLine: (config.mode == 'sentence' || config.mode == 'paragraph' || config.mode == 'fullText')
            }));

            this.initMembers(config);

            // set mode params by mode
            this._setModeParams();

            // set initText, direction, keyUp handle, maxChar handle exc..
            this._initTextArea();

            // set Init Style
            this._setInitStyleOnInitTaForInitText();

            // set & check height & width for 'paragraph' or 'fullText' modes
            this._setAndCheckTextareaSizes();
        },

        /**
         * initMembers function
         * @param config
         */
        initMembers : function(config) {
            var TextAreaParams = config;

            // data members
            this.id = TextAreaParams.id;
            this.width = TextAreaParams.width;
            this.maxWidth = TextAreaParams.maxWidth;
            this.height = TextAreaParams.height;
            this.maxChar = TextAreaParams.maxChar;
            this.initText = TextAreaParams.initText;
            this.setAnswer = TextAreaParams.setAnswer;
            this.parentId = TextAreaParams.parentId;
            this.keyUpFunction = TextAreaParams.keyUpFunction;
            this.firstKeyDown = TextAreaParams.firstKeyDown;
            this.removeContent = this._removeContent;
            this._firstKeyPressed = false;
            this._teElement = this._view.children().first();
            this._enable = true;

            this.isMinimunReadable = false;
            this.isAbsoluteMinimun = false;
            this.reductionStepSize = t2k.component.textViewer.TextViewerConstants.reductionStepSize;
            this.reductionStep = (!!this.cfg.reductionStep ? this.cfg.reductionStep : 0);

            if (!this.cfg.dummyMode && !!this.cfg.compiledLayoutRes.reduction){
                this.reductionStep = this.cfg.compiledLayoutRes.reduction;
            }

            this.optimumFontSize = TextAreaParams.optimumFontSize;
            this.setFontSize = TextAreaParams.setFontSize;
            this.fontColor = TextAreaParams.fontColor;

            // get reduction step and set font-size
            if (this.reductionStep > 0) { //if reductionStep > 0, calculate font-size according to it
                var reducedFontSize = this.calcFontSizeByReduction();
                this._view.css('font-size', reducedFontSize + 'px');
            }

            // mode params
            this._displayMaxChar;
            this._enableCharLimit = eval(TextAreaParams.enableCharLimit);
            this._enableScrollbar = TextAreaParams.enableScrollbar;
            this._enableKeyscroll = TextAreaParams.enableKeyscroll;
            this._enableEnter	  = true; // default
            this._mode			  = TextAreaParams.mode;

            //current style according to the css clas
            this.style = null;

            // default direction: ltr
            if (!TextAreaParams.direction) {
                TextAreaParams.direction = "ltr";
            }

            this.direction  = TextAreaParams.direction;

        },

        /**
         * override - set state of component
         * @param state
         */
        setMyState:function (state) {
            this.state = state;
            this.setEnabled(jQuery(state).attr('enabled') === 'true');
            this.replaceContent(jQuery(state).children('initText').text());
        },

        /**
         * override - get state of component
         * @param state
         * @return {*}
         */
        addMyState : function(state){
            var thi$ = this;
            var state = jQuery('<state/>')
                .append(jQuery('<initText/>').text(thi$.getMarkUpValue()));

            return state;
        },

        /**
         * reduce
         * start reduction
         * @param val - reduction value (if null - set 1)
         */
        reduce:function (val) {
            var reducedFontSize = this.calcFontSizeByReduction(val);

            this._view.css('font-size', reducedFontSize + 'px');
            this.dispatchEvent('cantReduce');
            this.dispatchEvent('onRendered');
        },

        /**
         * calcFontSizeByReduction
         * @param val - reduction value (if null - set 1)
         */
        calcFontSizeByReduction : function(val){

            if (this.optimumFontSize != undefined){
                // if val == null set val = 1
                var reductionValue = (val != undefined && val > 0) ? val : 1;
                // add the val to the current reductionStep
                this.reductionStep = this.reductionStep + reductionValue;
                // calc font size by reductionStep
                this.setFontSize = this.optimumFontSize - (this.reductionStep * this.reductionStepSize);
                // if fontSize is less then fontSizeMinReadable
                if (this.setFontSize < t2k.component.textViewer.TextViewerConstants.minimumReadableFontSize){
                    // set fontSize = minimumReadable (not less)
                    this.setFontSize = parseInt(t2k.component.textViewer.TextViewerConstants.minimumReadableFontSize);
                    // min readable flag
                    this.isMinimunReadable = true;
                }
            }
        },

        /**
         * enable -
         * enable or disable textarea
         *
         * @param enabled - boolean value
         */
        enable : function(enabled){
            this._enable = enabled;
            this._teElement.get(0).disabled = !!!enabled;

            //force blur event on input field in order to close soft keyboard of the tablet
            if (!!!enabled) {
                this._teElement.blur();
                this._teElement.focusout();
            }
        },

        /**
         * setFirstKeyDownFunction
         * @param fnc
         */
        setFirstKeyDownFunction : function(fnc){
            this.firstKeyDown = fnc;
        },

        /**
         * _removeContent
         * @private
         */
        _removeContent : function(){
            this._teElement.val('');
        },

        /**
         * replaceContent
         * @param htmlContent
         */
        replaceContent : function(htmlContent){
            var tempSpan = $('<span/>').append(htmlContent);
            this._teElement.val( tempSpan.text() );
        },

        /**
         * getValue function
         * @returns texteditor text
         */
        getValue : function(){
            return this._teElement.val().trim();
        },

        /**
         * getMarkUpValue function
         * @returns texteditor html
         */
        getMarkUpValue : function(){
            return this._teElement.val().trim();
        },

        /**
         * setFirstKeyPressed
         * @param flag
         */
        setFirstKeyPressed : function(flag){
            this._firstKeyPressed = flag;
        },

        /**
         * _beep
         * play the beep
         */
        _beep : function(){
            SOUND.beep();
        },

        /**
         * _setAndCheckTextareaSizes -
         * checks the width & height params for right capacity, only for 'paragraph' or 'fullText' modes.
         * chech min width = 296px and output 'console.log' for exceptions
         * set max width = 720px
         * output 'console.log' msg for error
         * (params use by constant)
         */
        _setAndCheckTextareaSizes : function(){

            var textareaWidth = this._teElement.width();
            var textareaHeight = this._teElement.height();

            if(this.width == '100%'){
                this.width = textareaWidth;  //set actual textarea width in px
            }

            if(this.height == '100%'){
                this.height = textareaHeight;  //set actual textarea width in px
            }

            // max & min width issue
            if (this._mode == 'sentence' || this._mode == 'paragraph' || this._mode == 'fullText'){
                // set max width case the width is greater then the max width
                if (textareaWidth > t2k.component.textarea.TextEditorViewConstants.maxTextAreaWidth){
                    this.width = t2k.component.textarea.TextEditorViewConstants.maxTextAreaWidth + 'px';
                }
            }

            if (this._mode == 'paragraph' || this._mode == 'fullText'){
                var displayMaxChar = this._displayMaxChar;

                var letterWidth  = Math.floor(this.style.size * t2k.component.textarea.TextEditorViewConstants.widthRefrence);
                var letterHeight = Math.floor(t2k.component.textarea.TextEditorViewConstants.fontAspectRatio * letterWidth);

                var currLettersInOneLine = Math.floor(textareaWidth / letterWidth);
                var linesRequire = Math.ceil(displayMaxChar / currLettersInOneLine);
                var heightRequire = (linesRequire * letterHeight) + t2k.component.textarea.TextEditorViewConstants.widthHeightExpansion;

                this.height = heightRequire + 'px';
            }

            this._teElement.width(this.width);
            this._teElement.height(this.height);

	        this._view.width(this.width);
	        this._view.height(this.height);
        },

        /**
         * _getStyleClass -
         * find css class rules based on css class name
         * @param document, className - current textEditor class name
         */
        _getStyleClass : function (document, className) {

            var styleSheet = null;
            var rule = null;
            jQuery.each(document.context.styleSheets, function(i, styleObj){
                if(!!styleObj.href && !!styleObj.href.match(/textEditor.css$/)){
                    styleSheet =  styleObj;
                }
            });

            // Check if browser uses [rules] - cssStyleRule object
            var rules;
            if (styleSheet && styleSheet.rules){
                rules = styleSheet.rules;
            }

            // Check if browser uses [cssRules]
            if (styleSheet && styleSheet.cssRules){
                rules = styleSheet.cssRules;
            }

            // Check if browser supports css rules
            if (rules){
                // Loop rules in css stylesheet
                jQuery.each(rules, function(i, ruleObj){
                    if(ruleObj.selectorText == className){
                        rule = ruleObj;
                    }
                });
            }

            return rule;
        },

        /**
         * _setModeParams
         * set the mode params by mode
         */
        _setModeParams : function(){

            var currMode = t2k.component.textarea.TextEditorViewModes[this._mode];

            this._displayMaxChar = currMode.displayMaxChar;
            if (this._displayMaxChar == null || this._displayMaxChar == 'undefined'){
                this._displayMaxChar = '';
            }

            if (this.maxChar){
                this._displayMaxChar = this.maxChar;
            }

            // set maxChar 'word' mode
            if (this._mode == "word"){
                if(parseInt(this.maxChar) > parseInt(currMode.maxDisplayMaxChar)) {
                    this._displayMaxChar = currMode.maxDisplayMaxChar;
                } else {
                    if(parseInt(this.maxChar) < parseInt(currMode.minDisplayMaxChar)) {
                        this._displayMaxChar = currMode.minDisplayMaxChar;
                    }
                }
            }

            /**
             * TODO: there are potentially many more bugs here related to automatic type casting.
             * In JavaScript, (false == '') is true, so please use === operator.  -- Mark V.
             */
            if (typeof this._enableCharLimit != 'boolean') {
                this._enableCharLimit = currMode.charLimit;
            }

            this.maxChar = this._enableCharLimit? parseInt(this._displayMaxChar): 5000;

            if(!!this.maxChar) {
                this._teElement.attr('maxlength', this.maxChar);
            }

            if ((this._enableScrollbar != true && this._enableScrollbar != false) || (this._enableScrollbar == '' && this._enableScrollbar != true && this._enableScrollbar != false) ){
                this._enableScrollbar = currMode.scrollBar;
            }

            if ((this._enableKeyscroll != true && this._enableKeyscroll != false) || this._enableKeyscroll ==''){
                this._enableKeyscroll = currMode.keyScroll;
            }

            this._enableEnter = currMode.enableEnter;

            // set currStyle by constructor
            var currStyle = this.setClass;

            // if the constructor doesn't provide any style, use the default style
            if (currStyle == null || currStyle == ''){
                currStyle = t2k.component.textarea.TextEditorViewConstants.defaultCssClass;
            }

            var cssRule = this._getStyleClass(jQuery('document'), '.ta .' +currStyle);
            if(cssRule){
                this._ruleToStyle(cssRule);
            }

            // if currMode.width is "fixByStyle", set width by 'displayMaxChar'
            // on 'word' mode, set with with 'widthRefrence' to reducr 'word' width
            if (currMode.width){
                if (this._mode == "word"){
                    this.width = (this.style.size * t2k.component.textarea.TextEditorViewConstants.widthRefrence * this._displayMaxChar) + "px";
                } else {
                    this.width = (this.style.size * currMode.displayMaxChar) + t2k.component.textarea.TextEditorViewConstants.widthHeightExpansion + "px";
                }
            }

            if (currMode.height){
                this.height = (Math.floor(t2k.component.textarea.TextEditorViewConstants.fontAspectRatio * this.style.size)) + t2k.component.textarea.TextEditorViewConstants.widthHeightExpansion + "px";
            }

            // set maxChar = 350 for sentence to avoid forced enter
            if (this._mode == "sentence"){
                this.maxChar = 350;
            }

            // set maxChar = 1 for 'letter' mode
            if (this._mode == "letter"){
                this.maxChar = 1;
            }

            // 'letter' mode exception - init text should be one letter or less
            if (this._enableCharLimit == true){
                var initTextTempDiv = jQuery("<div></div>").html(this.initText);
                var initTextStr = jQuery(initTextTempDiv).text() ;

                if (initTextStr.length > this.maxChar){
                    this.initText = initTextStr.substring(0, this.maxChar);
                }
            }

        },

        /**
         * _setInitStyleOnInitTaForInitText -
         * calls only once, at init.
         * textArea style implementation for initText.
         * write the relevant markup and 'psate' it to the textArea's body
         */
        _setInitStyleOnInitTaForInitText : function(){
            // get textArea style
            var style = this.setClass;

            if (style){

                // check for font tag requirement
                if (this.style.font || this.style.size || this.style.color){

                    if (this.style.font){
                        this._teElement.css('font-family', this.style.font);
                    }

                    if (this.style.size){
                        this._teElement.css('font-size', this.style.size + "px'");
                    }

                    if (this.style.color){
                        this._teElement.css('color', this.style.color);
                    }

                }
            }
        },

        // Recover style for the body element
        setTeElementStyle : function(){
            var tmpObjStyle = {};

            if (this.style.font){
                tmpObjStyle['font-family'] = this.style.font;
            }
            if (this.style.size){
                tmpObjStyle['font-size'] = this.style.size + 'px';
            }
            if (this.style.color){
                tmpObjStyle['color'] = this.style.color;
            }

            this._teElement.css(tmpObjStyle);

        },

        /**
         * _innocentKeyDown -
         * check if 'innocent key' down (pressed)
         * innocent key is a key that doesn't increase the ta char's sum
         * the range beween 32-41 (33,34,35,36,37,38,39,40) is the arrows, home, end, pgUp, pgDn.
         * 46 & 46 are insert and delete
         * 8 is backspace
         *
         * @param keyCode
         *
         * @returns true or false (is innocent down - returns true)
         */
        _innocentKeyDown : function(keyCode){

            var ret = false;

            if ((keyCode > 32 && keyCode < 41) || keyCode == 45 || keyCode == 46 || keyCode == 8 || keyCode == 13){
                ret = true;
            }

            return ret;
        },

        /**
         * _initTextArea -
         * set initText, direction, keyUp handle, maxChar handle exc..
         */
        _initTextArea : function() {

            var maxChar = parseInt(this.maxChar),
                isMaxChar = false,
                setInitStyle = false,
                tempTextAreaText,
                thi$ = this,
                bodyElement_inlineStyle = {"overflow-x":"hidden"};// set overflow-x for all browsers

            if (ENV.behaviors.isIE){
                bodyElement_inlineStyle["display"] = "inline-block";
            }

            // set body CSS according to the current style
            if (this.style){

                if (this.style.font){
                    this._teElement.css("font-family", this.style.font);

                    merge(bodyElement_inlineStyle, {
                        'font-family':this.style.font,
                        'font':this.style.font
                    });

                } else {
                    bodyElement_inlineStyle["font-family"] = this.style.font;
                }
                if (this.style.size){
                    bodyElement_inlineStyle["font-size"] = this.style.size + 'px';
                }
                if (this.style.color){
                    bodyElement_inlineStyle["color"] = this.style.color;
                }
            }

            // on scroll control, scrollTo visible position, on focus
            if (ENV.behaviors.scrollControl) {
                this.inFocus = false;
                this.scrollTop = 0;

                this._teElement.bind('focus', function (e) {  //bind it to keypress in order to get this work on android 3
                    if (!thi$.inFocus) {
                        thi$.scrollTop = (ScrollControl.getMarginTop() - ScrollControl.Y + 190);
                        ScrollControl.forceScrollTop(thi$.scrollTop);
                    }

//                    console.log('_teElement focus' + document.activeElement.getAttribute('id'))
                    thi$.inFocus = true;
                });

                this._teElement.bind('blur focusout', function (e) {
                    thi$.inFocus = false;
                });
            } else {
	            this.inFocus = false;
	            this.scrollTop = 0;

	            this._teElement.bind('focus', function (e) {
		            if (!thi$.inFocus) {
                        window.scrollTo(0,0);
			            //scroll to top of texteditor
		            }

		            thi$.inFocus = true;
	            });

	            this._teElement.bind('blur focusout', function (e) {
		            thi$.inFocus = false;
	            });

            }

            /**
             * this._teElement keyDown
             * handle undo/redo hotkeys and start handle maxChar issue
             */
            this._teElement.keydown(function(e){

                var keyCode = (e.keyCode ? e.keyCode : e.which);

                // if enter is disabled - prevent default
                if (keyCode == 13 && thi$._enableEnter == false) {
                    thi$._teElement.blur();
                    thi$._teElement.focusout();
                    thi$._beep();

                    cancelDefault(e);
                    return false;
                }

                // handle space in keyScroll
                if (keyCode == 32 && thi$._enableKeyscroll == true && ENV.behaviors.isIE){
                    cancelDefault(e);
                    return false;
                }

                if(typeof thi$.setAnswer == 'function' && keyCode == 17 ){
                    thi$._ctrlDown = false;
                    cancelDefault(e);
                    return false;
                } else if (keyCode == 17){ // ctrl down will save it's state at this._ctrlDown
                    thi$._ctrlDown = true;
                    return false;
                }

                // disable space(32) and tab(9) at 'letter' mode
                if ((thi$._mode == 'letter' && keyCode == 32) || (thi$._mode == 'letter' && keyCode == 9)){
                    cancelDefault(e);
                    return false;
                }

                // disable 'capsLock' (20) or 'alt' (18) or 'shift' (16)
                if (keyCode == 20 || keyCode == 18 || keyCode == 16){
                    cancelDefault(e);
                    return false;
                }

                // save the textArea inner html. if maxChar, "keyUp" will replace the inner html to tempTextAreaText
                tempTextAreaText = thi$.getMarkUpValue();
                var textAreaCharsLength = thi$.getValue().length;
                thi$.cancelInput = false;

                // if inserted text length is larger the maxchar allowed - prevent keydown event and beep
                if (textAreaCharsLength > maxChar) {
                    // only if ctrl is down and nothing is selected, allow only innocent chars. else, set isMaxChar = true
                    // and continue the handle with keyUp
                    if (!e.ctrlKey && thi$._getSelectedValue() == '') {
                        // if the keDown is not innocent (one that will increase the char num)
                        if (!thi$._innocentKeyDown(keyCode)) {
//                            console.log('textAreaCharsLength=' + textAreaCharsLength + ' maxChar=' + maxChar + ' keyCode=' + keyCode + ' e.button=' + e.button);
                            thi$.cancelInput = true;
                            cancelDefault(e);
                            thi$._beep();
                            return false;
                        }

                    } else {
                        isMaxChar = true;
                    }
                }

            });
            
            /**
             * this._teElement paste -
             * check max char on paste
             */
            this._teElement.bind('paste', function(e) {

                //* Process browser events, then update pasted text. *//
                window.setTimeout(function(e) {
                	
                    var PastedTxt = thi$.getValue(),
                        maxVal = parseInt(thi$.maxChar,10);

                    if (PastedTxt.length > maxVal){
                        thi$._beep();
                    }

                    PastedTxt = PastedTxt.substring(0, maxVal);
                    thi$._teElement.val( PastedTxt );

                    thi$.setTeElementStyle();

                }, 0);
            });
            
            // TODO: duplicate
                    
            /**
             * this._teElement selectstart -
             * check max char on paste
             */
            this._teElement.bind('selectstart', function(){
            	 //* Process browser events, then update pasted text. *//
                window.setTimeout(function(e) {

                    var PastedTxt = thi$._teElement.val(),
                        maxVal = parseInt(thi$.maxChar,10);

                    if (PastedTxt.length > maxVal){
                        PastedTxt = PastedTxt.substring(0, maxVal);
                        thi$._teElement.val('');
                        thi$._beep();
                    }

                    thi$.setTeElementStyle();

                }, 0);
            });

            /**
             * this._teElement keyUp -
             * finish handle the hotkeys
             * finish handle maxChar issue
             * fire constructor's keyUpFunction
             * set selected controls
             * disable redo if textArea is at "undoMode" (means that undo pressed, and redo is enable)
             */

            this._teElement.keyup(function(e){
                var keyCode = (e.keyCode ? e.keyCode : e.which);

                thi$.setTeElementStyle();

                if(thi$.cancelInput) {
                    return;
                }

                // first key down issue -
                // on the first key down, call
                if (!thi$._firstKeyPressed && (!thi$._innocentKeyDown(keyCode) || keyCode == 8)){
	                thi$.setAnswer && thi$.setAnswer.call(thi$, true);

	                thi$.firstKeyDown && thi$.firstKeyDown.call(thi$);

                    thi$._firstKeyPressed = true;
                }

                //textEditor is part of progression
                if(typeof thi$.setAnswer == 'function' && !!thi$._firstKeyPressed){
                    var textAreaCharsLength = thi$.getValue().length;
                    //check for deleting all content
                    if(textAreaCharsLength == 0){
                        thi$.setAnswer.call(thi$, false);
                    } else {
                        thi$.setAnswer.call(thi$, true);
                    }

                    if(thi$.firstKeyDown){
                        thi$.firstKeyDown.call(thi$);
                    }
                }

                thi$._setInitStyleOnInitTaForInitText();

                // fire keyUpFunction
                var keyUpFunction = thi$._teElement.attr("keyUpFunction");

                if(keyUpFunction){
                    eval(keyUpFunction);
                }
            });

            // letter mode exception - set center alignment for the iframe
            if (this._mode == "letter"){
                bodyElement_inlineStyle["text-align"] = "center";
            }

            // keyscroll issue
            if (this._enableKeyscroll){
                this.maxChar = "300";
            } else {
                // if keyScroll is disables, force line breakes (that's cancel the h. scroll)
                bodyElement_inlineStyle["word-wrap"]= "break-word";
            }

            this._teElement.css(bodyElement_inlineStyle);

        },

        /**
         * _ruleToStyle -
         * get the cssRule object and set this.style according to it
         *
         * @param body - cssRule element
         */
        _ruleToStyle : function(cssRule)
        {
            this.style =  {
                bold 		: cssRule.style.fontWeight == 'bold',
                italic 		: cssRule.style.fontStyle == 'italic',
                underline 	: cssRule.style.textDecoration == 'underline',

                font      	:  cssRule.style.fontFamily,
                size 		: (typeof this.setFontSize != 'undefined') ? this.setFontSize : cssRule.style.fontSize,
                color		: cssRule.style.color
            };

            if(this.style.size != '' && this.style.size != null)
                this.style.size = parseInt(this.style.size);  //remove px
            else
                this.style.size = this.optimumFontSize || 22;

            if(this.fontColor){
                this.style.color = this.fontColor;
            } else if(this.style.color != '' && this.style.color != null)
                this.style.color = rgb2hex(this.style.color);  //convert color in rgb format to hex format
            else
                this.style.color = '#000000';

            if(this.style.font == null){
                this.style.font = '';
            }
        },

        /**
         * _getSelectedValue -
         * find the selected html by range
         *
         * @return selectedHTML
         */
        _getSelectedValue : function() {
            var selectedText = (this._teElement.val()).substring(this._teElement.get(0).selectionStart, this._teElement.get(0).selectionEnd);
            return selectedText;
        },

        /**
         * _replaceSelectionWith -
         * delete the current selection and paste "textToReplace" instead
         *
         * @param textToReplace
         * @return true/false
         */
        _replaceSelectionWith : function(textToReplace){
            var len = this._teElement.get(0).value.length;
            var start = this._teElement.get(0).selectionStart;
            var end = this._teElement.get(0).selectionEnd;
            var selection = this._teElement.get(0).value.substring(start, end);

            var ret = true;

            if (!!selection) {
                this._teElement.get(0).value.substring(0, start) + textToReplace + this._teElement.get(0).value.substring(end, len);
            } else {
                ret = false;
            }

            return ret;
        },

        /**
         * _setDirection -
         * set the TA's body dir, and handle the indend margin issue
         *
         * @param controlElement
         */
        _setDirection : function (controlElement) {

            this._teElement.css("direction",controlElement.dir);

        }
    });
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * rgb2hex Function to convert hex format to a rgb color
     * @param rgb
     * @return {String}
     */
    function rgb2hex(rgb){
        rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        return "#" +
            ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
            ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
            ("0" + parseInt(rgb[3],10).toString(16)).slice(-2);
    }

    /**
     * cancelDefault
     * @param e
     */
    function cancelDefault(e) {
        if (!e)
            e = window.event;

        if (e.preventDefault) {
            e.preventDefault();
        }

        e.returnValue = false;
    }
})();
////////////////////////////////////////
// SRC End --> t2k/component/textEditor/MiniTextEditorView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/textEditor/MiniTextEditor.js
////////////////////////////////////////
(function() {

	t2k.component.textarea.MiniTextEditor = t2k.component.BaseComponent.subClass({
		name: 't2k.component.textarea.MiniTextEditor',

        /**
         * ctor
         * @param config
         */
        ctor:function (config) {
            // Delegate
            this._super(config);
            this.configuration = prepareTextEditorConfiguration(config);
            this.configuration.setFontSize = (!!!this.configuration.setFontSize ? this.configuration.optimumFontSize : this.configuration.setFontSize) || 22;
            this.view = this.createNewView(t2k.component.textarea.MiniTextEditorView, this.configuration);
        },

        /**
         * setEnabled
         * @param flag
         */
        setEnabled:function (flag) {
            //if (flag){
            this.view.enable(flag);
            //}
        },

        /**
         * setMyState
         * @param state
         */
        setMyState:function (state) {
            this.view.setMyState(state);
        },

        /**
         * addMyState
         * @return {*}
         */
        addMyState:function () {
            var state = this._super();
            return this.view.addMyState(state);
        },

        /**
         * reduce
         * @param val
         */
        reduce:function (val) {
            this.view.reduce(val);
        },

        /**
         * setFirstKeyDownFunction
         * @param fnc
         */
        setFirstKeyDownFunction:function (fnc) {
            this.view.setFirstKeyDownFunction(fnc);
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
function prepareTextEditorConfiguration(config) {
    	
    	// The result object.    
    	var result, textEditorMarkup = '';
    	var textEditorElement = config.data;    

    	if (textEditorElement){

            var container = config.container ? config.container : Perf.select('#' + config.parent).parents('.task_container');

    		// it text editor have init markup
    		if (textEditorElement.textContent || textEditorElement.nodeValue) {
    			textEditorMarkup = jQuery.xmlToString(textEditorElement);
    			textEditorMarkup = textEditorMarkup.substring(textEditorMarkup.indexOf('>') + 1,
                    textEditorMarkup.length - 'textEditor'.length - 3);
    		}

    		var textEditorParam = new t2k.component.textarea.TextEditorViewParams();
    		
    		textEditorParam.id 					= genId();    			
    		textEditorParam.reductionStep 		= config.reductionStep ? config.reductionStep : 0;
    		textEditorParam.optimumFontSize 	= config.optimumFontSize ? config.optimumFontSize : null;
    		textEditorParam.fontColor			= config.fontColor ? config.fontColor : null;
    		textEditorParam.setAnswer			= config.setAnswer;     // function of subAnswer that marks it as answered 
    		textEditorParam.width 				= jQuery(textEditorElement).attr('width') || '100%';
            textEditorParam.maxWidth            = container.width();//limit the maximum size by container
    		textEditorParam.height 				= jQuery(textEditorElement).attr('height') || '';
    		textEditorParam.setClass 			= jQuery(textEditorElement).attr('style') || 'style1';  // CSS ! :)
    		textEditorParam.parentId 			= config.parent;
    		textEditorParam.parent	 			= Perf.select('#' + config.parent);
    		textEditorParam.firstKeyDown 		= config.firstKeyDown;
    		textEditorParam.keyDown 			= config.keyDown;
    		textEditorParam.maxChar 			= jQuery(textEditorElement).attr('maxChar') || config.maxChar;
    		textEditorParam.direction 			= jQuery(textEditorElement).attr('direction') || ENV.contentDirection; 
    		textEditorParam.toolBarPreset 		= jQuery(textEditorElement).attr('toolBarPreset');  // TextAreaToolbarConfig
    		textEditorParam.mode 				= jQuery(textEditorElement).attr('mode');  // t2k.component.textarea.TextAreaModes
    		textEditorParam.enableCharLimit 	= jQuery(textEditorElement).attr('enableCharLimit'); // optional, mode override
    		textEditorParam.enableScrollbar 	= jQuery(textEditorElement).attr('enableScrollbar'); // optional, mode override
            textEditorParam.enableKeyscroll 	= jQuery(textEditorElement).attr('enableKeyscroll') == "true";  // optional, mode override

    		// text editor state
    		
    		textEditorParam.initText = jQuery.trim(textEditorMarkup);
    		
    		// set the result.
    		result = textEditorParam;
    	} else {
    		result = null;
    	}
    	return result;
    	
    } // End of preparetextEditorConfiguration


})();

////////////////////////////////////////
// SRC End --> t2k/component/textEditor/MiniTextEditor.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mathField/MathFieldLocaleConfig.js
////////////////////////////////////////
(function () {
	t2k.component.mathField.MathFieldLocaleConfig = {
		fullMathField:{
			fr_FR:[
				{
					key:{name:'angle_geometry'},
					action:'replace',
					tabIndex:1,
					boxIndex:0,
					lineIndex:0,
					keyIndex:0
				},
				{
					key:{name:'euro'},
					action:'replace',
					tabIndex:0,
					boxIndex:4,
					lineIndex:3,
					keyIndex:0
				}

			],
			nl_NL:[
				{
					key:{name:'euro'},
					action:'replace',
					tabIndex:0,
					boxIndex:4,
					lineIndex:3,
					keyIndex:0
				},
				{
					key:{name:'ratio'},
					action:'remove',
					tabIndex:0,
					boxIndex:1,
					lineIndex:2,
					keyIndex:1
				}
			]
		},
		contentEditorMathField:{
			fr_FR:[
				{
					key:{name:'angle_geometry'},
					action:'replace',
					tabIndex:1,
					boxIndex:2,
					lineIndex:1,
					keyIndex:0
				},
				{
					key:{name:'euro'},
					action:'replace',
					tabIndex:1,
					boxIndex:0,
					lineIndex:1,
					keyIndex:0
				}

			],
			en_US: [
				{
					key:{name:'angle_geometry'},
					action:'remove',
					tabIndex:1,
					boxIndex:0,
					lineIndex:2
				},
				{
					key:{name:'dollar'},
					action:'replace',
					tabIndex:1,
					boxIndex:0,
					lineIndex:1,
					keyIndex:0
				}
			],
			nl_NL:[
				{
					key:{name:'euro'},
					action:'replace',
					tabIndex:1,
					boxIndex:0,
					lineIndex:1,
					keyIndex:0
				},
				{
					key:{name:'ratio'},
					action:'remove',
					tabIndex:0,
					boxIndex:1,
					lineIndex:2,
					keyIndex:1
				}
			]
		}
	};
})();
////////////////////////////////////////
// SRC End --> t2k/component/mathField/MathFieldLocaleConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mathField/MathFieldConfig.js
////////////////////////////////////////
(function () {

    /**
     * MathField Config
     */
    t2k.component.mathField.MathFieldConfig = {

        /**
         * keyboardGroupControls
         * this object contains control groups,
         * so MF would be able to disable a group of controls
         */
        keyboardGroupControls:{

            digits:'zero,one,two,three,four,five,six,seven,eight,nine',

            thousandsSeparator:'comma,space',

            geometryStructures:'segment,rayRight,rayBoth,angle_geometry',

            minusSign:'minusSign',

            operators:'plus,minus,multiplication,multiplicationX,multiplicationDot,division,minusSign',

            relations:'equal,notEqual,smaller,bigger,smallerEqual,biggerEqual,approximately,similarity,congruence',

            grouping:'leftParenthesis,rightParenthesis,leftSquareBracket,rightSquareBracket',

            divisionAndProportion:'percent,point,remainder',

            remainder:'remainder',

            longDivision:'longDivision',

            absolute:'absolute',

            shapes:'triangleShape,doodleShape,squareShape,diamondShape,circleShape,ellipseShape',

            capitalLetters:'capitalA,capitalB,capitalC,capitalD,capitalE,capitalF,capitalG,capitalH,capitalI,capitalJ,capitalK,capitalL,capitalM,capitalN,capitalO,capitalP,capitalQ,capitalR,capitalS,capitalT,capitalU,capitalV,capitalW,capitalX,capitalY,capitalZ,small',

            smallLetters:'smallA,smallB,smallC,smallD,smallE,smallF,smallG,smallH,smallI,smallJ,smallK,smallL,smallM,smallN,smallO,smallP,smallQ,smallR,smallS,smallT,smallU,smallV,smallW,smallX,smallY,smallZ,caps',

            geometrySigns:'angle,triangle,pi,parallel,orthogonal,degree',

            units:'celsius,fahrenheit,dollar,euro,cent',

            system:'arrowLeft,arrowUp,arrowRight,arrowDown,del,backspace'

        },

        correctnessValidationMathString:[
            '==', '>', '<', '!=', '<=', '>='
        ],

        validationGroup:{

            zero:'digits',
            one:'digits',
            two:'digits',
            three:'digits',
            four:'digits',
            five:'digits',
            six:'digits',
            seven:'digits',
            eight:'digits',
            nine:'digits',

            plus:'operators',
            minus:'operators',
            multiplication:'operators',
            multiplicationX:'operators',
            multiplicationDot:'operators',
            division:'operators',
            ratio:'operators',
            minusSign:'minusSign',

            equal:'relations',
            notEqual:'relations',
            smaller:'relations',
            bigger:'relations',
            smallerEqual:'relations',
            biggerEqual:'relations',
            approximately:'relations',
            similarity:'relations',
            congruence:'relations',

            leftParenthesis:'openingParenthesis',
            leftSquareBracket:'openingSquareParenthesis',

            rightParenthesis:'closingParenthesis',
            rightSquareBracket:'closingSquareParenthesis',

            point:'decimalPoint',

            comma:'thousandsComma',
	        space:'thousandsComma',

            percent:'percent',

            remainder:'remainder',

            absolute:'absolute',

            triangleShape:'variables',
            doodleShape:'variables',
            squareShape:'variables',
            diamondShape:'variables',
            circleShape:'variables',
            ellipseShape:'variables',
            capitalA:'variables',
            capitalB:'variables',
            capitalC:'variables',
            capitalD:'variables',
            capitalE:'variables',
            capitalF:'variables',
            capitalG:'variables',
            capitalH:'variables',
            capitalI:'variables',
            capitalJ:'variables',
            capitalK:'variables',
            capitalL:'variables',
            capitalM:'variables',
            capitalN:'variables',
            capitalO:'variables',
            capitalP:'variables',
            capitalQ:'variables',
            capitalR:'variables',
            capitalS:'variables',
            capitalT:'variables',
            capitalU:'variables',
            capitalV:'variables',
            capitalW:'variables',
            capitalX:'variables',
            capitalY:'variables',
            capitalZ:'variables',
            smallA:'variables',
            smallB:'variables',
            smallC:'variables',
            smallD:'variables',
            smallE:'variables',
            smallF:'variables',
            smallG:'variables',
            smallH:'variables',
            smallI:'variables',
            smallJ:'variables',
            smallK:'variables',
            smallL:'variables',
            smallM:'variables',
            smallN:'variables',
            smallO:'variables',
            smallP:'variables',
            smallQ:'variables',
            smallR:'variables',
            smallS:'variables',
            smallT:'variables',
            smallU:'variables',
            smallV:'variables',
            smallW:'variables',
            smallX:'variables',
            smallY:'variables',
            smallZ:'variables'
        },

        validationConstrains:{

            digits:{
                symbols:{
                    openingParenthesis:false,
                    openingSquareParenthesis:false,
                    absolute:false,
                    minusSign:false
                }
            },

            operators:{
                symbols:{
                    operators:false,
                    minusSign:false,
                    relations:false,
                    closingParenthesis:false,
                    closingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false
                },

                structures:{
                    power:false,
                    remainder:false
                },

                logic:{
                    first:false,
                    last:false
                }
            },

            minusSign:{
                symbols:{
                    operators:false,
                    relations:false,
                    closingParenthesis:false,
                    closingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false,
                    minusSign:false
                },

                structures:{
                    power:false,
                    remainder:false
                },

                logic:{
                    last:false
                }
            },

            relations:{
                symbols:{
                    operators:false,
                    relations:false,
                    closingParenthesis:false,
                    closingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false
                },

                structures:{
                    power:false,
                    remainder:false
                },

                logic:{
                    first:false,
                    last:false
                }
            },

            openingParenthesis:{
                symbols:{
                    operators:false,
                    relations:false,
                    closingParenthesis:false,
                    openingSquareParenthesis:false,
                    closingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false
                },

                structures:{
                    power:false,
                    remainder:false
                },

                logic:{
                    last:false
                }
            },

            closingParenthesis:{
                symbols:{
                    digits:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false,
                    variables:false,
                    absolute:false,
                    minusSign:false
                },

                structures:{
                    remainder:false,
                    fraction:false
                },

                logic:{
                    first:false
                }

            },

            openingSquareParenthesis:{
                symbols:{
                    operators:false,
                    relations:false,
                    closingParenthesis:false,
                    closingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false
                },

                structures:{
                    power:false,
                    remainder:false
                },

                logic:{
                    last:false
                }
            },

            closingSquareParenthesis:{
                symbols:{
                    digits:false,
                    closingParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false,
                    variables:false,
                    absolute:false,
                    minusSign:false
                },

                structures:{
                    remainder:false,
                    fraction:false
                },

                logic:{
                    first:false
                }
            },

            decimalPoint:{
                symbols:{
                    operators:false,
                    relations:false,
                    openingParenthesis:false,
                    closingParenthesis:false,
                    openingSquareParenthesis:false,
                    closingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false,
                    variables:false,
                    absolute:false,
                    minusSign:false
                },

                structures:{
                    power:false,
                    fraction:false,
                    remainder:false
                },

                logic:{
                    first:false,
                    last:false
                }

            },

            thousandsComma:{
                symbols:{
                    operators:false,
                    relations:false,
                    openingParenthesis:false,
                    closingParenthesis:false,
                    openingSquareParenthesis:false,
                    closingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false,
                    variables:false,
                    absolute:false,
                    minusSign:false
                },

                structures:{
                    power:false,
                    fraction:false,
                    remainder:false
                },

                logic:{
                    first:false,
                    last:false
                }

            },

            power:{
                symbols:{
                    digits:false,
                    openingParenthesis:false,
                    openingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    minusSign:false,
                    absolute:false
                },

                structures:{
                    power: false,
                    fraction:false,
                    remainder:false
                },

                logic:{
                    first:false
                }
            },

            fraction:{
                symbols:{
                    digits:false,
                    openingParenthesis:false,
                    openingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    absolute:false,
                    minusSign:false
                },

                structures:{
                    power:false,
                    fraction:false,
                    remainder:false
                }
            },

            percent:{
                symbols:{
                    digits:false,
                    openingParenthesis:false,
                    openingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false,
                    variables:false,
                    absolute:false,
                    minusSign:false
                },

                structures:{
                    power:false,
                    fraction:false,
                    remainder:false
                },

                logic:{
                    first:false
                }
            },

            remainder:{
                symbols:{
                    digits:false,
                    operators:false,
                    minusSign:false,
                    relations:false,
                    openingParenthesis:false,
                    closingParenthesis:false,
                    openingSquareParenthesis:false,
                    closingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false,
                    variables:false
                },

                structures:{
                    power:false,
                    fraction:false,
                    remainder:false
                },

                logic:{
                    first:false
                }
            },

            variables:{
                symbols:{
                    digits:false,
                    openingParenthesis:false,
                    openingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    absolute:false,
                    minusSign:false
                },

                structures:{
                    fraction:false
                }

            },

            absolute:{
                symbols:{
                    digits:false,
                    openingParenthesis:false,
                    openingSquareParenthesis:false,
                    decimalPoint:false,
                    thousandsComma:false,
                    percent:false,
                    variables:false,
                    absolute:false,
                    minusSign:false
                },

                structures:{
                    fraction:false,
                    remainder:false
                }
            }

        },


//        PROTOTYPE:
//        digits : {
//                symbols : {
//                    digits              : true,
//                    operators           : true,
//                    minusSign           : true,
//                    relations           : true,
//                    openingParenthesis  : true,
//                    closingParenthesis  : true,
//                    decimalPoint        : true,
//                    thousandsComma      : true,
//                    percent             : true,
//                    variables           : true
//                },
//
//                structures : {
//                    power               : true,
//                    fraction            : true,
//                    remainder           : true
//                },
//
//                logic : {
//                    first               : true,
//                    last                : true
//                }
//            }

        appendType:{
            'before':0,
            'after':1,
            'intoLast':2,
            'intoFirst':3
        },

        maxHeight:{
            defaultValue:'basic',
            basic:'0.8em',
            dynamic:'0.8em',
            firstLevel:'1em',
            secondLevel:'2em',
            thirdLevel:'3em',
            fourthLevel:'4em'
        },

        /**
         * mathTypeKeyboardDisable
         * this object contains a structure [key], and groups controls [value],
         * so MF would be able to disable group of controls by the structure value
         */
        mathTypeKeyboard:{

            fraction:{
                enable:false,
                groups:['geometryStructures', 'relations', 'remainder', 'longDivision'],
                charLimit:false,
                minChar:1
            },

            segment:{
                enable:true,
                groups:['capitalLetters', 'smallLetters', 'system'],
                charLimit:2,
                minChar:2
            },

            rayBoth:{
                enable:true,
                groups:['capitalLetters', 'smallLetters', 'system'],
                charLimit:2,
                minChar:2
            },

            rayRight:{
                enable:true,
                groups:['capitalLetters', 'smallLetters', 'system'],
                charLimit:2,
                minChar:2
            },

	        angle_geometry: {
		        enable:true,
		        groups:['capitalLetters', 'smallLetters', 'system'],
		        charLimit:3,
		        minChar:1
	        },

            power:{
                enable:false,
                groups:['geometryStructures', 'remainder', 'longDivision', 'relations'],
                charLimit:false,
                minChar:1
            },

            remainder:{
                enable:true,
                groups:['digits', 'system'],
                charLimit:false,
                minChar:1
            },

            longDivision:{
                enable:true,
                groups:['digits', 'system'],
                charLimit:false,
                minChar:1
            },

            absolute:{
                enable:false,
                groups:['geometryStructures', 'remainder', 'percent', 'relations'],
                charLimit:false,
                minChar:1
            },

            mathFieldCompletion:true,

            completion:{

                A:{
                    enable:false,
                    groups:[],
                    charLimit:false,
                    minChar:1
                },

                E:{
                    enable:false,
                    groups:['relations'],
                    charLimit:false,
                    minChar:1
                },

                O:{
                    enable:true,
                    groups:['operators', 'system'],
                    charLimit:1,
                    minChar:1
                },

                D:{
                    enable:true,
                    groups:['digits', 'system'],
                    charLimit:1,
                    minChar:1
                },

                W:{
                    enable:true,
                    groups:['digits', 'thousandsSeparator', 'capitalLetters', 'smallLetters', 'system'],
                    charLimit:false,
                    minChar:1
                },

                Q:{
                    enable:true,
                    groups:['relations', 'system'],
                    charLimit:1,
                    minChar:1
                }

            }

        },

        /**
         * prototypeControlsHash -
         * master hash for keyboard's controls.
         * the keyboard's preset that delivers to MF will get this hash arguments according to preset's controls.
         */
        prototypeControlsHash:{

            zero:{
                type:"number",
                insertFnc:"insertSymbol('zero');",
                symbol:"0"
            },

            one:{
                type:"number",
                insertFnc:"insertSymbol('one');",
                symbol:"1"
            },

            two:{
                type:"number",
                insertFnc:"insertSymbol('two');",
                symbol:"2"
            },

            three:{
                type:"number",
                insertFnc:"insertSymbol('three');",
                symbol:"3"
            },

            four:{
                type:"number",
                insertFnc:"insertSymbol('four');",
                symbol:"4"
            },

            five:{
                type:"number",
                insertFnc:"insertSymbol('five');",
                symbol:"5"
            },

            six:{
                type:"number",
                insertFnc:"insertSymbol('six');",
                symbol:"6"
            },

            seven:{
                type:"number",
                insertFnc:"insertSymbol('seven');",
                symbol:"7"
            },

            eight:{
                type:"number",
                insertFnc:"insertSymbol('eight');",
                symbol:"8"
            },

            nine:{
                type:"number",
                insertFnc:"insertSymbol('nine');",
                symbol:"9"
            },

            pi:{
                type:"number",
                insertFnc:"insertSymbol('pi');",
                symbol:"\u2020",
                mathValue:3.14  //3.141592653589793
            },

            triangleShape:{
                type:"shape",
                insertFnc:"insertSymbol('triangleShape');",
                symbol:"\u2018"
            },

            doodleShape:{
                type:"shape",
                insertFnc:"insertSymbol('doodleShape');",
                symbol:"\u2015"
            },

            squareShape:{
                type:"shape",
                insertFnc:"insertSymbol('squareShape');",
                symbol:"\u2016"
            },

            diamondShape:{
                type:"shape",
                insertFnc:"insertSymbol('diamondShape');",
                symbol:"\u00b0"
            },

            circleShape:{
                type:"shape",
                insertFnc:"insertSymbol('circleShape');",
                symbol:"\u2017"
            },

            ellipseShape:{
                type:"shape",
                insertFnc:"insertSymbol('ellipseShape');",
                symbol:"\u2019"
            },

            minusSign:{
                type:"number",
                insertFnc:"insertSymbol('minusSign');",
                symbol:"\u2012",
                keyboardSymbol:"\u2003",
                mathValue:"-"
            },

            plus:{
                type:"operator",
                insertFnc:"insertSymbol('plus');",
                symbol:"+"
            },

            minus:{
                type:"operator",
                insertFnc:"insertSymbol('minus');",
                symbol:"-"
            },

            multiplication:{
                type:"operator",
                insertFnc:"insertSymbol('multiplicationX');",
                symbol:"\u00D7",
                mathValue:'*'
            },
            multiplicationX:{
                type:"operator",
                insertFnc:"insertSymbol('multiplicationX');",
                symbol:"\u00D7",
                mathValue:'*'
            },

            multiplicationDot:{
                type:"operator",
                insertFnc:"insertSymbol('multiplicationDot');",
                symbol:"\u22C5",
                mathValue:'*'
            },

            division:{
                type:"operator",
                insertFnc:"insertSymbol('division');",
                symbol:"\u00F7",
                mathValue:'/'
            },

            ratio:{
                type:"operator",
                insertFnc:"insertSymbol('ratio');",
                symbol:":",
                mathValue:'/'
            },

            equal:{
                type:"operator",
                insertFnc:"insertSymbol('equal');",
                symbol:"=",
                mathValue:'=='
            },

            bigger:{
                type:"operator",
                insertFnc:"insertSymbol('bigger');",
                symbol:">"
            },

            smaller:{
                type:"operator",
                insertFnc:"insertSymbol('smaller');",
                symbol:"<"
            },

            notEqual:{
                type:"operator",
                insertFnc:"insertSymbol('notEqual');",
                symbol:"\u2260",
                mathValue:'!='
            },

            biggerEqual:{
                type:"operator",
                insertFnc:"insertSymbol('biggerEqual');",
                symbol:"\u2265",
                mathValue:'>='
            },

            smallerEqual:{
                type:"operator",
                insertFnc:"insertSymbol('smallerEqual');",
                symbol:"\u2264",
                mathValue:'<='
            },

            approximately:{
                type:"operator",
                insertFnc:"insertSymbol('approximately');",
                symbol:"\u2248",
                mathValue:'~'
            },

            congruence:{
                type:"operator",
                insertFnc:"insertSymbol('congruence');",
                symbol:"\u2245"
            },

            similarity:{
                type:"operator",
                insertFnc:"insertSymbol('similarity');",
                symbol:"\u007E"
            },

            orthogonal:{
                type:"operator",
                insertFnc:"insertSymbol('orthogonal');",
                symbol:"\u22A5"
            },

            parallel:{
                type:"operator",
                insertFnc:"insertSymbol('parallel');",
                symbol:"\u2225"
            },

            comma:{
                type:"sign",
                insertFnc:"insertSymbol('comma');",
                symbol:",",
	            keyboardSymbol:",",
	            keyboardSymbol_fr:"\u2010",
                mathValue:''
            },

		    space: {
			    type:"sign",
			    insertFnc:"insertSymbol('space');",
			    symbol:" ",
			    keyboardSymbol_fr:","
		    },

            point:{
                type:"sign",
                insertFnc:"insertSymbol('point');",
                symbol:".",
	            keyboardSymbol_fr: "\u002E"
            },

            percent:{
                type:"sign",
                insertFnc:"insertSymbol('percent');",
                symbol:"%",
                mathValue:""
            },

            leftParenthesis:{
                type:"sign",
                insertFnc:"insertSymbol('leftParenthesis');",
                symbol:"("
            },

            rightParenthesis:{
                type:"sign",
                insertFnc:"insertSymbol('rightParenthesis');",
                symbol:")"
            },

            leftSquareBracket:{
                type:"sign",
                insertFnc:"insertSymbol('leftSquareBracket');",
                symbol:"[",
                mathValue:"("
            },

            rightSquareBracket:{
                type:"sign",
                insertFnc:"insertSymbol('rightSquareBracket');",
                symbol:"]",
                mathValue:")"
            },

            completion:{
                type:"completion",
                symbol:"",
                mathValue:""
            },

            fraction:{
                type:"fraction",
                insertFnc:"_insertFraction();",
                symbol:"F",
                keyboardSymbol:"\u2001"
            },

            geometry:{
                type:"geometry",
                insertFnc:"_insertGeometry('normal');",
                symbol:"G"

            },

            rayLeft:{
                type:"geometry",
                insertFnc:"_insertGeometry('leftArrow');",
                symbol:"RL"
            },

            rayRight:{
                type:"geometry",
                insertFnc:"_insertGeometry('rightArrow');",
                symbol:"\u00B8",
	            keyboardSymbol:"\u2009"
            },

            rayBoth:{
                type:"geometry",
                insertFnc:"_insertGeometry('bothArrow');",
                symbol:"\u00BA",
	            keyboardSymbol:"\u200A"
            },

            segment:{
                type:"geometry",
                insertFnc:"_insertGeometry('segment');",
                symbol:"\u00B9",
	            keyboardSymbol:"\u2008"
            },

	        angle_geometry: {
		        type:"geometry",
		        insertFnc:"_insertGeometry('angle_geometry');",
		        symbol:"\u2220",
		        keyboardSymbol:"\u2220"
	        },

            triangle:{
                type:"triangle",
                insertFnc:"_insertTriangle('triangle');",
                symbol:"\u25B3"
            },

            angle:{
                type:"triangle",
                insertFnc:"_insertTriangle('angle');",
                symbol:"\u2220"
            },

            degree:{
                type:"letter",
                insertFnc:"insertSymbol('degree');",
                symbol:"\u00B0"
            },

            power:{
                type:"power",
                insertFnc:"_insertPower();",
                symbol:"P",
                keyboardSymbol:"\u2000"
            },

            longDivision:{
                type:"longDivision",
                insertFnc:"_insertLongDivision();",
                symbol:"L",
	            keyboardSymbol:'\u2002'
            },

            remainder:{
                type:"remainder",
                insertFnc:"_insertRemainder();",
                symbol:"R",
	            keyboardSymbol_nl:"r"
            },

            absolute:{
                type:"absolute",
                insertFnc:"",
                keyboardSymbol:"\u2249"
            },

            showFraction:{
                type:"showFraction",
                insertFnc:"_drawFraction();",
                symbol:"D"
            },

            celsius:{
                type:"number",
                insertFnc:"insertSymbol('celsius');",
                symbol:"\u2103"
            },

            fahrenheit:{
                type:"number",
                insertFnc:"insertSymbol('fahrenheit');",
                symbol:"\u2109"
            },

            dollar:{
                type:"nu",
                insertFnc:"insertSymbol('dollar');",
                symbol:"$"
            },

	        euro: {
		        type:"number",
		        insertFnc:"insertSymbol('euro');",
		        symbol:"€"
	        },

            cent:{
                type:"number",
                insertFnc:"insertSymbol('cent');",
                symbol:"\u00a2"
            },

            questionMark:{
                type:"number",
                insertFnc:"insertSymbol('questionMark');",
                symbol:"?"
            },

            underscore:{
                type:"number",
                insertFnc:"insertSymbol('underscore');",
                symbol:"_"
            },

            capitalA:{
                type:"letter",
                insertFnc:"insertSymbol('capitalA');",
                symbol:"A"
            },

            capitalB:{
                type:"letter",
                insertFnc:"insertSymbol('capitalB');",
                symbol:"B"
            },

            capitalC:{
                type:"letter",
                insertFnc:"insertSymbol('capitalC');",
                symbol:"C"
            },

            capitalD:{
                type:"letter",
                insertFnc:"insertSymbol('capitalD');",
                symbol:"D"
            },

            capitalE:{
                type:"letter",
                insertFnc:"insertSymbol('capitalE');",
                symbol:"E"
            },

            capitalF:{
                type:"letter",
                insertFnc:"insertSymbol('capitalF');",
                symbol:"F"
            },

            capitalG:{
                type:"letter",
                insertFnc:"insertSymbol('capitalG');",
                symbol:"G"
            },

            capitalH:{
                type:"letter",
                insertFnc:"insertSymbol('capitalH');",
                symbol:"H"
            },

            capitalI:{
                type:"letter",
                insertFnc:"insertSymbol('capitalI');",
                symbol:"I"
            },

            capitalJ:{
                type:"letter",
                insertFnc:"insertSymbol('capitalJ');",
                symbol:"J"
            },

            capitalK:{
                type:"letter",
                insertFnc:"insertSymbol('capitalK');",
                symbol:"K"
            },

            capitalL:{
                type:"letter",
                insertFnc:"insertSymbol('capitalL');",
                symbol:"L"
            },

            capitalM:{
                type:"letter",
                insertFnc:"insertSymbol('capitalM');",
                symbol:"M"
            },

            capitalN:{
                type:"letter",
                insertFnc:"insertSymbol('capitalN');",
                symbol:"N"
            },

            capitalO:{
                type:"letter",
                insertFnc:"insertSymbol('capitalO');",
                symbol:"O"
            },

            capitalP:{
                type:"letter",
                insertFnc:"insertSymbol('capitalP');",
                symbol:"P"
            },

            capitalQ:{
                type:"letter",
                insertFnc:"insertSymbol('capitalQ');",
                symbol:"Q"
            },

            capitalR:{
                type:"letter",
                insertFnc:"insertSymbol('capitalR');",
                symbol:"R"
            },

            capitalS:{
                type:"letter",
                insertFnc:"insertSymbol('capitalS');",
                symbol:"S"
            },

            capitalT:{
                type:"letter",
                insertFnc:"insertSymbol('capitalT');",
                symbol:"T"
            },

            capitalU:{
                type:"letter",
                insertFnc:"insertSymbol('capitalU');",
                symbol:"U"
            },

            capitalV:{
                type:"letter",
                insertFnc:"insertSymbol('capitalV');",
                symbol:"V"
            },

            capitalW:{
                type:"letter",
                insertFnc:"insertSymbol('capitalW');",
                symbol:"W"
            },

            capitalX:{
                type:"letter",
                insertFnc:"insertSymbol('capitalX');",
                symbol:"X"
            },

            capitalY:{
                type:"letter",
                insertFnc:"insertSymbol('capitalY');",
                symbol:"Y"
            },

            capitalZ:{
                type:"letter",
                insertFnc:"insertSymbol('capitalZ');",
                symbol:"Z"
            },

            smallA:{
                type:"letter",
                insertFnc:"insertSymbol('smallA');",
                symbol:"a"
            },

            smallB:{
                type:"letter",
                insertFnc:"insertSymbol('smallB');",
                symbol:"b"
            },

            smallC:{
                type:"letter",
                insertFnc:"insertSymbol('smallC');",
                symbol:"c"
            },

            smallD:{
                type:"letter",
                insertFnc:"insertSymbol('smallD');",
                symbol:"d"
            },

            smallE:{
                type:"letter",
                insertFnc:"insertSymbol('smallE');",
                symbol:"e"
            },

            smallF:{
                type:"letter",
                insertFnc:"insertSymbol('smallF');",
                symbol:"f"
            },

            smallG:{
                type:"letter",
                insertFnc:"insertSymbol('smallG');",
                symbol:"g"
            },

            smallH:{
                type:"letter",
                insertFnc:"insertSymbol('smallH');",
                symbol:"h"
            },

            smallI:{
                type:"letter",
                insertFnc:"insertSymbol('smallI');",
                symbol:"i"
            },

            smallJ:{
                type:"letter",
                insertFnc:"insertSymbol('smallJ');",
                symbol:"j"
            },

            smallK:{
                type:"letter",
                insertFnc:"insertSymbol('smallK');",
                symbol:"k"
            },

            smallL:{
                type:"letter",
                insertFnc:"insertSymbol('smallL');",
                symbol:"l"
            },

            smallM:{
                type:"letter",
                insertFnc:"insertSymbol('smallM');",
                symbol:"m"
            },

            smallN:{
                type:"letter",
                insertFnc:"insertSymbol('smallN');",
                symbol:"n"
            },

            smallO:{
                type:"letter",
                insertFnc:"insertSymbol('smallO');",
                symbol:"o"
            },

            smallP:{
                type:"letter",
                insertFnc:"insertSymbol('smallP');",
                symbol:"p"
            },

            smallQ:{
                type:"letter",
                insertFnc:"insertSymbol('smallQ');",
                symbol:"q"
            },

            smallR:{
                type:"letter",
                insertFnc:"insertSymbol('smallR');",
                symbol:"r"
            },

            smallS:{
                type:"letter",
                insertFnc:"insertSymbol('smallS');",
                symbol:"s"
            },

            smallT:{
                type:"letter",
                insertFnc:"insertSymbol('smallT');",
                symbol:"t"
            },

            smallU:{
                type:"letter",
                insertFnc:"insertSymbol('smallU');",
                symbol:"u"
            },

            smallV:{
                type:"letter",
                insertFnc:"insertSymbol('smallV');",
                symbol:"v"
            },

            smallW:{
                type:"letter",
                insertFnc:"insertSymbol('smallW');",
                symbol:"w"
            },

            smallX:{
                type:"letter",
                insertFnc:"insertSymbol('smallX');",
                symbol:"x"
            },

            smallY:{
                type:"letter",
                insertFnc:"insertSymbol('smallY');",
                symbol:"y"
            },

            smallZ:{
                type:"letter",
                insertFnc:"insertSymbol('smallZ');",
                symbol:"z"
            },

            small:{
                type:"",
                insertFnc:"",
                symbol:"small"
            },

            caps:{
                type:"",
                insertFnc:"",
                symbol:"caps"
            },

            none:{
                type:"",
                insertFnc:"",
                symbol:""
            },

            // enter:{
            //  type:"",
            //  insertFnc:"_insertBR();",
            //  symbol:""
            // },

            arrowLeft:{
                type:"",
                insertFnc:"",
                symbol:"←"
            },

            arrowUp:{
                type:"",
                insertFnc:"",
                symbol:"↑"
            },

            arrowRight:{
                type:"",
                insertFnc:"",
                symbol:"→"
            },

            arrowDown:{
                type:"",
                insertFnc:"",
                symbol:"↓"
            },

            del:{
                type:"",
                insertFnc:"",
                symbol:"del"
            },

            backspace:{
                type:"",
                insertFnc:"",
                symbol:"⇤"
            }

        },

        symbolsHash:{}, // initialized later

        keyboardPresets:{
             "fullMathField":{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Basic',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'seven'
                                                },
                                                {
                                                    name:'eight'
                                                },
                                                {
                                                    name:'nine'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'four'
                                                },
                                                {
                                                    name:'five'
                                                },
                                                {
                                                    name:'six'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'one'
                                                },
                                                {
                                                    name:'two'
                                                },
                                                {
                                                    name:'three'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'zero'
                                                },
                                                {
                                                    name:'point'
                                                },
                                                {
                                                    name:'comma'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'plus'
                                                },
                                                {
                                                    name:'minus'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'multiplicationDot'
                                                },
                                                {
                                                    name:'multiplicationX'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'division'
                                                },
                                                {
                                                    name:'ratio'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'equal',
                                                    keyWidth:2
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'power'
                                                },
                                                {
                                                    name:'longDivision'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'fraction'
                                                },
                                                {
                                                    name:'minusSign'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'percent'
                                                },
                                                {
                                                    name:'absolute'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'remainder'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smaller'
                                                },
                                                {
                                                    name:'bigger'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallerEqual'
                                                },
                                                {
                                                    name:'biggerEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'approximately'
                                                },
                                                {
                                                    name:'notEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'congruence'
                                                },
                                                {
                                                    name:'similarity'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'leftParenthesis'
                                                },
                                                {
                                                    name:'rightParenthesis'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'leftSquareBracket'
                                                },
                                                {
                                                    name:'rightSquareBracket'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'celsius'
                                                },
                                                {
                                                    name:'fahrenheit'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'dollar'
                                                },
                                                {
                                                    name:'cent'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'triangleShape'
                                                },
                                                {
                                                    name:'questionMark'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'squareShape'
                                                },
                                                {
                                                    name:'doodleShape'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ellipseShape'
                                                },
                                                {
                                                    name:'circleShape'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'underscore'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines: [
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'backspace',
                                                    keyWidth: 2
                                                },
                                                {
                                                    name: 'del'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowUp'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowLeft'
                                                },
                                                {
                                                    name: 'arrowDown'
                                                },
                                                {
                                                    name: 'arrowRight'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'Geometry',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'angle'
                                                },
                                                {
                                                    name:'triangle'
                                                },
                                                {
                                                    name:'pi'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'parallel'
                                                },
                                                {
                                                    name:'orthogonal'
                                                },
                                                {
                                                    name:'degree'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'segment'
                                                },
                                                {
                                                    name:'rayRight'
                                                },
                                                {
                                                    name:'rayBoth'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines: [
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'backspace',
                                                    keyWidth: 2
                                                },
                                                {
                                                    name: 'del'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowUp'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowLeft'
                                                },
                                                {
                                                    name: 'arrowDown'
                                                },
                                                {
                                                    name: 'arrowRight'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'abc',                            
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smallA'
                                                },
                                                {
                                                    name:'smallB'
                                                },
                                                {
                                                    name:'smallC'
                                                },
                                                {
                                                    name:'smallD'
                                                },
                                                {
                                                    name:'smallE'
                                                },
                                                {
                                                    name:'smallF'
                                                },
                                                {
                                                    name:'smallG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallH'
                                                },
                                                {
                                                    name:'smallI'
                                                },
                                                {
                                                    name:'smallJ'
                                                },
                                                {
                                                    name:'smallK'
                                                },
                                                {
                                                    name:'smallL'
                                                },
                                                {
                                                    name:'smallM'
                                                },
                                                {
                                                    name:'smallN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallO'
                                                },
                                                {
                                                    name:'smallP'
                                                },
                                                {
                                                    name:'smallQ'
                                                },
                                                {
                                                    name:'smallR'
                                                },
                                                {
                                                    name:'smallS'
                                                },
                                                {
                                                    name:'smallT'
                                                },
                                                {
                                                    name:'smallU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallV'
                                                },
                                                {
                                                    name:'smallW'
                                                },
                                                {
                                                    name:'smallX'
                                                },
                                                {
                                                    name:'smallY'
                                                },
                                                {
                                                    name:'smallZ'
                                                },
                                                {
                                                    name:'caps',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['abc']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines: [
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'backspace',
                                                    keyWidth: 2
                                                },
                                                {
                                                    name: 'del'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowUp'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowLeft'
                                                },
                                                {
                                                    name: 'arrowDown'
                                                },
                                                {
                                                    name: 'arrowRight'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'ABC',
                            classes:'hidden',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'capitalA'
                                                },
                                                {
                                                    name:'capitalB'
                                                },
                                                {
                                                    name:'capitalC'
                                                },
                                                {
                                                    name:'capitalD'
                                                },
                                                {
                                                    name:'capitalE'
                                                },
                                                {
                                                    name:'capitalF'
                                                },
                                                {
                                                    name:'capitalG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalH'
                                                },
                                                {
                                                    name:'capitalI'
                                                },
                                                {
                                                    name:'capitalJ'
                                                },
                                                {
                                                    name:'capitalK'
                                                },
                                                {
                                                    name:'capitalL'
                                                },
                                                {
                                                    name:'capitalM'
                                                },
                                                {
                                                    name:'capitalN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalO'
                                                },
                                                {
                                                    name:'capitalP'
                                                },
                                                {
                                                    name:'capitalQ'
                                                },
                                                {
                                                    name:'capitalR'
                                                },
                                                {
                                                    name:'capitalS'
                                                },
                                                {
                                                    name:'capitalT'
                                                },
                                                {
                                                    name:'capitalU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalV'
                                                },
                                                {
                                                    name:'capitalW'
                                                },
                                                {
                                                    name:'capitalX'
                                                },
                                                {
                                                    name:'capitalY'
                                                },
                                                {
                                                    name:'capitalZ'
                                                },
                                                {
                                                    name:'small',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['ABC']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines: [
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'backspace',
                                                    keyWidth: 2
                                                },
                                                {
                                                    name: 'del'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowUp'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowLeft'
                                                },
                                                {
                                                    name: 'arrowDown'
                                                },
                                                {
                                                    name: 'arrowRight'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },                        
                        {
                            name:'Qwerty',
	                        tabletOnly : true,
                            boxes:[
                                {
                                    lines:[
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'capitalQ'
                                                },
                                                {
                                                    name:'capitalW'
                                                },
                                                {
                                                    name:'capitalE'
                                                },
                                                {
                                                    name:'capitalR'
                                                },
                                                {
                                                    name:'capitalT'
                                                },
                                                {
                                                    name:'capitalY'
                                                },
                                                {
                                                    name:'capitalU'
                                                },
                                                {
                                                    name:'capitalI'
                                                },
                                                {
                                                    name:'capitalO'
                                                },
                                                {
                                                    name:'capitalP'
                                                }
                                            ]
                                        },
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'capitalA'
                                                },
                                                {
                                                    name:'capitalS'
                                                },
                                                {
                                                    name:'capitalD'
                                                },
                                                {
                                                    name:'capitalF'
                                                },
                                                {
                                                    name:'capitalG'
                                                },
                                                {
                                                    name:'capitalH'
                                                },
                                                {
                                                    name:'capitalJ'
                                                },
                                                {
                                                    name:'capitalK'
                                                },
                                                {
                                                    name:'capitalL'
                                                }
                                            ]
                                        },
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'capitalZ'
                                                },
                                                {
                                                    name:'capitalX'
                                                },
                                                {
                                                    name:'capitalC'
                                                },
                                                {
                                                    name:'capitalV'
                                                },
                                                {
                                                    name:'capitalB'
                                                },
                                                {
                                                    name:'capitalN'
                                                },
                                                {
                                                    name:'capitalM'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines: [
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'backspace',
                                                    keyWidth: 2
                                                },
                                                {
                                                    name: 'del'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowUp'
                                                }
                                            ]
                                        },
                                        {
                                            align: 'center',
                                            keys: [
                                                {
                                                    name: 'arrowLeft'
                                                },
                                                {
                                                    name: 'arrowDown'
                                                },
                                                {
                                                    name: 'arrowRight'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    plus:{
                        charCodes:[43]
                    },
                    minus:{
                        charCodes:[45]
                    },
                    division:{
                        charCodes:[58]
                    },
                    multiplication:{
                        charCodes:[42]
                    },
                    equal:{
                        charCodes:[61]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    },
                    percent:{
                        charCodes:[37]
                    },
                    leftParenthesis:{
                        charCodes:[40]
                    },
                    rightParenthesis:{
                        charCodes:[41]
                    },
                    leftSquareBracket:{
                        charCodes:[91]
                    },
                    rightSquareBracket:{
                        charCodes:[93]
                    },
                    smaller:{
                        charCodes:[60]
                    },
                    bigger:{
                        charCodes:[62]
                    },
                    questionMark:{
                        charCodes:[63]
                    },
                    underscore:{
                        charCodes:[95]
                    },
                    dollar:{
                        charCodes:[36]
                    },

                    capitalA:{
                        charCodes:[65]
                    },
                    capitalB:{
                        charCodes:[66]
                    },
                    capitalC:{
                        charCodes:[67]
                    },
                    capitalD:{
                        charCodes:[68]
                    },
                    capitalE:{
                        charCodes:[69]
                    },
                    capitalF:{
                        charCodes:[70]
                    },
                    capitalG:{
                        charCodes:[71]
                    },
                    capitalH:{
                        charCodes:[72]
                    },
                    capitalI:{
                        charCodes:[73]
                    },
                    capitalJ:{
                        charCodes:[74]
                    },
                    capitalK:{
                        charCodes:[75]
                    },
                    capitalL:{
                        charCodes:[76]
                    },
                    capitalM:{
                        charCodes:[77]
                    },
                    capitalN:{
                        charCodes:[78]
                    },
                    capitalO:{
                        charCodes:[79]
                    },
                    capitalP:{
                        charCodes:[80]
                    },
                    capitalQ:{
                        charCodes:[81]
                    },
                    capitalR:{
                        charCodes:[82]
                    },
                    capitalS:{
                        charCodes:[83]
                    },
                    capitalT:{
                        charCodes:[84]
                    },
                    capitalU:{
                        charCodes:[85]
                    },
                    capitalV:{
                        charCodes:[86]
                    },
                    capitalW:{
                        charCodes:[87]
                    },
                    capitalX:{
                        charCodes:[88]
                    },
                    capitalY:{
                        charCodes:[89]
                    },
                    capitalZ:{
                        charCodes:[90]
                    },
                    smallA:{
                        charCodes:[97]
                    },
                    smallB:{
                        charCodes:[98]
                    },
                    smallC:{
                        charCodes:[99]
                    },
                    smallD:{
                        charCodes:[100]
                    },
                    smallE:{
                        charCodes:[101]
                    },
                    smallF:{
                        charCodes:[102]
                    },
                    smallG:{
                        charCodes:[103]
                    },
                    smallH:{
                        charCodes:[104]
                    },
                    smallI:{
                        charCodes:[105]
                    },
                    smallJ:{
                        charCodes:[106]
                    },
                    smallK:{
                        charCodes:[107]
                    },
                    smallL:{
                        charCodes:[108]
                    },
                    smallM:{
                        charCodes:[109]
                    },
                    smallN:{
                        charCodes:[110]
                    },
                    smallO:{
                        charCodes:[111]
                    },
                    smallP:{
                        charCodes:[112]
                    },
                    smallQ:{
                        charCodes:[113]
                    },
                    smallR:{
                        charCodes:[114]
                    },
                    smallS:{
                        charCodes:[115]
                    },
                    smallT:{
                        charCodes:[116]
                    },
                    smallU:{
                        charCodes:[117]
                    },
                    smallV:{
                        charCodes:[118]
                    },
                    smallW:{
                        charCodes:[119]
                    },
                    smallX:{
                        charCodes:[120]
                    },
                    smallY:{
                        charCodes:[121]
                    },
                    smallZ:{
                        charCodes:[122]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    }


                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
                    comma:{
                      charCodes:[188],
	                  key_fr:'point'
                    },
	                space:{
		              charCodes:[32],
		              key_fr:'comma',
		              locales: ['fr']
	                },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            },

            "contentEditorMathField":{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Basic',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'plus'
                                                },
                                                {
                                                    name:'minus'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'multiplicationDot'
                                                },
                                                {
                                                    name:'multiplicationX'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ratio'
                                                },
                                                {
                                                    name:'division'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'equal',
                                                    keyWidth:2
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'power'
                                                },
                                                {
                                                    name:'longDivision'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'fraction'
                                                },
                                                {
                                                    name:'minusSign'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'percent'
                                                },
                                                {
                                                    name:'absolute'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'remainder'
                                                },
	                                            {
		                                            name:'point'
	                                            }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smaller'
                                                },
                                                {
                                                    name:'bigger'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallerEqual'
                                                },
                                                {
                                                    name:'biggerEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'approximately'
                                                },
                                                {
                                                    name:'notEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[

                                                {
                                                    name:'congruence'
                                                },
                                                {
                                                    name:'similarity'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'leftParenthesis'
                                                },
                                                {
                                                    name:'rightParenthesis'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'leftSquareBracket'
                                                },
                                                {
                                                    name:'rightSquareBracket'
                                                }
                                            ]
                                        },
	                                    {
		                                    keys:[
			                                    {
				                                    name:'comma'
			                                    }
		                                    ]
	                                    }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'Signs',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'celsius'
                                                },
                                                {
                                                    name:'fahrenheit'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'dollar'
                                                },
                                                {
                                                    name:'cent'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'degree'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'triangleShape'
                                                },
                                                {
                                                    name:'questionMark'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'squareShape'
                                                },
                                                {
                                                    name:'doodleShape'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ellipseShape'
                                                },
                                                {
                                                    name:'circleShape'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'underscore'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'orthogonal'
                                                },
                                                {
                                                    name:'parallel'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'angle'
                                                },
                                                {
                                                    name:'triangle'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'pi'
                                                },
                                                {
                                                    name:'segment'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'rayRight'
                                                },
                                                {
                                                    name:'rayBoth'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'abc',                            
                            boxes:[
                                {
                                    lines:[
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'smallQ'
                                                },
                                                {
                                                    name:'smallW'
                                                },
                                                {
                                                    name:'smallE'
                                                },
                                                {
                                                    name:'smallR'
                                                },
                                                {
                                                    name:'smallT'
                                                },
                                                {
                                                    name:'smallY'
                                                },
                                                {
                                                    name:'smallU'
                                                },
                                                {
                                                    name:'smallI'
                                                },
                                                {
                                                    name:'smallO'
                                                },
                                                {
                                                    name:'smallP'
                                                }
                                            ]
                                        },
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'smallA'
                                                },
                                                {
                                                    name:'smallS'
                                                },
                                                {
                                                    name:'smallD'
                                                },
                                                {
                                                    name:'smallF'
                                                },
                                                {
                                                    name:'smallG'
                                                },
                                                {
                                                    name:'smallH'
                                                },
                                                {
                                                    name:'smallJ'
                                                },
                                                {
                                                    name:'smallK'
                                                },
                                                {
                                                    name:'smallL'
                                                }
                                            ]
                                        },
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'smallZ'
                                                },
                                                {
                                                    name:'smallX'
                                                },
                                                {
                                                    name:'smallC'
                                                },
                                                {
                                                    name:'smallV'
                                                },
                                                {
                                                    name:'smallB'
                                                },
                                                {
                                                    name:'smallN'
                                                },
                                                {
                                                    name:'smallM'
                                                },
                                                {
                                                    name:'caps',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['abc']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'ABC',
                            classes:'hidden',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'capitalQ'
                                                },
                                                {
                                                    name:'capitalW'
                                                },
                                                {
                                                    name:'capitalE'
                                                },
                                                {
                                                    name:'capitalR'
                                                },
                                                {
                                                    name:'capitalT'
                                                },
                                                {
                                                    name:'capitalY'
                                                },
                                                {
                                                    name:'capitalU'
                                                },
                                                {
                                                    name:'capitalI'
                                                },
                                                {
                                                    name:'capitalO'
                                                },
                                                {
                                                    name:'capitalP'
                                                }
                                            ]
                                        },
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'capitalA'
                                                },
                                                {
                                                    name:'capitalS'
                                                },
                                                {
                                                    name:'capitalD'
                                                },
                                                {
                                                    name:'capitalF'
                                                },
                                                {
                                                    name:'capitalG'
                                                },
                                                {
                                                    name:'capitalH'
                                                },
                                                {
                                                    name:'capitalJ'
                                                },
                                                {
                                                    name:'capitalK'
                                                },
                                                {
                                                    name:'capitalL'
                                                }
                                            ]
                                        },
                                        {
                                            align:'center',
                                            keys:[
                                                {
                                                    name:'capitalZ'
                                                },
                                                {
                                                    name:'capitalX'
                                                },
                                                {
                                                    name:'capitalC'
                                                },
                                                {
                                                    name:'capitalV'
                                                },
                                                {
                                                    name:'capitalB'
                                                },
                                                {
                                                    name:'capitalN'
                                                },
                                                {
                                                    name:'capitalM'
                                                },
                                                {
                                                    name:'small',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['ABC']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    plus:{
                        charCodes:[43]
                    },
                    minus:{
                        charCodes:[45]
                    },
                    division:{
                        charCodes:[58]
                    },
                    multiplication:{
                        charCodes:[42]
                    },
                    equal:{
                        charCodes:[61]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    },
                    percent:{
                        charCodes:[37]
                    },
                    leftParenthesis:{
                        charCodes:[40]
                    },
                    rightParenthesis:{
                        charCodes:[41]
                    },
                    leftSquareBracket:{
                        charCodes:[91]
                    },
                    rightSquareBracket:{
                        charCodes:[93]
                    },
                    smaller:{
                        charCodes:[60]
                    },
                    bigger:{
                        charCodes:[62]
                    },
                    questionMark:{
                        charCodes:[63]
                    },
                    underscore:{
                        charCodes:[95]
                    },
                    dollar:{
                        charCodes:[36]
                    },

                    capitalA:{
                        charCodes:[65]
                    },
                    capitalB:{
                        charCodes:[66]
                    },
                    capitalC:{
                        charCodes:[67]
                    },
                    capitalD:{
                        charCodes:[68]
                    },
                    capitalE:{
                        charCodes:[69]
                    },
                    capitalF:{
                        charCodes:[70]
                    },
                    capitalG:{
                        charCodes:[71]
                    },
                    capitalH:{
                        charCodes:[72]
                    },
                    capitalI:{
                        charCodes:[73]
                    },
                    capitalJ:{
                        charCodes:[74]
                    },
                    capitalK:{
                        charCodes:[75]
                    },
                    capitalL:{
                        charCodes:[76]
                    },
                    capitalM:{
                        charCodes:[77]
                    },
                    capitalN:{
                        charCodes:[78]
                    },
                    capitalO:{
                        charCodes:[79]
                    },
                    capitalP:{
                        charCodes:[80]
                    },
                    capitalQ:{
                        charCodes:[81]
                    },
                    capitalR:{
                        charCodes:[82]
                    },
                    capitalS:{
                        charCodes:[83]
                    },
                    capitalT:{
                        charCodes:[84]
                    },
                    capitalU:{
                        charCodes:[85]
                    },
                    capitalV:{
                        charCodes:[86]
                    },
                    capitalW:{
                        charCodes:[87]
                    },
                    capitalX:{
                        charCodes:[88]
                    },
                    capitalY:{
                        charCodes:[89]
                    },
                    capitalZ:{
                        charCodes:[90]
                    },
                    smallA:{
                        charCodes:[97]
                    },
                    smallB:{
                        charCodes:[98]
                    },
                    smallC:{
                        charCodes:[99]
                    },
                    smallD:{
                        charCodes:[100]
                    },
                    smallE:{
                        charCodes:[101]
                    },
                    smallF:{
                        charCodes:[102]
                    },
                    smallG:{
                        charCodes:[103]
                    },
                    smallH:{
                        charCodes:[104]
                    },
                    smallI:{
                        charCodes:[105]
                    },
                    smallJ:{
                        charCodes:[106]
                    },
                    smallK:{
                        charCodes:[107]
                    },
                    smallL:{
                        charCodes:[108]
                    },
                    smallM:{
                        charCodes:[109]
                    },
                    smallN:{
                        charCodes:[110]
                    },
                    smallO:{
                        charCodes:[111]
                    },
                    smallP:{
                        charCodes:[112]
                    },
                    smallQ:{
                        charCodes:[113]
                    },
                    smallR:{
                        charCodes:[114]
                    },
                    smallS:{
                        charCodes:[115]
                    },
                    smallT:{
                        charCodes:[116]
                    },
                    smallU:{
                        charCodes:[117]
                    },
                    smallV:{
                        charCodes:[118]
                    },
                    smallW:{
                        charCodes:[119]
                    },
                    smallX:{
                        charCodes:[120]
                    },
                    smallY:{
                        charCodes:[121]
                    },
                    smallZ:{
                        charCodes:[122]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    }


                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
	                comma:{
		                charCodes:[188],
		                key_fr:'point'
	                },
	                space:{
		                charCodes:[32],
		                key_fr:'comma',
		                locales: ['fr']
	                },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            },
            
            "basicMidSchool":{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Basic',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'seven'
                                                },
                                                {
                                                    name:'eight'
                                                },
                                                {
                                                    name:'nine'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'four'
                                                },
                                                {
                                                    name:'five'
                                                },
                                                {
                                                    name:'six'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'one'
                                                },
                                                {
                                                    name:'two'
                                                },
                                                {
                                                    name:'three'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'zero'
                                                },
                                                {
                                                    name:'point'
                                                },
                                                {
                                                    name:'minusSign'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'plus'
                                                },
                                                {
                                                    name:'minus'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'multiplicationDot'
                                                },
                                                {
                                                    name:'division'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'equal',
                                                    keyWidth:2
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'fraction'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'power'

                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'absolute'
                                                }
                                            ]
                                        }

                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smaller'
                                                },
                                                {
                                                    name:'bigger'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallerEqual'
                                                },
                                                {
                                                    name:'biggerEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'approximately'
                                                },
                                                {
                                                    name:'notEqual'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'leftParenthesis'
                                                },
                                                {
                                                    name:'rightParenthesis'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'leftSquareBracket'
                                                },
                                                {
                                                    name:'rightSquareBracket'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'none',
                                                    keyWidth:2
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ratio'
                                                },
                                                {
                                                    name:'percent'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    plus:{
                        charCodes:[43]
                    },
                    minus:{
                        charCodes:[45]
                    },
                    division:{
                        charCodes:[58]
                    },
                    multiplication:{
                        charCodes:[42]
                    },
                    equal:{
                        charCodes:[61]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
	                },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    },
                    percent:{
                        charCodes:[37]
                    },
                    leftParenthesis:{
                        charCodes:[40]
                    },
                    rightParenthesis:{
                        charCodes:[41]
                    },
                    leftSquareBracket:{
                        charCodes:[91]
                    },
                    rightSquareBracket:{
                        charCodes:[93]
                    },
                    smaller:{
                        charCodes:[60]
                    },
                    bigger:{
                        charCodes:[62]
                    },
                    questionMark:{
                        charCodes:[63]
                    },
                    underscore:{
                        charCodes:[95]
                    },
                    dollar:{
                        charCodes:[36]
                    },

                    capitalA:{
                        charCodes:[65]
                    },
                    capitalB:{
                        charCodes:[66]
                    },
                    capitalC:{
                        charCodes:[67]
                    },
                    capitalD:{
                        charCodes:[68]
                    },
                    capitalE:{
                        charCodes:[69]
                    },
                    capitalF:{
                        charCodes:[70]
                    },
                    capitalG:{
                        charCodes:[71]
                    },
                    capitalH:{
                        charCodes:[72]
                    },
                    capitalI:{
                        charCodes:[73]
                    },
                    capitalJ:{
                        charCodes:[74]
                    },
                    capitalK:{
                        charCodes:[75]
                    },
                    capitalL:{
                        charCodes:[76]
                    },
                    capitalM:{
                        charCodes:[77]
                    },
                    capitalN:{
                        charCodes:[78]
                    },
                    capitalO:{
                        charCodes:[79]
                    },
                    capitalP:{
                        charCodes:[80]
                    },
                    capitalQ:{
                        charCodes:[81]
                    },
                    capitalR:{
                        charCodes:[82]
                    },
                    capitalS:{
                        charCodes:[83]
                    },
                    capitalT:{
                        charCodes:[84]
                    },
                    capitalU:{
                        charCodes:[85]
                    },
                    capitalV:{
                        charCodes:[86]
                    },
                    capitalW:{
                        charCodes:[87]
                    },
                    capitalX:{
                        charCodes:[88]
                    },
                    capitalY:{
                        charCodes:[89]
                    },
                    capitalZ:{
                        charCodes:[90]
                    },
                    smallA:{
                        charCodes:[97]
                    },
                    smallB:{
                        charCodes:[98]
                    },
                    smallC:{
                        charCodes:[99]
                    },
                    smallD:{
                        charCodes:[100]
                    },
                    smallE:{
                        charCodes:[101]
                    },
                    smallF:{
                        charCodes:[102]
                    },
                    smallG:{
                        charCodes:[103]
                    },
                    smallH:{
                        charCodes:[104]
                    },
                    smallI:{
                        charCodes:[105]
                    },
                    smallJ:{
                        charCodes:[106]
                    },
                    smallK:{
                        charCodes:[107]
                    },
                    smallL:{
                        charCodes:[108]
                    },
                    smallM:{
                        charCodes:[109]
                    },
                    smallN:{
                        charCodes:[110]
                    },
                    smallO:{
                        charCodes:[111]
                    },
                    smallP:{
                        charCodes:[112]
                    },
                    smallQ:{
                        charCodes:[113]
                    },
                    smallR:{
                        charCodes:[114]
                    },
                    smallS:{
                        charCodes:[115]
                    },
                    smallT:{
                        charCodes:[116]
                    },
                    smallU:{
                        charCodes:[117]
                    },
                    smallV:{
                        charCodes:[118]
                    },
                    smallW:{
                        charCodes:[119]
                    },
                    smallX:{
                        charCodes:[120]
                    },
                    smallY:{
                        charCodes:[121]
                    },
                    smallZ:{
                        charCodes:[122]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    }


                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
                    // enter:{
                    //  charCodes:[13]
                    // },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            },
            "algebraicMidSchool":{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Algebraic',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'seven'
                                                },
                                                {
                                                    name:'eight'
                                                },
                                                {
                                                    name:'nine'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'four'
                                                },
                                                {
                                                    name:'five'
                                                },
                                                {
                                                    name:'six'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'one'
                                                },
                                                {
                                                    name:'two'
                                                },
                                                {
                                                    name:'three'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'zero'
                                                },
                                                {
                                                    name:'point'
                                                },
                                                {
                                                    name:'minusSign'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'plus'
                                                },
                                                {
                                                    name:'minus'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'multiplicationDot'
                                                },
                                                {
                                                    name:'division'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'equal',
                                                    keyWidth:2
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'fraction'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'power'

                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'absolute'
                                                }
                                            ]
                                        }

                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smaller'
                                                },
                                                {
                                                    name:'bigger'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallerEqual'
                                                },
                                                {
                                                    name:'biggerEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'approximately'
                                                },
                                                {
                                                    name:'notEqual'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'leftParenthesis'
                                                },
                                                {
                                                    name:'rightParenthesis'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'leftSquareBracket'
                                                },
                                                {
                                                    name:'rightSquareBracket'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'none',
                                                    keyWidth:2
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ratio'
                                                },
                                                {
                                                    name:'percent'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'squareShape'
                                                },
                                                {
                                                    name:'doodleShape'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ellipseShape'
                                                },
                                                {
                                                    name:'circleShape'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'triangleShape'
                                                },
                                                {
                                                    name:'questionMark'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'underscore'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'ABC',
                            classes:'hidden',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'capitalA'
                                                },
                                                {
                                                    name:'capitalB'
                                                },
                                                {
                                                    name:'capitalC'
                                                },
                                                {
                                                    name:'capitalD'
                                                },
                                                {
                                                    name:'capitalE'
                                                },
                                                {
                                                    name:'capitalF'
                                                },
                                                {
                                                    name:'capitalG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalH'
                                                },
                                                {
                                                    name:'capitalI'
                                                },
                                                {
                                                    name:'capitalJ'
                                                },
                                                {
                                                    name:'capitalK'
                                                },
                                                {
                                                    name:'capitalL'
                                                },
                                                {
                                                    name:'capitalM'
                                                },
                                                {
                                                    name:'capitalN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalO'
                                                },
                                                {
                                                    name:'capitalP'
                                                },
                                                {
                                                    name:'capitalQ'
                                                },
                                                {
                                                    name:'capitalR'
                                                },
                                                {
                                                    name:'capitalS'
                                                },
                                                {
                                                    name:'capitalT'
                                                },
                                                {
                                                    name:'capitalU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalV'
                                                },
                                                {
                                                    name:'capitalW'
                                                },
                                                {
                                                    name:'capitalX'
                                                },
                                                {
                                                    name:'capitalY'
                                                },
                                                {
                                                    name:'capitalZ'
                                                },
                                                {
                                                    name:'small',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['ABC']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'abc',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smallA'
                                                },
                                                {
                                                    name:'smallB'
                                                },
                                                {
                                                    name:'smallC'
                                                },
                                                {
                                                    name:'smallD'
                                                },
                                                {
                                                    name:'smallE'
                                                },
                                                {
                                                    name:'smallF'
                                                },
                                                {
                                                    name:'smallG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallH'
                                                },
                                                {
                                                    name:'smallI'
                                                },
                                                {
                                                    name:'smallJ'
                                                },
                                                {
                                                    name:'smallK'
                                                },
                                                {
                                                    name:'smallL'
                                                },
                                                {
                                                    name:'smallM'
                                                },
                                                {
                                                    name:'smallN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallO'
                                                },
                                                {
                                                    name:'smallP'
                                                },
                                                {
                                                    name:'smallQ'
                                                },
                                                {
                                                    name:'smallR'
                                                },
                                                {
                                                    name:'smallS'
                                                },
                                                {
                                                    name:'smallT'
                                                },
                                                {
                                                    name:'smallU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallV'
                                                },
                                                {
                                                    name:'smallW'
                                                },
                                                {
                                                    name:'smallX'
                                                },
                                                {
                                                    name:'smallY'
                                                },
                                                {
                                                    name:'smallZ'
                                                },
                                                {
                                                    name:'caps',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['abc']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    plus:{
                        charCodes:[43]
                    },
                    minus:{
                        charCodes:[45]
                    },
                    division:{
                        charCodes:[58]
                    },
                    multiplication:{
                        charCodes:[42]
                    },
                    equal:{
                        charCodes:[61]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    },
                    percent:{
                        charCodes:[37]
                    },
                    leftParenthesis:{
                        charCodes:[40]
                    },
                    rightParenthesis:{
                        charCodes:[41]
                    },
                    leftSquareBracket:{
                        charCodes:[91]
                    },
                    rightSquareBracket:{
                        charCodes:[93]
                    },
                    smaller:{
                        charCodes:[60]
                    },
                    bigger:{
                        charCodes:[62]
                    },
                    questionMark:{
                        charCodes:[63]
                    },
                    underscore:{
                        charCodes:[95]
                    },
                    dollar:{
                        charCodes:[36]
                    },

                    capitalA:{
                        charCodes:[65]
                    },
                    capitalB:{
                        charCodes:[66]
                    },
                    capitalC:{
                        charCodes:[67]
                    },
                    capitalD:{
                        charCodes:[68]
                    },
                    capitalE:{
                        charCodes:[69]
                    },
                    capitalF:{
                        charCodes:[70]
                    },
                    capitalG:{
                        charCodes:[71]
                    },
                    capitalH:{
                        charCodes:[72]
                    },
                    capitalI:{
                        charCodes:[73]
                    },
                    capitalJ:{
                        charCodes:[74]
                    },
                    capitalK:{
                        charCodes:[75]
                    },
                    capitalL:{
                        charCodes:[76]
                    },
                    capitalM:{
                        charCodes:[77]
                    },
                    capitalN:{
                        charCodes:[78]
                    },
                    capitalO:{
                        charCodes:[79]
                    },
                    capitalP:{
                        charCodes:[80]
                    },
                    capitalQ:{
                        charCodes:[81]
                    },
                    capitalR:{
                        charCodes:[82]
                    },
                    capitalS:{
                        charCodes:[83]
                    },
                    capitalT:{
                        charCodes:[84]
                    },
                    capitalU:{
                        charCodes:[85]
                    },
                    capitalV:{
                        charCodes:[86]
                    },
                    capitalW:{
                        charCodes:[87]
                    },
                    capitalX:{
                        charCodes:[88]
                    },
                    capitalY:{
                        charCodes:[89]
                    },
                    capitalZ:{
                        charCodes:[90]
                    },
                    smallA:{
                        charCodes:[97]
                    },
                    smallB:{
                        charCodes:[98]
                    },
                    smallC:{
                        charCodes:[99]
                    },
                    smallD:{
                        charCodes:[100]
                    },
                    smallE:{
                        charCodes:[101]
                    },
                    smallF:{
                        charCodes:[102]
                    },
                    smallG:{
                        charCodes:[103]
                    },
                    smallH:{
                        charCodes:[104]
                    },
                    smallI:{
                        charCodes:[105]
                    },
                    smallJ:{
                        charCodes:[106]
                    },
                    smallK:{
                        charCodes:[107]
                    },
                    smallL:{
                        charCodes:[108]
                    },
                    smallM:{
                        charCodes:[109]
                    },
                    smallN:{
                        charCodes:[110]
                    },
                    smallO:{
                        charCodes:[111]
                    },
                    smallP:{
                        charCodes:[112]
                    },
                    smallQ:{
                        charCodes:[113]
                    },
                    smallR:{
                        charCodes:[114]
                    },
                    smallS:{
                        charCodes:[115]
                    },
                    smallT:{
                        charCodes:[116]
                    },
                    smallU:{
                        charCodes:[117]
                    },
                    smallV:{
                        charCodes:[118]
                    },
                    smallW:{
                        charCodes:[119]
                    },
                    smallX:{
                        charCodes:[120]
                    },
                    smallY:{
                        charCodes:[121]
                    },
                    smallZ:{
                        charCodes:[122]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    }


                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
//                    enter:{
//                        charCodes:[13]
//                    },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            },
            "geometricMidSchool":{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Geometric',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'seven'
                                                },
                                                {
                                                    name:'eight'
                                                },
                                                {
                                                    name:'nine'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'four'
                                                },
                                                {
                                                    name:'five'
                                                },
                                                {
                                                    name:'six'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'one'
                                                },
                                                {
                                                    name:'two'
                                                },
                                                {
                                                    name:'three'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'zero'
                                                },
                                                {
                                                    name:'point'
                                                },
                                                {
                                                    name:'minusSign'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'plus'
                                                },
                                                {
                                                    name:'minus'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'multiplicationDot'
                                                },
                                                {
                                                    name:'division'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'equal',
                                                    keyWidth:2
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'fraction'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'power'

                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'absolute'
                                                }
                                            ]
                                        }

                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smaller'
                                                },
                                                {
                                                    name:'bigger'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallerEqual'
                                                },
                                                {
                                                    name:'biggerEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'approximately'
                                                },
                                                {
                                                    name:'notEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[

                                                {
                                                    name:'congruence'
                                                },
                                                {
                                                    name:'similarity'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'leftParenthesis'
                                                },
                                                {
                                                    name:'rightParenthesis'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'leftSquareBracket'
                                                },
                                                {
                                                    name:'rightSquareBracket'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'none',
                                                    keyWidth:2
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ratio'
                                                },
                                                {
                                                    name:'percent'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[

                                                {
                                                    name:'pi'
                                                },
                                                {
                                                    name:'degree'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'celsius'
                                                },
                                                {
                                                    name:'fahrenheit'
                                                }
                                            ]
                                        }
                                    ]
                                }


                            ]
                        },
                        {
                            name:'ABC',
                            classes:'hidden',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'orthogonal'
                                                },
                                                {
                                                    name:'parallel'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'angle'
                                                },
                                                {
                                                    name:'triangle'
                                                }
                                            ]
                                        },

                                        {
                                            keys:[
                                                {
                                                    name:'segment'
                                                },
                                                {
                                                    name:'rayRight'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'rayBoth'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'capitalA'
                                                },
                                                {
                                                    name:'capitalB'
                                                },
                                                {
                                                    name:'capitalC'
                                                },
                                                {
                                                    name:'capitalD'
                                                },
                                                {
                                                    name:'capitalE'
                                                },
                                                {
                                                    name:'capitalF'
                                                },
                                                {
                                                    name:'capitalG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalH'
                                                },
                                                {
                                                    name:'capitalI'
                                                },
                                                {
                                                    name:'capitalJ'
                                                },
                                                {
                                                    name:'capitalK'
                                                },
                                                {
                                                    name:'capitalL'
                                                },
                                                {
                                                    name:'capitalM'
                                                },
                                                {
                                                    name:'capitalN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalO'
                                                },
                                                {
                                                    name:'capitalP'
                                                },
                                                {
                                                    name:'capitalQ'
                                                },
                                                {
                                                    name:'capitalR'
                                                },
                                                {
                                                    name:'capitalS'
                                                },
                                                {
                                                    name:'capitalT'
                                                },
                                                {
                                                    name:'capitalU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalV'
                                                },
                                                {
                                                    name:'capitalW'
                                                },
                                                {
                                                    name:'capitalX'
                                                },
                                                {
                                                    name:'capitalY'
                                                },
                                                {
                                                    name:'capitalZ'
                                                },
                                                {
                                                    name:'small',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['ABC']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'abc',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'orthogonal'
                                                },
                                                {
                                                    name:'parallel'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'angle'
                                                },
                                                {
                                                    name:'triangle'
                                                }
                                            ]
                                        },

                                        {
                                            keys:[
                                                {
                                                    name:'segment'
                                                },
                                                {
                                                    name:'rayRight'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'rayBoth'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smallA'
                                                },
                                                {
                                                    name:'smallB'
                                                },
                                                {
                                                    name:'smallC'
                                                },
                                                {
                                                    name:'smallD'
                                                },
                                                {
                                                    name:'smallE'
                                                },
                                                {
                                                    name:'smallF'
                                                },
                                                {
                                                    name:'smallG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallH'
                                                },
                                                {
                                                    name:'smallI'
                                                },
                                                {
                                                    name:'smallJ'
                                                },
                                                {
                                                    name:'smallK'
                                                },
                                                {
                                                    name:'smallL'
                                                },
                                                {
                                                    name:'smallM'
                                                },
                                                {
                                                    name:'smallN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallO'
                                                },
                                                {
                                                    name:'smallP'
                                                },
                                                {
                                                    name:'smallQ'
                                                },
                                                {
                                                    name:'smallR'
                                                },
                                                {
                                                    name:'smallS'
                                                },
                                                {
                                                    name:'smallT'
                                                },
                                                {
                                                    name:'smallU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallV'
                                                },
                                                {
                                                    name:'smallW'
                                                },
                                                {
                                                    name:'smallX'
                                                },
                                                {
                                                    name:'smallY'
                                                },
                                                {
                                                    name:'smallZ'
                                                },
                                                {
                                                    name:'caps',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['abc']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    plus:{
                        charCodes:[43]
                    },
                    minus:{
                        charCodes:[45]
                    },
                    division:{
                        charCodes:[58]
                    },
                    multiplication:{
                        charCodes:[42]
                    },
                    equal:{
                        charCodes:[61]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    },
                    percent:{
                        charCodes:[37]
                    },
                    leftParenthesis:{
                        charCodes:[40]
                    },
                    rightParenthesis:{
                        charCodes:[41]
                    },
                    leftSquareBracket:{
                        charCodes:[91]
                    },
                    rightSquareBracket:{
                        charCodes:[93]
                    },
                    smaller:{
                        charCodes:[60]
                    },
                    bigger:{
                        charCodes:[62]
                    },
                    questionMark:{
                        charCodes:[63]
                    },
                    underscore:{
                        charCodes:[95]
                    },
                    dollar:{
                        charCodes:[36]
                    },

                    capitalA:{
                        charCodes:[65]
                    },
                    capitalB:{
                        charCodes:[66]
                    },
                    capitalC:{
                        charCodes:[67]
                    },
                    capitalD:{
                        charCodes:[68]
                    },
                    capitalE:{
                        charCodes:[69]
                    },
                    capitalF:{
                        charCodes:[70]
                    },
                    capitalG:{
                        charCodes:[71]
                    },
                    capitalH:{
                        charCodes:[72]
                    },
                    capitalI:{
                        charCodes:[73]
                    },
                    capitalJ:{
                        charCodes:[74]
                    },
                    capitalK:{
                        charCodes:[75]
                    },
                    capitalL:{
                        charCodes:[76]
                    },
                    capitalM:{
                        charCodes:[77]
                    },
                    capitalN:{
                        charCodes:[78]
                    },
                    capitalO:{
                        charCodes:[79]
                    },
                    capitalP:{
                        charCodes:[80]
                    },
                    capitalQ:{
                        charCodes:[81]
                    },
                    capitalR:{
                        charCodes:[82]
                    },
                    capitalS:{
                        charCodes:[83]
                    },
                    capitalT:{
                        charCodes:[84]
                    },
                    capitalU:{
                        charCodes:[85]
                    },
                    capitalV:{
                        charCodes:[86]
                    },
                    capitalW:{
                        charCodes:[87]
                    },
                    capitalX:{
                        charCodes:[88]
                    },
                    capitalY:{
                        charCodes:[89]
                    },
                    capitalZ:{
                        charCodes:[90]
                    },
                    smallA:{
                        charCodes:[97]
                    },
                    smallB:{
                        charCodes:[98]
                    },
                    smallC:{
                        charCodes:[99]
                    },
                    smallD:{
                        charCodes:[100]
                    },
                    smallE:{
                        charCodes:[101]
                    },
                    smallF:{
                        charCodes:[102]
                    },
                    smallG:{
                        charCodes:[103]
                    },
                    smallH:{
                        charCodes:[104]
                    },
                    smallI:{
                        charCodes:[105]
                    },
                    smallJ:{
                        charCodes:[106]
                    },
                    smallK:{
                        charCodes:[107]
                    },
                    smallL:{
                        charCodes:[108]
                    },
                    smallM:{
                        charCodes:[109]
                    },
                    smallN:{
                        charCodes:[110]
                    },
                    smallO:{
                        charCodes:[111]
                    },
                    smallP:{
                        charCodes:[112]
                    },
                    smallQ:{
                        charCodes:[113]
                    },
                    smallR:{
                        charCodes:[114]
                    },
                    smallS:{
                        charCodes:[115]
                    },
                    smallT:{
                        charCodes:[116]
                    },
                    smallU:{
                        charCodes:[117]
                    },
                    smallV:{
                        charCodes:[118]
                    },
                    smallW:{
                        charCodes:[119]
                    },
                    smallX:{
                        charCodes:[120]
                    },
                    smallY:{
                        charCodes:[121]
                    },
                    smallZ:{
                        charCodes:[122]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    }


                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
//                    enter:{
//                        charCodes:[13]
//                    },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            },

            "basicMidSchoolX":{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Basic',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'seven'
                                                },
                                                {
                                                    name:'eight'
                                                },
                                                {
                                                    name:'nine'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'four'
                                                },
                                                {
                                                    name:'five'
                                                },
                                                {
                                                    name:'six'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'one'
                                                },
                                                {
                                                    name:'two'
                                                },
                                                {
                                                    name:'three'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'zero'
                                                },
                                                {
                                                    name:'point'
                                                },
                                                {
                                                    name:'minusSign'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'plus'
                                                },
                                                {
                                                    name:'minus'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'multiplicationX'
                                                },
                                                {
                                                    name:'division'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'equal',
                                                    keyWidth:2
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'fraction'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'power'

                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'absolute'
                                                }
                                            ]
                                        }

                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smaller'
                                                },
                                                {
                                                    name:'bigger'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallerEqual'
                                                },
                                                {
                                                    name:'biggerEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'approximately'
                                                },
                                                {
                                                    name:'notEqual'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'leftParenthesis'
                                                },
                                                {
                                                    name:'rightParenthesis'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'leftSquareBracket'
                                                },
                                                {
                                                    name:'rightSquareBracket'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'none',
                                                    keyWidth:2
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ratio'
                                                },
                                                {
                                                    name:'percent'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    plus:{
                        charCodes:[43]
                    },
                    minus:{
                        charCodes:[45]
                    },
                    division:{
                        charCodes:[58]
                    },
                    multiplication:{
                        charCodes:[42]
                    },
                    equal:{
                        charCodes:[61]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    },
                    percent:{
                        charCodes:[37]
                    },
                    leftParenthesis:{
                        charCodes:[40]
                    },
                    rightParenthesis:{
                        charCodes:[41]
                    },
                    leftSquareBracket:{
                        charCodes:[91]
                    },
                    rightSquareBracket:{
                        charCodes:[93]
                    },
                    smaller:{
                        charCodes:[60]
                    },
                    bigger:{
                        charCodes:[62]
                    },
                    questionMark:{
                        charCodes:[63]
                    },
                    underscore:{
                        charCodes:[95]
                    },
                    dollar:{
                        charCodes:[36]
                    },

                    capitalA:{
                        charCodes:[65]
                    },
                    capitalB:{
                        charCodes:[66]
                    },
                    capitalC:{
                        charCodes:[67]
                    },
                    capitalD:{
                        charCodes:[68]
                    },
                    capitalE:{
                        charCodes:[69]
                    },
                    capitalF:{
                        charCodes:[70]
                    },
                    capitalG:{
                        charCodes:[71]
                    },
                    capitalH:{
                        charCodes:[72]
                    },
                    capitalI:{
                        charCodes:[73]
                    },
                    capitalJ:{
                        charCodes:[74]
                    },
                    capitalK:{
                        charCodes:[75]
                    },
                    capitalL:{
                        charCodes:[76]
                    },
                    capitalM:{
                        charCodes:[77]
                    },
                    capitalN:{
                        charCodes:[78]
                    },
                    capitalO:{
                        charCodes:[79]
                    },
                    capitalP:{
                        charCodes:[80]
                    },
                    capitalQ:{
                        charCodes:[81]
                    },
                    capitalR:{
                        charCodes:[82]
                    },
                    capitalS:{
                        charCodes:[83]
                    },
                    capitalT:{
                        charCodes:[84]
                    },
                    capitalU:{
                        charCodes:[85]
                    },
                    capitalV:{
                        charCodes:[86]
                    },
                    capitalW:{
                        charCodes:[87]
                    },
                    capitalX:{
                        charCodes:[88]
                    },
                    capitalY:{
                        charCodes:[89]
                    },
                    capitalZ:{
                        charCodes:[90]
                    },
                    smallA:{
                        charCodes:[97]
                    },
                    smallB:{
                        charCodes:[98]
                    },
                    smallC:{
                        charCodes:[99]
                    },
                    smallD:{
                        charCodes:[100]
                    },
                    smallE:{
                        charCodes:[101]
                    },
                    smallF:{
                        charCodes:[102]
                    },
                    smallG:{
                        charCodes:[103]
                    },
                    smallH:{
                        charCodes:[104]
                    },
                    smallI:{
                        charCodes:[105]
                    },
                    smallJ:{
                        charCodes:[106]
                    },
                    smallK:{
                        charCodes:[107]
                    },
                    smallL:{
                        charCodes:[108]
                    },
                    smallM:{
                        charCodes:[109]
                    },
                    smallN:{
                        charCodes:[110]
                    },
                    smallO:{
                        charCodes:[111]
                    },
                    smallP:{
                        charCodes:[112]
                    },
                    smallQ:{
                        charCodes:[113]
                    },
                    smallR:{
                        charCodes:[114]
                    },
                    smallS:{
                        charCodes:[115]
                    },
                    smallT:{
                        charCodes:[116]
                    },
                    smallU:{
                        charCodes:[117]
                    },
                    smallV:{
                        charCodes:[118]
                    },
                    smallW:{
                        charCodes:[119]
                    },
                    smallX:{
                        charCodes:[120]
                    },
                    smallY:{
                        charCodes:[121]
                    },
                    smallZ:{
                        charCodes:[122]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    }


                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
//                    enter:{
//                        charCodes:[13]
//                    },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            },
            "algebraicMidSchoolX":{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Algebraic',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'seven'
                                                },
                                                {
                                                    name:'eight'
                                                },
                                                {
                                                    name:'nine'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'four'
                                                },
                                                {
                                                    name:'five'
                                                },
                                                {
                                                    name:'six'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'one'
                                                },
                                                {
                                                    name:'two'
                                                },
                                                {
                                                    name:'three'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'zero'
                                                },
                                                {
                                                    name:'point'
                                                },
                                                {
                                                    name:'minusSign'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'plus'
                                                },
                                                {
                                                    name:'minus'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'multiplicationX'
                                                },
                                                {
                                                    name:'division'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'equal',
                                                    keyWidth:2
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'fraction'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'power'

                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'absolute'
                                                }
                                            ]
                                        }

                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smaller'
                                                },
                                                {
                                                    name:'bigger'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallerEqual'
                                                },
                                                {
                                                    name:'biggerEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'approximately'
                                                },
                                                {
                                                    name:'notEqual'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'leftParenthesis'
                                                },
                                                {
                                                    name:'rightParenthesis'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'leftSquareBracket'
                                                },
                                                {
                                                    name:'rightSquareBracket'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'none',
                                                    keyWidth:2
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ratio'
                                                },
                                                {
                                                    name:'percent'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'squareShape'
                                                },
                                                {
                                                    name:'doodleShape'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ellipseShape'
                                                },
                                                {
                                                    name:'circleShape'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'triangleShape'
                                                },
                                                {
                                                    name:'questionMark'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'underscore'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'ABC',
                            classes:'hidden',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'capitalA'
                                                },
                                                {
                                                    name:'capitalB'
                                                },
                                                {
                                                    name:'capitalC'
                                                },
                                                {
                                                    name:'capitalD'
                                                },
                                                {
                                                    name:'capitalE'
                                                },
                                                {
                                                    name:'capitalF'
                                                },
                                                {
                                                    name:'capitalG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalH'
                                                },
                                                {
                                                    name:'capitalI'
                                                },
                                                {
                                                    name:'capitalJ'
                                                },
                                                {
                                                    name:'capitalK'
                                                },
                                                {
                                                    name:'capitalL'
                                                },
                                                {
                                                    name:'capitalM'
                                                },
                                                {
                                                    name:'capitalN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalO'
                                                },
                                                {
                                                    name:'capitalP'
                                                },
                                                {
                                                    name:'capitalQ'
                                                },
                                                {
                                                    name:'capitalR'
                                                },
                                                {
                                                    name:'capitalS'
                                                },
                                                {
                                                    name:'capitalT'
                                                },
                                                {
                                                    name:'capitalU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalV'
                                                },
                                                {
                                                    name:'capitalW'
                                                },
                                                {
                                                    name:'capitalX'
                                                },
                                                {
                                                    name:'capitalY'
                                                },
                                                {
                                                    name:'capitalZ'
                                                },
                                                {
                                                    name:'small',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['ABC']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'abc',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smallA'
                                                },
                                                {
                                                    name:'smallB'
                                                },
                                                {
                                                    name:'smallC'
                                                },
                                                {
                                                    name:'smallD'
                                                },
                                                {
                                                    name:'smallE'
                                                },
                                                {
                                                    name:'smallF'
                                                },
                                                {
                                                    name:'smallG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallH'
                                                },
                                                {
                                                    name:'smallI'
                                                },
                                                {
                                                    name:'smallJ'
                                                },
                                                {
                                                    name:'smallK'
                                                },
                                                {
                                                    name:'smallL'
                                                },
                                                {
                                                    name:'smallM'
                                                },
                                                {
                                                    name:'smallN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallO'
                                                },
                                                {
                                                    name:'smallP'
                                                },
                                                {
                                                    name:'smallQ'
                                                },
                                                {
                                                    name:'smallR'
                                                },
                                                {
                                                    name:'smallS'
                                                },
                                                {
                                                    name:'smallT'
                                                },
                                                {
                                                    name:'smallU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallV'
                                                },
                                                {
                                                    name:'smallW'
                                                },
                                                {
                                                    name:'smallX'
                                                },
                                                {
                                                    name:'smallY'
                                                },
                                                {
                                                    name:'smallZ'
                                                },
                                                {
                                                    name:'caps',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['abc']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    plus:{
                        charCodes:[43]
                    },
                    minus:{
                        charCodes:[45]
                    },
                    division:{
                        charCodes:[58]
                    },
                    multiplication:{
                        charCodes:[42]
                    },
                    equal:{
                        charCodes:[61]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    },
                    percent:{
                        charCodes:[37]
                    },
                    leftParenthesis:{
                        charCodes:[40]
                    },
                    rightParenthesis:{
                        charCodes:[41]
                    },
                    leftSquareBracket:{
                        charCodes:[91]
                    },
                    rightSquareBracket:{
                        charCodes:[93]
                    },
                    smaller:{
                        charCodes:[60]
                    },
                    bigger:{
                        charCodes:[62]
                    },
                    questionMark:{
                        charCodes:[63]
                    },
                    underscore:{
                        charCodes:[95]
                    },
                    dollar:{
                        charCodes:[36]
                    },

                    capitalA:{
                        charCodes:[65]
                    },
                    capitalB:{
                        charCodes:[66]
                    },
                    capitalC:{
                        charCodes:[67]
                    },
                    capitalD:{
                        charCodes:[68]
                    },
                    capitalE:{
                        charCodes:[69]
                    },
                    capitalF:{
                        charCodes:[70]
                    },
                    capitalG:{
                        charCodes:[71]
                    },
                    capitalH:{
                        charCodes:[72]
                    },
                    capitalI:{
                        charCodes:[73]
                    },
                    capitalJ:{
                        charCodes:[74]
                    },
                    capitalK:{
                        charCodes:[75]
                    },
                    capitalL:{
                        charCodes:[76]
                    },
                    capitalM:{
                        charCodes:[77]
                    },
                    capitalN:{
                        charCodes:[78]
                    },
                    capitalO:{
                        charCodes:[79]
                    },
                    capitalP:{
                        charCodes:[80]
                    },
                    capitalQ:{
                        charCodes:[81]
                    },
                    capitalR:{
                        charCodes:[82]
                    },
                    capitalS:{
                        charCodes:[83]
                    },
                    capitalT:{
                        charCodes:[84]
                    },
                    capitalU:{
                        charCodes:[85]
                    },
                    capitalV:{
                        charCodes:[86]
                    },
                    capitalW:{
                        charCodes:[87]
                    },
                    capitalX:{
                        charCodes:[88]
                    },
                    capitalY:{
                        charCodes:[89]
                    },
                    capitalZ:{
                        charCodes:[90]
                    },
                    smallA:{
                        charCodes:[97]
                    },
                    smallB:{
                        charCodes:[98]
                    },
                    smallC:{
                        charCodes:[99]
                    },
                    smallD:{
                        charCodes:[100]
                    },
                    smallE:{
                        charCodes:[101]
                    },
                    smallF:{
                        charCodes:[102]
                    },
                    smallG:{
                        charCodes:[103]
                    },
                    smallH:{
                        charCodes:[104]
                    },
                    smallI:{
                        charCodes:[105]
                    },
                    smallJ:{
                        charCodes:[106]
                    },
                    smallK:{
                        charCodes:[107]
                    },
                    smallL:{
                        charCodes:[108]
                    },
                    smallM:{
                        charCodes:[109]
                    },
                    smallN:{
                        charCodes:[110]
                    },
                    smallO:{
                        charCodes:[111]
                    },
                    smallP:{
                        charCodes:[112]
                    },
                    smallQ:{
                        charCodes:[113]
                    },
                    smallR:{
                        charCodes:[114]
                    },
                    smallS:{
                        charCodes:[115]
                    },
                    smallT:{
                        charCodes:[116]
                    },
                    smallU:{
                        charCodes:[117]
                    },
                    smallV:{
                        charCodes:[118]
                    },
                    smallW:{
                        charCodes:[119]
                    },
                    smallX:{
                        charCodes:[120]
                    },
                    smallY:{
                        charCodes:[121]
                    },
                    smallZ:{
                        charCodes:[122]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    }


                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
//                    enter:{
//                        charCodes:[13]
//                    },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            },
            "geometricMidSchoolX":{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Geometric',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'seven'
                                                },
                                                {
                                                    name:'eight'
                                                },
                                                {
                                                    name:'nine'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'four'
                                                },
                                                {
                                                    name:'five'
                                                },
                                                {
                                                    name:'six'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'one'
                                                },
                                                {
                                                    name:'two'
                                                },
                                                {
                                                    name:'three'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'zero'
                                                },
                                                {
                                                    name:'point'
                                                },
                                                {
                                                    name:'minusSign'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'plus'
                                                },
                                                {
                                                    name:'minus'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'multiplicationX'
                                                },
                                                {
                                                    name:'division'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'equal',
                                                    keyWidth:2
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'fraction'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'power'

                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'absolute'
                                                }
                                            ]
                                        }

                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smaller'
                                                },
                                                {
                                                    name:'bigger'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallerEqual'
                                                },
                                                {
                                                    name:'biggerEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'approximately'
                                                },
                                                {
                                                    name:'notEqual'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[

                                                {
                                                    name:'congruence'
                                                },
                                                {
                                                    name:'similarity'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'leftParenthesis'
                                                },
                                                {
                                                    name:'rightParenthesis'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'leftSquareBracket'
                                                },
                                                {
                                                    name:'rightSquareBracket'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'none',
                                                    keyWidth:2
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'ratio'
                                                },
                                                {
                                                    name:'percent'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[

                                                {
                                                    name:'pi'
                                                },
                                                {
                                                    name:'degree'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'celsius'
                                                },
                                                {
                                                    name:'fahrenheit'
                                                }
                                            ]
                                        }
                                    ]
                                }


                            ]
                        },
                        {
                            name:'ABC',
                            classes:'hidden',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'orthogonal'
                                                },
                                                {
                                                    name:'parallel'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'angle'
                                                },
                                                {
                                                    name:'triangle'
                                                }
                                            ]
                                        },

                                        {
                                            keys:[
                                                {
                                                    name:'segment'
                                                },
                                                {
                                                    name:'rayRight'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'rayBoth'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'capitalA'
                                                },
                                                {
                                                    name:'capitalB'
                                                },
                                                {
                                                    name:'capitalC'
                                                },
                                                {
                                                    name:'capitalD'
                                                },
                                                {
                                                    name:'capitalE'
                                                },
                                                {
                                                    name:'capitalF'
                                                },
                                                {
                                                    name:'capitalG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalH'
                                                },
                                                {
                                                    name:'capitalI'
                                                },
                                                {
                                                    name:'capitalJ'
                                                },
                                                {
                                                    name:'capitalK'
                                                },
                                                {
                                                    name:'capitalL'
                                                },
                                                {
                                                    name:'capitalM'
                                                },
                                                {
                                                    name:'capitalN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalO'
                                                },
                                                {
                                                    name:'capitalP'
                                                },
                                                {
                                                    name:'capitalQ'
                                                },
                                                {
                                                    name:'capitalR'
                                                },
                                                {
                                                    name:'capitalS'
                                                },
                                                {
                                                    name:'capitalT'
                                                },
                                                {
                                                    name:'capitalU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'capitalV'
                                                },
                                                {
                                                    name:'capitalW'
                                                },
                                                {
                                                    name:'capitalX'
                                                },
                                                {
                                                    name:'capitalY'
                                                },
                                                {
                                                    name:'capitalZ'
                                                },
                                                {
                                                    name:'small',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['abc']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['ABC']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name:'abc',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'orthogonal'
                                                },
                                                {
                                                    name:'parallel'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'angle'
                                                },
                                                {
                                                    name:'triangle'
                                                }
                                            ]
                                        },

                                        {
                                            keys:[
                                                {
                                                    name:'segment'
                                                },
                                                {
                                                    name:'rayRight'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'rayBoth'
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'smallA'
                                                },
                                                {
                                                    name:'smallB'
                                                },
                                                {
                                                    name:'smallC'
                                                },
                                                {
                                                    name:'smallD'
                                                },
                                                {
                                                    name:'smallE'
                                                },
                                                {
                                                    name:'smallF'
                                                },
                                                {
                                                    name:'smallG'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallH'
                                                },
                                                {
                                                    name:'smallI'
                                                },
                                                {
                                                    name:'smallJ'
                                                },
                                                {
                                                    name:'smallK'
                                                },
                                                {
                                                    name:'smallL'
                                                },
                                                {
                                                    name:'smallM'
                                                },
                                                {
                                                    name:'smallN'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallO'
                                                },
                                                {
                                                    name:'smallP'
                                                },
                                                {
                                                    name:'smallQ'
                                                },
                                                {
                                                    name:'smallR'
                                                },
                                                {
                                                    name:'smallS'
                                                },
                                                {
                                                    name:'smallT'
                                                },
                                                {
                                                    name:'smallU'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'smallV'
                                                },
                                                {
                                                    name:'smallW'
                                                },
                                                {
                                                    name:'smallX'
                                                },
                                                {
                                                    name:'smallY'
                                                },
                                                {
                                                    name:'smallZ'
                                                },
                                                {
                                                    name:'caps',
                                                    keyWidth:2,
                                                    keyboardActions:[
                                                        {
                                                            actionName:'changeToTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'showTab',
                                                            actionArgs:['ABC']
                                                        },
                                                        {
                                                            actionName:'hideTab',
                                                            actionArgs:['abc']
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    plus:{
                        charCodes:[43]
                    },
                    minus:{
                        charCodes:[45]
                    },
                    division:{
                        charCodes:[58]
                    },
                    multiplication:{
                        charCodes:[42]
                    },
                    equal:{
                        charCodes:[61]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    },
                    percent:{
                        charCodes:[37]
                    },
                    leftParenthesis:{
                        charCodes:[40]
                    },
                    rightParenthesis:{
                        charCodes:[41]
                    },
                    leftSquareBracket:{
                        charCodes:[91]
                    },
                    rightSquareBracket:{
                        charCodes:[93]
                    },
                    smaller:{
                        charCodes:[60]
                    },
                    bigger:{
                        charCodes:[62]
                    },
                    questionMark:{
                        charCodes:[63]
                    },
                    underscore:{
                        charCodes:[95]
                    },
                    dollar:{
                        charCodes:[36]
                    },

                    capitalA:{
                        charCodes:[65]
                    },
                    capitalB:{
                        charCodes:[66]
                    },
                    capitalC:{
                        charCodes:[67]
                    },
                    capitalD:{
                        charCodes:[68]
                    },
                    capitalE:{
                        charCodes:[69]
                    },
                    capitalF:{
                        charCodes:[70]
                    },
                    capitalG:{
                        charCodes:[71]
                    },
                    capitalH:{
                        charCodes:[72]
                    },
                    capitalI:{
                        charCodes:[73]
                    },
                    capitalJ:{
                        charCodes:[74]
                    },
                    capitalK:{
                        charCodes:[75]
                    },
                    capitalL:{
                        charCodes:[76]
                    },
                    capitalM:{
                        charCodes:[77]
                    },
                    capitalN:{
                        charCodes:[78]
                    },
                    capitalO:{
                        charCodes:[79]
                    },
                    capitalP:{
                        charCodes:[80]
                    },
                    capitalQ:{
                        charCodes:[81]
                    },
                    capitalR:{
                        charCodes:[82]
                    },
                    capitalS:{
                        charCodes:[83]
                    },
                    capitalT:{
                        charCodes:[84]
                    },
                    capitalU:{
                        charCodes:[85]
                    },
                    capitalV:{
                        charCodes:[86]
                    },
                    capitalW:{
                        charCodes:[87]
                    },
                    capitalX:{
                        charCodes:[88]
                    },
                    capitalY:{
                        charCodes:[89]
                    },
                    capitalZ:{
                        charCodes:[90]
                    },
                    smallA:{
                        charCodes:[97]
                    },
                    smallB:{
                        charCodes:[98]
                    },
                    smallC:{
                        charCodes:[99]
                    },
                    smallD:{
                        charCodes:[100]
                    },
                    smallE:{
                        charCodes:[101]
                    },
                    smallF:{
                        charCodes:[102]
                    },
                    smallG:{
                        charCodes:[103]
                    },
                    smallH:{
                        charCodes:[104]
                    },
                    smallI:{
                        charCodes:[105]
                    },
                    smallJ:{
                        charCodes:[106]
                    },
                    smallK:{
                        charCodes:[107]
                    },
                    smallL:{
                        charCodes:[108]
                    },
                    smallM:{
                        charCodes:[109]
                    },
                    smallN:{
                        charCodes:[110]
                    },
                    smallO:{
                        charCodes:[111]
                    },
                    smallP:{
                        charCodes:[112]
                    },
                    smallQ:{
                        charCodes:[113]
                    },
                    smallR:{
                        charCodes:[114]
                    },
                    smallS:{
                        charCodes:[115]
                    },
                    smallT:{
                        charCodes:[116]
                    },
                    smallU:{
                        charCodes:[117]
                    },
                    smallV:{
                        charCodes:[118]
                    },
                    smallW:{
                        charCodes:[119]
                    },
                    smallX:{
                        charCodes:[120]
                    },
                    smallY:{
                        charCodes:[121]
                    },
                    smallZ:{
                        charCodes:[122]
                    },
                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    }


                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
//                    enter:{
//                        charCodes:[13]
//                    },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            },

            numPad:{
                virtualKeys:{
                    tabs:[
                        {
                            name:'Basic',
                            boxes:[
                                {
                                    lines:[
                                        {
                                            keys:[
                                                {
                                                    name:'seven'
                                                },
                                                {
                                                    name:'eight'
                                                },
                                                {
                                                    name:'nine'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'four'
                                                },
                                                {
                                                    name:'five'
                                                },
                                                {
                                                    name:'six'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'one'
                                                },
                                                {
                                                    name:'two'
                                                },
                                                {
                                                    name:'three'
                                                }
                                            ]
                                        },
                                        {
                                            keys:[
                                                {
                                                    name:'zero'
                                                },
                                                {
                                                    name:'point'
                                                },
                                                {
                                                    name:'comma'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                deviceKeys:{

                    zero:{
                        charCodes:[48]
                    },
                    one:{
                        charCodes:[49]
                    },
                    two:{
                        charCodes:[50]
                    },
                    three:{
                        charCodes:[51]
                    },
                    four:{
                        charCodes:[52]
                    },
                    five:{
                        charCodes:[53]
                    },
                    six:{
                        charCodes:[54]
                    },
                    seven:{
                        charCodes:[55]
                    },
                    eight:{
                        charCodes:[56]
                    },
                    nine:{
                        charCodes:[57]
                    },
                    comma:{
                        charCodes:[44]
                    },
                    point:{
                        charCodes:[46]
                    }
                },
                deviceSpecialKeys:{

                    backspace:{
                        charCodes:[8]
                    },
                    del:{
                        charCodes:[46]
                    },
//                    enter:{
//                        charCodes:[13]
//                    },
                    arrowLeft:{
                        charCodes:[37]
                    },
                    arrowUp:{
                        charCodes:[38]
                    },
                    arrowRight:{
                        charCodes:[39]
                    },
                    arrowDown:{
                        charCodes:[40]
                    }

                }
            }
        },

        mfStyle:{

            margin:{
                right:20,
                left:0,
                top:0,
                buttom:0,
                factor:5
            }

        },

        classes:{
            symbol:'symbol',
            focus:'focus',
            blur:'blur',
            mathField:'mathField',
            structure:'structure',
            completion:'completion',
            readOnly:'readOnly'
        },

        reduction:{

            minFontSize:18,
            viewPortClass:'task_container'
        },

        keyboardStyle:{
            spaceFromMathField:4 // px
        },

        mpsWrapperStyle:{
            padding:{
                top:2,
                bottom:2,
                right:2,
                left:2
            },

            border:{
                width:1
            }

        },

        frameStyle:{
            padding:{
                top:1,
                bottom:1,
                right:1,
                left:1
            },

            border:{
                width:2
            },

            size:{
                minWidth:1  //em
            }
        },

        caret:{
            width:2  //px
        },

        blowUp:{
            heightAddition:20,  //px
            widthAddition:70  //px
        }
    };

    var prototypeControlsHash = t2k.component.mathField.MathFieldConfig.prototypeControlsHash;

	var thi$ = t2k.component.mathField.MathFieldConfig;

    // init virtual keyboard symbols
	thi$.initVirtualKeyboardSymbols = (function (fontLocale) {
        var mappingLocales = {
            'fr': 'fr_FR',
            'nl': 'nl_NL',
            'usa': 'en_US',
            'he': 'he_IL'
        };

        var keyboardPresets = t2k.component.mathField.MathFieldConfig.keyboardPresets;
		var localesConfig = t2k.component.mathField.MathFieldLocaleConfig;
        var preset, tabs, tab,boxes, box, lines, line, keys, key, localeConfig,localeSymbol;
		var locale = fontLocale || ENV.locale.split('_')[0];

        for ( preset in keyboardPresets ) {
            tabs = keyboardPresets[preset].virtualKeys.tabs;
	        localeConfig = !!localesConfig[preset] && localesConfig[preset][mappingLocales[fontLocale] || ENV.locale];

	        if(localeConfig && localeConfig.length) {
		        var i, item, arr_keys;
		        for(i = 0; i < localeConfig.length; i++) {
			        item = localeConfig[i];
			        if(tabs[item.tabIndex] &&
				       tabs[item.tabIndex].boxes[item.boxIndex] &&
				       tabs[item.tabIndex].boxes[item.boxIndex].lines[item.lineIndex]) {
				        arr_keys = tabs[item.tabIndex].boxes[item.boxIndex].lines[item.lineIndex].keys;

				        switch(item.action) {
					        case "add" : {
                                var found = false;

                                for (var j = 0; j < arr_keys.length; ++j) {
                                    if (arr_keys[j].name === item.key.name) {
    						          found = true;
                                    }
                                }

                                if (!found) arr_keys.push(item.key);
						        break;
					        }
					        case "remove" : {
                                var found = false;

                                for (var j = 0; j < arr_keys.length; ++j) {
                                    if (arr_keys[j].name === item.key.name) {
                                      found = true;
                                    }
                                }

                                if (found) {
						          arr_keys.splice(item.keyIndex, 1);
                                }
						        break;
					        }
					        case "replace" : {
                                if (arr_keys[item.keyIndex].name !== item.key.name) {
						          arr_keys[item.keyIndex] = item.key;
                                }
					        }
				        }

			        }
		        }
	        }

	        for (tab in tabs) {
		        //scip tablet only tab
		        if (!!tabs[tab].tabletOnly && !ENV.behaviors.isTablet) {
			        var index = tabs.indexOf(tabs[tab]);
			        tabs.splice(index, 1);
			        continue;
		        }

		        boxes = tabs[tab].boxes;
		        for (box in boxes) {
			        lines = boxes[box].lines;
			        for (line in lines) {
				        keys = lines[line].keys;
				        for (key in keys) {
					        if (prototypeControlsHash[keys[key].name])
					            localeSymbol = prototypeControlsHash[keys[key].name]['keyboardSymbol_' + locale];

						        keys[key].symbol = localeSymbol ? localeSymbol :
							        	           prototypeControlsHash[keys[key].name].keyboardSymbol ?
							                       prototypeControlsHash[keys[key].name].keyboardSymbol :
							                       prototypeControlsHash[keys[key].name].symbol;
				        }
			        }
		        }
	        }
        }
    });

    // init symbols hash
    (function initSymbolsHash () {
        var symbolsHash = t2k.component.mathField.MathFieldConfig.symbolsHash;
        var controlName;
        var control;
        for ( controlName in prototypeControlsHash ) {
            control = prototypeControlsHash[controlName];
            symbolsHash[control.symbol] = control;
        }
    }) ();


	(function createSymbolToKey() {

		thi$.symbolToKey = {};
		thi$.lowerCaseKeyToKey = {};

		var symbol;
		for (var key in thi$.prototypeControlsHash) {
			symbol = thi$.prototypeControlsHash[key].symbol;
			thi$.symbolToKey[symbol] = key;
		}

		for (var key in thi$.prototypeControlsHash) {
			thi$.lowerCaseKeyToKey[key.toLowerCase()] = key;
		}
	})();
}) ();
////////////////////////////////////////
// SRC End --> t2k/component/mathField/MathFieldConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mathField/MathFieldView.js
////////////////////////////////////////
(function () {
    /**
     * @class t2k.component.mathField.MathFieldView
     * @desc A MathField View class
     * @namespace t2k.component.mathField
     * @extends t2k.component.BaseComponentView
     * @type {Object}
     */
    var constants = t2k.component.mathField.MathFieldConfig;

    var templates = {
        mathFieldContainer:"\
            <div id='{{id}}' class='mathField ltr {{fontLocale}} {{^editMode}} readOnly {{/editMode}} {{#colorShapes}}colorShapes {{/colorShapes}} \
            {{#italicVariables}}italicVariables {{/italicVariables}} {{#showMFEmptyIcon}} empty {{/showMFEmptyIcon}}' >\
        		<div id='{{id}}_frame' class='frame'><div class='mf_icon'>123</div></div>\
        		<div id='{{id}}_masc' class='masc' />\
	        	<div id='{{id}}_blowupContainer' class='blowupContainer hide' >\
		        	<div class='x' />\
	        	</div>\
	        	<div id='{{id}}_blowup' class='blowup' >\
		        	<div id='{{id}}_blowupZoom' class='blowupZoom' />\
	        	</div>\
                <div id='{{id}}_content' class='mathField_content' >\
                    {{>mps}}\
                </div>\
               <input type='text' id='{{id}}_input' size='1' class='mathField_input' />\
            </div>\
             {{#devMode}}" +
            "<input type='button' id='{{id}}_button' value='xml' class='mathField_button' />" +
            "<input type='button' id='{{id}}_button_value' value='value' class='mathField_button_value' />" +
            "<input type='button' id='{{id}}_button_value' value='correctness' class='mathField_button_correctness' />" +
            "<input type='button' id='{{id}}_button_value' value='reduction' class='mathField_button_reduction' />" +
            "{{/devMode}}\
        ",
        symbol:"<div class='{{type}} {{symbol}}' validationGroup='{{validationGroup}}'>{{value}}</div>",
        caret:"<div class='caret'></div>",
        mps:"<div class='mpsAnchor'></div><div class='mpsContent' id='{{id}}'><div class='mpsLasso'></div></div>",
        completion:"<div class='completion {{structureClass}}' validationGroup='completion'>\
	        			<div class='mpsAnchor'/><div class='mpsContent' id='{{id}}'><div class='mpsLasso'/></div>\
	        		</div>",
        absolute:"<div class='absolute {{structureClass}}' validationGroup='absolute'>\
        	           <div class='mpsAnchor'/><div class='icon left'>|</div><div class='mpsContent' id='{{id}}'><div class='mpsLasso'></div></div><div class='icon right'>|</div>\
        	      </div>",

        // delete
        mpsWidthFrame:"<div class='mpsAnchor'/><div class='mpsFrame' /><div class='mpsContent' id='{{id}}'><div class='mpsLasso'/></div>",

        power:"<div class='power {{structureClass}}' validationGroup='power'>{{>mps}}</div>",

        //mpsContent with mpsStructureWrapper attribute equal true - is readOnly, it's only use is to wrap the structure content
        fraction:"\
            <div class='fraction {{structureClass}}' validationGroup='fraction'>\
                <div class='mpsAnchor'></div>\
                <div class='mpsContent' id='{{id}}' mpsStructureWrapper='true'>\
                    <div class='numerator'>\
                        <div class='mpsAnchor'></div><div class='mpsContent' id='{{id1}}'><div class='mpsLasso'></div></div>\
                    </div>\
                    <div class='mpsLasso fractionBar'></div>\
                    <div class='denominator'>\
                        <div class='mpsAnchor'></div><div class='mpsContent' id='{{id2}}'><div class='mpsLasso'></div></div>\
                    </div>\
                </div>\
            </div>\
        ",
        longDivision_us:"\
            <div class='longDivision us {{structureClass}}' validationGroup='longDivision'>\
                <div class='mpsAnchor'/>\
                <div class='mpsContent' id='{{id}}' mpsStructureWrapper='true'>\
                    <div class='divided'>\
                        <div class='mpsContent ' id='{{id2}}'><div class='mpsLasso'/></div>\
                    </div>\
                    <div class='mpsLasso icon'><svg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='6px' height='21px' viewBox='0 0 6 21' enable-background='new 0 0 6 21' xml:space='preserve'><path fill='#333333' d='M4,9.5C4,15.099,1.892,19,0,19v2c3.42,0,6-4.944,6-11.5C6,5.459,5.018,2.036,3.465,0H0 C1.892,0,4,3.901,4,9.5z'/></svg></div>\
                    <div class='divider'>\
                      <div class='mpsContent' id='{{id1}}'><div class='mpsLasso'/></div>\
                    </div>\
                </div>\
            </div>\
            ",
        longDivision_nl:"\
            <div class='longDivision us {{structureClass}}' validationGroup='longDivision'>\
                <div class='mpsAnchor'/>\
                <div class='mpsContent' id='{{id}}' mpsStructureWrapper='true'>\
                    <div class='divided'>\
                        <div class='mpsContent ' id='{{id2}}'><div class='mpsLasso'/></div>\
                    </div>\
                    <div class='mpsLasso icon'><svg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='6px' height='21px' viewBox='0 0 6 21' enable-background='new 0 0 6 21' xml:space='preserve'><path fill='#333333' d='M4,9.5C4,15.099,1.892,19,0,19v2c3.42,0,6-4.944,6-11.5C6,5.459,5.018,2.036,3.465,0H0 C1.892,0,4,3.901,4,9.5z'/></svg></div>\
                    <div class='divider'>\
                      <div class='mpsContent' id='{{id1}}'><div class='mpsLasso'/></div>\
                    </div>\
                </div>\
            </div>\
            ",
        longDivision_sg:"\
            <div class='longDivision sg {{structureClass}}' validationGroup='longDivision'>\
                <div class='mpsAnchor'/>\
                <div class='mpsContent' id='{{id}}' mpsStructureWrapper='true'>\
                    <div class='divided'>\
                       <div class='mpsContent ' id='{{id2}}'><div class='mpsLasso'/></div>\
                    </div>\
                    <div class='mpsLasso icon'><svg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='2px' height='21px' viewBox='0 0 2 21' enable-background='new 0 0 2 21' xml:space='preserve'><rect fill='#333333' width='2' height='21'/></div>\
                    <div class='divider'>\
                       <div class='mpsContent' id='{{id1}}'><div class='mpsLasso'/></div>\
                    </div>\
                </div>\
            </div>\
            ",
        longDivision_il:"\
            <div class='longDivision il {{structureClass}}' validationGroup='longDivision'>\
                <div class='mpsAnchor'/>\
                <div class='mpsContent' id='{{id}}' mpsStructureWrapper='true'>\
                    <div class='divider'>\
                       <div class='mpsContent' id='{{id1}}'><div class='mpsLasso'/></div>\
                    </div>\
                    <div class='mpsLasso icon'><svg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='2px' height='21px' viewBox='0 0 2 21' enable-background='new 0 0 2 21' xml:space='preserve'><rect fill='#333333' width='2' height='21'/></div>\
                    <div class='divided'>\
                       <div class='mpsContent ' id='{{id2}}'><div class='mpsLasso'/></div>\
                    </div>\
                </div>\
            </div>\
            ",
        longDivision_fr:"\
            <div class='longDivision fr {{structureClass}}' validationGroup='longDivision'>\
                <div class='mpsAnchor'/>\
                <div class='mpsContent' id='{{id}}' mpsStructureWrapper='true'>\
                    <div class='divider'>\
                       <div class='mpsContent' id='{{id1}}'><div class='mpsLasso'/></div>\
                    </div>\
                    <div class='mpsLasso icon'><svg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='2px' height='21px' viewBox='0 0 2 21' enable-background='new 0 0 2 21' xml:space='preserve'><rect fill='#333333' width='2' height='21'/></div>\
                    <div class='divided'>\
                       <div class='mpsContent ' id='{{id2}}'><div class='mpsLasso'/></div>\
                    </div>\
                </div>\
            </div>\
            ",
        remainder_us:"\
			<div class='remainder us {{structureClass}}' validationGroup='remainder'>\
				<div class='mpsAnchor'/>\
				<div class='icon'>R</div>\
                <div class='mpsContent' id='{{id}}'><div class='mpsLasso'/></div>\
			</div>\
			",
	    remainder_fr:"\
			<div class='remainder us {{structureClass}}' validationGroup='remainder'>\
				<div class='mpsAnchor'/>\
				<div class='icon'>R</div>\
                <div class='mpsContent' id='{{id}}'><div class='mpsLasso'/></div>\
			</div>\
			",
        remainder_sg:"\
			<div class='remainder sg {{structureClass}}' validationGroup='remainder'>\
				<div class='mpsAnchor'/>\
				<div class='icon'>R</div>\
                <div class='mpsContent' id='{{id}}'><div class='mpsLasso'/></div>\
			</div>\
			",
        remainder_il:"\
			<div class='remainder il {{structureClass}}' validationGroup='remainder'>\
				<div class='mpsAnchor'/>\
				<div class='icon'>(</div>\
                <div class='mpsContent' id='{{id}}'><div class='mpsLasso'/></div>)\
			</div>\
			",
	    remainder_nl:"\
			<div class='remainder us {{structureClass}}' validationGroup='remainder'>\
				<div class='mpsAnchor'/>\
				<div class='icon'>rest</div>\
                <div class='mpsContent' id='{{id}}'><div class='mpsLasso'/></div>\
			</div>\
		",
        segment:"\
			<div class='geometry segment {{structureClass}}' validationGroup='geometry'>\
				<div class='mpsAnchor'/>\
				<div class='mpsContent' id='{{id}}'><div class='mpsLasso'/>\
				</div>\
				<div class='icon'>{{icon}}</div>\
			</div>\
			",

        rayBoth:"\
			<div class='geometry rayBoth {{structureClass}}' validationGroup='geometry'>\
				<div class='mpsAnchor'/>\
				<div class='mpsContent' id='{{id}}'><div class='mpsLasso'/>\
				</div>\
				<div class='icon'>{{icon}}</div>\
			</div>\
			",

        rayRight:"\
			<div class='geometry rayRight {{structureClass}}' validationGroup='geometry'>\
				<div class='mpsAnchor'/>\
				<div class='mpsContent' id='{{id}}'><div class='mpsLasso'/>\
				</div>\
				<div class='icon'>{{icon}}</div>\
			</div>\
			",

	    angle_geometry:"\
			<div class='geometry angle_geometry {{structureClass}}' validationGroup='geometry'>\
				<div class='mpsAnchor'/>\
				<div class='mpsContent' id='{{id}}'><div class='mpsLasso'/>\
				</div>\
				<div class='icon'>{{icon}}</div>\
			</div>\
			",


        mobiletemplate : "<div class='mobileEdit'><div class='editBtn'>Edit</div><input type='text' class='editMobile' /></div>"

    };

    /**
     * MathField View
     */
    t2k.component.mathField.MathFieldView = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.mathField.MathFieldView',

        /**
         * constructor
         * @see superclass documentation
         */
        ctor:function (config) {
            this.initMembers(config);

            /**
             * @property
             * @type {Boolean}
             */
            this.keyBoardOpen = false;

            // Render view template
            this._super(override(config, {
                template:templates.mathFieldContainer,
                partials:{
                    mps:templates.mps
                },
                fontLocale:this.fontLocale,
                devMode:this.devMode,
                colorShapes:this.colorShapes,
                italicVariables:this.italicVariables,
                showMFEmptyIcon:(this.showMFEmptyIcon && this.editMode),
                editMode:this.editMode,
                completionMode:this.completionMode
            }));

            this.checkShortHandElements();
            this.initEvents();
            this.initView();

	        var isTaskWithContainers = ['sorting', 'matching', 'sequencing', 'mc'].indexOf(this.cfg.taskmode) > -1;
	        if ((!this.cfg.viewObject) && (!isTaskWithContainers)) { //not from drag and drop and in MTQ, MC
		        if (window['globalEvents']) {  //there is no global events in CGS, check for global variable existence
			        var thi$ = this;
			        window['globalEvents'].add({
				        fnc:function () {
					        (!!thi$._view) && thi$.adjustContentStyle();
				        }
			        });
		        } else {
			        this.adjustContentStyle();
		        }
	        }

	        if(ENV.behaviors.isTablet) {
		        this._input.attr('disabled', '');
		        this._input.hide();
	        }

            //if on phone gap adding edit btn
            //todo: need to repalce with useExternalKeyboard
            if( !! ENV.behaviors.useExternalMediaPlayer && !ENV.behaviors.overrideMathNativeKeyboard){
                this.renderMobileTemplate()
            }
        },

	    //override - set state of component
	    setMyState:function (state) {
		    this.state = state;

		    var markUp = '', $state = jQuery(state);

		    if ($state.length) {
			    if ($state.children('markUp').length == 0) {
				    markUp = state[0].innerHTML;
			    } else {
				    markUp = $state.children('markUp').text();
			    }

			    this.setEnabled($state.attr('enabled') === 'true');
			    this.replaceContent('<markUp>' + markUp + '</markUp>');
			    this.adjustContentStyle();
		    }

		    $state = null;
	    },

	    //override - get state of component
	    addMyState:function (state) {
			return Perf.create('state')
					.append(Perf.create('markUp')
					.text(this.getMarkUpValue()));

	    },

        renderMobileTemplate:function(){
            this._view.append($(templates.mobiletemplate));
            // add the style to the btn
            var self = this;
            var btnStyle = {"position":"absolute","font-size": "15px","width": "33px","height": "22px","padding": "0 2px","background":"white"},
            mobileEditStyle = {"display": "inline-block", "position":"relative"},
            inputStyle ={"position":"absolute","top":"0px","left":"0px","border":0, "width":"30px","color": "white","outline": "0","z-index":1000,"background": "transparent"};
            
            this._view.find(".mobileEdit")
            .css(mobileEditStyle)
            .children()
            .first()
            .css(btnStyle)
            .next()
            .css(inputStyle)
            .on("click", function(e){
                var that = $(this);
                that.val("z");
                that.prev().hide();
                self.startEdit();
                self.placeCaretAtEnd();
                
            })
            .on("blur",function(e){
                if(self.editMode){
                    this.focus();
                }else{
                    this.val("");
                    this.prev().show();
                }
            });
            this._view.on("blur",function(){
                if(self.editMode && !$(this).find(".editMobile").is(":focus")){
                    this.find(".editMobile").val("")
                    .prev().show();
                    self.endEdit();
                }else{
                    this.find(".editMobile").val("")
                    .prev().show();
                }
            })


        },

        /**
         * initMembers
         * Init members
         */
        initMembers:function (config) {

            /**
             * @property
             * @type {Object}
             */
            this.keyboard = null;

            // set config.parent
            if (typeof config.parent != "object") {
                config.parent = Perf.select('#' + config.parent);
            }

            /**
             * get mathField's completionType
             * this param set a completionType for all MF.
             * this is not really a completion mode. just keyboard limitation.
             * @type {String}
             */
            this.mathFieldCompletionType = jQuery(config.data).attr('completionType');
            this.mathFieldCompletionType = !!this.mathFieldCompletionType ? this.mathFieldCompletionType : null;
            /**
             *
             * @type {Boolean}
             */
            this.colorShapes = jQuery(config.data).attr('colorShapes') == 'true';
            /**
             *
             * @type {Boolean}
             */
            this.italicVariables = jQuery(config.data).attr('italicVariables') == 'true';


            this.maxHeight = {
                stringValue: jQuery(config.data).attr('maxHeight')
                    || constants.maxHeight.defaultValue
            };

            this.container = (config.container && config.container.length)?
                config.container:
                config.parent.parents('.task_container');


            /**
             *
             * @type {Object}
             */
            this.viewPort = config.parent.parents('.' + constants.reduction.viewPortClass);

            //in case of parent is iframe MF view port should be the iframe body
            if (this.viewPort.length == 0) {
                this.viewPort = config.parent.parents('body');
            }
            /**
             *
             * @type {Boolean}
             */
            this.enableBlowup = false;
             /**
             *
             * @type {Boolean}
             * prevents blowup in subanswer
             */

            this.dontEnableBlowup = config.dontEnableBlowup
            /**
             *
             * @type {Boolean}
             */
            this.setMarkUp = false;
            /**
             *
             * @type {Number}
             */
            this.reductionStep = (!!config.reductionStep ? config.reductionStep : 0);
            /**
             *
             * @type {Number}
             */
            this.reductionStepSize = 2;
            /**
             *
             * @type {Number}
             */
            this.fontSize = this.originalFontSize = config.parent.css('font-size').px2int();
            /**
             *
             * @type {Boolean}
             */
            this.devMode = jQuery(config.data).attr('devMode') === 'true';
            /**
             *
             * @type {Boolean}
             */
            this.showMFEmptyIcon = (jQuery(config.data).attr('showMFEmptyIcon') === 'true') || config.showMFEmptyIcon;
            /**
             *
             * @type {Number}
             */
            this.id = config.id;
            /**
             *
             * @type {Boolean}
             */
            this.editMode = jQuery(config.data).attr('editMode') === 'on';
            /**
             *
             * @type {Boolean}
             */
            this.completionMode = jQuery(config.data).attr('editMode') === 'completion';
            /**
             *
             * @type {Boolean}
             */
            this.autoComma = !!(jQuery(config.data).attr('autoComma') === 'true') ;
            if( ENV.locale == "nl_NL" ) {
            	this.autoComma = false ;
            }
            /**
             *
             * @type {Boolean}
             */
            this.activeValidation = !!(jQuery(config.data).attr('validate') === 'true');
			// var presetName = jQuery(config.data).attr("keyboardPreset") || 'defaultKeyboard';
	        var presetName = jQuery(config.data).attr("keyboardPreset") || 'fullMathField';

	        if (constants.keyboardPresets.hasOwnProperty(presetName)) {
		        this.keyboardPreset = constants.keyboardPresets[presetName];
	        } else {
			// this.keyboardPreset = constants.keyboardPresets['defaultKeyboard'];
		        this.keyboardPreset = constants.keyboardPresets['fullMathField'];
	        }
            /**
             *
             * @type {*}
             */
            this.fontLocale = jQuery(config.data).attr("fontLocale") || ( ENV.locale ).toLowerCase().split('_')[1];

            var configWidth = config.widthEm || jQuery(config.data).attr('width') ||  '';    //em

            //create new closer objects
            /**
             *
             * @type {Object}
             */
            this.mpsWrapping = copy({}, this.mpsWrapping);
            /**
             *
             * @type {Object}
             */
            this.validation = copy({}, this.validation);
            /**
             *
             * @type {Object}
             */
            this.selection = copy({}, this.selection);
            /**
             *
             * @type {Object}
             */
            this.initMarkup = copy({}, this.initMarkup);
            /**
             *
             * @type {Object}
             */
            this.calculate = copy({}, this.calculate);

            this.mpsWrapping.collection = [];
            this.mpsWrapping.thi$$ = this;
            this.validation.thi$$ = this;
            this.selection.thi$$ = this;
            this.initMarkup.thi$$ = this;
            this.calculate.thi$$ = this;

            /**
             *
             * @type {Object}
             */
            this.widthMode = {
                'fixedWidth':(configWidth == '') ? false : true,
                'width':(configWidth == '') ? (this.container.width() / this.fontSize) : configWidth
            };

            /**
             *
             * @type {Document}
             */
            this.targetDocument = jQuery(!!config.targetDocument ? config.targetDocument : document);

            /**
             *
             * @type {Int}
             */
            this.parentFontSize = config.parent.css('font-size').px2int();

	        //init virtual keyboard symbols only one time
	        constants.initVirtualKeyboardSymbols(this.fontLocale);

        },

        /**
         * getSize
         * override
         * @returns size
         */
        getSize:function () {
			var blowUpHeight = Compat.actualHeight(this._blowup);

	        if(blowUpHeight > 1) {
		        return {'width': Compat.actualWidth(this._blowup), 'height': blowUpHeight };
	        } else {
                return {'width': Compat.actualWidth(this._content), 'height': Compat.actualHeight(this._frame) };
	        }
        },

	    getWidthEM:function () {
		    var widthPX = Compat.actualWidth(this._content),
			    fontSize = this.fontSize;

		    return Math.ceil(widthPX / fontSize);
	    },

	    getWidthPX:function () {
		    var widthPX = Compat.actualWidth(this._content) + 1;

		    return Math.ceil(widthPX);
	    },

	    getHeightPX: function() {
		    var frameHeight = Compat.actualHeight(this._frame),
			    frameOriginalHeight = this._frame.css('min-height').px2int(), //frame original height
			    mfHeight = 0;

		    if (frameHeight > frameOriginalHeight) {
			    mfHeight = frameHeight;
		    } else {
			    mfHeight = this._view.outerHeight(false);
		    }

		    return mfHeight;
	    },

	    removeContent:function () {
		    this.initMarkup.remove();

		    if(!this.initFrameSize) {
			    this._frame.width(this._content.width() + constants.frameStyle.padding.left + constants.frameStyle.padding.right);
			    this._frame.height(this._content.height() + constants.frameStyle.padding.top + constants.frameStyle.padding.bottom);
		    } else {
			    this._frame.css(this.initFrameSize);
		    }

		    this.alignFrame(true);

	    },

	    setFontSize: function(fontSize) {
		    this.fontSize = fontSize;
		    this._view.css('font-size', this.fontSize);
	    },

        /**
         * checkWidthVsContainer
         */
        checkWidthVsContainer:function () {

            if(this.editMode || this.completionMode) {
                return;
            }

            var containerWidth = this.container.width();

            if (this.widthMode.fixedWidth) {

                var mfWidth = this.fontSize * this.widthMode.width;
                var deltaWidth = mfWidth - containerWidth;

                if (deltaWidth > 0) {
                    var virtualReduction = this.virtualReduction(containerWidth, mfWidth, this.fontSize);
	                this.setFontSize(virtualReduction.reducedFontSize);

                    mfWidth = this.fontSize * this.widthMode.width;
                    this._frame.width(mfWidth);

                    if (virtualReduction.blowup) this.createBlowup(virtualReduction.blowup);
                }

            } else {

                var mfWidth = this._content.width();

                var deltaWidth = mfWidth - containerWidth;

                if (deltaWidth > 0) {

                    this.widthMode.width = Math.ceil(mfWidth / this.originalFontSize);    //em

                    var virtualReduction = this.virtualReduction(containerWidth, mfWidth, this.fontSize);
	                this.setFontSize(virtualReduction.reducedFontSize);

                    mfWidth = Math.floor((this.fontSize * this.widthMode.width) / this.originalFontSize);
                    this._frame.width(mfWidth);

                    if (virtualReduction.blowup) this.createBlowup(virtualReduction.blowup);
                }
            }
        },

        /**
         * checkShortHandElements
         * in case of MF parent is iframe, there is a need for manual variable assignment
         */
        checkShortHandElements:function () {

            if (!!!this._content) {

                var thi$ = this;

                // Keep reference to the view's DOM element.
                this._view = this.cfg.parent.find('#' + this.cfg.id + '.mathField');

                // Keep reference to all DOM elements with id suffix.
                jQuery(this._view).find('[id^=' + this.cfg.id + '_]').each(function (index, elem) {
                    thi$[jQuery(elem).attr('id').substring(thi$.cfg.id.length)] = jQuery(elem);
                });

            }
        },


        /**
         * createBlowup
         * @param virtualReduction true/false
         */
        createBlowup:function (virtualReduction) {
            var thi$ = this;
            this.enableBlowup = true;
            this._view.addClass('blowup');
            this.alignFrame();
            this.showMasc(true);

            this._content.css('padding', constants.blowUp.heightAddition / 2);

            // align blowup div
	        this._blowup.show().css({
		        'top':this._content.position().top,
		        'left':this._content.position().left,
		        'width':this._content.width() + constants.blowUp.heightAddition,
		        'height':this._content.height() + constants.blowUp.heightAddition}).click(function () {
			        thi$.showBlowup(true, virtualReduction);
		        });

            this._view.css('top', this._content.position().top);

            this.dispatchEvent("cantReduce");

        },

        /**
         * showBlowup
         * @param flag
         * @param virtualReduction
         */
        showBlowup:function (flag, virtualReduction) {

            var thi$ = this;

	        if (flag) {

		        //check if blow up is already shown
		        if(!this._blowupContainer.hasClass('hide')) {
			        return false;
		        }

                var viewPortWidth = this.viewPort.width(), playerWidth = jQuery('.player').width();

		        var blowupFontSize = (virtualReduction ?
			        this.virtualReduction(viewPortWidth, (this.originalFontSize * this.widthMode.width), this.originalFontSize).reducedFontSize :
			        this.originalFontSize);

		        if (blowupFontSize < constants.reduction.minFontSize) {
			        blowupFontSize = constants.reduction.minFontSize;
		        } else if (blowupFontSize > this.originalFontSize) {
			        blowupFontSize = this.originalFontSize;
		        }

		        var clonedContent = jQuery('<div class="mathField" />');
		        clonedContent.append(this._content.clone());
		        clonedContent.css('font-size', blowupFontSize + 'px');

		        var newMfWidth = (virtualReduction ?
			        (blowupFontSize * this.widthMode.width) :
			        (this._view.width() * this.originalFontSize) / this.parentFontSize) + constants.blowUp.widthAddition;

		        this._blowupContainer.find('.mathField').remove();

                clonedContent.appendTo(this._blowupContainer);

var showParent = this._blowupContainer.closest('[class^="sequence_"]'),
    isShared = showParent.hasClass('sequence_shared'),
    blowUpTop,
    blowUpLeft,
    tmpParent;

if (isShared) {
    tmpParent = showParent.find('.sharedarea_content');
} else {
    tmpParent = this._blowupContainer.parents('.task');
}

this._blowupContainer.appendTo(tmpParent);
blowUpTop = this._blowup.offset().top - tmpParent.offset().top;
blowUpLeft = this._blowup.offset().left - tmpParent.offset().left;


                this._blowupContainer.css({ 'font-size': blowupFontSize + 'px',
                                            'position': 'absolute',
	                                        'left' : blowUpLeft  + 'px',
                                            'top' : blowUpTop + 'px',
	                                        'width' : newMfWidth + 'px',
                                            'max-width':tmpParent.outerWidth() + 'px'}).removeClass('hide');


                this._blowupContainer.find('.x').click(function () {
                    thi$.showBlowup(false, false);
                });


	        } else {
                this._blowupContainer.find('.mathField').remove();
                this._blowupContainer.addClass('hide');
	        }

        },

        /**
         * virtualReduction
         * @param containerWidth
         * @param mfWidth
         * @param fontSize
         */
        virtualReduction:function (containerWidth, mfWidth, fontSize) {

            var reductionPrecent = containerWidth / mfWidth;
            var ret = {};

                ret.reducedFontSize = Math.floor(fontSize * reductionPrecent);
                ret.blowup = ret.reducedFontSize < constants.reduction.minFontSize;

            if(this.dontEnableBlowup  && ret.blowup){
                ret.reducedFontSize = constants.reduction.minFontSize;
                ret.blowup = false;                
            }

	        return ret;
        },

        /**
         * getValue
         * returns MF calculated value
         */
        getValue:function () {
            return this.calculate.value();
        },

        /**
         * getMarkUpValue
         * returns MF markUp value
         */
        getMarkUpValue:function () {
            return this.calculate.markupValue();
        },

        /**
         * replaceContent
         * @param markup
         * replaces MF content with htnl markUp parameter
         */
        replaceContent:function (markup) {
            this._frame.removeClass("not_valid");
            this.initMarkup.remove();

            this.setMarkUp = true;
	        this.lastStructureRemovedFlag = false;
            this.initMarkup.start(markup);
        },

        //calculate class
        calculate:{

            /**
             * getFinalMathString
             * translates math field markUp into the math string (for javascript eval)
             */
            getFinalMathString:function () {

                var markupValue = this.markupValue();
                markupValue = this.handleRemainderMarkupValue(markupValue);

                if (!markupValue) return null;

                return this.getMathString(markupValue);
            },

            /**
             * value
             * calcultates value of the math field data
             */
            value:function () {

                var finalMathString = this.getFinalMathString();
                if (finalMathString == null) return null;

                // send it to this.thi$$.validate.validateCalculationCorrectness (check for: =, >, <, !=, <=, >=, ~~)
                // if true, return null
                if (this.thi$$.validation.validateCalculationCorrectness(finalMathString)) {
                    return null;
                }

                var returnValue = null;

	            try {
		            returnValue = eval(finalMathString);
		            returnValue = 1 * returnValue.toFixed(15); //fix precision bug
	            } catch (e) {

	            }

                return returnValue;
            },

            /**
             * correctness
             * returns correctness of the math field data
             */
            correctness:function () {

                var finalMathString = this.getFinalMathString();
                if (finalMathString == null) return null;

                // send it to this.thi$$.validate.validateCalculationCorrectness (check for: ==, >, <, !=, <=, >=)
                // if true, eval
                if (!this.thi$$.validation.validateCalculationCorrectness(finalMathString)) {
                    return null;
                }

                var returnValue = null;

                try {
                    returnValue = eval(finalMathString);
                } catch (e) {

                }

                return returnValue;
            },

            /**
             * elementValidationGroup get element - extract it's tagName and it's validation group
             * @param $element
             */
            elementValidationGroup:function ($element) {
                var elementTag = $element.get(0).tagName.toLowerCase();

                elementTag = constants.lowerCaseKeyToKey[elementTag];

                return constants.validationGroup[elementTag];
            },

            /**
             * wrapMarkupValue
             * @param markupValue
             * @param tagName
             * wrap wanted tag as 'power', 'percent' in order to translate it to mathString later
             */
            wrapMarkupValue:function (markupValue, tagName) {

                markupValue = jQuery(markupValue);

                var startIndex, endIndex;

                var $child, thi$ = this, startElement = null, prevElement = null, validationGroup;
                var tagWrapper = jQuery('<' + tagName + 'Wrapper/>');

                markupValue.each(function (index, child) {

                    if (!!!child) {
                        return false;
                    }

                    $child = jQuery(child);

                    if (child.tagName.toLowerCase() == tagName) {

                        endIndex = index;

                        prevElement = $child.prev();

                        if (prevElement.length == 0) {
                            return false;
                        }

                        validationGroup = thi$.elementValidationGroup(prevElement);

                        switch (thi$.analyzePrevChild(prevElement)) {

                            case 'digit':
                                startIndex = endIndex - 1;
                                startElement = prevElement;

                                if (startElement.prev().length == 0) {
                                    break;
                                }

                                validationGroup = thi$.elementValidationGroup(startElement.prev());

                                while (startElement.prev() && (validationGroup == 'digits' || validationGroup == 'decimalPoint' || validationGroup == 'thousandsComma' )) {
                                    startIndex--;
                                    startElement = startElement.prev();

                                    if (startElement.prev().length == 0) {
                                        break;
                                    }
                                    validationGroup = thi$.elementValidationGroup(startElement.prev());
                                }

                                break;

                            case 'structure':
                                startElement = prevElement;
                                startIndex = endIndex - 1;
                                break;

                            case 'parenthesis':

                                startIndex = endIndex - 1;
                                startElement = prevElement;
                                var parenthesisCounter = 1;

                                while (parenthesisCounter > 0) {

                                    startIndex--;
                                    startElement = startElement.prev();

                                    validationGroup = thi$.elementValidationGroup(startElement);

                                    if ((validationGroup == 'closingParenthesis') || (validationGroup == 'closingSquareParenthesis')) parenthesisCounter++;
                                    else if ((validationGroup == 'openingParenthesis') || (validationGroup == 'openingSquareParenthesis')) parenthesisCounter--;

                                }

                                break;
                            case 'operator':
                                return false;


                            default:
                                throw('mathField ERROR on wrapMarkupValue - wrong analysis');

                        }

                        if (startElement.length > 0) {
                            tagWrapper.append(markupValue.splice(startIndex, (endIndex + 1 - startIndex)));
                            markupValue.splice(startIndex, 0, tagWrapper.get(0));

                            tagWrapper = jQuery('<' + tagName + 'Wrapper/>');
                        }
                    }

                });

                return markupValue;
            },

            /**
             * analyzePrevChild
             * @param prevChild
             * returns element type ('structure', 'parenthesis', 'digit')
             */
            analyzePrevChild:function (prevChild) {
                var prevChildTag = prevChild.get(0).tagName.toLowerCase();

                prevChildTag = constants.lowerCaseKeyToKey[prevChildTag];

                var validationGroup = constants.validationGroup[prevChildTag];

                if (prevChild.hasClass('structure'))
                    return 'structure';

                if (validationGroup == 'closingParenthesis')
                    return 'parenthesis';
                if(validationGroup == 'operators')
                    return 'operator';

                return 'digit';
            },

            /**
             * getMathString
             * @param markupValue
             * returns math string (for javascript eval) after markUp translations
             */
            getMathString:function (markupValue) {
                var powerCount = 0, percentCount = 0, fractionCount = 0;

                jQuery(markupValue).each(function (index, child) {
                    switch (child.tagName.toLowerCase()) {
                        case 'power' :
                            powerCount++;
                            break;
                        case 'percent' :
                            percentCount++;
                            break;
                        case 'fraction':
                            fractionCount++;
                            break;
                    }
                });

                if (powerCount > 0) {
                    markupValue = this.wrapMarkupValue(markupValue, 'power');
                }

                if (percentCount > 0) {
                    markupValue = this.wrapMarkupValue(markupValue, 'percent');
                }
                if (fractionCount > 0){
                    markupValue = this.wrapMarkupValue(markupValue, 'fraction');
                }

                var $child, tagName, mathString = '', mathValue, thi$ = this, lastTagName = '';

                jQuery(markupValue).each(function (index, child) {

                    $child = jQuery(child);
                    tagName = constants.lowerCaseKeyToKey[child.tagName.toLowerCase()];

                    if (!!!tagName) {
                        tagName = child.tagName.toLowerCase();
                    }

                    switch (tagName) {
                        case 'fractionwrapper':
                            
                            var fractionMathString = '', numbers = '';
                            jQuery($child.children()).each(function(i, fractionChild){
                                var fractionTagName = constants.lowerCaseKeyToKey[fractionChild.tagName.toLowerCase()];
                                
                                if(fractionTagName == 'fraction'){

                                    var numeratorMarkupValue = jQuery(fractionChild).children('numerator').children();
                                    var denominatorMarkupValue = jQuery(fractionChild).children('denominator').children();

                                    var numeratorMathString = thi$.getMathString(numeratorMarkupValue);
                                    var denominatorMathString = thi$.getMathString(denominatorMarkupValue);

                                    fractionMathString = '((' + numeratorMathString + ')/(' + denominatorMathString + '))';

                                }else{

                                    numbers += thi$.getMathString(fractionChild);
                                }

                            });
                            
                            mathString += "(" + numbers + "+" + fractionMathString + ")";
                               

                        break;

                        case 'fraction':

                            var fractionMathString = '';

                            var numeratorMarkupValue = $child.children('numerator').children();
                            var denominatorMarkupValue = $child.children('denominator').children();

                            var numeratorMathString = thi$.getMathString(numeratorMarkupValue);
                            var denominatorMathString = thi$.getMathString(denominatorMarkupValue);

                            fractionMathString = '((' + numeratorMathString + ')/(' + denominatorMathString + '))';
                            if((constants.validationGroup[lastTagName] =='digits')){
                                mathString += "+";
                            }
                            mathString += fractionMathString;

                            break;

                        case 'longDivision':

                            var longDivisionMathString = '';

                            var dividedMarkupValue = $child.children('divided').children();
                            var dividerMarkupValue = $child.children('divider').children();

                            var dividedMathString = thi$.getMathString(dividedMarkupValue);
                            var dividerMathString = thi$.getMathString(dividerMarkupValue);

                            longDivisionMathString = '((' + dividedMathString + ')/(' + dividerMathString + '))';
                            mathString += longDivisionMathString;

                            break;

                        case 'powerwrapper':
                            // 1. get 'power' mathString
                            // remove power tag
                            // 2. get X mathString (remaining markup)
                            // 3. Math.pow(eval(x), eval(power))
                            // mathString += '(' + pow + ')';
                            var powerValue = $child.children('power').children();
                            $child.children('power').remove();
                            var raisedToPowerValue = $child.children();

                            var powerMathString = thi$.getMathString(powerValue);
                            var raisedToPowerMathString = thi$.getMathString(raisedToPowerValue);

                            mathString += 'Math.pow(eval(' + raisedToPowerMathString + '), eval(' + powerMathString + '))';

                            break;

                        case 'percentwrapper':
                            // 1. get 'percent' mathString
                            // remove percent tag
                            // 2. get percent value
                            // 3. (eval(percent value) / 100)
                            // mathString += '(' + (eval(percent value) / 100) + ')';
                            $child.children('percent').remove();
                            var percentValue = $child.children();
                            $child.remove();

                            var percentMathString = thi$.getMathString(percentValue);
                            mathString += '((' + percentMathString + ') / 100)';

                            break;

                        case 'completion' :
                            var completionValue = $child.children();
                            $child.remove();

                            mathString += thi$.getMathString(completionValue);
                            break;

                        case 'absolute' :
                            var absoluteValue = $child.children();
                            $child.remove();

                            mathString += 'Math.abs(' + thi$.getMathString(absoluteValue) + ')';
                            break;

                        //When pi follows a number, a decimal number, a fraction or a powered number/expression, a multiplication operator will be added before it
                        // in the calculation process.
                        case 'pi' :
                            var piValue = constants.prototypeControlsHash['pi'].mathValue;

                            // if prev tagName is a fraction | power | digits,
                            // calculate * pi
                            if ((lastTagName == 'fraction') || (lastTagName == 'powerwrapper') || (constants.validationGroup[lastTagName] == "digits")) {
                                mathString += '*';
                            }

                            mathString += piValue;

                            break;
                       
                        default:
                            mathValue = (constants.prototypeControlsHash[tagName].mathValue != undefined) ? constants.prototypeControlsHash[tagName].mathValue : constants.prototypeControlsHash[tagName].symbol;
                            mathString += mathValue;
                    }

                    // save last tag name
                    lastTagName = tagName;

                });
                
                return mathString;

            },

            /**
             * markupValue
             * returns markUp html
             */
            markupValue:function () {

                var markupValue = jQuery('<markupValue/>');
                var domChildrenArray = this.thi$$._content.children('.mpsContent').children();

                this.parseMarkupValue(domChildrenArray, markupValue);
                return (jQuery(markupValue).html());

            },

            /**
             * parseMarkupValue
             * @param domChildrenArray
             * @param markupContainer
             * parses divs array with data and apends it to the wanted markUp container
             */
            parseMarkupValue:function (domChildrenArray, markupContainer) {

                var $child, key, thi$ = this, structureName;

                jQuery(domChildrenArray).each(function (index, child) {

                    $child = jQuery(child);
                    // symbol
                    if ($child.hasClass('symbol')) {

                        key = constants.symbolToKey[$child.text()];
                        jQuery('<' + key + '/>').appendTo(markupContainer);

                    } else if ($child.hasClass('structure')) {
                        // structure

                        structureName = $child.attr('class').replace('structure', '').trim();

                        if (structureName.indexOf(' ') > -1) {
                            for (var structure in constants.mathTypeKeyboard) {
                                if (structureName.indexOf(structure) > -1) structureName = structure;
                            }
                        }

                        switch (structureName) {

                            case 'fraction' :

                                var fractionMarkup = jQuery('<fraction/>');
                                fractionMarkup.appendTo(markupContainer);

                                var numeratorMarkup = jQuery('<numerator/>');
                                numeratorMarkup.appendTo(fractionMarkup);
                                var numeratorDom = $child.children('.mpsContent').children('.numerator').children('.mpsContent');
                                thi$.parseMarkupValue(numeratorDom.children(), numeratorMarkup);

                                var denominatorMarkup = jQuery('<denominator/>');
                                denominatorMarkup.appendTo(fractionMarkup);
                                var denominatorDom = $child.children('.mpsContent').children('.denominator').children('.mpsContent');
                                thi$.parseMarkupValue(denominatorDom.children(), denominatorMarkup);

                                break;

                            case 'completion' :
                                var completionMarkup = jQuery('<completion/>');
                                completionMarkup.attr('completiontype', $child.attr('completiontype'));
                                completionMarkup.appendTo(markupContainer);

                                var completionDom = $child.children('.mpsContent');
                                thi$.parseMarkupValue(completionDom.children(), completionMarkup);

                                break;

                            case 'power' :

                                var powerMarkup = jQuery('<power/>');
                                powerMarkup.appendTo(markupContainer);

                                var powerDom = $child.children('.mpsContent');
                                thi$.parseMarkupValue(powerDom.children(), powerMarkup);

                                break;

                            case 'remainder' :

                                var remainderMarkup = jQuery('<remainder/>');
                                remainderMarkup.appendTo(markupContainer);

                                var remainderDom = $child.children('.mpsContent');
                                thi$.parseMarkupValue(remainderDom.children(), remainderMarkup);

                                break;

                            case 'absolute' :
                                var absoluteMarkup = jQuery('<absolute/>');
                                absoluteMarkup.appendTo(markupContainer);

                                var absoluteDom = $child.children('.mpsContent');
                                thi$.parseMarkupValue(absoluteDom.children(), absoluteMarkup);
                                break;

                            case 'longDivision' :
                                var longDivisionMarkup = jQuery('<longDivision/>');
                                longDivisionMarkup.appendTo(markupContainer);

                                var dividerMarkup = jQuery('<divider/>');
                                dividerMarkup.appendTo(longDivisionMarkup);
                                var dividerDom = $child.children('.mpsContent').children('.divider').children('.mpsContent');
                                thi$.parseMarkupValue(dividerDom.children(), dividerMarkup);

                                var dividedMarkup = jQuery('<divided/>');
                                dividedMarkup.appendTo(longDivisionMarkup);
                                var dividedDom = $child.children('.mpsContent').children('.divided').children('.mpsContent');
                                thi$.parseMarkupValue(dividedDom.children(), dividedMarkup);

                                break;

                            case 'segment' :
                            case 'rayRight':
                            case 'rayBoth' :
	                        case 'angle_geometry' :

                                var geometryMarkup = jQuery('<' + structureName + '/>');

                                geometryMarkup.appendTo(markupContainer);

                                var geometryDom = $child.children('.mpsContent');
                                thi$.parseMarkupValue(geometryDom.children(), geometryMarkup);

                                break;

                        }

                    }

                });

            },

            /**
             * charCodeToKey
             * @param charCode
             * returns key
             */
            charCodeToKey:function (charCode) {

                var deviceKeys = constants.keyboardPresets.fullMathField.deviceKeys;

                for (var node in deviceKeys) {
                    if (deviceKeys[node].charCodes.indexOf(charCode) != -1) return node;
                }

                throw('mathField ERROR - charCode ' + charCode + ' was not found.');
                return null;
            },

            /**
             * handleRemainderMarkupValue
             * @param markupValue
             */
            handleRemainderMarkupValue:function (markupValue) {
                // $
                markupValue = jQuery(markupValue);

                // search for remainder (if there is no remainder, this function is irrelevant)
                var remainderCounter = 0;
                markupValue.each(function (index, child) {
                    if (child.tagName.toLowerCase() == 'remainder') remainderCounter++;
                });

                // validate remainderCounter
                if (remainderCounter == 0) return markupValue;
                if (remainderCounter > 1)  return null;

                // 1. if (!'=') - null
                // 2. if (! only one '=') - null
                // get two sides of the eq.  eq.Left and eq. Right
                // set eqReminder  and   eqDivision
                // validate eqReminder is only Reminder
                // validate eqDivision that is only division
                // get divider mathString
                // repllace:  aRb = a +(b / divider)

                // count equal:
                var equalCounter = 0;
                markupValue.each(function (index, child) {
                    if (child.tagName.toLowerCase() == 'equal') equalCounter++;
                });

                // validate equalCounter
                if (equalCounter != 1) return null;

                var children;
                //handle completion - remove only for this function run
                markupValue.each(function (index, child) {
                    if (!!child && child.tagName.toLowerCase() == 'completion') {

                        children = jQuery(child).children();
                        markupValue.splice(index, 1);

                        children.each(function (innerIndex, innerChild) {
                            markupValue.splice((index + innerIndex), 0, innerChild);

                        });

                    }
                });

                // get two sides of the eq:
                var leftEq = [];
                var rightEq = [];
                var useLeftEq = true;
                var remainderAtLeft = true;

                // fill them
                markupValue.each(function (index, child) {
                    if (child.tagName.toLowerCase() == 'equal') {
                        useLeftEq = false;
                    } else {

                        if (child.tagName.toLowerCase() == 'remainder') remainderAtLeft = useLeftEq;

                        if (useLeftEq) leftEq.push(markupValue[index]);
                        else             rightEq.push(markupValue[index]);
                    }
                });

                // set remainderEq and divisionEq
                var remainderEq = (remainderAtLeft) ? leftEq : rightEq;
                var divisionEq = (!remainderAtLeft) ? leftEq : rightEq;

                // validate remainderEq - digits and remainder only
                var idx, validationGroup;
                for (idx in remainderEq) {
                    validationGroup = constants.validationGroup[remainderEq[idx].tagName.toLowerCase()];
                    if (validationGroup != 'digits' && validationGroup != 'remainder') return null;
                }

                // validate divisionEq and get divider
                var divider;
                // one structure
                var structureName;
                if (divisionEq.length == 1) {
                    structureName = divisionEq[0].tagName.toLowerCase();

                    switch (structureName) {

                        case 'fraction' :
                            // get denominator = divider
                            divider = jQuery(divisionEq[0]).children('denominator').children();
                            break;

                        case 'longdivision' :
                            // divider = divider
                            divider = jQuery(divisionEq[0]).children('divider').children();
                            break;

                        default:
                            return null;

                    }
                    // on structure validation end
                } else {

                    divider = [];

                    // validate for ratio or division
                    var rationDivisionFound = false, currElementTag;
                    for (idx in divisionEq) {
                        currElementTag = divisionEq[idx].tagName.toLowerCase();

                        if (currElementTag == 'ratio' || currElementTag == 'division') rationDivisionFound = true;
                    }

                    if (!rationDivisionFound) return null;

                    var divisionFound = false;
                    var expectDivision = null;
                    var parazitisCounter = 0;
                    var tagName, validationGroup;
                    var divisionIdx = -1;

                    for (idx in divisionEq) {

                        if (divisionFound) {
                            divider.push(divisionEq[idx]);
                        } else {

                            tagName = divisionEq[idx].tagName.toLowerCase();
                            validationGroup = constants.validationGroup[tagName];

                            switch (validationGroup) {

                                case 'openingParenthesis' :
                                case 'openingSquareParenthesis' :
                                    expectDivision = false;
                                    parazitisCounter++;
                                    break;

                                case 'closingParenthesiss' :
                                case 'closingSquareParenthesis' :
                                    parazitisCounter--;
                                    expectDivision = parazitisCounter == 0;
                                    break;

                                case 'digits' :
                                    expectDivision = (expectDivision == null) ? true : expectDivision;
                                    break;

                                case 'operators' :

                                    if (expectDivision && ( tagName == 'division' || tagName == 'ratio' )) {
                                        divisionFound = true;
                                        expectDivision = false;
                                        divisionIdx = eval(idx) + 1;
                                    } else {
                                        return null;
                                    }

                                    break;

                                default:
                                    if (expectDivision) break;

                            }

                        }

                    } // end else

                    if (divisionIdx == -1) return null;

                }

                var a = [], b = [], remainderReplacement = [], newMarkUpValue = [];
                // replace:  aRb = a +(b / divider)
                remainderEq.forEach(function (item) {
                    if (item.tagName.toLowerCase() != 'remainder') {
                        a.push(item);
                    } else {

                        jQuery(item).children().each(function (index, child) {
                            b.push(child);
                        });

                    }
                });

                remainderReplacement.push(jQuery('<leftparenthesis/>').get(0));
                a.forEach(function (item) {
                    remainderReplacement.push(item);
                });
                remainderReplacement.push(jQuery('<rightparenthesis/>').get(0));


                remainderReplacement.push(jQuery('<plus/>').get(0));
                remainderReplacement.push(jQuery('<leftparenthesis/>').get(0));

                b.forEach(function (item) {
                    remainderReplacement.push(item);
                });

                remainderReplacement.push(jQuery('<division/>').get(0));

                for (var item = 0; item < divider.length; item++) {
                    remainderReplacement.push(divider[item]);
                }

                remainderReplacement.push(jQuery('<rightparenthesis/>').get(0));

                divisionEq.push(jQuery('<equal/>').get(0));

                newMarkUpValue = jQuery.merge(divisionEq, remainderReplacement);

                return newMarkUpValue;

            }

        },

        // validation functions
        validation:{

            /**
             * start validation
             */
            start:function () {

                //remove prev mark of not valid elements
                this.thi$$._content.find('div').removeClass("not_valid");

                var groupType, groupTypeName, validationType, validationTypeName, validationGroupToBeChecked;

                //validation groups : digits, operators, relations etc..
                for (groupType in constants.validationConstrains) {

                    groupTypeName = constants.validationConstrains[groupType];

                    //validation types : symbols, structures, logic
                    for (validationType in groupTypeName) {

                        validationTypeName = groupTypeName[validationType];

                        //validation group to be checked
                        for (validationGroupToBeChecked in validationTypeName) {

//                          validationGroupToBeChecked = 'openingParenthesis', validationType = 'symbols',  groupType = 'digits'
                            if (this[validationType]) {
                                this[validationType](groupType, validationGroupToBeChecked);
                            }

                        }

                    }

                }

                this.checkRelativePosition();

                this.checkForEmptyParts();

                this.checkForGrouping();
            },

            /**
             * symbols
             * @param groupTypeName
             * @param validationGroupToBeChecked
             * check if after symbol with "validationGroup = groupTypeName" there is a symbol with "validationGroup = validationGroupToBeChecked"
             */
            symbols:function (groupTypeName, validationGroupToBeChecked) {
                var next_element, $child, thi$ = this;

                this.thi$$._content.find('div [validationGroup=' + groupTypeName + ']').each(function (index, child) {
                    $child = jQuery(child);
                    next_element = $child.next();

                    // validate if next exists and current symbol is inside of completion
                    if ((next_element.length == 0) && $child.parent().parent().hasClass('completion')) {
                        next_element = $child.parent().parent().next();
                    }

                    if ((next_element.length > 0) && !next_element.hasClass('not_valid')) { // if true, validate
                        if (next_element.attr('validationGroup') == validationGroupToBeChecked) {
                            thi$.markElementAsNotValid(next_element);
                        }
                    }

                });

            },

            /**
             * structures
             * @param groupTypeName
             * @param structureToBeChecked
             * check if after symbol with "validationGroup = groupTypeName" there is a structure with "class = structureToBeChecked"
             */
            structures:function (groupTypeName, structureToBeChecked) {
                var next_element, $child, thi$ = this;

                this.thi$$._content.find('div [validationGroup=' + groupTypeName + ']').each(function (index, child) {
                    $child = jQuery(child);
                    next_element = $child.next();

                    // validate if next exists and current symbol is inside of completion
                    if ((next_element.length == 0) && $child.parent().parent().hasClass('completion')) {
                        next_element = $child.parent().parent().next();
                    }

                    if ((next_element.length > 0) && !next_element.hasClass('not_valid')) { // if true, validate
                        if (next_element.hasClass(structureToBeChecked)) {
//                            console.log('groupTypeName=' + groupTypeName + ' structureToBeChecked=' + structureToBeChecked);
                            thi$.markElementAsNotValid(next_element);
                        }
                    }

                });
            },

            /**
             * logic
             * @param groupTypeName
             * @param childPlaceToBeChecked
             * check if symbol with "validationGroup = groupTypeName" first or last in the field
             * logic will validate last || first on whole MF and on each structre
             * exept completion structure (which doesn't considered as a structure)
             */
            logic:function (groupTypeName, childPlaceToBeChecked) {
                var $child, thi$ = this, next_element, prev_element;

                this.thi$$._content.find('div [validationGroup=' + groupTypeName + ']').each(function (index, child) {
                    $child = jQuery(child);
                    next_element = $child.next();
                    prev_element = $child.prev('.mpsLasso').parent('.mpsContent');

                    // validate if next exists and current symbol is inside of completion
                    if ((next_element.length == 0) && $child.parent().parent().hasClass('completion')) {
                        next_element = $child.parent().parent().next();
                        prev_element = $child.parent().parent().parent().children('.mpsContent');
                    }

                    if (!$child.hasClass('not_valid')) { // if true, validate
                        if (((childPlaceToBeChecked == 'first') && (prev_element.length > 0)) ||
                            (childPlaceToBeChecked == 'last') && (next_element.length == 0)) {
                            thi$.markElementAsNotValid($child);
                        }
                    }

                });
            },

            /**
             * markElementAsNotValid
             * @param element
             * mark current element as not valid
             */
            markElementAsNotValid:function (element) {
                element.addClass('not_valid');
                this.thi$$._frame.addClass("not_valid");
            },

            /**
             * checkRelativePosition
             1.    Thousands comma is only allowed after multiplications of 3 from the right of a whole number (relevant only in manual mode of the thousand’s separator).
             2.    A number with more than 2 digits can never start with a zero.
             3.    Zero can never be left alone in the fraction denominator
             */
            checkRelativePosition:function () {

                var digitUntilCommaCount = 0, digitsCount = 0, $child, thi$ = this, lastChild;

                this.thi$$._content.find('.mpsContent').each(function (index, mps) {

                    digitUntilCommaCount = 0;
                    digitsCount = 0;
                    jQuery(mps.children).toArray().reverse().forEach(function (child) {
                        $child = jQuery(child);

                        if ($child.attr('validationGroup') == 'digits') {
                            digitUntilCommaCount++;
                            digitsCount++;
                            lastChild = $child;
                        } else {

                            //A number with more than 2 digits can never start with a zero
                            if (digitsCount > 2) {
                                if (lastChild.text() == '0') {
                                    thi$.markElementAsNotValid(lastChild);
                                }
                            }

                            digitsCount = 0;  //start over digits counting

                            if (!thi$.thi$$.autoComma) {

                                //Thousands comma is only allowed after multiplications of 3 from the right of a whole number
                                if ($child.attr('validationGroup') == 'thousandsComma') {
                                    if (digitUntilCommaCount % 3 != 0) {
                                        thi$.markElementAsNotValid($child);
                                    }
                                }

                            }
                        }
                    });

                });


                //Zero can never be left alone in the fraction denominator
                this.thi$$._content.find('.denominator').each(function (index, denominator) {
                    if (denominator.innerText == '0') {
                        thi$.markElementAsNotValid(jQuery(denominator).children('.mpsContent'));
                    }
                });

            },

            /**
             * checkForEmptyParts
             * All structure parts and completion fields should be full
             */
            checkForEmptyParts:function () {
                var arrayOfMpsWrappers = this.thi$$.mpsWrapping.getActiveArray();

                if (arrayOfMpsWrappers.length > 0) {
                    this.thi$$._frame.addClass("not_valid");
                }

                arrayOfMpsWrappers.forEach(function (mpsWrapper) {
                    mpsWrapper.$wrapper.addClass('not_valid');
                });
            },

            /**
             * checkForGrouping
             * 1.    Opened parenthesis need to be closed by the same type.
             2.    Closed parenthesis need to be opened by the same type.
             3.    Round parenthesis can’t contain rectangular parenthesis.
             */
            checkForGrouping:function () {
                var objParenthesis, $child, thi$ = this;

                this.thi$$._content.find('.mpsContent').each(function (index, mps) {

                    objParenthesis = [];

                    jQuery(mps.children).each(function (index, child) {
                        $child = jQuery(child);

                        switch ($child.text()) {
                            case '(' :
                                objParenthesis.push({
                                    obj:$child,
                                    opened:true,
                                    type:'round'
                                });

                                break;
                            case ')' :
                                objParenthesis.push({
                                    obj:$child,
                                    opened:false,
                                    type:'round'
                                });
                                break;
                            case '[' :
                                objParenthesis.push({
                                    obj:$child,
                                    opened:true,
                                    type:'square'
                                });
                                break;
                            case ']' :
                                objParenthesis.push({
                                    obj:$child,
                                    opened:false,
                                    type:'square'
                                });
                                break;
                        }

                    });

                    var stackIndex, found, stackParenthesis = [], tmpArray = [];

                    objParenthesis.forEach(function (currObject) {

                        if (stackParenthesis.length == 0) {
                            stackParenthesis.push(currObject);
                        } else {

                            found = false;

                            for (stackIndex = 0; stackIndex < stackParenthesis.length; stackIndex++) {
                                //Check if the one on stack is a matching opening char
                                if ((currObject.type == stackParenthesis[stackIndex].type) && (currObject.opened != stackParenthesis[stackIndex].opened)) {
                                    //Round parenthesis can’t contain rectangular parenthesis
                                    if ((stackIndex > 0) && (stackParenthesis[stackIndex].type == "square")) {

                                        //check prev parenthesis for round ones
                                        tmpArray = jQuery.grep(stackParenthesis, function (element, index) {
                                            return (element.type == "round" && (index < stackIndex));
                                        });

                                        found = (tmpArray.length == 0);

                                        if (found) {
                                            stackParenthesis.splice(stackIndex, 1);   //found match parenthesis remove it's pair from stack
                                            break;
                                        }


                                    } else {
                                        found = true;
                                        stackParenthesis.splice(stackIndex, 1);   //found match parenthesis remove it's pair from stack
                                        break;
                                    }
                                }
                            }

                            if (!found) {
                                stackParenthesis.push(currObject);
                            }
                        }

                    });

                    stackParenthesis.forEach(function (object) {
                        thi$.markElementAsNotValid(object.obj);
                    });

                });
            },

            /**
             * validateCalculationCorrectness
             * (check for: =, >, <, !=, <=, >=, ~~)
             */
            validateCalculationCorrectness:function (finalMathString) {
                var res = false;

                constants.correctnessValidationMathString.forEach(function (item) {
                    if (finalMathString.indexOf(item) != -1) res = true;
                });

                return res;
            },

            /**
             * preValidate function
             * make some pre-validation markup manipulations
             */
            preValidate : function(){
                var thi$ = this;

                // merge two power structures
                //in case there is two consecutive power structures - merge them
                this.thi$$._view.find('.mpsContent').first().find('.power').each(function(index, power){
                    if (jQuery(power).next().hasClass('power')){
                        var nextPowerChildren = jQuery(power).next().children('.mpsContent').children();
                        nextPowerChildren.remove('.mpsLasso').remove('.mpsAnchor');
                        // merge
                        jQuery(power).children('.mpsContent').append(nextPowerChildren);
                        jQuery(power).next().remove();

                        thi$.thi$$.alignAnchors();
                    }
                });
            }
        },

        // selection functions
        selection:{
            /**
             * remove current selection
             * @param thi$
             */
            remove:function (thi$) {
                thi$._view.find('div.selection').removeClass('selection');
            },

            /**
             * setStartPosition
             * set start position of the selection
             * @param e
             */
            setStartPosition:function (e) {
                this.start = {'x':e.pageX, 'y':e.pageY};
            },

            /**
             * removeStartPosition
             * remove start position of the selection
             */
            removeStartPosition:function () {
                this.start = {};
            },

            /**
             * get current selection markup
             */
            get:function () {

                if (!!!this.selectionMap) {
                    return [];
                }

                var arrSelection = [];

                this.selectionMap.forEach(function (element) {
                    if (element.selectObj.hasClass('selection')) {
                        arrSelection.push(element);
                    }
                });

                return arrSelection;
            },

            /**
             * deleteSelection
             */
            deleteSelection:function () {
                var selectionMarkUp = this.get();

                if (selectionMarkUp.length == 0) return false;

                // find lefter object
                var lefterSelectedElement = selectionMarkUp[0];

                jQuery(selectionMarkUp).each(function (index, child) {
                    if (child.left < lefterSelectedElement.left) lefterSelectedElement = child;
                });

                // place caref before the most left object
                this.thi$$.placeCaret(lefterSelectedElement.obj, constants.appendType.before);  //place caret before first element in selection

                var thi$ = this;
                // delete selection
                selectionMarkUp.forEach(function (element) {
                    element.obj.first().remove();
                    element.selectObj.first().remove();

                    var index = thi$.selectionMap.indexOf(element); //remove current removed element from selection map
                    if (index != -1) thi$.selectionMap.splice(index, 1);

                });

                return true;
            },
            /**
             * mark content on mousemove
             * @param e
             */
            mark:function (e) {
                var thi$$ = (e.data.thi$$);
                var thi$ = thi$$.selection;

	            var $target = jQuery(e.target);
	            var insideMathField = !!$target.parents('#' + thi$$._view.attr('id')).length;
	            $target = null;

                if (thi$.start && thi$.start.x && thi$.oMps && insideMathField) {

                    thi$.remove(thi$$);

                    thi$.stop = {'x':e.pageX, 'y':e.pageY};

                    var selectionArea = thi$.setSelectionArea(thi$.start, thi$.stop, thi$.oMps.obj.height());
                    selectionArea.left -= constants.caret.width;   //2px of caret width

                    jQuery(thi$$.selection.selectionMap).each(function (index, child) {
                        // check child cords
                        if (((child.left > selectionArea.left) && (child.left < selectionArea.right)) ||
                            ((child.right > selectionArea.left) && (child.right < selectionArea.right)) /*||
                         ((child.top > selectionArea.top) && (child.top < selectionArea.bottom)) ||
                         ((child.bottom > selectionArea.top) && (child.bottom < selectionArea.bottom))*/

                            ) {
                            child.selectObj.addClass('selection');
                        } else {
                            child.selectObj.removeClass('selection');
                        }
                    });
                }

            },

            /**
             * setSelectionArea - set selection area object (right, left, top, bottom)
             * @param start
             * @param stop
             * @param elementHeight
             */
            setSelectionArea:function (start, stop, elementHeight) {
                var selectionArea;
                if (start.x < stop.x) {  //ltr selection
                    selectionArea = {
                        'left':start.x,
                        'right':stop.x,
                        'top':start.y - elementHeight,
                        'bottom':start.y
                    };

                } else {
                    selectionArea = {
                        'left':stop.x,
                        'right':start.x,
                        'top':start.y - elementHeight,
                        'bottom':start.y
                    };
                }
                return selectionArea;
            },

            /**
             * getOriginalMps
             * get mps where selection is started
             */
            getOriginalMps:function () {

                // oMps = original Mps
                var oMps, thi$ = this;
                if (!thi$.mpsPositions) return;

                jQuery(thi$.mpsPositions).each(function (index, child) {

                    if (thi$.start.x > child.left && thi$.start.x < child.right &&
                        thi$.start.y > child.top && thi$.start.y < child.bottom) {

                        if (oMps) {

                            if (child.top > oMps.top || child.bottom < oMps.bottom
                                || child.left > oMps.left || child.right < oMps.right) {

                                oMps = child;

                            }

                        } else {
                            oMps = child;
                        }

                    }

                });
                // override oMps
                this.oMps = oMps;

            },

            /**
             * createSelectionMap
             * map all symbols and structures inside of original mps (selected mps)
             */
            createSelectionMap:function () {
                var thi$ = this;
                this.selectionMap = [];

                if (thi$.oMps) {
                    this.selectionMap = this.createMpsSelectionMap(thi$.oMps.obj);

                    var parentSelectionMap = [];

                    jQuery(thi$.oMps.obj).parents('.mpsContent').each(function (index, mps) {
                        parentSelectionMap = thi$.createMpsSelectionMap(mps);
                        thi$.selectionMap = jQuery.merge(thi$.selectionMap, parentSelectionMap);
                    });

                }

            },

            /**
             * createMpsSelectionMap
             * map all symbols and structures of specific mps
             * @param mps
             */
            createMpsSelectionMap:function (mps) {

                var thi$ = this, $child, $mps = jQuery(mps);

                var mpsSelectionData = [];

                $mps.children().each(function (index, child) {

                    $child = jQuery(child);

                    if ($child.hasClass('symbol') || $child.hasClass('icon')) {
                        mpsSelectionData.push(thi$.createSymbolSelectionMap($child));
                    } else if ($child.hasClass('structure')) {
                        mpsSelectionData.push(thi$.createStructureSelectionMap($child));
                    }

                });

                return mpsSelectionData;

            },

            /**
             * createSymbolSelectionMap
             * get data of current symbol (right, left, bottom, top, object) and create placeholder div for selection
             * @param $symbol
             */
            createSymbolSelectionMap:function ($symbol) {

                var symbolData = this.getElementData($symbol);
                return this.createSelectionDiv(symbolData);

            },

            /**
             * createSelectionDiv
             * create placeholder div for selection
             * @param data
             */
            createSelectionDiv:function (data) {
                var selectionDiv = jQuery('<div/>').offset({'top':data.top - this.thi$$._content.offset().top,
                    'left':(data.left - this.thi$$._content.offset().left + constants.caret.width)})
                    .attr('class', 'selection_placeholder')
                    .css({'width':(data.right - data.left + constants.caret.width), height:data.bottom - data.top, 'position':'absolute', 'z-index':'10'})
                    .appendTo(this.thi$$._view);   //, 'outline': '1px solid #CCCCCC'

                data.selectObj = selectionDiv;
                return data;
            },

            /**
             * removeSelectionDiv
             * remove all selection placeholders from DOM
             */
            removeSelectionDiv:function () {
                this.thi$$._view.find('.selection_placeholder').remove();
            },

            /**
             * createStructureSelectionMap
             * get data of current structure (right, left, bottom, top, object) and create placeholder div for structure selection
             * @param $structure
             */
            createStructureSelectionMap:function ($structure) {

                var structureData = this.getStructureData($structure);
                return this.createSelectionDiv(structureData);

            },

            /**
             * getStructureData
             * get data of current structure (right, left, bottom, top)
             * @param $structure
             */
            getStructureData:function ($structure) {

                var structureData = null, childData = null, thi$ = this, $child, arrChildren = [];

                arrChildren = $structure.find('.mpsContent,.symbol,.structure');

                if (!arrChildren.length) {
                    return null;
                }

                arrChildren.each(function (index, child) {
                    $child = jQuery(child);

                    childData = thi$.getElementData($child);

                    if (!structureData) {
                        structureData = childData;
                    } else {
                        structureData.top = (structureData.top < childData.top) ? structureData.top : childData.top;
                        structureData.bottom = (structureData.bottom > childData.bottom) ? structureData.bottom : childData.bottom;
                        structureData.left = (structureData.left < childData.left) ? structureData.left : childData.left;
                        structureData.right = (structureData.right > childData.right) ? structureData.right : childData.right;
                    }


                });

                structureData.obj = $structure;

                return structureData;
            },

            /**
             * getElementData
             * get data of current element (right, left, bottom, top, object)
             * @param $element
             */
            getElementData:function ($element) {
                return {
                    'top':$element.offset().top,
                    'bottom':$element.offset().top + $element.height(),
                    'left':$element.offset().left,
                    'right':$element.offset().left + $element.width(),
                    'obj':$element
                };
            },

            /**
             * storeAllMpsPositions
             * iterate all mpsContent divs and store the data in mpsPositions array
             * @param $view
             */
            storeAllMpsPositions:function ($view, returnThisMpsCords, mpsSelector) {
                var thi$ = this, childData, mpsData, children = [], structures = [], mpsSelection = null;
                this.mpsPositions = [];

                if (!!mpsSelector) {
                    mpsSelection = $view.find(mpsSelector);
                } else {
                    mpsSelection = $view.find('.mpsContent');
                }

                // loop all MF mps and get cords
                mpsSelection.each(function (index, mps) {

                    mps = jQuery(mps);
                    mpsData = null;
                    children = [];

                    // loop all symbols, get cords
                    mps.children('.symbol').each(function (index, child) {
                        childData = thi$.getElementData(jQuery(child));
                        children.push(childData);
                    });

                    // reset structures array
                    structures = [];

                    // loop all structures, get cords
                    mps.children('.structure').each(function (index, structure) {

                        var structureData = null;

                        jQuery(structure).find('.mpsContent').each(function (index, child) {
                            childData = thi$.getElementData(jQuery(child));

                            if (!structureData) {
                                structureData = childData;
                            } else {
                                structureData.top = (structureData.top < childData.top) ? structureData.top : childData.top;
                                structureData.bottom = (structureData.bottom > childData.bottom) ? structureData.bottom : childData.bottom;
                                structureData.left = (structureData.left < childData.left) ? structureData.left : childData.left;
                                structureData.right = (structureData.right > childData.right) ? structureData.right : childData.right;
                            }
                        });

                        structures.push(structureData);
                    });

                    mpsData = thi$.getMpsCords(thi$.getElementData(mps), null);
                    mpsData = thi$.getMpsCords(children, mpsData);
                    mpsData = thi$.getMpsCords(structures, mpsData);

                    if (mpsData) {
                        mpsData.obj = mps;
                        mpsData.children = children;       //symbols children
                        mpsData.structures = structures;   //structures children
                        // on returnThisMpsCords, return the first mpsData. this return will only exit fron the current each
                        if (returnThisMpsCords) return mpsData;
                        thi$.mpsPositions.push(mpsData);
                    }

                });

                // on returnThisMpsCords, return the first mpsData.
                if (returnThisMpsCords) return mpsData;
                return this.mpsPositions;
            },

            /**
             * getMpsCords
             * get (top, bottom, left, right) coordinates of mps based on array of it's symbols or structures
             * @param dataArray
             * @param mpsData
             */
            getMpsCords:function (dataArray, mpsData) {

                if (dataArray.length == 0) {
                    if (mpsData) return mpsData;
                    else         return null;
                }

                jQuery(dataArray).each(function (index, child) {
                    if (!mpsData) {
                        mpsData = child;
                    } else {

                        if (child) {
                            mpsData.top = (mpsData.top < child.top) ? mpsData.top : child.top;
                            mpsData.bottom = (mpsData.bottom > child.bottom) ? mpsData.bottom : child.bottom;
                            mpsData.left = (mpsData.left < child.left) ? mpsData.left : child.left;
                            mpsData.right = (mpsData.right > child.right) ? mpsData.right : child.right;
                        }

                    }

                });

                return mpsData;

            }
        },

        // initMarkup functions
        initMarkup:{

            /**
             * remove
             * removes MF markUp
             */
            remove:function () {

                this.thi$$.mpsWrapping.collection = [];
                this.thi$$.selection.collection = [];

                this.thi$$._content.children('.mpsWrapper').remove();

                this.thi$$._content.children('.mpsContent').first().children('.number,.symbol,.structure').remove();
            },

            /**
             * start
             * @param markup
             * parse param markUp
             */
            start:function (markup) {

                var thi$ = this;
                this.thi$$.dontEnableKeyboard = true;

                var mpsContent = this.thi$$._content.find('.mpsContent');
                this.thi$$.placeCaret(mpsContent, constants.appendType.intoLast);
                var dataArray = jQuery(markup).children();

//	            console.time('mathfield parse');
                thi$.parse(dataArray, true, thi$);
//	            console.timeEnd('mathfield parse');

	            dataArray = null;

            },

            /**
             * parse
             * @param dataArray
             * @param mainRoot
             * @param thi$
             */
            parse:function (dataArray, mainRoot, thi$) {

                //if in config we got viewObject - use it don't parse data
                if (this.thi$$.cfg.viewObject) {
	                this.thi$$._view.remove();
                    this.thi$$._view = this.thi$$.cfg.viewObject;

                    this.thi$$.cfg.parent.html(this.thi$$._view);
	                this.thi$$.endEdit();
	                delete this.thi$$.cfg.viewObject;
	                this.thi$$._view.show();
                    return;
                };

                var tagName, key, completionStructure, completionChildren, completiontype, $child;

                thi$ = thi$ ? thi$ : this;

                jQuery(dataArray).each(function(index, child) {

	               tagName = child.tagName.toLowerCase();
	               key = constants.lowerCaseKeyToKey[tagName];
	               $child = jQuery(child);

	               thi$.thi$$.onKeyboardPressed(key);

                    //if last structure was removed - don't parse it's children
                    if (!!!(thi$.thi$$.lastStructureRemovedFlag)) {

                        switch (tagName) {

                            case 'completion':

                                completionStructure = thi$.thi$$.caret.parent().parent();
                                completiontype = $child.attr('completiontype');

                                if (completiontype == 'O') {
                                    completionStructure.addClass('operator');
                                }

                                completionStructure.attr('completiontype', completiontype);
                                thi$.thi$$.mpsWrapping.updateRegistration(completionStructure.children('.mpsContent').attr('id'), 'completionType', completiontype);

                                completionChildren = $child.children();
                                thi$.parse(completionChildren);

                                thi$.thi$$.placeCaret(completionStructure, constants.appendType.after);

	                            completionStructure = null; completionChildren = null;

                                break;

                            case 'fraction':

                                var fractionStructure = thi$.thi$$.caret.parent().parent().parent().parent();
                                var denominatorMps = thi$.thi$$.caret.parent().parent().next().next().children('.mpsContent');

                                var numerator = $child.children('numerator').children();
                                thi$.parse(numerator);

                                thi$.thi$$.placeCaret(denominatorMps, constants.appendType.intoLast);

                                var denominator = $child.children('denominator').children();
                                thi$.parse(denominator);

                                thi$.thi$$.placeCaret(fractionStructure, constants.appendType.after);

	                            fractionStructure = null;  denominatorMps = null; numerator = null; denominator = null;

                                break;

                            case 'longdivision':

                                // on long division in us/singapure locale
                                // the division line vertical part is straight and the dividend is placed to the left of the divisor
                                // in israel locale : the division line vertical part is straight and the dividend is placed to the right of the divisor
                                var longDivisionStructure = thi$.thi$$.caret.parent().parent().parent().parent();
                                var firstChildMps = longDivisionStructure.find('.divided').first().children('.mpsContent');
                                var lastChildMps = longDivisionStructure.find('.divider').first().children('.mpsContent');

                                thi$.thi$$.placeCaret(firstChildMps, constants.appendType.intoLast);

                                thi$.parse($child.find('divided').first().children());

                                thi$.thi$$.placeCaret(lastChildMps, constants.appendType.intoLast);

                                thi$.parse($child.find('divider').first().children());

                                thi$.thi$$.placeCaret(longDivisionStructure, constants.appendType.after);

                                break;

                            case 'remainder':

                                // on remainder - caret will placed automaticly on the remainder's mps
                                var remainderStructure = thi$.thi$$.caret.parent().parent();
                                var remainder = $child.children();
                                thi$.parse(remainder);

                                thi$.thi$$.placeCaret(remainderStructure, constants.appendType.after);

	                            remainderStructure = null; remainder = null;

                                break;

                            case 'power' :
                                // on power - caret will placed automaticly on the power's mps
                                var powerStructure = thi$.thi$$.caret.parent().parent();
                                var power = $child.children();
                                thi$.parse(power);
                                thi$.thi$$.placeCaret(powerStructure, constants.appendType.after);

	                            powerStructure = null; power = null;
                                break;

                            case 'absolute' :
                                var absoluteStructure = thi$.thi$$.caret.parent().parent();

                                thi$.parse($child.children());

                                thi$.thi$$.placeCaret(absoluteStructure, constants.appendType.after);
                                break;

                            case 'segment' :
                            case 'rayright':
                            case 'rayboth' :
	                        case 'angle_geometry' :

                                // on geometry - caret will placed automaticly on the geometry's mps
                                var geometryStructure = thi$.thi$$.caret.parent().parent();

                                var geometry = $child.children();
                                thi$.parse(geometry);

                                thi$.thi$$.placeCaret(geometryStructure, constants.appendType.after);

	                            geometryStructure = null; geometry = null;

                                break;

                        }
                    }

	                $child = null;

                });

                // on function end, on main root, remove caret.
                if (!!mainRoot) {
                    thi$.thi$$.caret.remove();
                }

                thi$.thi$$.alignAnchors();

	            dataArray = null;

            }

        },

	    setFrameWidthAndHeight:function (){
		    if (this.widthMode.fixedWidth) {
			    this._frame.width(this.widthMode.width + 'em');
			    this._view.width(this._frame.width() + constants.frameStyle.padding.left + constants.frameStyle.padding.right);
		    } else {    //in case of empty field
			    this._frame.width(constants.frameStyle.size.minWidth + 'em');
		    }

		    if (this.editMode || this.completionMode) {
			    this._frame.width(this._frame.width() + constants.frameStyle.border.width * 2);
			    this._view.width(this._frame.width() + 1);
			    this._frame.height(this._frame.height() + constants.frameStyle.padding.top + constants.frameStyle.padding.bottom);
		    }
	    }, /**
	     * initView
	     * Init view
         */
        initView:function () {
			//if in config we got viewObject - use it don't parse data
	        if (this.cfg.viewObject) {

		        this.initMarkup.start(this.cfg.data);

		        //reset jQuery objects
		        this._view = jQuery('#' + this._view.attr('id'));
		        this._content = this._view.children('.mathField_content');
		        this._frame = this._view.children('.frame');

	        } else {

		        this.setFontSize(this.fontSize);

		        // set maxHeight margins
		        this._view.css({'margin-top':constants.maxHeight[this.maxHeight.stringValue], 'margin-bottom':constants.maxHeight[this.maxHeight.stringValue]});

		        // get reduction step and set font-size
		        if (this.reductionStep > 0) { //if reductionStep > 0, calculate font-size according to it
			        var reducedFontSize = this.calcFontSizeByReduction();
			        this._view.css('font-size', reducedFontSize + 'px');
		        }

		        var pxEm = this._view.css('font-size').px2int();

		        this.maxHeight.deltaTop = (constants.maxHeight[this.maxHeight.stringValue].em2int()) * pxEm;
		        this.maxHeight.deltaBottom = (constants.maxHeight[this.maxHeight.stringValue].em2int()) * pxEm;

		        this.setFrameWidthAndHeight();

		        //parsing of init markUp should be after finishing of frame width and height settings
		        this.initMarkup.start(this.cfg.data);

		        if (this.completionMode) {
			        this._view.addClass(constants.classes.completion);
		        }

		        this.alignAnchors();

		        // align Frame on init MF.
		        // even if MathField is empty
		        this.alignFrame();

		        if (window['globalEvents']) {  //there is no global events in CGS, check for global variable existence
			        var thi$ = this;
			        // check mathfield vs. container
			        // if mathfield is too wide, reduce and blowup if necessary
			        window['globalEvents'].add({
				        fnc:function () {
					        if(!thi$._frame) {
						        return;
					        }

					        thi$.initFrameSize = {'width' : thi$._frame.width(), 'height' : thi$._frame.height() };
					        thi$.checkWidthVsContainer();
				        }
			        });
		        } else {
			        this.initFrameSize = {'width' : this._frame.width(), 'height' : this._frame.height() };
			        this.checkWidthVsContainer();
		        }

	        }

		    if (this.reductionStep > 0) {
			    this.fontSize = this.calcFontSizeByReduction();
		    }

        },

        /**
         * createSymbolDivString
         * Create a symbol div string
         * @param character {String} character to create the symbol from
         * @param key
         */
        createSymbolDivString:function (character, key) {
            var html = '';
            var character;

            if (character in constants.symbolsHash) {
                html = Mustache.to_html(templates.symbol, {
                    symbol:constants.classes.symbol,
                    type:constants.symbolsHash[character].type,
                    value:character,
                    validationGroup:constants.validationGroup[key]
                });
            }

            return html;
        },

        /**
         * initEvents
         * Init events
         */
        initEvents:function () {

            var thi$ = this;
            if (this.devMode) {

                var devLogger = this.devLogger = jQuery('<div/>').css({'width':'900px', 'height':'300px', 'border':'1px solid black', 'position':'fixed', 'top':'400px'}).appendTo(Perf.select('body'));
                this._view.next().click(function () {
                    devLogger.text(thi$.calculate.markupValue());
                });

                this._view.next().next().click(function () {
                    devLogger.text(thi$.calculate.value() == null ? 'null' : thi$.calculate.value());
                });

                this._view.next().next().next().click(function () {
                    devLogger.text(thi$.calculate.correctness() == null ? 'null' : thi$.calculate.correctness());
                });

                this._view.next().next().next().next().click(function () {
                    thi$.reduce();
                    devLogger.text('reduction');
                });

            }

            if (this.editMode || this.completionMode) {
                var thi$ = this;

                thi$.afterClick = false;

//                  TODO: check the need for this code
//                    var mpsPositions;
//                    var closestMpsPosition;
                var placeCaretInClosestMps = function (eventX) {

//                        mpsPositions = thi$.selection.getMpsPositions();
//                        closestMpsPosition = mpsPositions[0];
//                        mpsPositions.forEach(function(mpsPosition) {
//                            if (Math.abs(eventX - mpsPosition.right) < Math.abs(eventX - closestMpsPosition.right)) {
//                                closestMpsPosition = mpsPosition;
//                            }
//                        });
//
//                        thi$.placeCaret(closestMpsPosition.obj, constants.appendType.intoLast);
                };



                // Place the caret on mouse up
                jQuery('.{0}'.format(constants.classes.symbol), this._view)
                    .mouseup(thi$.onSymbolMouseUp);

	            function placeCaretByTarget(mpsContent) {
		            if(thi$.caret && thi$.caret.parent().length) {
			            return;
		            }

		            if (thi$.editMode) {
			            thi$._view.removeClass('not_selectable');

			            if(mpsContent.parent().hasClass('longDivision')) {
				            return false;
			            }

			            // The mathfield caught mouseup that is not on a symbol - so check for mps
			            thi$.placeCaret(mpsContent, constants.appendType.intoLast);

		            } else if (thi$.completionMode) {
			            //if mouseup is over completion structure
			            if ((mpsContent.hasClass('mpsContent')) && (mpsContent.parents('.completion.structure').length >= 1)
				            && (!mpsContent.parent().hasClass('mathField_content'))) {
				            thi$.placeCaret(mpsContent, constants.appendType.intoLast);
			            }
		            }
	            }

	            //content mouse events
	            var onContentClick = function (e) {
		            e.preventDefault();
		            e.stopPropagation();
	            };

	            var onContentMouseDown = function (e) {
		            e.stopImmediatePropagation();
		            e.stopPropagation();

		            if (!thi$.isEnabled()) return;

		            thi$.dontEnableKeyboard = false;

		            thi$.afterClick = true;
		            thi$.selection.remove(thi$);                      //remove prev selection
		            thi$.selection.setStartPosition(e);               //set start (x,y) of current selection
		            thi$.selection.storeAllMpsPositions(thi$._view);  //store all mps in array

		            thi$.selection.getOriginalMps();                  //get mps that in the selection

		            thi$.selection.removeSelectionDiv();              //remove all selection placeholders div
		            thi$.selection.createSelectionMap();              //fill map of symbols and structures for original mps and it's parents

		            // Remove the caret and selection if any
		            if (thi$.caret) thi$.caret.remove();

		            // Start edit if edit mode
		            if (thi$.editMode) {
			            // bind mouse move
			            thi$._view.addClass('not_selectable');
			            thi$.targetDocument.bind('mousemove', {thi$$:thi$}, thi$.selection.mark);     //do selection mark on mousemove

			            /**
			             * Stop tracking mouse when button is released.
			             */
			            var documentUnbindMousemove = function (event) {
				            thi$.targetDocument.unbind('mousemove', thi$.selection.mark);
				            event.stopImmediatePropagation();
				            event.stopPropagation();
				            event.preventDefault();
				            return false;
			            };

			            thi$.targetDocument.mouseup(documentUnbindMousemove);

			            thi$.startEdit();

			            if(ENV.behaviors.isTablet) {
				            var mpsContent = thi$.searchMpsContent(jQuery(e.target));
				            if(!mpsContent) {
					            mpsContent = jQuery(e.target).children('.mpsContent');
				            }

				            placeCaretByTarget(mpsContent);
			            }

		            }

		            //if in completion mode - check if we in completion structure now - than start edit
		            if (thi$.completionMode && !!thi$.selection.oMps) {
			            // init flag
			            var applyStartEdit = false, $child;

			            // seaech '.completion' parents
			            thi$.selection.oMps.obj.parents('.completion').each(function(index, child){
				            // apply start edit only if the found elements doesn't contains mathField class
				            // if it does, this is not a structure
				            $child = jQuery(child);
				            if (!$child.hasClass('mathField')){
					            applyStartEdit = true;
				            }
			            });

			            // exec. start edit
			            if (applyStartEdit) {
				            thi$.startEdit();
			            }
		            }

		            e.preventDefault();
		            e.stopPropagation();
	            };

	            var onContentMouseUp = function (e) {
		            if (!thi$.isEnabled()) return;

		            //remove prev selection
		            thi$.afterClick = false;
		            thi$.selection.removeStartPosition(thi$);

		            var $target = jQuery(e.target);
		            var mpsContent = thi$.searchMpsContent($target);
		            if(!mpsContent) {
			            mpsContent = $target.children('.mpsContent');
		            }
		            $target = null;

		            placeCaretByTarget(mpsContent);

		            e.preventDefault();
		            e.stopPropagation();
	            };


                this._content.mouseup(onContentMouseUp)
                             .click(onContentClick)
                             .mousedown(onContentMouseDown);


	            //frame mouse events
	            var frameMouseDown = function (e) {
		            if (!thi$.isEnabled()) return;

		            thi$.selection.storeAllMpsPositions(thi$._view);
		            if (thi$.editMode) {
			            thi$.dontEnableKeyboard = false;
			            thi$.startEdit();
			            thi$.placeCaretAtEnd();
		            }
		            e.preventDefault();
		            e.stopPropagation();
	            };

	            var frameMouseUp = function (e) {
		            if (!thi$.isEnabled()) return;
		            placeCaretInClosestMps(e.pageX);
		            e.preventDefault();
		            e.stopPropagation();
	            };

	            this._frame.mousedown(frameMouseDown)
		            .mouseup(frameMouseUp);

            }
        },

        /**
         * find jqElement sibling or closest mpsContent
         * @param jqElement
         */
        searchMpsContent:function (jqElement) {
            var mpsContent;
            if (jqElement.hasClass('mpsContent')) {
                mpsContent = jqElement;
            } else {
                //mpsContent with mpsStructureWrapper attribute equal true - is readOnly, exclude it from jQuery selector
                mpsContent = jqElement.siblings('[class="mpsContent"][mpsStructureWrapper!="true"]');
                if (mpsContent.length == 0) {
                    mpsContent = jqElement.closest('[class="mpsContent"][mpsStructureWrapper!="true"]');
                }
            }

            return (mpsContent.length > 0) ? mpsContent : null;
        },

        /**
         * placeCaret
         * Place the caret after/before the specified element
         * @param jqElement
         * @param appendType
         */
        placeCaret:function (jqElement, appendType) {

            if ((!!!jqElement) || (jqElement.length == 0)) {
                return;
            }

            //remove current selection
            this.selection.removeSelectionDiv();
            // remove current caret
            this._view.find('.caret').remove();

            var caret = jQuery(Mustache.to_html(templates.caret));
            caret.height(jqElement.height() - 3);

            switch (appendType) {

                case constants.appendType.before:
                    caret.insertBefore(jqElement);
                    break;

                case constants.appendType.after:
                    caret.insertAfter(jqElement);
                    break;

                case constants.appendType.intoFirst:
                    caret.prependTo(jqElement);
                    break;

                case constants.appendType.intoLast:
                    caret.appendTo(jqElement);
                    break;
            }

            this.caret = caret;

            if (!!this.keyboard && !this.dontEnableKeyboard)
                this.setKeyboardByCaretPosition();

        },

        /**
         * placeCaretAtEnd
         * Place the caret at the end of the math field
         */
        placeCaretAtEnd:function () {
            this.placeCaret(this._content.children('.mpsContent').last(), constants.appendType.intoLast);
        },

        /**
         * onSymbolMouseUp
         * On symbol mouse up event
         * @param e
         */
        onSymbolMouseUp:function (e) {
            this.afterClick = false;

            this.selection.removeStartPosition();
            this.targetDocument.unbind('mousemove', this.selection.mark);

            var jqElement = jQuery(e.target);

            if (((this.selection.get().length == 0) && this.editMode) || (jqElement.parents('.structure').hasClass('completion'))) {
                // Place the caret before / after 'this' element
                var appendType = constants.appendType.before;
                if (e.offsetX > (jqElement.width() / 2)) appendType = constants.appendType.after;
                this.placeCaret(jqElement, appendType);
            }

            e.preventDefault();
            e.stopPropagation();
	        return false;
        },

        /**
         * isEmpty
         * @return {Boolean}
         */
        isEmpty:function () {
            if (this.editMode) {
                return (this._content.children('.mpsContent').first().children().length <= 1);
            } else if(this.completionMode) {
                return (this._content.children('.mpsContent').children('.completion').children('.mpsContent').children().length <= 1);
            }

            return false;
        },


        /**
         * startEdit
         * Start editing of the mathfield
         */
        startEdit:function () {
		
    		if(this.cfg.useMathfieldKBHack || ENV.behaviors.useMathfieldKBHack){
            	if( window._hack_close_mf_keyboard) {
                	 for( var i=0;i<window._hack_close_mf_keyboard.length;i++ ) {
                		 var func = window._hack_close_mf_keyboard[i] ;
                		 func && func() ;
                	 }
                	 window._hack_close_mf_keyboard = [] ;
                }
            }

            // Set focus class
            this._view.addClass(constants.classes.focus).removeClass(constants.classes.blur);
            this._frame.removeClass("not_valid");

            // Start the keyboard
            this.startKeyboard();

            if (this.keyboard) {
                this.keyBoardOpen = true;
            }

	        if(!ENV.behaviors.isTablet) {
	            this._input.focus();
	        }

            //if on phonegap need to add blur event else the keyboard will flod
            //todo: need to repalce with useExternalKeyboard

            if( !! ENV.behaviors.useExternalMediaPlayer && !ENV.behaviors.overrideMathNativeKeyboard ){
                var self = this;
                this._view.find(".editMobile").on("blur",$.proxy(function(){
                    if(self._view.hasClass(constants.classes.focus)){
                       self._view.find(".editMobile").focus();
                    }
                },this));
            }

	        if (this.cfg.onStartEdit) {  //onStartEdit function from config (Text Editor)
		        this.cfg.onStartEdit();
	        }

	        //check if keyboard still didn't open (ipad bug)
	        var thi$ = this;
	        setTimeout(function(){
				if(!thi$.keyboard) {
					thi$.startKeyboard();
				}
	        }, 0);
            
        },

        /**
         * endEdit
         * End editing of the mathfield
         */
        endEdit:function () {

            if (this.cfg.onEndEdit) { //onEndEdit function from config (Text Editor)
                this.cfg.onEndEdit();
            }

            // hide the keyboard
            if (this.keyboard) {
	            this.keyboard.hide();
                this.keyBoardOpen = false;
            }

            // Remove focus class
            this._view.removeClass(constants.classes.focus).addClass(constants.classes.blur);

            // Remove caret
            !!this.caret && this.caret.remove();
	        delete this.caret;

            //remove selection
            this.selection.remove(this);
	        if(!!this.selection.selectionMap) {
		        delete this.selection.selectionMap;
	        }

	        if(!!this.selection.oMps) {
		        delete this.selection.oMps.obj;
		        delete this.selection.oMps;
	        }

            // preValidate
            this.validation.preValidate();

            // validate
            if (this.activeValidation) {
                this.validation.start();
            }

	        this.mpsWrapping.alignWrappers();

            if (this.isEmpty() && this.showMFEmptyIcon) { //MF is Empty
                this._view.addClass('empty');
            } else {
                this._view.removeClass('empty');
            }

            if (typeof this.cfg.setAnswer == 'function') { //check for function existance
                this.cfg.setAnswer(this.getMarkUpValue().length > 0);    //trigger progress event of the answer
            }

            if (typeof this.cfg.firstKeyDown == 'function' /*&& !this.isEmpty()*/) { //check for function existance
                this.cfg.firstKeyDown();    //trigger progress event of the task
            }

	        Mustache.clearCache();
	        
			if( ENV.behaviors.fireUIEvents ) {
				ENV.host.onUIEvent( "blur" ) ;
			}
	        
        },

        /**
         *
         * @param fnc
         */
        setFirstKeyDownFunction:function (fnc) {
            this.cfg.firstKeyDown = fnc;
        },

        /**
         * startKeyboard
         * Show the keyboard. Create its instance if necessary
         */
        startKeyboard:function () {
            if (this.keyBoardOpen) {
                return;
            }

	        //find out math field offset
            var mathFieldOffset = this._frame.offset();
            var offset = {
                top:mathFieldOffset.top + this._frame.outerHeight(false) + constants.keyboardStyle.spaceFromMathField,
                left:mathFieldOffset.left
            };

	        //find out if math field parent is IFRAME
	        var parentIframe = this.cfg.parent.get(0).ownerDocument.defaultView.frameElement,
		        targetDocument = jQuery(document),
		        iframeOffset = null;

	        if(parentIframe && parentIframe.name != 'DL_Player_Frame') { //ignore offset of the player iframe
		        iframeOffset = jQuery(parentIframe).offset();
	        }

            //in case MF parent is iframe - add iframe offset to MF offset
            if (!!iframeOffset) {
                offset.top += iframeOffset.top;
                offset.left += iframeOffset.left;
                //in case MF parent is iframe - MF target is iframe document
                targetDocument = jQuery(this.cfg.parent.get(0).ownerDocument);
            }

            if (this.keyboard) {
                // Show the keyboard
                this.keyboard.show(offset);
            } else { // !this.keyboard
                var thi$ = this;

				// Create the keyboard
				// TODO: move fontLocale to either preset or mathfield feed
				// var keyBoardParent = jQuery(thi$.cfg.parent).parents('.scroll_enabled');
				//in case keyboard parent is iframe - selector should go up more levels in order to get the wanted div from the parent element
				/*if (keyBoardParent.length == 0) {
				    keyBoardParent = jQuery(thi$.cfg.parent.get(0).ownerDocument.defaultView.frameElement).parents('.scroll_enabled');
				}*/

	            var keyBoardParent = jQuery('body');
	            var presetName = jQuery(this.cfg.data).attr("keyboardPreset") || 'fullMathField', keyboardPreset;

	            if (constants.keyboardPresets.hasOwnProperty(presetName)) {
		            keyboardPreset = constants.keyboardPresets[presetName];
	            } else {
		            keyboardPreset = constants.keyboardPresets['fullMathField'];
	            }

	            this.keyboard = new t2k.component.keyboard.Keyboard({
		            parent:keyBoardParent,
		            parent_dom_id:this._frame.attr('id'),
		            $parent:this._frame,
                    autoComma : this.autoComma,
		            preset:keyboardPreset,
		            fontLocale:this.fontLocale,
		            target:targetDocument,
		            invokerClass:constants.classes.mathField,
		            offset:offset,
		            useMathfieldKBHack:thi$.cfg.useMathfieldKBHack,
		            onRendered:function () {},
		            onKeyboardPressed:jQuery.proxy(thi$.onKeyboardPressed, thi$),
		            onKeyboardClosed:jQuery.proxy(thi$.endEdit, thi$)
	            });

	            keyBoardParent = null; keyboardPreset = null;

	            setTimeout(function () {
		            if (!(thi$.caret && thi$.caret.length && thi$.caret.parent().length)) {
			            thi$.placeCaretAtEnd();
		            }
	            }, 0);
            }
        },

        /**
         * onKeyboardPressed
         * Called when mathfield keyboard has been pressed
         * @param key
         */
        onKeyboardPressed:function (key) {

            var thi$ = this;
            var alignFrame = false, elementToRemove = null, doAutoComma = true, isOnCompletion = false;

            if (!!thi$.selection.oMps) {
                isOnCompletion = thi$.selection.oMps.obj.parents('.completion').length > 0;
            }

            if (typeof key !== 'undefined') switch (key) {
                case 'arrowLeft':
                    //if the caret placed inside of cempletion field, check if we are not getting out of the comletion
                    if (isOnCompletion && this.caret.parent().parent().hasClass('completion') && this.caret.prev().hasClass('mpsLasso')) {
                        return;
                    }

                    //long division
                    var longDivisionDivided = this.caret.parent().parent('.divider').parent().children('.divided');
                    if (longDivisionDivided && longDivisionDivided.length) {
                        this.placeCaret(longDivisionDivided.children('.mpsContent'), constants.appendType.intoFirst);
                    } else
                    //if prev div of caret is lasso and it's not the beginning of the field - skip to prev structure
                    if (this.caret.prev().hasClass('mpsLasso') && this.caret.prev().parent().parent('.mathField_content').length == 0) {
                        this.placeCaret(this.caret.parents('.structure').first(), constants.appendType.before); //insert caret before the current structure div

                    } //if prev div of caret is structure - place caret after last child of the structure content
                    else if (this.caret.prev().hasClass('structure')) {
                        if (this.caret.prev().children('.mpsContent').children('.numerator').length > 0) {  //if prev structure is fraction - move caret into numerator
                            this.placeCaret(this.caret.prev().children('.mpsContent').children('.numerator').find('.mpsContent').children().last(), constants.appendType.before);
                        } else {  //place caret after last child of the structure content
                            this.placeCaret(this.caret.prev().children('.mpsContent').children().last(), constants.appendType.after);
                        }

                    } else if (this.caret.prev().hasClass('icon')) { //long division icon or remainder icon
                        this.placeCaret(this.caret.prev().parents('.mpsContent').first().prev().children('.symbol').last(), constants.appendType.after);
                        // insert the caret before, only if this is not the MF mail lasso
                    } else if (!(this.caret.prev().hasClass('mpsLasso') && this.caret.parent().parent().hasClass('mathField_content'))) {
                        this.caret.insertBefore(this.caret.prev());
                    }

                    this.alignAnchors();

                    doAutoComma = false;

                    break;

                // TODO: olga - arrange
                case 'arrowRight':
                    //if the caret placed inside of cempletion field, check if we are not getting out of the comletion
                    if (isOnCompletion && this.caret.parent().parent().hasClass('completion') && (this.caret.next().length == 0) ) {
                        return;
                    }

                    if (this.caret.next().hasClass('structure')) { //if next div of caret is structure place caret into this structure
                        if (this.caret.next().children('.mpsContent .mpsLasso').length > 0) {
                            this.placeCaret(this.caret.next().children('.mpsContent .mpsLasso'), constants.appendType.after);
                        } else if (this.caret.next().children('.mpsContent').find('.mpsLasso').first()) {
                            this.placeCaret(this.caret.next().children('.mpsContent').find('.mpsLasso').first(), constants.appendType.after);
                        }

                    } else if (this.caret.next().length > 0) {   //if next div of caret is not structure - place caret after this div
                        this.caret.insertAfter(this.caret.next());
                        return;

                    } //if the caret is on the end of the first long division structure - move caret into the second one
                    else if (this.caret.prev().parents('.divided').first().next('.icon').length > 0) {
                        this.placeCaret(this.caret.prev().parents('.divided').first().next('.icon').next().children('.mpsContent'), constants.appendType.intoFirst);

                    } else

                        var longDivisionStructure = this.caret.prev().parent('.mpsContent').parent().parent().parent('.longDivision');

                    if (longDivisionStructure && longDivisionStructure.length) {
                        this.placeCaret(longDivisionStructure, constants.appendType.after);
                    }

                    //if the caret is on the end of the structure - place caret after it
                    else if (this.caret.prev().parents('.structure').first().length > 0) {
                        this.placeCaret(this.caret.prev().parents('.structure').first(), constants.appendType.after);
                    }

                    this.alignAnchors();

                    doAutoComma = false;

                    break;

                case 'arrowUp':
                    if (this.caret.prev().parent('.mpsContent').parent('.denominator').length > 0) { //if the caret is in denominator - move it to numerator content
                        if (this.caret.prev().parent('.mpsContent').parent('.denominator').parent().children('.numerator').length > 0) {
                            this.placeCaret(this.caret.prev().parent('.mpsContent').parent('.denominator').parent().children('.numerator').children('.mpsContent').children('.mpsLasso'), constants.appendType.after);
                        }

                    }

                    doAutoComma = false;

                    break;

                case 'arrowDown':
                    if (this.caret.prev().parents('.numerator').length > 0) { //if the caret is in numerator  - move it to denominator content
                        if (this.caret.prev().parent('.mpsContent').parent('.numerator').parent().children('.denominator').length > 0) {  //this fraction denominator
                            this.placeCaret(this.caret.prev().parent('.mpsContent').parent('.numerator').parent().children('.denominator').children('.mpsContent').children('.mpsLasso'), constants.appendType.after);
                        } else { //fraction in fraction
                            var secondLevelFraction = this.caret.prev().parents('.fraction').first().parents('.fraction').children('.mpsContent').children('.denominator').children('.mpsContent').children('.mpsLasso');
                            if (secondLevelFraction.length) {
                                this.placeCaret(secondLevelFraction, constants.appendType.after);
                            }
                        }
                    }

                    alignFrame = true;
                    this.alignAnchors();

                    doAutoComma = false;

                    break;

                case 'backspace':
                    //if the caret placed inside of cempletion field, check if we are not getting out of the comletion
                    if (isOnCompletion && this.caret.parent().parent().hasClass('completion') && this.caret.prev().hasClass('mpsLasso')) {
                        return;
                    }

                    if (!this.selection.deleteSelection()) {   //if there is current selection - delete it

                        if (this.caret.prev().hasClass('mpsLasso') || this.caret.prev().hasClass('icon')) { //remove this structure
                            // check if caret is not at the start of the MF
                            if (!this.caret.parent().parent().hasClass('mathField_content')) {
                                elementToRemove = this.caret.prev().parents('.structure').first();
                                this.placeCaret(this.caret.prev().parents('.structure').first(), constants.appendType.before);
                                elementToRemove.remove();
                            }

                        } else if (this.caret.prev().hasClass('structure')) {  //if prev div is structure remove all structure
                            this.caret.prev().remove();
                        } else {  //remove prev div element
                            this.caret.prev().remove();
                        }
                    }

                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    this.alignAnchors();
                    alignFrame = true;

                    break;

                case 'del':
                    //if the caret placed inside of cempletion field, check if we are not getting out of the comletion
                    if (isOnCompletion && this.caret.parent().parent().hasClass('completion') && (this.caret.next().length == 0)) {
                        return;
                    }

                    if (!this.selection.deleteSelection()) {   //if there is current selection - delete it

                        if (this.caret.next().hasClass('mpsLasso') || this.caret.next().hasClass('icon')) { //remove this structure
                            elementToRemove = this.caret.next().parents('.structure').first();
                            this.placeCaret(this.caret.next().parents('.structure').first(), constants.appendType.before);
                        } else if (this.caret.next().hasClass('fraction')) {  //if prev div is fraction remove all structure
                            elementToRemove = this.caret.next();
                        } else if (this.caret.next().hasClass('structure')) {
                            elementToRemove = this.caret.next();
                        } else {  //remove prev div element
                            elementToRemove = this.caret.next();
                        }

                        elementToRemove.remove();
                    }

                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    thi$.selection.removeSelectionDiv();   //remove selection placeholders
                    this.alignAnchors();
                    alignFrame = true;

                    break;

                case 'end':
                    this.placeCaretAtEnd();
                    doAutoComma = false;

                    break;

                case 'small':
                case 'caps':
                    // Do nothing
                    doAutoComma = false;
                    break;

                case 'power':

	                //don't insert power structure inside other power in case of parent power is empty
	                if(this.caret.parent().parent().hasClass('power structure')) {
		                if(this.caret.parent().children().length == 2) { //this power is empty, has only lasso and caret as children
			                this.beep();
			                return false;
		                }
	                }

                    var structure = Mustache.to_html(templates[key], {
                            id:genId(),
                            structureClass:constants.classes.structure
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame
                        });

                    //Consecutive exponents unification, don't insert power structure after another power - use prev one,
                    //don't insert power before another power - use next one
                    if ((!this.caret.prev().hasClass('power')) && (!this.caret.next().hasClass('power'))) {
                        this.insertStructure(structure);
	                    structure = null;
                    }

                    var powerMps = null;

                    if(this.caret.next().hasClass('power')) {
                        powerMps = this._view.find('#' + this.caret.next().children('.mpsContent').attr('id'));
                        this.placeCaret(powerMps, constants.appendType.intoFirst);
                    } else {
                        powerMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));
                        this.placeCaret(powerMps, constants.appendType.intoLast);
                    }

                    this.alignAnchors();
                    alignFrame = true;
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    this.mpsWrapping.register(powerMps, constants.mathTypeKeyboard.remainder.minChar);
                    doAutoComma = false;

                    break;

                case 'fraction':

                    var structure = Mustache.to_html(templates[key], {
                            id:genId(),
                            id1:genId(),
                            id2:genId(),
                            structureClass:constants.classes.structure
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame,
                            id:genId()
                        });


                    this.insertStructure(structure);
	                structure = null;

                    var fractionMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));

                    var numeratorMps = fractionMps.find('.numerator').children('.mpsContent');
                    var denominatorMps = fractionMps.find('.denominator').children('.mpsContent');

                    this.placeCaret(numeratorMps, constants.appendType.intoLast);

                    this.alignAnchors();
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    alignFrame = true;

                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    this.mpsWrapping.register(numeratorMps, constants.mathTypeKeyboard.fraction.minChar);
                    this.mpsWrapping.register(denominatorMps, constants.mathTypeKeyboard.fraction.minChar);
                    doAutoComma = false;

                    break;

                case 'remainder' :

	                var structure_name = key + '_' + ((this.fontLocale && this.fontLocale.substr(0, 2)) || ( ENV.locale ).toLowerCase().split('_')[1]);
                    var structure = Mustache.to_html(templates[structure_name], {
                            id:genId(),
                            structureClass:constants.classes.structure
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame
                        });

                    this.insertStructure(structure);
	                structure = null;

                    var remainderMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));

                    this.placeCaret(remainderMps, constants.appendType.intoLast);
                    this.alignAnchors();
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    alignFrame = true;

                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    this.mpsWrapping.register(remainderMps, constants.mathTypeKeyboard.remainder.minChar);
                    doAutoComma = false;

                    break;

                case 'absolute' :
                    var structure = Mustache.to_html(templates[key], {
                            id:genId(),
                            structureClass:constants.classes.structure
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame
                        });

                    this.insertStructure(structure);
	                structure = null;

                    var absoluteMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));

                    this.placeCaret(absoluteMps, constants.appendType.intoLast);
                    this.alignAnchors();
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    alignFrame = true;

                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    this.mpsWrapping.register(absoluteMps, constants.mathTypeKeyboard.absolute.minChar);
                    doAutoComma = false;
                    break;

                case 'longDivision' :

	                var locale = (this.fontLocale && this.fontLocale !== "usa") ? this.fontLocale :
		                ( ENV.locale ).toLowerCase().split('_')[1];
                    var structure = Mustache.to_html(templates[key + '_' + locale], {
                            id:genId(),
                            id1:genId(),
                            id2:genId(),
                            structureClass:constants.classes.structure
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame
                        });

                    this.insertStructure(structure);
	                structure = null;

                    var longDivisionMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));
                    var dividerMps = longDivisionMps.find('.divider').children().first();
                    var dividedMps = longDivisionMps.find('.divided').children().first();

                    this.placeCaret(longDivisionMps.children().first().children('.mpsContent'), constants.appendType.intoLast);

                    this.alignAnchors();
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    alignFrame = true;
                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    this.mpsWrapping.register(dividerMps, constants.mathTypeKeyboard.longDivision.minChar);
                    this.mpsWrapping.register(dividedMps, constants.mathTypeKeyboard.longDivision.minChar);
                    doAutoComma = false;

                    break;

                case 'segment' :

                    var structure = Mustache.to_html(templates[key], {
                            id:genId(),
                            structureClass:constants.classes.structure,
                            icon:constants.prototypeControlsHash[key].symbol
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame
                        });

                    this.insertStructure(structure);
	                structure = null;

                    var segmentMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));
                    this.placeCaret(segmentMps, constants.appendType.intoLast);
                    this.alignAnchors();
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    alignFrame = true;

                    thi$.selection.removeSelectionDiv();   //remove selection placeholders
                    this.mpsWrapping.register(segmentMps, constants.mathTypeKeyboard.segment.minChar);
                    doAutoComma = false;

                    break;

                case 'rayRight' :

                    var structure = Mustache.to_html(templates[key], {
                            id:genId(),
                            structureClass:constants.classes.structure,
                            icon:constants.prototypeControlsHash[key].symbol
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame
                        });

                    this.insertStructure(structure);
	                structure = null;

                    var rayRightMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));
                    this.placeCaret(rayRightMps, constants.appendType.intoLast);
                    this.alignAnchors();
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    alignFrame = true;
                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    this.mpsWrapping.register(rayRightMps, constants.mathTypeKeyboard.rayRight.minChar);
                    doAutoComma = false;

                    break;

                case 'rayBoth' :

                    var structure = Mustache.to_html(templates[key], {
                            id:genId(),
                            structureClass:constants.classes.structure,
                            icon:constants.prototypeControlsHash[key].symbol
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame
                        });

                    this.insertStructure(structure);
	                structure = null;

                    var rayBothMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));
                    this.placeCaret(rayBothMps, constants.appendType.intoLast);
                    this.alignAnchors();
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    alignFrame = true;
                    thi$._view.find('.selection_placeholder').remove();   //remove selection placeholders

                    this.mpsWrapping.register(rayBothMps, constants.mathTypeKeyboard.rayBoth.minChar);

                    break;

	            case 'angle_geometry' :

		            var structure = Mustache.to_html(templates[key], {
				            id:genId(),
				            structureClass:constants.classes.structure,
				            icon:constants.prototypeControlsHash[key].symbol
			            },
			            {
				            mps:templates.mps,
				            mpsWidthFrame:templates.mpsWidthFrame
			            });

		            this.insertStructure(structure);
		            structure = null;

		            var angleGeometryMps = this._view.find('#' + this.caret.prev().children('.mpsContent').attr('id'));
		            this.placeCaret(angleGeometryMps, constants.appendType.intoLast);
		            this.alignAnchors();
		            this.ancorSpacing(this._view.find('.mpsContent')[0]);
		            alignFrame = true;
		            thi$._view.find('.selection_placeholder').remove();   //remove selection placeholders

		            this.mpsWrapping.register(angleGeometryMps, constants.mathTypeKeyboard.angle_geometry.minChar);

		            break;


                case 'completion':

                    var structure = Mustache.to_html(templates[key], {
                            id:genId(),
                            structureClass:constants.classes.structure
                        },
                        {
                            mps:templates.mps,
                            mpsWidthFrame:templates.mpsWidthFrame
                        });

                    this.insertStructure(structure);
                    this.placeCaret(this.caret.prev().find('.mpsContent'), constants.appendType.intoLast);
                    this.alignAnchors();
                    alignFrame = true;
                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    var completionMps = jQuery(structure).find('.mpsContent');
                    this.mpsWrapping.register(completionMps, 1);

	                structure = null;
                    doAutoComma = false;

                    break;


                default:

                    /** First remove the selection, if any. */
                    this.selection.deleteSelection();

	                var locale_keyboard_symbol = constants.prototypeControlsHash[key]['symbol_' + this.fontLocale];
	                var keyboard_symbol = constants.prototypeControlsHash[key].symbol;

                    var symbol = jQuery(this.createSymbolDivString(locale_keyboard_symbol ? locale_keyboard_symbol : keyboard_symbol, key));

	                var onSymbolMouseUp = function (e) {
		                if (!thi$.isEnabled()) return;
		                thi$.onSymbolMouseUp(e);
	                };

                    symbol.mouseup(onSymbolMouseUp)
                          .insertBefore(this.caret);

                    this.ancorSpacing(this._view.find('.mpsContent')[0]);
                    thi$.selection.removeSelectionDiv();   //remove selection placeholders

                    this.alignAnchors();
                    alignFrame = true;

                    break;
            }

            this.mpsWrapping.alignWrappers();

            if (alignFrame) {
                this.alignFrame();
            }

            //auto comma should take place only after alignFrame function because alignFrame can remove
            // last inserted character in case there is no available space for it
            if (doAutoComma) {
                this.addAutoComma(true);
            }

            this.setKeyboardByCaretPosition();

        },

        /**
         * addAutoComma
         * @param wholeNumber
         * Adding a comma in numbers automatically
         */
        addAutoComma:function (wholeNumber) {

            var counter = 0, temp, originalPosition, currPosition;

            if (this.autoComma && this.caret) {

                currPosition = originalPosition = this.caret.prev();

                // special case of auto comma, if the first digit of a number has been deleted
                // check if the remaining number starts with comma and delete it.
                if (currPosition.hasClass('mpsLasso')) {
                    try {
                        if (currPosition.next().next().attr('validationGroup') == 'thousandsComma') {
                            currPosition.next().next().remove();
                        }
                    } catch (e) {
                    }
                }


                if (wholeNumber) {

                    // search 'back' (prev) for decimal point, if decimal point was found - exit function
                    while (currPosition.attr('validationGroup') == 'digits' || currPosition.attr('validationGroup') == 'thousandsComma' || currPosition.attr('validationGroup') == 'decimalPoint') {

                        if (currPosition.attr('validationGroup') == 'decimalPoint') {

                            /** Save position of the decimalPoint. */
                            originalPosition = currPosition;

                            /** Remove thousandsCommas to the right. */
                            currPosition = currPosition.next();
                            while (currPosition.attr('validationGroup') == 'digits' ||
                                currPosition.attr('validationGroup') == 'thousandsComma' ||
                                currPosition.attr('class') == 'caret') {

                                if (currPosition.attr('validationGroup') == 'thousandsComma') {
                                    temp = currPosition;
                                    currPosition = currPosition.next();
                                    temp.remove();
                                }
                                else {
                                    currPosition = currPosition.next();
                                }
                            }

                            // TODO: more than one decimal point?
                            break;


                        } else {
                            currPosition = currPosition.prev();
                        }
                    }

                    // set currPosition to the original position
                    currPosition = originalPosition;

                    if (currPosition.attr('validationGroup') != 'digits' && currPosition.attr('validationGroup') != 'thousandsComma') {
                        currPosition = currPosition.prev();
                    }

                    // set currPosition to the end of the number
                    while (currPosition.next().attr('validationGroup') == 'digits' || currPosition.next().attr('validationGroup') == 'thousandsComma' || currPosition.next().attr('class') == 'caret') {
                        currPosition = currPosition.next();
                    }
                }

                // parse number
                while (currPosition.attr('validationGroup') == 'digits' || currPosition.attr('validationGroup') == 'thousandsComma' || currPosition.attr('class') == 'caret') {

                    if (currPosition.attr('class') == 'caret') {
                        currPosition = currPosition.prev();
                    }

                    if (currPosition.attr('validationGroup') == 'thousandsComma') {

                        temp = currPosition;
                        currPosition = currPosition.prev();
                        temp.remove();

                    } else {

                        if (counter == 2) {
                            temp = currPosition;
                            currPosition = currPosition.prev();

                            if (currPosition.attr('validationgroup') == 'digits' || currPosition.hasClass('caret')) {
	                            var key = "comma";
	                            var locale_keyboard_symbol = constants.prototypeControlsHash[key]['symbol_' + this.fontLocale];
	                            var keyboard_symbol = constants.prototypeControlsHash[key].symbol;

	                            var symbol = jQuery(this.createSymbolDivString(locale_keyboard_symbol ? locale_keyboard_symbol : keyboard_symbol, key));
	                            symbol.insertBefore(temp);
	                            symbol = null;

                            } else if (currPosition.attr('validationgroup') == 'thousandsComma') {
                                currPosition = currPosition.prev();
                            }

                            counter = 0;
                        }

                        if (currPosition.attr('validationGroup') == 'digits') {
                            counter++;
                            currPosition = currPosition.prev();
                        }

                    }

                }

            }

        },

        // mpsWrapping class
        mpsWrapping:{

            /**
             * register mpsWrapper for parameter mps
             * @param $mps
             * @param minChar
             * @param selector
             */
            register:function ($mps, minChar, selector) {
                var id = $mps.attr('id');
                var $wrapper = this.createWrapper();

                this.collection[id] = {
                    $mpsId:null,
                    $mps:$mps,
                    $wrapper:$wrapper,
                    selector:selector,
                    active:true,
                    minChar:minChar,
                    completionType:null
                };

                this.fit(id);

	            $wrapper = null;
            },

            /**
             * updateRegistration
             * @param id
             * @param key
             * @param value
             * update mpsWrapper
             */
            updateRegistration:function (id, key, value) {
                this.collection[id][key] = value;

                if (key == 'completionType') {
                    this.collection[id].$wrapper.addClass('completion_' + value);
                }
            },

            /**
             * removeFromCollection
             * @param id
             * removes mpsWrapper from collection by id
             */
            removeFromCollection:function (id) {
                if (id in this.collection) {
                    //remove wrapper
                    this.collection[id].$wrapper.remove();
                    //remove current removed element from collection hash
                    delete this.collection[id];
                }
            },

            /**
             * createWrapper
             * creates mpsWrapper div and appends it to MF content
             * returns mpsWrapper jQuery object
             */
            createWrapper:function () {
	            var wrapper = Perf.create('div');
	            wrapper.attr({'class':'mpsWrapper show'});
	            this.thi$$._content.append(wrapper);

                return wrapper;
            },

            /**
             * fit
             * @param id
             * fit mpsWrapper size and offset by it's mps
             */
            fit:function (id) {

                //reload $mps after user input
                if (!!!this.collection[id].$mpsId) {
                    this.collection[id].$mpsId = this.collection[id].$mps.attr('id');
                    this.collection[id].$mps = this.thi$$._view.find('#' + this.collection[id].$mpsId);
                }

                var mpsCords = this.thi$$.selection.storeAllMpsPositions(this.collection[id].$mps.parent(), true, this.collection[id].selector);

                if (!!mpsCords) {
                    var contentCords = this.thi$$.selection.getElementData(this.thi$$._content);
                    var wrapperProporties = this.getWrapperProporties(mpsCords, contentCords, id);
                    this.collection[id].$wrapper.css(wrapperProporties);
	                wrapperProporties = null;
                }

            },

            /**
             * getWrapperProporties
             * @param mpsCords
             * @param contentCords
             */
            getWrapperProporties:function (mpsCords, contentCords, id) {
                return {
                    left:mpsCords.left - contentCords.left - constants.mpsWrapperStyle.padding.left,
                    top:mpsCords.top - contentCords.top - constants.mpsWrapperStyle.padding.top - constants.mpsWrapperStyle.padding.bottom,
                    width:mpsCords.right - mpsCords.left + constants.mpsWrapperStyle.border.width + constants.mpsWrapperStyle.padding.left + constants.mpsWrapperStyle.padding.right,
                    height:mpsCords.bottom - mpsCords.top + constants.mpsWrapperStyle.border.width + constants.mpsWrapperStyle.padding.top + constants.mpsWrapperStyle.padding.bottom
                };
            },

            /**
             * alignWrappers
             * iterates all mpsWrappes in order to show or hide each one, acoording to min char setting of each structure
             */
            alignWrappers:function () {

                var charsInMps, thi$ = this, child;

                for (var index in this.collection) {
                    child = this.collection[index];

                    //check for element existence in DOM - if not exists - remove it from mpsWrapping collection
                    var mpsId = child.$mps.attr('id');
                    if (!!!this.thi$$._view.find('#' + mpsId).get(0)) {
                        thi$.removeFromCollection(mpsId);
                        continue;
                    }

                    charsInMps = child.$mps.text().trim().length;
                    if ((charsInMps < child.minChar)) {
                        child.active = true;
                        thi$.fit(index);
                        thi$.show(index, true);
                    } else {
                        child.active = false;

                        if (child.completionType == null) {  //don't hide wrapper in case it's completion
                            thi$.show(index, false);
                        } else {
                            thi$.fit(index);
                        }

                    }
                }
                ;

            },

            /**
             * show
             * @param id
             * @param show
             */
            show:function (id, show) {
                if (show) this.collection[id].$wrapper.show();
                else       this.collection[id].$wrapper.hide();
            },

            /**
             * getActiveArray
             * return only active mpsWrappers from collection
             * @return {Array}
             */
            getActiveArray:function () {
                var activeArray = [];

                for (var index in this.collection) {
                    if (this.collection[index].active) activeArray.push(this.collection[index]);
                };

                return activeArray;
            }

        },

        /**
         * setKeyboardByCaretPosition
         *
         */
        setKeyboardByCaretPosition:function () {

            // if !caret - return
            if (!this.caret || !!this.dontEnableKeyboard || !this.caret.length) return;

            // fint current structure name
            var currentStructureElement = this.caret;

            while (!!!jQuery(currentStructureElement).hasClass('structure')
                && !!!jQuery(currentStructureElement).hasClass('mathField_content')) {
                //if there is no parent of this element break the loop
                if (!jQuery(currentStructureElement).parent().length) {
                    break;
                }

                currentStructureElement = jQuery(currentStructureElement).parent();
            }

            var structureName = (jQuery(currentStructureElement).attr('class') || '').replace('structure', '').trim();

            // find current mps
            var currentMps = this.caret;
            while (!!!jQuery(currentMps).hasClass('mpsContent') && !!!jQuery(currentStructureElement).hasClass('mathField_content')) {
                //if there is no parent of this element break the loop
                if (!jQuery(currentMps).parent().length) {
                    break;
                }

                currentMps = jQuery(currentMps).parent();
            }

            // if className includes ' ', it's means that there is more than 1 class.
            // loop structures and find the structure string in class string
            if (structureName.indexOf(' ') > -1) {
                for (var structure in constants.mathTypeKeyboard) {
                    if (structureName.indexOf(structure) > -1) structureName = structure;
                }
            }

            // if no structure found,
            // check for mathFieldCompletionType. (keyboard limitation for the entire mathField)
            // else, enable full keyboard and return
            if (structureName == 'mathField_content') {
                if (!this.mathFieldCompletionType) {
                    this.keyboard.enableKeys('all');
                    return null;
                } else {
                    structureName = 'mathFieldCompletion';
                }
            }

            // get key string
            var keyString = '';

            if (constants.mathTypeKeyboard[structureName]) {

                var groups, enable, completiontype;

                switch (structureName) {

                    case 'mathFieldCompletion' :
                        completiontype = this.mathFieldCompletionType.toUpperCase();
                        groups = constants.mathTypeKeyboard.completion[completiontype].groups;
                        enable = constants.mathTypeKeyboard.completion[completiontype].enable;
                        break;

                    case 'completion' :
                        completiontype = currentStructureElement.attr('completiontype').toUpperCase();
                        groups = constants.mathTypeKeyboard.completion[completiontype].groups;
                        enable = constants.mathTypeKeyboard.completion[completiontype].enable;
                        break;

                    default:
                        groups = constants.mathTypeKeyboard[structureName].groups;
                        enable = constants.mathTypeKeyboard[structureName].enable;
                }

                jQuery(groups).each(function (index, child) {
                    keyString += constants.keyboardGroupControls[child] + ',';
                });

                // enable or disable key string
                if (enable) {
                    this.keyboard.enableKeys('none');
                    this.keyboard.enableKeys(keyString);
                } else {
                    this.keyboard.enableKeys('all');
                    this.keyboard.disableKeys(keyString);
                }

                this.checkCharLimit(jQuery(currentMps), structureName, completiontype);
            }

        },

        /**
         * checkCharLimit
         * @param $mps
         * @param structureName
         * @param completiontype
         */
        checkCharLimit:function ($mps, structureName, completiontype) {

            var charLimit;

            switch (structureName) {

                case 'completion':
                    charLimit = constants.mathTypeKeyboard.completion[completiontype].charLimit;
                    break;

                default:
                    charLimit = constants.mathTypeKeyboard[structureName].charLimit;

            }

            if (!charLimit) return;

            if (this.getMpsCharLength($mps) >= charLimit) {
                this.keyboard.disableKeys('all');
                this.keyboard.enableKeys(constants.keyboardGroupControls.system);
            }
        },

        getMpsCharLength:function ($mps) {
            var symbolsCounter = 0;
            $mps.find('.symbol').each(function () {
                symbolsCounter++;
            });
            return symbolsCounter;
        },

        /**
         * set frame width, check if new width is permitted by configuration
         * @param newWidth
         */
        setWidth:function (newWidth) {
            if (this.calcDeltaWidth() && !this.widthMode.fixedWidth) {
                this._frame.width(newWidth);
	            this._view.width(newWidth);
            }
        },

	    setMaxWidth: function(width) {
		    this._super(width);
		    this.checkWidthVsContainer();
	    },
        /**
         * alignFrame
         * calculates new frame width and height according to the new user input
         */
        alignFrame:function (withoutPrevStyle) {

            var thi$ = this;

	        this.prevStyle = { 'height':Compat.actualHeight(thi$._frame),
		        'width':Compat.actualWidth(thi$._frame),
		        'top':thi$._frame[0].style.top,
		        'caretHeight': thi$.caret ? thi$.caret.height() : thi$.fontSize
            };

            if (this.prevStyle.top === '') {
                this.prevStyle.top = '0px';
                thi$._frame[0].style.top = this.prevStyle.top;
            }

            if (this.editMode || this.completionMode) {
                //the width of the frame is equal to the content width
                this.setWidth(this._content.width() + constants.frameStyle.padding.left + constants.frameStyle.padding.right);
            }

            // get highest ans lowest offset
            var $child, mathEdge = {'highest':0, 'lowest':0}, childOffsetTop, childOffsetBottom, childTop, childHeight, childWidth, totalWidth = 0;

            this._content.find('.mpsContent').each(function (index, child) {  //loop through all div elements with class mpsContent

                $child = jQuery(child);
                childHeight = Compat.actualHeight($child);
                childWidth = Compat.actualWidth($child);

                childTop = $child[0].style.top;
                childTop = (childTop == '' ? 0 : childTop.px2int());

                childOffsetTop = $child.offset().top - childTop;   //calculate element real offset top

                mathEdge.highest = ((childOffsetTop < mathEdge.highest) || mathEdge.highest == 0) ? childOffsetTop : mathEdge.highest; //find highest offset top

                childOffsetBottom = childOffsetTop + childHeight;  //get child offset bottom

                //calculate minimum offset top
                mathEdge.lowest = ((childOffsetTop + childHeight) > mathEdge.lowest) ? (childOffsetTop + childHeight) : mathEdge.lowest;

                totalWidth += childWidth;

            });

            var frameProps = {'height':(mathEdge.lowest - mathEdge.highest) + constants.frameStyle.border.width};  //calculate frame new height (delta of highest and lowest offset top)

            frameProps.offsetTop = mathEdge.highest - this._frame.offset().top - constants.frameStyle.padding.bottom;   //frame real offset top is highest offset top minus frame offset top
//            console.log(' mathEdge.highest=', mathEdge.highest, ' this._frame.offset().top=', this._frame.offset().top);

            if (this.editMode || this.completionMode) {
                //frame height is equal to the new calculated height plus frame border width + padding top and bottom
                this._frame.height(frameProps.height + constants.frameStyle.border.width + constants.frameStyle.padding.top + constants.frameStyle.padding.bottom);
            } else {
                this._frame.height(frameProps.height);
            }

            //this._content.height(this._frame.height());

            childTop = (this.prevStyle.top.px2int());   //get frame current top

            if (isNaN(childTop)) childTop = 0 - this.prevStyle.height;

            var frameTop = 0;

            if (frameProps.offsetTop <= 0) { //if we got negative offset top - we need to apply it - move frame up
                frameTop = (Math.abs(childTop) + Math.abs(frameProps.offsetTop) + Math.ceil(constants.frameStyle.border.width / 2)); //set frame new top = old top + offset top
            } else {  //move frame down
                frameTop = (Math.abs(childTop) - Math.abs(frameProps.offsetTop) + Math.ceil(constants.frameStyle.border.width / 2));
            }

            this._frame.css('top', 0 - frameTop);

            if (!this.setMarkUp) {
                this.calcBottomAndTopDeltaHeight();
            }

        },

        /**
         * alignAnchors
         * @param current
         * align mps divs by mpsAnchor and mpsLasso
         */
        alignAnchors:function (current) {

            var mpsContent, mpsLasso, mpsAnchor, delta, thi$ = this;

            var parents = this.caret ? this.caret.parents('.mpsContent') : this._view.find('.mpsContent');

            parents.each(function () {
                // get domObject
                mpsContent = jQuery(this);

                mpsAnchor = mpsContent.parent().children('.mpsAnchor');

                if (mpsAnchor.length > 0) {
                    mpsLasso = jQuery(mpsContent.children('.mpsLasso')[0]);

	                // set top=0
                    mpsContent.css('top', '0px');
                    // get and set Delta
                    delta = (mpsAnchor.offset().top + (mpsAnchor.height() / 2)) -
	                        (mpsLasso.offset().top + (mpsLasso.height() / 2));


                    mpsContent.css('top', delta);
                }

	            mpsContent = null;

            });

        },

        /**
         * insertStructure
         * @param htmlStructure
         */
        insertStructure:function (htmlStructure) {
            this.addAutoComma(false);

	        delete this.lastStructure;
	        this.lastStructure = jQuery(htmlStructure).insertBefore(this.caret);

	        htmlStructure = null;

        },

        /**
         * ancorSpacing
         * @param mps
         */
        ancorSpacing:function (mps) {
            this.ancorSpacing_getPosition(mps);
        },

        /**
         * ancorSpacing_getPosition
         * @param mps
         * @param mpsType
         */
        ancorSpacing_getPosition:function (mps, mpsType) {

            // if mps is an array,
            // start rec with each part of it.
            if (mps.length > 1){
                var thi$ = this, tempPosition = new Array(mps.length);
                jQuery(mps).each(function(index, childMps){
	                tempPosition[index] = thi$.ancorSpacing_getPosition(childMps, mpsType);
                });
                // and return
                return this.sumMpsContentPosition(tempPosition);
            }

            var $mps = jQuery(mps);

            if (!mps) return null;
            if (!($mps.attr('class'))) return null;

            var mpsPowerPosition = this.ancorSpacing_getPosition($mps.children('.power').children('.mpsContent'), 'power');
            var mpsNumeratorPosition = this.ancorSpacing_getPosition($mps.children('.fraction').children('.mpsContent').children('.numerator').children('.mpsContent'), 'numerator');
            var mpsDenominatorPosition = this.ancorSpacing_getPosition($mps.children('.fraction').children('.mpsContent').children('.denominator').children('.mpsContent'), 'denominator');

            var sumMpsContentPosition = this.sumMpsContentPosition([mpsPowerPosition, mpsNumeratorPosition, mpsDenominatorPosition]);

	        var fontSize = $mps.css('font-size').px2int();
	        var mpsHeight = $mps.height() < fontSize ? fontSize : $mps.height();

	        var selfOffset = {
		        'top':$mps.offset().top,
		        'bottom':$mps.offset().top + mpsHeight
	        };

	        if (!sumMpsContentPosition || (sumMpsContentPosition == null)) {
		        // if there is no power of fraction, return mps self position
		        $mps.prev().css('top', '0px');
		        return selfOffset;
	        } else {
		        // add self offset to mps offset
		        sumMpsContentPosition = this.sumMpsContentPosition([sumMpsContentPosition, selfOffset]);
	        }

	        var mpsAnchorTop = $mps.prev().css('top').px2int();
            mpsAnchorTop = mpsAnchorTop == 'auto' ? 0 : mpsAnchorTop;

            switch (mpsType) {

                case 'numerator':
                    var lassoTop = $mps.parent().next().offset().top;
                    var delta = sumMpsContentPosition.bottom - lassoTop;
                    mpsAnchorTop -= delta;

                    mpsAnchorTop = (mpsAnchorTop > 0) ? 0 : mpsAnchorTop;

                    $mps.prev().css('top', mpsAnchorTop);

                    this.alignAnchors();

                    return {'top':lassoTop - (sumMpsContentPosition.bottom - sumMpsContentPosition.top), 'bottom':lassoTop};
                    break;

                case 'denominator':
                    var lassoTop = $mps.parent().prev().offset().top;
	                //lasso is fraction bar add it's height and margin to the offset top
	                if($mps.parent().prev().hasClass('fractionBar')) {
		                lassoTop += 3;
	                }

                    var delta = lassoTop - sumMpsContentPosition.top;
                    mpsAnchorTop += delta;

                    mpsAnchorTop = (mpsAnchorTop < 0) ? 0 : mpsAnchorTop;

                    $mps.prev().css('top', mpsAnchorTop );

                    this.alignAnchors();

                    return {'top':lassoTop, 'bottom':lassoTop + (sumMpsContentPosition.bottom - sumMpsContentPosition.top)};

                    break;

	            case 'power' :

	                var powerLessSumMpsContentPosition = this.sumMpsContentPosition([mpsNumeratorPosition, mpsDenominatorPosition]);

	                // I'm a power that contains a power. so I don't need to do nothing about my position.
		            // only my parent should !
	                if (!powerLessSumMpsContentPosition){
		                return sumMpsContentPosition;
	                }

	                // get lasso data
                    var $lasso =  $mps.children('.mpsLasso');
                    var lassoTop = $lasso.offset().top;
                    var lassoHeight = $lasso.height();

                    // get anchor data
                    var currentAnchorTop = $mps.prev().css('top').px2int();
                    currentAnchorTop = currentAnchorTop == 'auto' ? 0 : currentAnchorTop;

                    // calc delta
                    var delta = ((sumMpsContentPosition.bottom - lassoTop - lassoHeight) / 2) + currentAnchorTop;

                    // negative
                    mpsAnchorTop -= delta;

                    // min = 0
                    mpsAnchorTop = (mpsAnchorTop > 0) ? 0 : mpsAnchorTop;

                    // set top value
                    $mps.prev().css('top', mpsAnchorTop);

                    this.alignAnchors();

                    return {'top':sumMpsContentPosition.top - delta, 'bottom':sumMpsContentPosition.bottom - delta};
                    break;

            }

        },

        /**
         * sumMpsContentPosition
         * @param mpsPositionArray
         */
        sumMpsContentPosition:function (mpsPositionArray) {

            var totalPosition = {'top':null, 'bottom':null};

            for (var i = 0; i < mpsPositionArray.length; i++) {

                if (!!mpsPositionArray[i]) {

                    if (totalPosition.top) {
                        totalPosition.top = (totalPosition.top < mpsPositionArray[i].top) ? totalPosition.top : mpsPositionArray[i].top;
                        totalPosition.bottom = (totalPosition.bottom > mpsPositionArray[i].bottom) ? totalPosition.bottom : mpsPositionArray[i].bottom;
                    } else {
                        totalPosition.top = mpsPositionArray[i].top;
                        totalPosition.bottom = mpsPositionArray[i].bottom;
                    }
                }
            }

            if (totalPosition.top) {
	            totalPosition.top =  Math.ceil( totalPosition.top );
	            totalPosition.bottom =  Math.floor( totalPosition.bottom );
                return totalPosition;
            }

            else
                return null;

        },

        /**
         * setDynamicHeight
         * @param topDelta
         * @param bottomDelta
         */
        setDynamicHeight:function (topDelta, bottomDelta) {
            this._view.css({'margin-top':topDelta, 'margin-bottom':bottomDelta});
        },

        /**
         * calcBottomAndTopDeltaHeight
         * calc bottom and top delta height of the field, and prevent inserting structure that can cause field unsupported growth
         */
        calcBottomAndTopDeltaHeight:function () {
            //current height without paddings
            var frameHeight = Compat.actualHeight(this._frame),
                frameOriginalHeight = this._frame.css('min-height').px2int(),     //frame original height
                heightDelta = frameHeight - frameOriginalHeight;

            var frameTop = (heightDelta > 0) ? (0 - Math.ceil(this._frame.css('top').px2int())) : 0,
                topHeightDelta = frameTop + Math.floor(constants.frameStyle.padding.top),
                bottomHeightDelta = ((heightDelta > 0) ? (heightDelta - topHeightDelta) : 0);

	        if (this.maxHeight.stringValue == "dynamic") { // in case of dynamic max height set frame height according to deltas
		        if ((topHeightDelta > (2 * this.fontSize)) || (bottomHeightDelta > (2 * this.fontSize))) {
			        removeLastStructureAndAlignFrame.call(this);
		        } else {
			        this.setDynamicHeight(topHeightDelta, bottomHeightDelta);
		        }
	        }
	        //the field grew larger that configured, remove last insert structure
	        else if ((topHeightDelta > this.maxHeight.deltaTop) || (bottomHeightDelta > this.maxHeight.deltaBottom)) {
		        removeLastStructureAndAlignFrame.call(this);
	        }

	        function removeLastStructureAndAlignFrame() {
		        this.placeCaret(this.lastStructure, constants.appendType.before);
		        this.lastStructureRemovedFlag = false;

		        //remove actual structure div
		        if (!!this.lastStructure) {
			        this.lastStructureRemovedFlag = true;
			        this.lastStructure.remove();
		        }

		        this.setWidth(this.prevStyle.width);
		        this._frame.height(this.prevStyle.height).css('top', this.prevStyle.top); //apply prev frame style
		        this.caret && this.caret.height(this.prevStyle.caretHeight);

		        this.ancorSpacing(this._view.find('.mpsContent')[0]);
		        this.ancorSpacing(this._view.find('.mpsContent')[0]);

		        this.alignAnchors();
		        this.mpsWrapping.alignWrappers();

		        this.beep();
	        }
        },

        /**
         * calcDeltaWidth
         * calculates delta width of the frame, and removes last inserted element in case of overflow
         */
        calcDeltaWidth:function () {

            if (!this.editMode) {  //in case of readOnly math field do nothing
                return true;
            }

	        //max width of the frame in pixels
	        var maxWidth = ((this.widthMode.fixedWidth) ? this._frame.css('width').px2int() : (this.widthMode.width * this.fontSize)),
	            contentWidth = this._content.innerWidth();     //current width of the frame

	        if(maxWidth <= 0) {
		        return true;
	        }

            var deltaWidth = (maxWidth - contentWidth);


            if (deltaWidth < 0) { //width is larger than max width

	            //remove actual structure div
	            if (!!this.lastStructure) {
		            this.placeCaret(this.lastStructure, constants.appendType.before);
		            this.lastStructureRemovedFlag = false;
		            this.lastStructure.remove();
		            this.lastStructureRemovedFlag = true;
	            } else {
		            var lastElement;
		            if (this.caret.prev('.mpsLasso').length > 0) {  //caret placed prev to lasso - remove all structure
			            lastElement = this.caret.prev().parents('.structure');
		            } else {
			            lastElement = this.caret.prev();       //remove last inserted character
		            }

		            this.placeCaret(lastElement, constants.appendType.before);   //place caret before last inserted element
		            lastElement.remove();
	            }

	            this.ancorSpacing(this._view.find('.mpsContent')[0]);

                this.alignAnchors();
                this.mpsWrapping.alignWrappers();

                this.beep();
                return false;
            }

            return true;

        },

        /**
         * beep
         */
        beep:function () {

            var thi$ = this;
            this._frame.addClass("not_valid").delay(800).queue(function(next){
                if(thi$._frame && thi$._frame.hasClass('not_valid')) {
                    thi$._frame.removeClass("not_valid");
                }
                next();
            });

            SOUND.beep();
        },

        /**
         * calcFontSizeByReduction
         * @param val
         * calc font size by reduction value, and apply abs. min when require
         * @returns {Number} reduced font size
         */
        calcFontSizeByReduction:function (val) {
            if (this.fontSize > (constants.reduction.minFontSize + 1)) {
                // calc font size by reductionStep
	            this.setFontSize((Math.floor((this.fontSize - (this.reductionStep * this.reductionStepSize)) / 2)) * 2);

                // if fontSize is less then fontSizeMinReadable
                if (this.fontSize < constants.reduction.minFontSize) {
                    // set fontSize = minimumReadable (not less)
	                this.setFontSize(constants.reduction.minFontSize);
                    // min readable flag
                    this.isMinimunReadable = true;
                }
            }

            return this.fontSize;
        },

        /**
         * reduce
         * @param val
         */
        reduce:function (val) {
            // if val == null set val = 1 in case this.cfg.reductionStep = 0
            var reductionValue = (this.cfg.reductionStep > 0) ? 0 : ((val != undefined && val > 0) ? val : 1);
            // add the val to the current reductionStep
            this.reductionStep = this.reductionStep + reductionValue;

            if (this.fontSize > (constants.reduction.minFontSize + 1)) {
                this.fontSize -= 2;

                this._view.css('font-size', this.fontSize);

	            //recalculate max deltaTop and deltaBottom
	            this.maxHeight.deltaTop = (constants.maxHeight[this.maxHeight.stringValue].em2int()) * this.fontSize;
	            this.maxHeight.deltaBottom = (constants.maxHeight[this.maxHeight.stringValue].em2int()) * this.fontSize;

                this._view.height('').css('top', '');
                this._content.height('').css('top', '');
                this._frame.height('').css('top', '');

                if (this.widthMode.fixedWidth) {
                    this._frame.width(this.widthMode.width + 'em');
                    this._view.width(this._frame.width()  + constants.frameStyle.padding.left + constants.frameStyle.padding.right);
                } else {
                    this._frame.width(this._content.width() + constants.frameStyle.padding.left + constants.frameStyle.padding.right);
//                    this._view.width(this._frame.width());
                }

                this.mpsWrapping.alignWrappers();

                this.alignFrame();

                //When MF is defined as 2nd level any reduction will cause blow up to be enabled
                if ((!this.editMode && !this.completionMode) && (this.maxHeight.stringValue == "secondLevel") && (!!this.enableBlowup)) {
                    this.createBlowup(false);
                }

            } else {
                this.dispatchEvent("cantReduce");
            }

            this.dispatchEvent('onRendered');
        },

        /**
         * setEnabled
         * @param flag
         */
        setEnabled:function (flag) {
            this._super(flag);
            if (flag) {
	            this._view.show();
                this._view.addClass(constants.classes.blur);
                this.showMasc(false);
            } else {
                this._view.removeClass(constants.classes.blur + ' ' + constants.classes.focus);
                this.showMasc(true);
            }
        }, // End of setEnabled

	    dispose : function() {
		    !!this.keyboard && this.keyboard.dispose();
		    delete this.keyboard;

		    delete constants;
		    delete this.mpsWrapping;
		    delete this.validation;
		    delete this.selection;
		    delete this.initMarkup;
		    delete this.calculate;

		    window._hack_close_mf_keyboard = [] ;

		    this._super();
	    },

	    /**
	     * adjustContentStyle
	     */
	    adjustContentStyle:function () {
		    if (this.completionMode || !this.editMode) {
			    this._view.height(this.getHeightPX());

			    //not for MF inside TV
			    if ((!this.cfg.container) || (!this.cfg.container.hasClass('mathFieldWrapper')) || //not inside TV
				    //or inside sub-answer
				    ( (!!this.cfg.container.parents('.subAnswer').length) && this.cfg.container.hasClass('mathFieldWrapper'))) {

				    var frameTop = this._frame.css('top').px2int();
				    var topAddition = !!this.cfg.viewObject ? Math.floor(this.fontSize * 0.2) : 0;

				    this._view.css({'margin-top':0 + 'px', 'margin-bottom':0 + 'px', 'top':(0 - frameTop) + topAddition + 'px'});
			    } else if (this.cfg.container && this.cfg.container.hasClass('mathFieldWrapper')) {
				    this._view.css('width', this.getWidthPX() + 'px');
				    this.cfg.container.width(this._view.outerWidth(true));
			    }

			    (!!this.fontSize) && this._view.css('font-size', this.fontSize);

			    //fix wrong view width, happens on tablets
			    if(this._view.width() < this._content.width()) {
				    this._view.width(this._content.width());
			    }
		    }
	    },

        /**
         * showMasc
         * @param flag
         * shows or hides masc over MF frame
         */
        showMasc:function (flag) {

            if (flag) {
                this._masc.show().css({'top':this._frame.position().top, 'left':this._frame.position().left,
                    'width':this._frame.width(), 'height':this._frame.height()});
            } else {
                if (!this.enableBlowup)
                    this._masc.hide();
            }

        },

        /**
         * resize
         * @param size
         * override
         */
        resize:function (size) {
            //do nothing
        }

    });

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Private Functions.
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
})();
////////////////////////////////////////
// SRC End --> t2k/component/mathField/MathFieldView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/mathField/MathField.js
////////////////////////////////////////
(function() {
    /**
     * @class t2k.component.mathField.MathField
     * @desc A MathField Presenter class
     * @namespace t2k.component.mathField
     * @extends t2k.component.BaseComponent
     * @type {Object}
     */
    t2k.component.mathField.MathField = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.mathField.MathField',

        /**
         *
         * @param config
         */
        ctor: function(config) {
            this._super(config);

            this.view = this.createNewView(t2k.component.mathField.MathFieldView, config);
        },

        setFirstKeyDownFunction : function(fnc){
            this.view.setFirstKeyDownFunction(fnc);
        },

	    setMyState : function(state){
		    this.view.setMyState(state);
	    },

	    addMyState : function(){
		    var state = this._super();
		    return this.view.addMyState(state);
	    },

	    resetSize: function() {
		    this._super();
		    this.view.adjustContentStyle();
	    },

	    resetTile: function() {
		    this._super();
		    this.view.adjustContentStyle();
	    },

	    looseHeight: function(){
		    this._super();
		    this.view.adjustContentStyle();
	    },

	    looseWidth: function(){
		    this._super();
		    this.view.adjustContentStyle();
	    },

	    getWidthEM:function () {
		    return this.view.getWidthEM();
	    }

    });
})();

////////////////////////////////////////
// SRC End --> t2k/component/mathField/MathField.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/select/OptionView.js
////////////////////////////////////////
(function () {

    var TEMPLATE =
        "<div id='{{id}}' class='option disabled {{autocheck}} {{type}}'>\
            <div class='status_icon'><span id='correct'>8</span><span id='wrong'>></span></div>\
            <div class='option_body'>\
                <div class='option_icon'><span id='select'>{{#isMmc}}#{{/isMmc}}{{^isMmc}}7{{/isMmc}}</span><span id='unSelect'>{{#isMmc}}\"{{/isMmc}}{{^isMmc}}6{{/isMmc}}</span></div>\
                <div class='option_content_wrap'>\
                    <div id='{{id}}_content' class='option_content'></div>\
                </div>\
            </div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the mc's view to use.
     */
    var defaultConfig = {
        /* The state style */
        state:'',
        /* The layout */
        layout:'inline',
        /** The mustache template to render. */
        template:TEMPLATE
    }; // End of defaultConfig.

    t2k.component.select.OptionView = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.component.select.OptionView',

        ctor:function (config) {
            // Delegate.
            this._super(override(config, defaultConfig));

            // reference
            var thi$ = this;

            this.enableBlowup = false;

            jQuery(this._view).mousedown(function() {
                thi$.dispatchEvent("onSelect", thi$.cfg.index);
            });
        },

        /**
         * onViewRendered
         * override
         */
        onViewRendered:function () {
        }, // end of onViewRendered

        /**
         * getInnerSize
         * @returns inner size
         */
        getInnerSize:function () {
	        return ({'width':Math.ceil(this._content.width()), 'height':Math.ceil(this._content.height())});
        },

        /**
         * setIndex
         * @param index
         */
        setIndex:function (index) {
            this.cfg.index = index;
        },

        /**
         * setAutocheck
         */
        setAutocheck:function () {
            this._view.addClass('autocheck');
        },

        /**
         * reset
         * reset option
         */
        reset:function () {
            this._view.removeClass('correct');
            this._view.removeClass('wrong');
            this._view.removeClass('selected');
            this._view.removeClass('system_correct');
            this.cfg.state = '';
            this.markedAsSystemCorrect = false;
        },

        /**
         * setSelected
         * add or remove selected class
         * @param flag
         */
        setSelected:function (flag) {
            if (flag) {
                this._view.addClass("selected");
            } else {
                this._view.removeClass("selected");
            }
        },

        /**
         * getType
         * get options type
         * @returns type
         */
        getType:function () {
            return this.cfg.type;
        },

        /**
         * setType
         * @param type - mc / mmc
         */
        setType:function (type) {
            this.cfg.type = type;
            this._view.addClass(type);
        },

        /**
         * markAsCorrect
         */
        markAsCorrect:function () {
            this._view.removeClass('wrong');
            this._view.addClass('correct');
            this.cfg.state = 'correct';
        },

        /**
         * markAsSystemCorrect
         */
        markAsSystemCorrect:function () {
            if (this.cfg.state != 'correct') {
                this.markAsCorrect();
                this._view.removeClass('correct').addClass('system_correct');
            }
            this.markedAsSystemCorrect = true;
        },

        /**
         * isMarkAsSystemCorrect
         * @returns {Boolean}
         */
        isMarkAsSystemCorrect:function () {
            return !!this.markedAsSystemCorrect;
        },

        /**
         * isMarkedAsCorrect
         * @returns {Boolean}
         */
        isMarkedAsCorrect:function () {
            return this._view.hasClass('correct');
        },

        /**
         * markAsWrong
         */
        markAsWrong:function () {
            this._view.removeClass('correct');
            this._view.addClass('wrong');
            this.cfg.state = 'wrong';
        },

        /**
         * isMarkedAsWrong
         * @returns {Boolean}
         */
        isMarkedAsWrong:function () {
            return this._view.hasClass('wrong');
        },

        bindScrollEvent:function () {
            if(!ENV.behaviors.isAndroid && this.blowupElement){
                domUtils.registerToScroll(this.blowupElement, this);
            }

        },

        unbindScrollEvent:function () {
            if(!ENV.behaviors.isAndroid && this.blowupElement){
                domUtils.unRegisterToScroll(this._view, this);
            }
        },

        /**
         * setBlowup
         * clone option, delete it's internal html, and init child component
         * @param flag
         */
        setBlowup:function (flag) {
            this.enableBlowup = flag;
            var thi$ = this;

            // set event for blowup initialize
            ENV.behaviors.isAndroid || this._view.bind('mouseenter', function () {

                if (thi$._view.attr('blowup') == undefined || thi$._view.attr('blowup') == 'false') {

                    thi$._view.attr('blowup', 'true');

                    jQuery('.blowupElement').each(function (index, child) {
                        jQuery(child).trigger('mouseleave');
                    });

                    // clone dom and events
                    thi$.blowupElement = thi$._view.clone(true).hide();

                    // add classes and arrange cloned behavior
                    thi$.blowupElement.addClass('blowupElement onBlowup')
                        .attr('blowup', 'true').css({
                            'width':'',
                            'height':''
                        }).appendTo(thi$._view.parent());

                    // get & empty content element
                    var option_content = thi$.blowupElement.find('.option_content');
                    option_content.css({
                        'min-width':thi$._view.find('.option_content').width(),
                        'min-height':thi$._view.find('.option_content').outerHeight()
                    }).html('');

                    //set the cloned content element a new id
                    var option_content_id = genId();
                    option_content.attr('id', option_content_id);

                    // get, parse and send to factory
                    var xml = thi$.cfg.data;
                    jQuery(xml.childNodes).each(function (index, element) {
                        componentFactory.create({
                            data:element,
                            parent:option_content_id,
                            dontEnableBlowup:true,
                            // u'll find a full explanation at imageViewerView.js initClassMembers() fnc.
                            tumbnailAppliedForSmallImage:!!thi$.children[0].tumbnailAppliedForSmallImage,
                            onRendered:function () {

                                // fadeIn blowup and check minWidth
                                thi$.blowupElement.fadeTo(100, 0.02, function () {
                                    if (thi$.blowupElement.width() < thi$._view.outerWidth()) {
                                        thi$.blowupElement.width(thi$._view.outerWidth());
                                    }
                                    thi$.blowupElement.fadeTo(100, 1, function () {
                                        // domUtils.centerBlowUp(thi$.blowupElement);
                                    });
                                });

                                // set blowup position
                                domUtils.reparentOnceAndRepositionElement(thi$.blowupElement, thi$._view.offset());
                                //todo decide when and how (because blowup  disapear when mouse leave) and the scrollable object is cannot be scrolled when on blowup , how we deal with bind and unbind scroll event
                                //use bind and unBind to scroll event
                                //thi$.bindScrollEvent();

                            }
                        });
                    });

                    /**
                     * Sync blowup's .selected with option's (don't touch other classes).
                     */
                    thi$.blowupElement.click(function () {
                        var action = thi$._view.hasClass('selected') ? 'addClass' : 'removeClass';
                        thi$.blowupElement[action]('selected');
                    });

                    // add event listener on option mouseMove - remove blowup
                    thi$.blowupElement.mouseleave(function () {
                        //thi$.unbindScrollEvent();
                        thi$.blowupElement.fadeOut(function () {
                            thi$._view.attr('blowup', 'false');
                            thi$.blowupElement.remove();
                        });
                    });
                }

            });

        }

    });

})();


////////////////////////////////////////
// SRC End --> t2k/component/select/OptionView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/component/select/Option.js
////////////////////////////////////////
(function() {

    t2k.component.select.Option = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.component.select.Option',
        
        /**
         * ctor
         * @param config
         */
        ctor: function(config) {
            // Delegate
            this._super(config);
            
            // reference
            var thisOption = this;
            
            // get correctness from xml
            this.isCorrect = jQuery(this.cfg.data).attr('correct') == 'true' ? true : false ;
            
            // init view
            this.view = this.createNewView(t2k.component.select.OptionView, copy(this.cfg, {
                minHeight: 52
            }));
            
            // get and set autocheck mode
            if (this.cfg.autocheck) this.setAutocheck();

	        this.checkAnswerOnState = this.cfg.checkAnswerOnState;
            
            this.selected = false;
            
            var blow = ENV.behaviors.allowBlowup ;
            
            // start composite - create children
        	this.startComposite2({
        		parent: this.view.cfg.id + '_content',
                fixNarrationPosition: 'bottom',
		        taskmode : this.cfg.mode,
                // TODO: DEMO !!
                applyAbsoluteMinimum: blow,
                // TODO: DEMO !!
                onAbsMin : function(){
                	if( blow ) {
                		thisOption.view.setBlowup(true);
                	}
                },
        		dontEnableBlowup : !blow
        	});
        	
        	// check disabled space eating (override)
        	// in child component is imageViewer, disable spaceEating (layouter)
        	this.layout.disableSpaceEating = function(){
        		var childName = thisOption.children[0].name.split('.');
            	childName = childName[childName.length-1].toLowerCase();
            	return (childName == 'imageviewer') ? true : false;
            }
        },
        
        /**
         * loose - override
         */
        loose : function(){
        	// dont loose me ! :)
        },
        
        /**
         * looseHeight
         */
        looseHeight : function(){
        	this._super();
        },
        
        /**
         * setIndex
         * set presenter and view index
         * @param index
         */
        setIndex: function(index){
        	this.cfg.index = index;
        	this.view.setIndex(index);
        },
        
        /**
         * setType
         * set presenter and view type
         * @param type
         */
        setType: function(type){
        	this.cfg.type = type;
        	this.view.setType(type);
        },
        
        /**
         * setAutocheck
         * set view autocheck (diff. click handling) 
         */
        setAutocheck: function(){
        	this.view.setAutocheck();
        },
        
        /**
         * reset
         * reset view (correct / wrong etc..)
         */
        reset: function() {
            this.view.reset();
            this.setSelected(false);
            this.removeSpecificFeedback();
        },
        
        /**
         * setSelected
         * @param flag
         */
        setSelected: function(flag) {
            this.view.setSelected(flag);
            this.selected = flag;
        },
        
        /**
         * isSelected
         * @returns {Boolean}
         */
        isSelected: function() {
            return this.selected;
        },

        /**
         * setMyState - override
         * analyze state and set option
         * @param state
         */
        setMyState : function(state){
	        this.reset();
	        this.setSelected(state.children('select').text() === 'true');
			this.setEnabled(state.children('enabled').text() == 'true');

	        if(!this.checkAnswerOnState) { //checking is handled not by state
		        if (state.children('correct').text() === 'true') this.markAsCorrect();
		        if (state.children('wrong').text() === 'true') this.markAsWrong();
		        if (state.children('systemCorrect').text() === 'true') this.markAsSystemCorrect();
	        }

        },	
        
        //override - get state of component
        /**
         * addMyState
         * to getState
         */
        addMyState : function(){
           var state = jQuery('<state>');
           jQuery('<select/>').text((this.isSelected() ? "true" : "false")).appendTo(state);
           jQuery('<correct/>').text(this.isMarkedAsCorrect()).appendTo(state);
           jQuery('<wrong/>').text(this.isMarkedAsWrong()).appendTo(state);
           jQuery('<systemCorrect/>').text(this.isMarkAsSystemCorrect()).appendTo(state);
           jQuery('<type/>').text(this.getType()).appendTo(state);
           jQuery('<enabled/>').text(this.isEnabled() || false).appendTo(state);
           return state;
        },
        
        /**
         * resetState
         */
        resetState : function(){
        	this.reset();
        },
        
        /**
         * getType
         * @returns type
         */
        getType: function() {
            return this.view.getType();
        },
        
        /**
         * markAsCorrect
         * set view as correct
         */
        markAsCorrect: function() {
            this.view.markAsCorrect();
        },
        
        /**
         * isMarkedAsCorrect
         * @returns {Boolean}
         */
        isMarkedAsCorrect: function() {
            return this.view.isMarkedAsCorrect();
        },

        /**
         * markAsSystemCorrect
         * set view
         */
        markAsSystemCorrect: function() {
            this.view.markAsSystemCorrect();
        },
        
        /**
         * isMarkAsSystemCorrect
         * @returns {Boolean}
         */
        isMarkAsSystemCorrect: function() {
            return this.view.isMarkAsSystemCorrect();
        },
        
        /**
         * markAsWrong
         * set view
         */
        markAsWrong: function() {
            this.view.markAsWrong();
        },
        
        /**
         * isMarkedAsWrong
         * @returns {Boolean}
         */
        isMarkedAsWrong: function() {
            return this.view.isMarkedAsWrong();
        },

        /*
         * setSpecificFeedback
         * set view
         */
         setSpecificFeedback: function(message){
            this.view.setSpecificFeedback(message, 'option');
         },
        
        /**
         * reduce
         */
        reduce : function(){
        	jQuery(this.children).each(function(index, child){	 
        		if(child.reduce){
        			child.reduce();
        		}
			});
        	
        }

    });

})();
////////////////////////////////////////
// SRC End --> t2k/component/select/Option.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/BalloonButtonView.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    var TEMPLATE =
        "<div id='{{id}}' class='balloon-button {{mode}}'>\
            <div id='{{id}}_content' class='balloon-button-content{{#isReduced}} reduced{{/isReduced}}'>\
                <div id='{{id}}_content_icon' class='balloon-button-icon' {{#isReduced}}title={{label}}{{/isReduced}}><span id='feedback'>*</span><span id='hint'>.</span></div>\
                <div id='{{id}}_content_title' class='balloon-button-title'>{{label}}</div>\
            </div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template:TEMPLATE
    }; // End of defaultConfig.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.controls.BalloonButtonView
     * 2d0 - complete doc
     */
    t2k.player.task.controls.BalloonButtonView = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.player.task.controls.BalloonButtonView',

        /**
         * 2d0 - complete doc
         */
        ctor:function (config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

            var thi$ = this;

            this._content.height(this._view.height() - 5);

            this._view.click(function () {
                if (thi$.isEnabled()) {
                    thi$.dispatchEvent('onClick');
                }
            });
        },

        onViewRendered:function () {
//            this.dispatchEvent('onRendered');
        } // end of onViewRendered
        
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/controls/BalloonButtonView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/BalloonButton.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

var _currBalloonHandler;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.controls.BalloonButton
     * 2d0 - complete doc
     */
    t2k.player.task.controls.BalloonButton = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.BalloonButton',

        ctor: function(config) {
            // Delegate
            this._super(config);

            var thi$ = this;

            // Create the view
            this.view = this.createNewView(t2k.player.task.controls.BalloonButtonView, {
                parent: this.cfg.parent,
                mode: this.cfg.mode,
                label: this.cfg.label,
                enabled: true,
                isReduced:this.cfg.isReduced,
                setSrcAtStart : this.cfg.setSrcAtStart,
                events: {
                    onClick: function() {
                        if (t2k.util.balloon.isOpened()) {
                            if (thi$.isBalloonOwner()) t2k.util.balloon.close();
                            else thi$.displayBalloonMessage(null);
                        } else {
                            thi$.displayBalloonMessage(null);
                        }
                    }
                }
            });

        },

        setVisible: function(flag) {
            this._super(flag);
            if (!flag && _currBalloonHandler == this) t2k.util.balloon.close();
        },

        setMessage: function(msgCfg) {
            if (msgCfg) this.msgCfg = msgCfg;
        },

        displayBalloonMessage: function(msgCfg) {
            if (msgCfg) this.msgCfg = msgCfg;
            if (this.msgCfg) {
                this.msgCfg.btn = this.view._view;
                this.msgCfg.align = 'text';
                this.msgCfg.viewport = this.cfg.viewport;
                this.msgCfg.constraint = this.cfg.constraint;
                this.msgCfg.setSrcAtStart = this.cfg.setSrcAtStart;
                t2k.util.balloon.show(this.msgCfg);
                _currBalloonHandler = this;
            }
        },

        hideBalloon: function() {
            t2k.util.balloon.close();
        },

        isBalloonOwner: function() {
            return _currBalloonHandler == this;
        },

        getState: function() {
            var state = jQuery('<' + this.cfg.mode + '/>');
            state.attr('owner', this.isBalloonOwner());
            if (this.isBalloonOwner()) {
                state.attr('balloonOpened', t2k.util.balloon.isOpened());
            }
            state.attr('enabled', this.isEnabled());
            state.attr('visible', this.isVisible());
            if (this.msgCfg) {
                if (this.msgCfg.icon) state.attr('icon', this.msgCfg.icon);
                /** Compatible cross-document append */
                if(this.msgCfg.data) state.append(Compat.importNode(this.msgCfg.data, true));
            }
            return state;
        },

        setState: function(xml) {
            this._super(xml);
            var jqXml = jQuery(xml);
//            this.setEnabled(jqXml.attr('enabled') === 'true');
            this.setVisible(jqXml.attr('visible') === 'true');
            if (jqXml.attr('owner') === 'true') {
                _currBalloonHandler = this;
            }

            if (jqXml.children().length > 0) {
                this.msgCfg = {
                    icon:jqXml.attr('icon'),
                    data:jqXml.children()[0]
                };
            }

            if (this.isBalloonOwner() && jqXml.attr('balloonOpened') === 'true') {
                this.displayBalloonMessage(null);
            }
        }


    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/player/task/controls/BalloonButton.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/SpecificFeedbackBalloonView.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    var TEMPLATE =
        "<div id='{{id}}' class='specificFeedbackBalloonWrapper'>\
            <div id='{{id}}_content' class='balloonContent'></div>\
            <div id='{{id}}_arrow' class='balloon_arrow'></div>\
            <div id='{{id}}_balloon_close' class='balloon_close'>\
                $\
                <span class='mobile-touch-area'></span>\
            </div>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template:TEMPLATE
    }; // End of defaultConfig.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.controls.SpecificFeedbackBalloonView
     * 2d0 - complete doc
     */
    t2k.player.task.controls.SpecificFeedbackBalloonView = t2k.component.BaseComponentView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.player.task.controls.SpecificFeedbackBalloonView',

        ctor:function (config) {
            var self = this;
            
            this._super(copy(config, defaultConfig));
            
            this.parentContainer = this._view.parents('.'+ this.cfg.parentClass);
            
            this.registerEvents();

            componentFactory.create(copy({
                data : config.data,
                setMaxWidth : parseInt(this._view.css('max-width')),
                parent: this._view.find('.balloonContent'),
                onRendered: function(){
                    self._arrow = self._view.find('.balloon_arrow');
                    self.setBaloonPosition();
                    self.isOpened= true;
                }
            }));
        },
        
        registerEvents : function () {
            //show baloon on click on the status icon
            var self = this;
           $('.task_content').on('mousedown',"#" + this.parentContainer[0].id,function (event) {
                //hide balloon when click on close
                if( self.isEnabled() &&
                    self.isOpened &&
                    $(event.target).hasClass('balloon_close') || $(event.target).parents().hasClass('balloon_close')) {
                        self.hideBalloon();
                        event.stopPropagation();
                }else{
                    //show ballon when click on the option/subanswer
                   if(self.isEnabled() &&
                        !self.isOpened &&
                        ($(event.target).hasClass(self.cfg.parentClass) || $(event.target).parents('.' + self.cfg.parentClass).length && !$(event.target).parents('.specificFeedbackBalloonWrapper').length) ){
                        self.showBalloon();
                        event.stopPropagation();
                    }
                }
            });
            
            //hide balloon on click outsode of the balloon element - exept click on the status icon
            $(document).on('mousedown', function(event){
                if(!$(event.target).hasClass(self.cfg.parentClass) && !$(event.target).parents('.'+ self.cfg.parentClass).length){
                    self.hideBalloon();
                    event.stopPropagation();
                }
            });
        },
        
       positionCallback : function (css , config) {
             
             if(config.vertical == "bottom") {
                $(this._arrow).addClass('top');
             }else{
                $(this._arrow).addClass('bottom');  
               
             }
             this._view.css(css);
             
             this._arrow.position({
                 my:'center top-5',
                 at:'center' + ' ' + (config.vertical === "bottom" ? "top-10" : "bottom+4" ),
                 of:$(this.parentContainer).find('.status_icon'),
                 collision: "none"
             });
             
        },

        /**
         * find the balloon position and its arrow
         * @return {[type]} [description]
         */
        setBaloonPosition: function(){
            
            var position_cfg = {
                my:(ENV.contentDirection == 'ltr' ? 'left' : 'right') + '-100 bottom-3',
                at:(ENV.contentDirection == 'ltr' ? 'right' : 'left') + ' top-3',
                of:this.parentContainer.find('.status_icon'),
                collision:'fit flip',
                using:this.positionCallback.bind(this),
                within: $(this.parentContainer).closest('.task_content')
            };

            this._view.appendTo( $(this.parentContainer).closest('.task_content'));
            this._view.position(position_cfg);
            $(this.parentContainer).css('zIndex',1);
        },
        
        /**
         * hide balloon
         * @return {[type]} [description]
         */
        hideBalloon: function(){
            this._view.hide();
            this.isOpened = false;
            $(this.parentContainer).css('zIndex',0);
        },

        /**
         * display balloon
         * @return {[type]} [description]
         */
        showBalloon : function(){
            this._view.show();
            this.isOpened = true;
            $(this.parentContainer).css('zIndex',1);
        },

        remove : function(){
            this._view.remove();
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/controls/SpecificFeedbackBalloonView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/SpecificFeedbackBalloon.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

var _currBalloonHandler;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.controls.SpecificFeedbackBalloon
     * 2d0 - complete doc
     */
    t2k.player.task.controls.SpecificFeedbackBalloon = t2k.component.BaseComponent.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.SpecificFeedbackBalloon',

        ctor: function(config) {
            // Delegate
            this._super(config);

            // Create the view
            this.view = this.createNewView(t2k.player.task.controls.SpecificFeedbackBalloonView, {
                parent: this.cfg.parent,
                parentClass : this.cfg.parentClass,
                data : this.cfg.data,
                enabled: true
            });

        },
        remove: function(){
            if(this.view){
                this.view.remove();
                delete this.view;
            }
        }
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/player/task/controls/SpecificFeedbackBalloon.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/InstructionView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div id='{{id}}' class='instruction'>\
            <div id='{{id}}_content' class='task_instruction_content'>\
	            <div id='{{id}}_icon' class='task_instruction_icon'>\
	            /\
	            </div>\
            </div>\
        </div>";

//            <div id='{{id}}_separator' class='instruction_separator'></div>\
    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE,
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.player.task.controls.InstructionView = t2k.component.CompositeView.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.InstructionView',

        /**
         * 2d0 - complete doc
         */
        ctor: function(config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

            this.setReduced( this.cfg.isReduced ) ;
        },
		
        setReduced: function( value ) {
        	if( this.cfg.isReduced != value ) {
	        	if( value ) {
	            	console.log( 'reduced instruction' ) ;
	        	} else {
	        		console.log( 'non-reduced instruction' ) ;
	        	}
	        	this.cfg.isReduced = value ;
        	}
        },
		
        setEmphasized: function( value ) {
        	var jView = jQuery( '#' + this.cfg.id + '_content' ) ;
            // TODO: fix display div.narratio (yellow light when playing)
            if (jView) {
                if( value) {
                   jView.addClass( 'instruction_emphasized' ) ; 
                } else {
                   jView.removeClass( 'instruction_emphasized' ) ;
                }
            }
        },
        
        addTaskHelpClass:function () {
        	this._content.addClass('has_task_help');
        },

        setSequenceMode:function() {
            Perf.select('#' + this.cfg.id + '_icon').css('display', 'none');
        }
    });

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/controls/InstructionView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/Instruction.js
////////////////////////////////////////
(function() {

    t2k.player.task.controls.Instruction = t2k.component.Composite.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.Instruction',

        ctor: function(config) {
            // Delegate
            this._super(config);
            // Create the view
            this.view = this.createNewView(t2k.player.task.controls.InstructionView, this.cfg );

            if (this.cfg.hasHelp) this.addTaskHelpClass();

            this.isFirstPlay = true;

            this.cfg.emphasized = ENV.behaviors.disableAutoNarrationOfInstraction ? false : this.cfg.emphasized;

            this.startComposite2( {parent: this.view.cfg.id + '_content'} ) ;

            this.tav = this.children[0] ;
        },

        setEnabled: function(flag) {
            this._super(flag);

            this.tav.setEnabled( flag ) ;

            if( flag && this.cfg.emphasized && this.tav && this.isFirstPlay ) {
            	var thi$ = this ;
                this.isFirstPlay = false ;
            	this.view.setEmphasized( true ) ;
            	this.tav.narrate(function() {
                    thi$.cfg.eventsManager.dispatchEvent('onInstructionNarrationDone');
                    thi$.view.setEmphasized( false ) ;
                }) ;
                this.cfg.eventsManager.dispatchEvent('onInstructionNarrationStarted');
            } else {
                this.cfg.eventsManager.dispatchEvent('onInstructionNarrationDone');
            }
        },

        setReduced: function( value ) {
        	if( this.cfg.isReduced != value ) {
	        	this.cfg.isReduced = value ;
	        	this.view.setReduced( value ) ;
        	}
        },

        addTaskHelpClass:function () {
        	this.view.addTaskHelpClass();
        },
        setSequenceMode:function() {
            this.view.setSequenceMode();
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/player/task/controls/Instruction.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/DropDownButtonView.js
////////////////////////////////////////
(function() {


    t2k.player.task.controls.DropDownButtonView = t2k.core.View.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.DropDownButtonView',

        /**
         * ctor
         */
        ctor: function(config) {
        	// ref
            var thi$ = this;
            
        	// Delegate.
            this._super(config);
            
            // bind this._view click and dispatch onClick event
            jQuery(this._view).click(function (e) {
	            e.stopPropagation();

            	thi$.dispatchEvent('onClick', {
            		view:thi$,
            		el:jQuery(e.target)
            	});
	            return false;
            });
            
            // set flag
            this.dropDownOpen = false; //drop down state
        },
        
        /**
         * addDropdownItem
         * @param data
         */
        addDropdownItem:function (data) {
        	// ref
        	var thi$ = this;
        	
        	// set and append item
        	var item = jQuery('<div />')
        		.html(data.label)
        		.attr({
                    'index' : data.index,
                    'title' : data.label
                })
        		.appendTo(this._dropdown)
        		.click(function () {
        			var item = jQuery(this);
        			thi$.dispatchEvent('onSelect', item.attr('index'));
        		});
        	
        	// ? hide
        	if (data.initHide){
        		item.hide();
        	}
        	
        	// ? set type
        	if (data.type){
        		item.attr('type' , data.type);
        	}
        },
        
        /**
         * toogleDropdown
         * toggle drop down menu
         * @param el
         */
        toogleDropdown : function(el) {
        	
        	// if the clicked element is the drop down menu button

        	if (el.attr('id') == this._icon.attr('id')) {
        		// on open - hide
        		if (this.dropDownOpen) {
        			this._dropdown.addClass('hidden');
        			this._icon.removeClass('active');
        		} else {
        			// on hidden - open
        			this._dropdown.removeClass('hidden');
        			this._icon.addClass('active');
        		}
            	// set flag
            	this.dropDownOpen = !this.dropDownOpen;
            	
        	} else {
        		// if the clicked element is not the drop down button - hide it
        		this._dropdown.addClass('hidden');
        		this._icon.removeClass('active');
        		// set flag
        		this.dropDownOpen = false;
        	}
            	
        },
        
        /**
         * closeDropdown
         * set class and flag
         */
        closeDropdown:function () {
        	this._dropdown.addClass('hidden');
        	this.dropDownOpen = false;
        },
		
        /**
         * setReduced
         * @param value
         * TODO: check and remove
         */
        setReduced: function( value ) {
        	if( this.cfg.isReduced != value ) {
	        	if( value ) {
	            	console.log( 'reduced instruction' ) ;
	        	} else {
	        		console.log( 'non-reduced instruction' ) ;
	        	}
	        	this.cfg.isReduced = value ;
        	}
        }
    });

})();
////////////////////////////////////////
// SRC End --> t2k/player/task/controls/DropDownButtonView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/DropDownButton.js
////////////////////////////////////////
(function() {

    t2k.player.task.controls.DropDownButton = t2k.core.Presenter.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.DropDownButton',
        
        /**
         * ctor
         * @param config
         */
        ctor: function(config) {
        	// Delegate
            this._super(config);
            
            //store items config
            this.items = {};
            
            this.createView();
            
            this.fillDropdown();
        },
        
        /**
         * createView
         * a place for inheritor's view creation
         */
        createView : function(){
        	 /* null implementation */
        },
        
        /**
         * fillDropdown
         * a place for inheritor's drop down fill
         */
        fillDropdown:function () {
        	 /* null implementation */
        },
        
        /**
         * setEnabled
         * @param flag
         */
        setEnabled: function(flag) {
            this._super(flag);
        },
        
        /**
         * setReduced
         * @param value
         * TODO: check and remove
         */
        setReduced: function( value ) {
        	if( this.cfg.isReduced != value ) {
	        	this.cfg.isReduced = value ;
	        	this.view.setReduced( value ) ;
        	}
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();
////////////////////////////////////////
// SRC End --> t2k/player/task/controls/DropDownButton.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/TaskHelpView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
    	"<div id='{{id}}' class='taskHelp'>\
	        <div id='{{id}}_content' class='task_help_content'>\
	            <div id='{{id}}_icon' class='task_help_icon'/>\
	            <div id='{{id}}_dropdown' class='task_help_dropdown hidden'/></div>\
	        </div>\
	    </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE,
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.player.task.controls.TaskHelpView = t2k.player.task.controls.DropDownButtonView.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.DropDownButtonView',

        /**
         * ctor
         */
        ctor: function(config) {
        	// Delegate.
            this._super(copy(config, defaultConfig));
        },

	    toogleDropdown : function(el) {
		    this._super(el);

		    //if dropdown was closed & we did not click again on the help icon- we want to display the help item
		    if (!this.dropDownOpen && el.attr('id') != this._icon.attr('id')) {
			    //build help item modal config
			    var helpIndex = el.attr('index') && el.attr('index').px2int();
			    if (typeof helpIndex === 'undefined') {
				    return;
			    }

			    var thi$ = this;

			    ENV.Modal.show({
				    data:this.cfg.items[helpIndex],
				    dummyMode:false,
				    state: thi$.cfg.sequenceObj.helpState[helpIndex],
				    onClose:function (state) {
					    thi$.cfg.sequenceObj && (thi$.cfg.sequenceObj.helpState[helpIndex] = state);
				    }
			    });
		    }
	    }
        
    });

})();
////////////////////////////////////////
// SRC End --> t2k/player/task/controls/TaskHelpView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/TaskHelp.js
////////////////////////////////////////
(function() {

    t2k.player.task.controls.TaskHelp = t2k.player.task.controls.DropDownButton.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.TaskHelp',
        
        /**
         * ctor
         * @param config
         */
        ctor: function(config) {
        	// Delegate
            this._super(config);
        },
        
        /**
         * createView
         * bind relevant events (host fnc [popup])
         */
        createView : function(){
        	// ref
        	 var thi$ = this;
        	
        	 // Create the view
            this.view = new t2k.player.task.controls.TaskHelpView( copy(this.cfg, {
            	events:{
            		
            		onClick:function (obj) {
            			obj.view.toogleDropdown(obj.el);
            		},
            
		            onSelect:function (index) {
		            	// do somthing here...
		    		}
            	}
            }) );
        },
        
        /**
         * fillDropdown
         * xml parsing
         */
        fillDropdown:function () {
        	// Delegate
        	this._super();
        	
        	var item, caption, thi$ = this;
        	
        	this.cfg.items.each(function (index) {
        		item = jQuery(this),
        		caption = item.attr('caption');

		        thi$.view.addDropdownItem({
			        label:caption,
			        index:index
		        });

		        thi$.items[index] = {
			        winTitle:caption
		        };
        		
        	});
        }
        
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();
////////////////////////////////////////
// SRC End --> t2k/player/task/controls/TaskHelp.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/TeacherMenuView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
    	"<div id='{{id}}' class='teacherMenu'>\
	        <div id='{{id}}_content' class='teacher_menu_content'>\
	            <div id='{{id}}_icon' class='teacher_menu_icon'/>\
	            <div id='{{id}}_dropdown' class='teacher_menu_dropdown hidden'/></div>\
	        </div>\
	    </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE,
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.player.task.controls.TeacherMenuView = t2k.player.task.controls.DropDownButtonView.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.TeacherMenuView',

        /**
         * ctor
         */
        ctor: function(config) {
        	// Delegate.
            this._super(copy(config, defaultConfig));
        },
        
        /**
         * displayItem
         * hide / show item by type
         * @param type {String}
         * @param show {Boolean}
         */
        displayItem : function(type, show){
        	this._view.find('div[type=' + type + ']').css('display',  show ? '' : 'none');
        }
        
    });

})();
////////////////////////////////////////
// SRC End --> t2k/player/task/controls/TeacherMenuView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/TeacherMenu.js
////////////////////////////////////////
(function() {

    t2k.player.task.controls.TeacherMenu = t2k.player.task.controls.DropDownButton.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.TeacherMenu',
        
        /**
         * ctor
         * @param config
         */
        ctor: function(config) {
        	// Delegate
            this._super(config);
        },
        
        /**
         * createView
         * bind onSelect event - apply item's data function
         */
        createView : function(){
        	// ref
        	 var thi$ = this;
        	
        	 // Create the view
            this.view = new t2k.player.task.controls.TeacherMenuView( copy(this.cfg, {
            	events:{
            		
            		onClick:function (obj) {
            			obj.view.toogleDropdown(obj.el);
            		},
            
		            onSelect:function (index) {
		            	// call lable's fnc
		            	thi$.items[index].fnc.apply();
		    		}
            	}
            }) );
        },
        
        /**
         * fillDropdown
         * parse JSON's array
         */
        fillDropdown:function () {
        	// Delegate
        	this._super();
        	
        	var item, caption, thi$ = this;
        	
        	jQuery(this.cfg.data).each(function (index, lable) {

        		thi$.view.addDropdownItem({
        			// languageUtils (i18e)
        			label 		: _i18n('task.progress.labels.' + lable.lable),
        			type		: lable.lable,
        			index 		: index,
        			initHide 	: lable.initHide
        		});
        	
        		thi$.items[index] = {
        			label	: caption,
        			fnc		: lable.fnc
        		};
        		
        		// validate item data [type]
        		if (!thi$.items[index].fnc) throw 'drop dowm menu data error - [' + caption + '] fnc mismatch';
        		
        	});
        },
        
        /**
         * toggleDropdownContent
         * @param showType
         * @param hideType
         */
        toggleDropdownContent : function(showType, hideType){
        	this.showItem(showType);
        	this.hideItem(hideType);
        },
        
        showItem : function(showType){
        	this.view.displayItem(showType, true);
        },
        
        hideItem : function(hideType){
        	this.view.displayItem(hideType, false);
        }
        
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();
////////////////////////////////////////
// SRC End --> t2k/player/task/controls/TeacherMenu.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/AttemptsIndicatorView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div id='{{id}}' class='attempt{{#isReduced}} reduced{{/isReduced}}'>\
            <span id='{{id}}_text' class='attempt_text'>{{attemptsTxt}}:</span>\
            <span id='{{id}}_content' class='attempt_content'>\
            </span>\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE,
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.player.task.controls.AttemptsIndicatorView = t2k.core.View.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.AttemptsIndicatorView',

        /**
         * 2d0 - complete doc
         */
        ctor: function(config) {
            
        	config.attemptsTxt = _i18n('tasktoolbar.attempts');
        	
            // Delegate.
            this._super(copy(config, defaultConfig));

        },		
        
        setValues: function( attempts, current ) {
        	var jLabel = jQuery( this._view.selector + '_content' ) ;
        	jLabel.html( getAttemptsString( attempts, current ) ) ;
        }
    });

	function getAttemptsString( attempts, current ) {
		return '<span>' + current + '</span>/' + attempts ; 
	}

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/controls/AttemptsIndicatorView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/AttemptsIndicator.js
////////////////////////////////////////
(function() {

    t2k.player.task.controls.AttemptsIndicator = t2k.core.Presenter.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.AttemptsIndicator',

        ctor: function(config) {
            // Delegate
            this._super(config);
            // Create the view
            this.view = new t2k.player.task.controls.AttemptsIndicatorView( this.cfg );
            
        },
        
        setEnabled: function(flag) {
            this._super(flag);
            
            if( flag && this.cfg.emphasized && this.tav ) {
            	this.view.setEmphasized( true ) ;
            	this.tav.narrate() ;
            }
        },

        setReduced: function( value ) {
        	if( this.cfg.isReduced != value ) {
	        	this.cfg.isReduced = value ;
	        	this.view.setReduced( value ) ;
        	}
        },
        
        setCurrentAttempt: function( current ) {
        	this.view.setValues( this.cfg.attempts, current ) ;
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/player/task/controls/AttemptsIndicator.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/PointsIndicatorView.js
////////////////////////////////////////
(function() {

    var TEMPLATE =
        "<div id='{{id}}' class='point{{#isReduced}} reduced{{/isReduced}}'>\
            <span id='{{id}}_content' class='point_content'></span>\
            <span id='{{id}}_text' class='point_text'>{{pointsTxt}}</span>&nbsp;\
        </div>";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE,
        layout: 'inline'
    }; // End of defaultConfig.

    t2k.player.task.controls.PointsIndicatorView = t2k.core.View.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.PointsIndicatorView',

        /**
         * 2d0 - complete doc
         */
        ctor: function(config) {
            
        	config.pointsTxt = _i18n('tasktoolbar.points');
        	// Delegate.
            this._super(copy(config, defaultConfig));

        },		
        
        setValues: function( points, correct ) {
        	var jLabel = jQuery( this._view.selector + '_content' ) ;

	        if(points > 0) {
        	    jLabel.html(typeof correct === 'number' ? getPointsString( points, correct ) : points) ;
	        } else {
		        this._view.hide();
	        }
        }
    });

	function getPointsString( total, correctPoints ) {
		return '<span>' + correctPoints + '</span>/' + total ;
	}

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/controls/PointsIndicatorView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/PointsIndicator.js
////////////////////////////////////////
(function() {

    t2k.player.task.controls.PointsIndicator = t2k.core.Presenter.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.task.controls.PointsIndicator',

        ctor: function(config) {
            // Delegate
            this._super(config);
            // Create the view
            this.view = new t2k.player.task.controls.PointsIndicatorView( this.cfg );

	        this.setCurrentPoint(null);
            
        },
        
        setEnabled: function(flag) {
            this._super(flag);
            
            if( flag && this.cfg.emphasized && this.tav ) {
            	this.view.setEmphasized( true ) ;
            	this.tav.narrate() ;
            }
        },

        setReduced: function( value ) {
        	if( this.cfg.isReduced != value ) {
	        	this.cfg.isReduced = value ;
	        	this.view.setReduced( value ) ;
        	}
        },
        
        setCurrentPoint: function( correct ) {
        	this.view.setValues( this.cfg.points, correct ) ;
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/player/task/controls/PointsIndicator.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/progress/Progress.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.progress.Progress
     * handles all kind of task's progression
     *
     * Properties:
     *  config - {Object} The progress's configuration.
     */
    t2k.player.task.progress.Progress = Object.subClass({
        name:"t2k.player.task.progress.Progress",

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor:function (config) {

            // set config as a member
            this.cfg = config;
            // init members
            this.started = false;
            this.finished = false;
            
            //currently autocheck should be disabled (also in McAnswer)
            this.cfg.progressData.autocheck = false;
            
            // init current mode from answer's progress configuration
            this.currentMode = this.cfg.defaultProgressConfig.buttonModes.currMode;

            var buttonMode = this.cfg.progressData.autocheck ? 'progress' : this.getButtonProgressMode();

            // if attempts = 0, the task that handles by this progress is not checkable
            if (this.cfg.progressData.attempts == 0) {
                this.attempt = null;
            } else {
                // if this task is checkable, init checkable toolbar
                this.cfg.eventsManager.dispatchEvent('initCheckableToolbar');
                // set the attempts as the first attempt
                this.attempt = 1;
                // update attempts indicator with the first attempt
                var msgAttempt = attemptNumberToName(this.attempt, this.cfg.progressData.attempts);
                this.cfg.eventsManager.dispatchEvent('updateAttemptsIndicator', [this.attempt, msgAttempt]);
            }

            // config progression button
            this.cfg.eventsManager.dispatchEvent('configButton', {
                enabled:false,
                visible:true,
                // set the button mode with the init val from answer progression configuration 
                mode:buttonMode
            });

            // register progression's events
            this.registerEvents();

        }, // End of ctor

        /**
         * registerEvents
         * register progression's events
         *
         * these events are register in the task events manager (see: task/controls/TaskEventManager.js)
         */
        registerEvents:function () {
            var thi$ = this;

            /**
             * event name: setProgressReady
             * if the task doesn't "finish", enable progress button.
             * except "auto check". in that case, simply check the answer
             */
            this.cfg.eventsManager.registerEvent('setProgressReady', function () {
                if (!thi$.finished) {
                    if (thi$.cfg.progressData.autocheck) {
                        thi$.cfg.eventsManager.dispatchEvent('onAnswerCheck');
                    } else {
                        if (thi$.started) {
                            thi$.cfg.eventsManager.dispatchEvent('configButton', {
                                enabled:true
                            });

                        }
                    }
                }
            });

            /**
             *  event name: setProgressProgress
             *  checkable progress
             *
             *  @param feedbackMessage
             */
            this.cfg.eventsManager.registerEvent('setProgressProgress', function (feedbackMessage) {
                // set answer non interactive
                thi$.cfg.eventsManager.dispatchEvent('setAnswerInteractable', false);

                if (!thi$.finished) {

                    var msgAttempt;
                    var enableButton = false;
                    var autoButtonMode = null;

                    var buttonProperties = {};

                    // switch current progression mode
                    switch (thi$.currentMode) {

                        case 'check':

                            // check for last attempt
                            var notLast = thi$.attempt < thi$.cfg.progressData.attempts;
                            // if this is the last attempt, set for showAnswer mode. else, set for tryAgain mode.
                            var mode = notLast ? 'tryagain' : 'showanswer';
                            
                            var checkData = null ;
                            
                            if( !!feedbackMessage ) {
                            	checkData = { checkedValue: feedbackMessage.data.type, currentAttempt: thi$.attempt } ;
                            }
                            
                            thi$.cfg.eventsManager.dispatchEvent( 
                            		'logProgressEvent',
                            		[
	        							t2k.util.LogEventsService.CHECK_PRESSED,
	        							checkData
        							]
                            ) ;
                            
                            msgAttempt = attemptNumberToName(thi$.attempt, thi$.cfg.progressData.attempts);
                            var showSummaryIcon = mode == 'showanswer';

	                        if(feedbackMessage) {
                                thi$.cfg.eventsManager.dispatchEvent('showFeedback', [feedbackMessage, showSummaryIcon, msgAttempt]);
	                        }

                            if (showSummaryIcon) {
                                thi$.cfg.eventsManager.dispatchEvent('setTaskCompletedFocused', true);
                            }

                            if (notLast) {
                                thi$.attempt++;
                            } else {
                            	thi$.cfg.eventsManager.dispatchEvent( 'finishedAllAttempts' ) ;
                            }
                            
                            thi$.currentMode = mode;

                            buttonProperties.enabled = true;
                            buttonProperties.mode = mode;

                            break;

                        case 'tryagain':

                            thi$.cfg.eventsManager.dispatchEvent('setAnswerInteractable', true);

                            thi$.currentMode = 'check';

                            buttonProperties.enabled = (thi$.cfg.defaultProgressConfig.progressType === 'init');
                            buttonProperties.mode = thi$.currentMode;

                            thi$.cfg.eventsManager.dispatchEvent('hideBalloon');

                            msgAttempt = attemptNumberToName(thi$.attempt, thi$.cfg.progressData.attempts);
                            thi$.cfg.eventsManager.dispatchEvent('updateAttemptsIndicator', [thi$.attempt, msgAttempt]);

                            thi$.cfg.eventsManager.dispatchEvent('showHintButton');

                            if (thi$.cfg.progressData.autocheck) {
                                buttonProperties.mode = 'progress';
                            }

                            break;

                        case 'showanswer':
                        	
                        	thi$.cfg.eventsManager.dispatchEvent('logProgressEvent', t2k.util.LogEventsService.SHOW_ANSWER ) ;
                        	
                            thi$.currentMode = 'progress';

                            buttonProperties.enabled = true;
                            buttonProperties.mode = thi$.currentMode;

                            if (thi$.cfg.progressData.autocheck) {
                                buttonProperties.enabled = true;
                                buttonProperties.mode = thi$.getButtonProgressMode();
                            } else { // close feedback
                                thi$.cfg.eventsManager.dispatchEvent('hideFeedback');
                            }

                            //thi$.cfg.eventsManager.dispatchEvent('setTaskCompletedFocused' , true);

                            break;
                    }

                    thi$.cfg.eventsManager.dispatchEvent('configButton', buttonProperties);
                }
            });

            this.cfg.eventsManager.registerEvent('setProgressUnready', function () {
                if (!thi$.finished) {
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        enabled:false
                    });
                }
            });

            this.cfg.eventsManager.registerEvent('setProgressDone', function () {
                if (!thi$.finished) {
                	
                	var fbType = t2k.util.FeedbackUtils.TYPE_ALL_CORRECT ;
                	
                    thi$.cfg.eventsManager.dispatchEvent( 
                    		'logProgressEvent',
							[
								t2k.util.LogEventsService.CHECK_PRESSED,
								{	
									checkedValue: fbType,
									currentAttempt: thi$.attempt
								}
							 ]
                    ) ;
                	
                    var msgData = FeedbackService.createMessage( fbType ) ;
                    var msgAttempt = attemptNumberToName(thi$.attempt, thi$.cfg.progressData.attempts);

                    var showSummaryIcon = true;
                    thi$.cfg.eventsManager.dispatchEvent('showFeedback', [msgData, showSummaryIcon, msgAttempt]);

                    if (showSummaryIcon) {
                        thi$.cfg.eventsManager.dispatchEvent('setTaskCompletedFocused', true);
                    }

                    thi$.currentMode = 'progress';

                    if (thi$.cfg.progressData.autocheck) {
                        thi$.cfg.eventsManager.dispatchEvent('configButton', {
                            visible:true
                        });
                    }
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        enabled:true,
                        mode:thi$.getButtonProgressMode()
                    });

                    //thi$.cfg.eventsManager.dispatchEvent('setTaskCompletedFocused' , true);
                }

            });

            this.cfg.eventsManager.registerEvent('taskFinish', function () {
                if (!thi$.finished) {
                    thi$.setEnabled(false);
                    thi$.cfg.eventsManager.dispatchEvent('hideHint');
                    thi$.cfg.eventsManager.dispatchEvent('hideFeedback');
                    thi$.cfg.eventsManager.dispatchEvent('hideBalloon');
                    thi$.cfg.eventsManager.dispatchEvent('hideAttemptsIndicator');
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        visible:thi$.cfg.enableButtonOnDone,
                        enabled:thi$.cfg.enableButtonOnDone
                    });
                    thi$.finished = true;
                }
            });

            this.cfg.eventsManager.registerEvent('onInstructionNarrationStarted', function () {
                thi$.cfg.eventsManager.dispatchEvent('configButton', {
                    enabled:false
                });
            });

            this.cfg.eventsManager.registerEvent('onInstructionNarrationDone', function () {

                thi$.started = true;
                thi$.taskComponentEnabled = true;

                thi$.cfg.eventsManager.dispatchEvent('setTitleEnabled', true);
                thi$.cfg.eventsManager.dispatchEvent('setQuestionEnabled', true);
                thi$.cfg.eventsManager.dispatchEvent('setAnswerEnabled', true);
                thi$.cfg.eventsManager.dispatchEvent('showHintButton');

                // the condition thi$.cfg.progressData.type != "input" was added for opq , when it is in  progress mode input we should not enable the progress button
                if (!thi$.cfg.progressData.autocheck && thi$.cfg.progressData.attempts == 0 && thi$.cfg.progressData.type == "init" ) {
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        enabled:true
                    });
                }


            });

        },

        /**
         * Method: setEnabled
         * De/Activates the ui-component.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled:function (flag) {
            if (this.finished) {
	            this.cfg.eventsManager.dispatchEvent('setQuestionEnabled', flag);
	            return;
            }

            if (!this.started && flag) {
                this.cfg.eventsManager.dispatchEvent('setInstructionEnabled', flag);
                this.cfg.eventsManager.dispatchEvent('configTask', {
                    exposed:true
                });
            }

//            this.cfg.eventsManager.dispatchEvent('setInstructionEnabled', flag);

            if (!this.cfg.emphasizedInstruction) {
                this.cfg.eventsManager.dispatchEvent('showHintButton');
            }

            if (flag) {
                if (this.started && !!!this.taskComponentEnabled) {
                    this.cfg.eventsManager.dispatchEvent('setTitleEnabled', true);
                    this.cfg.eventsManager.dispatchEvent('setQuestionEnabled', true);
                    this.cfg.eventsManager.dispatchEvent('setAnswerEnabled', true);
                }
            } else {
                this.taskComponentEnabled = false;
                this.cfg.eventsManager.dispatchEvent('setTitleEnabled', false);
                this.cfg.eventsManager.dispatchEvent('setQuestionEnabled', false);
                this.cfg.eventsManager.dispatchEvent('setAnswerEnabled', false);
            }
        }, // End of setEnabled

        isInProgress:function () {
            return this.started && !this.finished;
        },

        getState:function () {
            var state = jQuery('<progress/>');
            jQuery(state).attr('started', !!this.started);
            jQuery(state).attr('finished', !!this.finished);
            jQuery(state).attr('currentMode', this.currentMode);
            jQuery(state).attr('attempt', this.attempt == null ? 'NA' : this.attempt);
            return state;
        },

        setState:function (xml) {
            var jqXml = jQuery(xml);
            if (jqXml.length <= 0) return;
            this.started = jqXml.attr('started') === 'true';
            this.finished = jqXml.attr('finished') === 'true';
            if (jqXml.attr('openedhint') === 'true') {

            }
            if (this.finished) {
                this.cfg.eventsManager.dispatchEvent('hideAttemptsIndicator');
                this.cfg.eventsManager.dispatchEvent('hideHint');
                this.cfg.eventsManager.dispatchEvent('hideFeedback');
            }
            this.currentMode = jqXml.attr('currentMode');
            var attemptStr = jqXml.attr('attempt');
            this.attempt = attemptStr == 'NA' ? null : parseInt(attemptStr);
            this.cfg.eventsManager.dispatchEvent('updateAttemptsIndicator', [this.attempt, attemptStr]);
        },

        getButtonProgressMode:function () {
            return this.cfg.isLastInMission && this.currentMode == 'progress' ? 'done' : this.currentMode;
        }

    }); // End of t2k.core.UiComponent

    function attemptNumberToName(attempt, attempts) {
        //if only one attempt- show feedback of last

        if (attempts === 1) return 'last';

        if (attempt == 1 ) return 'first';
        else if (attempt < attempts) return 'mid';
        else return 'last';
    }

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/progress/Progress.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/progress/AssessableProgress.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.progress.AssessableProgress
     * handles all kind of task's progression
     *
     * Properties:
     *  config - {Object} The progress's configuration.
     */
    t2k.player.task.progress.AssessableProgress = t2k.player.task.progress.Progress.subClass({
        name:"t2k.player.task.progress.AssessableProgress",

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor:function (config) {

            // set config as a member
            this.cfg = config;
            // init members
            this.started = false;
            this.finished = false;
            this.flagEventDispatched = false;
            // init current mode from answer's progress configuration
            if (config.isLastInMission) {
                this.currentMode = 'assessment_done';
            } else {
                this.currentMode = 'assessment_next';
            }

            this.cfg.eventsManager.dispatchEvent('initAssessmentControls');

            // if attempts = 0, the task that handles by this progress is not checkable
            this.attempt = null;

            // config progression button
            this.cfg.eventsManager.dispatchEvent('configButton', {
                //in assessment mode , the Next button should appear when the task is focused
                enabled:false,
                visible:false,
                // set the button mode with the init val from answer progression configuration
                mode:this.currentMode
            });

            // register progression's events
            this.registerEvents();

        }, // End of ctor

        /**
         * registerEvents
         * register progression's events
         *
         * these events are register in the task events manager (see: task/controls/TaskEventManager.js)
         */
        registerEvents: function() {
            var thi$ = this;

            /**
             * event name: setProgressReady
             * if the task doesn't "finish", enable progress button.
             */
            this.cfg.eventsManager.registerEvent('setProgressReady', function () {
                if ( !thi$.finished /* && (thi$.currentMode != "assessment_done") */ ) {
                    if (thi$.started) {
                    	
                    	var enableButton = true ;
                    	var visibleButton = true ;
                    	if( thi$.cfg.isLastInMission && !ENV.viewMode.showLastSequenceTaskButton ) {
                        	enableButton = false ;
                        	visibleButton = false ;
                        }
                    	
                        thi$.cfg.eventsManager.dispatchEvent('configButton', {
                            enabled: enableButton,
                            visible: visibleButton
                        });

                        thi$.cfg.eventsManager.dispatchEvent('onTaskAsAssessmentCompleted');
                    }

                }
            });

            /**
             *  event name: setProgressProgress
             *  checkable progress
             *
             *  @param feedbackMessage
             */
            this.cfg.eventsManager.registerEvent('setProgressProgress', function (feedbackMessage, scoreData) {
            	// set answer non interactive
                thi$.cfg.eventsManager.dispatchEvent('setAnswerInteractable', false);
                
                if( feedbackMessage ) {
                	var showSummaryIcon = true ;
                	thi$.cfg.eventsManager.dispatchEvent( 'showFeedback', [ feedbackMessage, showSummaryIcon ] );
                }

	            if( scoreData ) {
		            thi$.cfg.eventsManager.dispatchEvent( 'showScore', scoreData );
	            }

                if (!thi$.finished && (thi$.currentMode != "assessment_done")) {

                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        mode:thi$.currentMode,
                        enabled:true,
                        visible:true
                    });

                }


            });

            this.cfg.eventsManager.registerEvent('setProgressUnready', function () {
                if (!thi$.finished) {
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        enabled:false
                    });

                    thi$.cfg.eventsManager.dispatchEvent('onTaskAsAssessmentUnCompleted');
                }
            });

            this.cfg.eventsManager.registerEvent('setProgressDone', function ( feedbackMessage ) {

                if( feedbackMessage ) {
                	var showSummaryIcon = true ;
                	thi$.cfg.eventsManager.dispatchEvent('showFeedback', [ feedbackMessage, showSummaryIcon ] );
                }
                
                if (!thi$.finished) {
                	
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        enabled:true,
                        mode:thi$.currentMode
                    });
                }

            });

            this.cfg.eventsManager.registerEvent('taskFinish', function () {

                //task is basically never finishes

                if (!thi$.finished) {
                    //thi$.setEnabled(false);
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        visible: thi$.cfg.enableButtonOnDone,
                        enabled: thi$.cfg.enableButtonOnDone
                    });
                    //thi$.finished = true;
                }
            });

            this.cfg.eventsManager.registerEvent('onInstructionNarrationStarted', function () {
                thi$.cfg.eventsManager.dispatchEvent('configButton', {
                    enabled:false
                });
            });

            this.cfg.eventsManager.registerEvent('onInstructionNarrationDone', function () {

                thi$.started = true;
                thi$.taskComponentEnabled = true;

                thi$.cfg.eventsManager.dispatchEvent('setTitleEnabled', true);
                thi$.cfg.eventsManager.dispatchEvent('setQuestionEnabled', true);
                thi$.cfg.eventsManager.dispatchEvent('setAnswerEnabled', true);

                if (!thi$.cfg.progressData.autocheck && thi$.cfg.progressData.attempts == 0) {
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        enabled:true
                    });
                }


            });

        },

        /**
         * Method: setEnabled
         * De/Activates the ui-component.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled:function (flag) {
            var thi$ = this;
            if (this.finished) return;
            
            var setButton = true ;
            
            if (!this.started && flag) {
                this.cfg.eventsManager.dispatchEvent('setInstructionEnabled', flag);
                this.cfg.eventsManager.dispatchEvent('configTask', {
                    exposed:true,
                    enabled:true
                });
                
                var enableButton = true ;
            	var visibleButton = true ;
                if( thi$.cfg.isLastInMission && !ENV.viewMode.showLastSequenceTaskButton ) {
                	enableButton = false ;
                	visibleButton = false ;
                }
                setButton = false ;
                thi$.cfg.eventsManager.dispatchEvent('configButton', {
                    mode: thi$.currentMode,
                    enabled: enableButton,
                    visible: visibleButton
                });
            }


//            this.cfg.eventsManager.dispatchEvent('setInstructionEnabled', flag);

            if (!this.cfg.emphasizedInstruction) {
                //this.cfg.eventsManager.dispatchEvent('showHintButton');
            }

            if (flag) {
            	
                if (this.started && !!!this.taskComponentEnabled) {
                    this.cfg.eventsManager.dispatchEvent('setTitleEnabled', true);
                    this.cfg.eventsManager.dispatchEvent('setQuestionEnabled', true);
                    this.cfg.eventsManager.dispatchEvent('setAnswerEnabled', true);
                }
                
                setButton && this.cfg.eventsManager.dispatchEvent('configTask', {
                    exposed:true,
                    enabled:true
                });
                
            } else {
            	
            	setButton && thi$.cfg.eventsManager.dispatchEvent('configButton', {
                    mode: thi$.currentMode,
                    enabled: false,
                    visible: false
                });
                
                this.cfg.eventsManager.dispatchEvent('setTitleEnabled', false);
                this.cfg.eventsManager.dispatchEvent('setQuestionEnabled', false);
                this.cfg.eventsManager.dispatchEvent('setAnswerEnabled', false);
            }
        }, // End of setEnabled

        isInProgress: function() {
            return this.started && !this.finished;
        },

        getState:function () {
            var state = jQuery('<progress/>');
            jQuery(state).attr('started', !!this.started);
            jQuery(state).attr('finished', !!this.finished);
            jQuery(state).attr('currentMode', this.currentMode);
            jQuery(state).attr('attempt', this.attempt == null ? 'NA' : this.attempt);
            return state;
        },

        setState:function (xml) {
            var jqXml = jQuery(xml);
            if (jqXml.length <= 0) return;
            this.started = jqXml.attr('started') === 'true';
            this.finished = jqXml.attr('finished') === 'true';
            if (jqXml.attr('openedhint') === 'true') {

            }
            if (this.finished) {
                this.cfg.eventsManager.dispatchEvent('hideAttemptsIndicator');
                this.cfg.eventsManager.dispatchEvent('hideHint');
                this.cfg.eventsManager.dispatchEvent('hideFeedback');
            }
            this.currentMode = jqXml.attr('currentMode');
            var attemptStr = jqXml.attr('attempt');
            this.attempt = attemptStr == 'NA' ? null : parseInt(attemptStr);
            // this.cfg.eventsManager.dispatchEvent('updateAttemptsIndicator', [this.attempt, attemptStr]);
        }

    }); // End of t2k.core.UiComponent

    /*function attemptNumberToName(attempt, attempts) {
     if (attempt == 1) return 'first';
     else if (attempt < attempts) return 'mid';
     else return 'last';
     }*/

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/progress/AssessableProgress.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/progress/ReadOnlyProgress.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.progress.ReadOnlyProgress
     * handles all kind of task's progression
     *
     * Properties:
     *  config - {Object} The progress's configuration.
     */
    t2k.player.task.progress.ReadOnlyProgress = t2k.player.task.progress.Progress.subClass({
        name:"t2k.player.task.progress.ReadOnlyProgress",

        /**
         * Constructor: ctor
         * The constructor
         *
         * Parameters:
         *  config - {Object} Configuration details.
         */
        ctor:function (config) {

            // set config as a member
            this.cfg = config;
            // init members
            this.started = false;
            this.finished = false;
            this.flagEventDispatched = false;
            // init current mode from answer's progress configuration
            this.currentMode = 'progress';

            this.cfg.eventsManager.dispatchEvent('initAssessmentControls');

            // if attempts = 0, the task that handles by this progress is not checkable
            this.attempt = null;

            // config progression button
            this.cfg.eventsManager.dispatchEvent('configButton', {
                //in assessment mode , the Next button should appear when the task is focused
                enabled:false,
                visible:false,
                // set the button mode with the init val from answer progression configuration
                mode:this.currentMode
            });

            // register progression's events
            this.registerEvents();

        }, // End of ctor

        /**
         * registerEvents
         * register progression's events
         *
         * these events are register in the task events manager (see: task/controls/TaskEventManager.js)
         */
        registerEvents: function() {
            var thi$ = this;

            /**
             * event name: setProgressReady
             * if the task doesn't "finish", enable progress button.
             */
            this.cfg.eventsManager.registerEvent('setProgressReady', function () {
                if ( !thi$.finished ) {
                    if (thi$.started) {
                    	
                        thi$.cfg.eventsManager.dispatchEvent('configButton', {
                            enabled:true,
                            visible:true
                        });

                        thi$.cfg.eventsManager.dispatchEvent('onTaskAsAssessmentCompleted');
                    }

                }
            });

            this.cfg.eventsManager.registerEvent('taskFinish', function () {

               return;
            });

            this.cfg.eventsManager.registerEvent('onInstructionNarrationStarted', function () {
                thi$.cfg.eventsManager.dispatchEvent('configButton', {
                    enabled:false
                });
            });

            this.cfg.eventsManager.registerEvent('onInstructionNarrationDone', function () {

                thi$.started = true;
                thi$.taskComponentEnabled = true;

                thi$.cfg.eventsManager.dispatchEvent('setTitleEnabled', true);
                thi$.cfg.eventsManager.dispatchEvent('setQuestionEnabled', true);
                thi$.cfg.eventsManager.dispatchEvent('setQuestionEnabled', true);
                thi$.cfg.eventsManager.dispatchEvent('setAnswerEnabled', true);

                if (!thi$.cfg.progressData.autocheck && thi$.cfg.progressData.attempts == 0) {
                    thi$.cfg.eventsManager.dispatchEvent('configButton', {
                        enabled:true
                    });
                }


            });

        },

        /**
         * Method: setEnabled
         * De/Activates the ui-component.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled:function (flag) {
            var thi$ = this;
            if (this.finished) return;
            
            var setButton = true ;
            
            if (!this.started && flag) {
                this.cfg.eventsManager.dispatchEvent('setInstructionEnabled', flag);
                this.cfg.eventsManager.dispatchEvent('configTask', {
                    exposed:true,
                    enabled:true
                });

            	var enableButton = true ;
            	var visibleButton = true ;
            	if( thi$.cfg.isLastInMission && !ENV.viewMode.showLastSequenceTaskButton ) {
                	enableButton = false ;
                	visibleButton = false ;
                }
                
                setButton = false ;
                thi$.cfg.eventsManager.dispatchEvent('configButton', {
                    mode: thi$.currentMode,
                    enabled: enableButton,
                    visible: visibleButton
                });
            }


//            this.cfg.eventsManager.dispatchEvent('setInstructionEnabled', flag);

            if (!this.cfg.emphasizedInstruction) {
                //this.cfg.eventsManager.dispatchEvent('showHintButton');
            }

            if (flag) {
            	
                if (this.started && !!!this.taskComponentEnabled) {
                    this.cfg.eventsManager.dispatchEvent('setTitleEnabled', true);
                    this.cfg.eventsManager.dispatchEvent('setQuestionEnabled', true);
                    this.cfg.eventsManager.dispatchEvent('setAnswerEnabled', true);
                }
                
                setButton && this.cfg.eventsManager.dispatchEvent('configTask', {
                    exposed:true,
                    enabled:true
                });
                
            } else {
            	
            	setButton && thi$.cfg.eventsManager.dispatchEvent('configButton', {
                    mode: thi$.currentMode,
                    enabled: false,
                    visible: false
                });
                
                this.cfg.eventsManager.dispatchEvent('setTitleEnabled', false);
                this.cfg.eventsManager.dispatchEvent('setQuestionEnabled', false);
                this.cfg.eventsManager.dispatchEvent('setAnswerEnabled', false);
            }
        }, // End of setEnabled

        isInProgress: function() {
            return this.started && !this.finished;
        },

        getState:function () {
            var state = jQuery('<progress/>');
            jQuery(state).attr('started', !!this.started);
            jQuery(state).attr('finished', !!this.finished);
            jQuery(state).attr('currentMode', this.currentMode);
            jQuery(state).attr('attempt', this.attempt == null ? 'NA' : this.attempt);
            return state;
        },

        setState:function (xml) {
            var jqXml = jQuery(xml);
            if (jqXml.length <= 0) return;
            this.started = jqXml.attr('started') === 'true';
            this.finished = jqXml.attr('finished') === 'true';
            if (jqXml.attr('openedhint') === 'true') {

            }
            if (this.finished) {
                this.cfg.eventsManager.dispatchEvent('hideAttemptsIndicator');
                this.cfg.eventsManager.dispatchEvent('hideHint');
                this.cfg.eventsManager.dispatchEvent('hideFeedback');
            }
            this.currentMode = jqXml.attr('currentMode');
            var attemptStr = jqXml.attr('attempt');
            this.attempt = attemptStr == 'NA' ? null : parseInt(attemptStr);
            // this.cfg.eventsManager.dispatchEvent('updateAttemptsIndicator', [this.attempt, attemptStr]);
        }

    }); // End of t2k.core.UiComponent

    /*function attemptNumberToName(attempt, attempts) {
     if (attempt == 1) return 'first';
     else if (attempt < attempts) return 'mid';
     else return 'last';
     }*/

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/progress/ReadOnlyProgress.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/util/ViewModesUtil.js
////////////////////////////////////////
(function () {

	t2k.util.ViewModesUtil = {
			
		defaultSetting: {
				studentFlagTask:false,
				disableSubmitButton:false,
				teacherIndication:false,
//				seqeunceCompletionIndication:false,
				lastTaskFocusing:false,
				showCorrectAnswerButton:false,
				progressClass:t2k.player.task.progress.Progress,
				checkAnswerOnState:false,
				isAssessment:false,
				readOnly:false,
				allExposed:false,
				allowSolveTask: false,
				allowSkipTask: false,
				showEveryTaskBar: false,
				sendTaskAnswerChanges: false,
				preventEmptyAnswer: false,
				enableTaskAnswerOnFocus: false,
				showLastSequenceTaskButton:true,
				activateTaskOnClick: true,
				showMyAnswerButton: false,
				forceUserFinalAttempt: false
		},
		
		modes:{
			
			'NORMAL': {
				student: {
					showMyAnswerButton: true
				},
				teacher: {
					showCorrectAnswerButton: true,
					activateTaskOnClick: true,
					allExposed: true
				}
			},
			
			'RTCM': {
				student: {
					showMyAnswerButton: true,
					enableTaskAnswerOnFocus: true
				},
				teacher: {
					showCorrectAnswerButton: true,
					activateTaskOnClick: true,
					allExposed: false,
					enableTaskAnswerOnFocus: true
				}
			},
			
			"READ_ONLY": {
				student: {
					readOnly:true,
					progressClass:t2k.player.task.progress.ReadOnlyProgress,
					activateTaskOnClick: false,
					allExposed:true,
					lastTaskFocusing: true
				}
			},
			
			"WORK_OVERVIEW": {
				teacher: {
					allExposed:true,
					forceUserFinalAttempt: true,
					readOnly:true,
					showCorrectAnswerButton:true
				}
			},

			//RTCM drills
			"WORK_REVIEW": {
				teacher: {
					allExposed:true,
					forceUserFinalAttempt: true,
					readOnly:true,
					activateTaskOnClick: false,
					showLastSequenceTaskButton: false,
					showEveryTaskBar: true,
					showCorrectAnswerButton:true,
					disableAllTasks:true
				}
			},
			
			'ASSESSMENT_OVERVIEW': {
				teacher: {
					showCorrectAnswerButton:true,
					activateTaskOnClick: true,
					progressClass:t2k.player.task.progress.AssessableProgress,
					isAssessment:true,
					allExposed:true,
					showTaskPoints: true,
					showTaskScore: true,
					showLastSequenceTaskButton: false,
					showEveryTaskBar: true,
					readOnly:true
				}
			},
			
			'ASSESSMENT_RUNTIME': {
				student: {
					/*studentFlagTask:true,*/
//					seqeunceCompletionIndication:true,,
					sendTaskAnswerChanges: true,
					progressClass:t2k.player.task.progress.AssessableProgress,
					isAssessment:true,
					allExposed:true,
					activateTaskOnClick: true,
					showTaskPoints: true,
					preventEmptyAnswer: true,
					enableTaskAnswerOnFocus: true
				}
			},
			
			'ASSESSMENT_REVIEW': {
				student: {
					disableSubmitButton:true,
					showCorrectAnswerButton:true,
					teacherIndication:false,
//					lastTaskFocusing:true,
					progressClass:t2k.player.task.progress.AssessableProgress,
					checkAnswerOnState:true,
					isAssessment:true,
					allExposed:true,
					readOnly:true,
					activateTaskOnClick: true,
					showTaskPoints: true,
					showTaskScore: true,
					showEveryTaskBar: true,
					showLastSequenceTaskButton: false
				}
			}
//			,
//			
//			'ASSESSMENT_TEST_MODE': {
//				student: {
//					studentFlagTask:true,
//					seqeunceCompletionIndication:true,
//					progressClass:t2k.player.task.progress.AssessableProgress,
//					isAssessment:true,
//					allExposed:true
//				}
//			},
//			
//			'ASSESSMENT_TEST_READ_ONLY': {
//				student: {
//					lastTaskFocusing:true,
//					showCorrectAnswerButton:false,
//					progressClass:t2k.player.task.progress.AssessableProgress,
//					checkAnswerOnState:false,
//					isAssessment:true,
//					readOnly:true,
//					allExposed:true
//				}
//			},
//			
//			'REVIEWED': {
//				teacher: {
//					manCheckIndication:true,
//					showCorrectAnswerButton:true,
//					teacherIndication:true,
//					lastTaskFocusing:true,
//					progressClass:t2k.player.task.progress.AssessableProgress,
//					checkAnswerOnState:true,
//					isAssessment:true,
//					allExposed:true,
//					readOnly:true
//				},
//
//				student: {
//					manCheckIndication:true,
//					showCorrectAnswerButton:true,
//					teacherIndication:false,
//					lastTaskFocusing:true,
//					progressClass:t2k.player.task.progress.AssessableProgress,
//					checkAnswerOnState:true,
//					isAssessment:true,
//					allExposed:true,
//					readOnly:true
//				}
//			},
//
//			'ANSWER_VIEW': {
//				teacher: {
//					lastTaskFocusing:true,
//					showCorrectAnswerButton:true,
//					progressClass:t2k.player.task.progress.AssessableProgress,
//					checkAnswerOnState:true,
//					isAssessment:true,
//					readOnly:true,
//					allExposed:true
//				},
//
//				student: {
//					lastTaskFocusing:true,
//					showCorrectAnswerButton:true,
//					progressClass:t2k.player.task.progress.AssessableProgress,
//					checkAnswerOnState:true,
//					isAssessment:true,
//					readOnly:true,
//					allExposed:true
//				}
//			}

		},

		setMode:function (mode, role) {

			// regular as default
			var modeName = mode || 'NORMAL' ;
			var roleName = role || 'student' ;

			// regular is same thing as NORMAL
			if (modeName === 'regular') modeName = 'NORMAL';
			
			var vmName = role + "_" + mode ;
			
			// merge + override selected mode with defaults
			var mergedMode = override(
				this.defaultSetting,
				this.modes[ modeName ][ roleName ],
				{
					_name: vmName
				}
			);

			// set to ENV
			ENV.viewMode = mergedMode ;
		}

	};


})();

var ViewModesUtil = t2k.util.ViewModesUtil;
////////////////////////////////////////
// SRC End --> t2k/util/ViewModesUtil.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/controls/TaskEventManager.js
////////////////////////////////////////
(function() {

	/**
     * Class: t2k.player.task.controls.TaskEventManager
     * 2d0
     */
    t2k.player.task.controls.TaskEventManager = Object.subClass({

		name: "t2k.player.task.controls.TaskEventManager",

        ctor: function(config) {
            this.eventsMap = {};
        }, 

        registerEvent: function(name, callback) {
            if(!this.eventsMap[name]){
            	this.eventsMap[name] = [];
            }
            this.eventsMap[name].push(callback);
        },

        dispatchEvent: function(name, args,context) {
            context = context || {};
            var argz = (args instanceof Array) ? args : [args];
            // Dispatch the event or throw an error if an  event with the given name isn't registered.
            if (this.eventsMap[name]) {
            	_.each(this.eventsMap[name],function (func){
            		if(_.isFunction (func)){
        			    dataUtil.logEvent (name);
                        func.apply(context, argz);
            		}
            	});
            }
        },

	    dispose: function() {
            for (var item in this.eventsMap) {
			    delete  this.eventsMap[item];
		    }
            delete this.eventsMap;
	    },

        disposeEvent : function (name) {
            delete this.eventsMap[name];
        }

    }); 
})();


////////////////////////////////////////
// SRC End --> t2k/player/task/controls/TaskEventManager.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/BaseTaskView.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private: TEMPLATE
     * The Mustache template used by the tasks's view.
     * 2d0 - Implement Roman's way of managing templates.
     */
    var TEMPLATE =
    	"<div id='{{id}}' class='task {{type}} disabled unexposed_{{navMode}} {{baseClasses}}' >\
	    	<div id='{{id}}_task_numbering' class='task_numbering'/>\
	    	<div id='{{id}}_wrapper_external' class='task_wrapper_external'>\
	    		<div id='{{id}}_top_border' class='task_top_border'/>\
		    	<div id='{{id}}_icon' class='task_icon'>\
    				<div id='{{id}}_icon_content' class='task_icon_content'>\
    					<span id='correct'>8</span><span id='part'>5</span><span id='wrong'>></span>\
    				</div>\
    			</div>\
	    		<div id='{{id}}_wrapper_internal' class='task_wrapper_internal'>\
			        <div id='{{id}}_task_container' class='task_container'>\
				        <div id='{{id}}_header' class='task_header task_section'></div>\
				        <div id='{{id}}_header_separator' class='header_separator'>\
				    		<div id='{{id}}_header_separator_line' class='header_separator_line'></div>\
				    	</div>\
				        <div id='{{id}}_content' class='task_content task_section'></div>\
				        <div id='{{id}}_toolbar_container' class='task_toolbar_container task_section'>\
					        <div id='{{id}}_toolbar' class='task_toolbar'></div>\
						</div>\
				    </div>\
		    	</div>\
	    	</div>\
	    </div>";

	var taskMaskTemplate = "\
    <div id='{{id}}_taskMask' class='taskMask'>\
    </div>\
";

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the task's view to use.
     */
    var defaultConfig = {
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.BaseTaskView
     * The base task view. Contains the place holders for info, questions, content, buttons, etc.
     */
    t2k.player.task.BaseTaskView = t2k.core.View.subClass({

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The sequence's view configuration.
         */
        ctor: function(config) {
            // Delegate.
            this._super(override(config, defaultConfig, {content: config.template}));
            
            this.wasCompletedFocused = false;
            
            if( /*AssessmentENV.isNotAssessmentModeTest*/ ENV.viewMode.readOnly ) {
    			this._view.addClass( 'readonly' ) ;
            }

	        if( ENV.viewMode.showEveryTaskBar ) {
		        this._view.addClass( 'showEveryTaskBar' ) ;
	        }

	        this.createMask();
            
            var locationStyle = this.cfg.isLastInSequence ? 'last_task_in_sequence' : 'non_last_task_in_sequence';
            this._view.addClass( locationStyle ) ;

	        if(!!this.cfg.isFirstInSequence) {
		        this._view.addClass('first_task_in_sequence')
	        }
            
        }, // End of ctor

        /**
         * Method: setEnabled
         * De/Activates the view. This method adds/removes the 'disabled' CSS class to the view.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled:function (flag) {
	        this._super(flag);
            this.toggleMaskDisplay(flag);
            
            if (flag) {
		        if (this.wasCompletedFocused) {
			        this.setTaskCompletedFocused(true);
		        }
	        } else {
		        this.setTaskCompletedFocused(false);
	        }
        }, // End of setEnabled

	    toggleMaskDisplay: function(flag) {

		    if (this._taskMask) {
			    if (flag) {
                    dataUtil.logXcode("taskMaskShow ->" + this.cfg.id + "->" + this.cfg.indexLabel);
				    this._taskMask = this._taskMask.detach();
			    } else {
                    dataUtil.logXcode("taskMaskHide ->" + this.cfg.id + "->" + this.cfg.indexLabel);
				    this._taskMask.outerWidth(this._task_container.outerWidth() + 10);
				    this._taskMask.outerHeight(this._task_container.outerHeight() + 10);
				    this._taskMask.css('top', -5 + 'px');
				    this._taskMask.css('left', -5 + 'px');
				    this._taskMask.show();
                    this._task_container.append(this._taskMask);
                    this.bindScrollRefreshEvent(true);
			    }
		    }

	    },

	    createMask: function() {
		    // Create a task mask if doesn't exist already
		    if (ENV.viewMode.activateTaskOnClick && !this._taskMask) {

			    var objTaskMask = jQuery(Mustache.to_html(taskMaskTemplate, {
				    id:this.cfg.id
			    }));

			    this._task_container.append(objTaskMask);
			    this._taskMask = $('.taskMask', this._task_container);

			    var thi$ = this, pressTimer;

			    function onTaskMaskClick(event) { //on the click on task area make this task enabled
				    //dataUtil.logXcode("on Task Mask Click",event.type);
                    event.stopPropagation();

                    var srcIsProgressButton = false;

				    //find out if src element is progress button
				    if (jQuery(event.srcElement).hasClass('progress_button') ||
					    jQuery(event.srcElement).parents('.progress_button').length) {
					    srcIsProgressButton = true;
				    }
				    //if src element is progress button dont do progress
				    if (!thi$.isEnabled() && (!srcIsProgressButton)) {
					    var ignoreScrollToNext =  ENV.behaviors.isTablet && !ENV.behaviors.autoScrollOnTextEditorFocus;
                        
                        thi$.cfg.sequenceObj.progressToTask( thi$.cfg.taskId, null, null, ignoreScrollToNext) ;
				    }
                     //dataUtil.logXcode("on Task Mask Process End");
			        
                }

			    //TODO: check for better solution for tapandhold in ipad, currently it doesn't work correctly in phonegap
			    if (ENV.behaviors.isIpad) {
				    this._taskMask.bind({
					    touchend :  function () {
					        clearTimeout(pressTimer);
				        },
					    touchstart : function (event) {
						    // Set timeout
						    pressTimer = window.setTimeout(function () {
							    onTaskMaskClick(event);
						    }, 45);
					    }
				    });

				    //listener to start scroll that removes timeout, and decrease the timeout to 250 ms
				    jQuery(document).bind("scrollstart", function () {
					    if (pressTimer) {
						    clearTimeout(pressTimer);
					    }
				    });

			    } else {
			        this._taskMask.bind('mousedown' , onTaskMaskClick);
			    }
			    
			    this.toggleMaskDisplay( false ) ;

		    }
	    },
        
        /**
         * bindScrollRefreshEvent
         * browser bug - dom elements sometimes doesn't refresh on scroll
         * this function bind the scroll and manual refresh the task's toolbar
         * @param flag
         */
        bindScrollRefreshEvent : function(flag){
        	if(!this._view) {
                console.error("no this.view on BaseTaskView line 204");
            }
        	// ref
        	var thi$ = this;
        	
        	// if flag, that means the task in on setEnabled = true && !dummyMode
        	if (flag){
        		// find the sequence dom element and bind the refresh fnc
        		this._view.parents('.sequence_content_scrollable').scroll(function(){
        			// prevent refresh duplication
        			if (!thi$.refreshDisable){
        				
        				thi$.refreshDisable = true;
        				
        				// fade to 0.99 and after 100ms fade to 1 and after 100ms, allow refreshing again
        				thi$._view.find('.task_toolbar').fadeTo(100, 0.99, function(){
        					thi$._view.find('.task_toolbar').fadeTo(100, 1, function(){
        						thi$.refreshDisable = false;
        					});
        				});
        				
        			}
        		});
        		
        	} else {
        		// on flag false, unbind the scroll event
        		this._view.parents('.sequence_content_scrollable').unbind('scroll');
        		
        	}
        },
        
        setExposed:function (flag) {
        	var unexpClass = 'unexposed_' + this.cfg.navMode ;
            var expClass = 'exposed';

        	if(flag){
        		this._view.removeClass(unexpClass);
                this._view.addClass(expClass);
             }else{
            	this._view.removeClass(expClass);
                this._view.addClass(unexpClass);
             }

        },

	    setTaskCompletedFocused:function (flag) {
		    if (flag) {
			    this._view.addClass('completed_focused');
			    this.wasCompletedFocused = true;
		    } else {
			    this._view.removeClass('completed_focused');
		    }
	    },

        setFinished:function (flag) {
        	flag && !this.cfg.isLastInSequence ? this._view.addClass('completed') : this._view.removeClass('completed');
        },
		
		setTaskNumbering:function (num) {
			var indexDiv = this._task_numbering ;

			if (num) {
				indexDiv.append(num);
			} else {
				var icon = jQuery('<div class="task_numbering_icon"><span>@</span></div>').appendTo(indexDiv);
				jQuery(icon).addClass('none_indexed');
			}
		},
		
		setToolbarReduction: function () {
			if (this._feedback) {
				var toolbarWidth = this._toolbar.width();
				if (toolbarWidth < 500) { // reduce feedback and hint labels
	            	this._feedback.find('.task_feedback_title').remove();
	            	this._hint.find('.task_hint_title').remove();
	            	// add tooltips
	            	this._feedback.find('.task_feedback_icon').attr('title', this.feedbackLabel);
	            	this._hint.find('.task_hint_icon').attr('title', this.hintLabel);
				}
				if (toolbarWidth < 440) { // reduce progress button
					this.cfg.task.button.setReduced(true);
				}
			}

		},
        
        hideHeader: function() {
        	this._header.addClass( 'hidden' ) ;
        	this._header_separator.addClass( 'hidden' ) ;
        },
        
        setIconContent: function( iconStyle, flag ) {
        	
        	if( flag ) {
        		if( this.currentIconStyle ) {
        			this._icon.removeClass( this.currentIconStyle ) ;
        		}
        		this._icon.addClass( iconStyle ) ;
        	} else {
        		this._icon.removeClass( iconStyle ) ;
        	}
        	
        	this.currentIconStyle = flag ? iconStyle : null ;
        	
        	this.updateIconContentWidth() ;
        },
        
        updateIconContentWidth: function() {
        	var iconWidth = this._icon.outerWidth() ;
        	var maxWidth = this._wrapper_internal.innerWidth() ;
        	this._top_border.width( maxWidth - iconWidth ) ;
        	/* Need to move the icon to middle of boder, not working yet
        	var margin = this._top_border.css('margin-left').px2int() + this._top_border.css('margin-right').px2int();
        	this._icon.css('left',maxWidth - margin - iconWidth);
        	*/ 
        }

    }); // End of t2k.player.task.BaseTaskView

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/BaseTaskView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/BaseTask.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.BaseTask
     * The superclass of all tasks. Contains common properties and functionality.
     */
    t2k.player.task.BaseTask = t2k.core.FlowPresenter.subClass({

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The task's configuration.
         */
        ctor:function (config) {
            // Closure refs.
            var thi$ = this;

            // Delegate
            this._super(copy(config, { task:thi$ }, parseXML(config.data)));

	        if(this.cfg.data.attributes["sha1"]) {
				this.cfg.sha1 = this.cfg.data.attributes["sha1"].value;
	        }

            this.msgAttempt = 'first';
            this.beenEnabled = false;
            this.lastFbState;
            this.lastHintState;
            
            this.isAnswered = false ;
//            this.rubricPath = config.sequenceConfigPath + '/' + config.taskId;
            //this.sequenceConfigPath = config.sequenceConfigPath;

            // Create the view
            this.view = this.createView(this.cfg);
            
            this.setTaskToolBarReductionStep();

            // Create the events manager
            this.eventsManager = new t2k.player.task.controls.TaskEventManager({});

            this.registerEvents();
            this.registerCheckableEvents();

            if (/*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment) {
                this.registerAssessmentEvents();
            }

            // Initialize th components.
            this.initTaskComponents();

            // Create the progress handler
            var progressClass;
            /*if (AssessmentENV.isAssessmentMode) {
             progressClass = t2k.player.task.progress.AssessableProgress;
             } else {
             progressClass = t2k.player.task.progress.Progress;
             }*/

            progressClass = ENV.viewMode.progressClass;

            this.progressHandler = new progressClass({
	            eventsManager:this.eventsManager,
	            emphasizedInstruction:(this.instruction) ? this.instruction.cfg.emphasized : false,
	            defaultProgressConfig:this.answer.defaultProgressConfig,
	            progressData:this.progressData,
                enableButtonOnDone:this.cfg.isLastInSequence,
	            isLastInMission:this.cfg.isLastInMission,
	            checkingType:this.getTaskCheckingType()
            });
            

            if( this.cfg.calledFromCompile ) {
            	this.calcTaskHeight();
//            	return ;
            }

            // We have a layout state.
            this.layoutState = null;
            
        }, // End of ctor

	    dispose : function() {
		    !!this.attemptIndicator && this.attemptIndicator.dispose();
		    delete this.attemptIndicator;

		    !!this.button && this.button.dispose();
		    delete this.button;

		    !!this.correctAnswerButton && this.correctAnswerButton.dispose();
		    delete this.correctAnswerButton;

		    !!this.feedbackButton && this.feedbackButton.dispose();
		    delete this.feedbackButton;

		    !!this.hintButton && this.hintButton.dispose();
		    delete this.hintButton;

		    !!this.help && this.help.dispose();
		    delete this.help;

		    !!this.tasktitle && this.tasktitle.dispose();
		    delete this.tasktitle;

		    !!this.question && this.question.dispose();
		    delete this.question;

		    !!this.answer && this.answer.dispose();
		    delete this.answer;

		    !!this.eventsManager && this.eventsManager.dispose();
			delete this.eventsManager;

		    this._super();
	    },
        
        calcTaskHeight : function(){
        	
//        	var compileTaskHeight = CompilerUtils.compileTaskHeight(this.view._content.width(), jQuery(this.cfg.data));
//        	var realTaskHeight    = this.view._content.height();
//        	
//        	console.log('compiler task height: ' + compileTaskHeight);
//        	console.log('----real task height: ' + realTaskHeight);
        	
        },
        
        registerEvents:function () {
            var thi$ = this;
            this.eventsManager.registerEvent('configTask', function (cfg) {
                if (cfg.exposed != undefined) {
                    thi$.exposed = cfg.exposed;
                    thi$.view.setExposed(cfg.exposed);
                }
            });

            this.eventsManager.registerEvent('setTaskCompletedFocused', function (flag) {
                thi$.view.setTaskCompletedFocused(flag);
            });
            
            this.eventsManager.registerEvent( 'finishedAllAttempts', function () {
            	thi$.answer.getAsyncState( function( state ) {
            		thi$.finalAttemptAnswerState = state ;
            	} ) ;
            });

            this.eventsManager.registerEvent('configButton', function (cfg) {
                if (cfg.mode != undefined) thi$.button.setMode(cfg.mode);
                if (cfg.enabled != undefined) thi$.button.setEnabled(cfg.enabled);
                if (cfg.visible != undefined) thi$.button.setVisible(cfg.visible);
                // TODO: set text
            });

            this.eventsManager.registerEvent('setInstructionEnabled', function (flag) {
                if (thi$.instruction) thi$.instruction.setEnabled(flag);
                else {
                    thi$.eventsManager.dispatchEvent('onInstructionNarrationDone');
                }
            });

            this.eventsManager.registerEvent('setButtonPrevEnabledState', function () {
                thi$.button.setPrevEnabledState();
            });

            this.eventsManager.registerEvent('hideBalloon', function () {
                t2k.util.balloon.close();
            });

            this.eventsManager.registerEvent('hideHint', function () {
                thi$.hintButton.setVisible(false);
            });

            this.eventsManager.registerEvent('showHintButton', function () {
                var message = thi$.getHintMessage();
                if (message) {
                    thi$.hintButton.setMessage({
                        data:message
                    });
                    thi$.hintButton.setVisible(true);
                }
            });

            this.eventsManager.registerEvent('showHint', function () {
                var message = thi$.getHintMessage();

                if (message) {

                    thi$.hintButton.displayBalloonMessage({
                        data:message
                    });
                }
            });

            this.eventsManager.registerEvent('logProgressEvent', function (eventType, checkData) {
            	
            	if( checkData ) {
            		
            		thi$.currentAttempt = checkData.currentAttempt ;
            		
            		if( checkData.checkedValue == t2k.util.FeedbackUtils.TYPE_ALL_CORRECT ) {
            			thi$.result = 100 ;
            		} else if( checkData.checkedValue == t2k.util.FeedbackUtils.TYPE_ALL_INCORRECT ) {
            			thi$.result = 0 ;
            		} else {
            			thi$.result = 50 ;
            		}
            		
            	}
            	
            	
//                ENV.logEventsService.sendLoggingEvent(eventType, thi$.cfg.taskId, checkData);
            });

            this.eventsManager.registerEvent('setTitleEnabled', function (flag) {
                if (thi$.tasktitle) thi$.tasktitle.setEnabled(flag);
            });

            this.eventsManager.registerEvent('setQuestionEnabled', function (flag) {
                if (thi$.question) {
                    thi$.question.setEnabled(flag);
                }
            });

            this.eventsManager.registerEvent('setAnswerEnabled', function (flag) {
                thi$.answer.setEnabled(flag);
            });

            this.eventsManager.registerEvent('setAnswerInteractable', function (flag) {
                thi$.answer.setInteractable(flag);
            });
        },

        registerCheckableEvents:function () {
            var thi$ = this;


            this.eventsManager.registerEvent('initCheckableToolbar', function () {
                thi$.attemptIndicator = new t2k.player.task.controls.AttemptsIndicator(copy({}, {
                    attempts:	thi$.progressData.attempts,
                    isReduced:	thi$.cfg.taskToolBarReductionStep==2?true:false,
                    parent:		thi$.view._toolbar
                }));
            });

            this.eventsManager.registerEvent('updateAttemptsIndicator', function (attempt, msgAttempt) {
                if (thi$.attemptIndicator) {
                    thi$.msgAttempt = msgAttempt;
                    thi$.attemptIndicator.setCurrentAttempt(attempt);
                }
            });

            this.eventsManager.registerEvent('hideAttemptsIndicator', function () {
                if (thi$.attemptIndicator) thi$.attemptIndicator.setVisible(false);
            });

	        this.eventsManager.registerEvent('showScore', function ( scoreData ) {
		        if( thi$.pointsIndicator && !thi$.lockScore ) {
		        	var correctPoints = thi$.progressData.points * scoreData.correctRatio ;
		        	thi$.setTaskPoints( correctPoints ) ;
		        }
	        });

            this.eventsManager.registerEvent('showFeedback', function (feedbackMessage, showSummaryIcon, msgAttempt) {

                thi$.feedbackData = feedbackMessage.data;
                if (showSummaryIcon) {
                    thi$.setIcon(thi$.feedbackData.icon, true);
                }


                var fbUtil = t2k.util.FeedbackUtils;
                if (/*AssessmentENV.isNotAssessmentModeTest*/ENV.viewMode.showCorrectAnswerButton && thi$.correctAnswerButton) {
                    // hide correct answer button when correct in assessment none test
                    var showCorrect = /*AssessmentENV.isNotAssessmentModeTest*/ ENV.viewMode.showCorrectAnswerButton &&
                        thi$.correctAnswerButton &&
                        thi$.feedbackData.type == fbUtil.TYPE_ALL_CORRECT;

                    thi$.correctAnswerButton.setVisible(!showCorrect);
                }

                if (thi$.progressData.fbMessages) {
                    var fbMessages = thi$.progressData.fbMessages;
                    
                    var message = null, msgError = false;

	                //generic/advanced feedback by feedback type (allCorrect/partCorrect/allIncorrect) at the specific attempt
	                if(!!fbMessages[feedbackMessage.data.type]) {
	                    message = fbMessages[feedbackMessage.data.type][msgAttempt];
	                }
	             
	                if(!message) {
		                msgError = true;
	                }

                    if (msgError) {
                        var msg =
                            'FEEDBACK MISSING [ --> ' + feedbackMessage.data.type
                                + ' --> ' + msgAttempt + ' ]';
                        console.log(msg);
                        console.log('FEEDBACK FALL BACK TO: allIncorrect');
                        var fbUtil = t2k.util.FeedbackUtils;
                        feedbackMessage.data.type = fbUtil.TYPE_ALL_INCORRECT;
                    }

                    thi$.feedbackButton.setVisible(true);
                    thi$.feedbackButton.displayBalloonMessage({
                        data:message,
                        icon:'feedbackIcon_' + feedbackMessage.data.icon,
                        autoplay:ENV.autoplayFeedbackNarration
                    });
                }
            });

            this.eventsManager.registerEvent('hideFeedback', function () {
                if (thi$.feedbackButton) thi$.feedbackButton.setVisible(false);
            });
        },

        registerAssessmentEvents:function () {
            var thi$ = this;

            this.eventsManager.registerEvent('initAssessmentControls', function () {
                    dataUtil.logXcode("hello Assesment Control");
                if (/*AssessmentENV.isAssessmentModeReview*/ ENV.viewMode.teacherIndication && (thi$.getTaskCheckingType() == "MANUAL")) {
                    thi$.setIcon('mark', !!thi$.cfg.teacherIndication);
                }

                if (/*AssessmentENV.isAssessmentModeTest*/ENV.viewMode.studentFlagTask) {

                    thi$.studentFlagButton = new t2k.component.buttons.ToggleButton({
                        style:'student_flag',
                        states:{
                            flag:{
//							title: 'flag'
                            }
                        },
                        currMode:'flag',
                        toggle:true,
                        parent:thi$.view._icon,
                        onRendered:function () {
                        },

                        clickCallback:function (toggled) {
                            thi$.dispatchEvent('onTaskAssessmentFlag', [thi$, toggled]);
                        }
                    });

                    thi$.setIcon('flag', true);

                    thi$.studentFlagButton.setEnabled(true);
                }

	            if (ENV.viewMode.showTaskPoints) {
		            thi$.pointsIndicator = new t2k.player.task.controls.PointsIndicator(copy({}, {
			            points:	thi$.progressData.points,
			            isReduced:	thi$.cfg.taskToolBarReductionStep==2?true:false,
			            parent:		thi$.view._toolbar
		            }));
		            
		            if( thi$.setDelayedPoints ) {
		            	thi$.setTaskPoints( thi$.pointsToSetLater ) ;
		            	thi$.setDelayedPoints = false ;
		            	thi$.lockScore = thi$.setDelayedLockScore ;
		            }
	            }

            });

            if ( ENV.viewMode.sendTaskAnswerChanges /*AssessmentENV.isAssessmentModeTest*/ /*ENV.viewMode.seqeunceCompletionIndication*/) {
                this.eventsManager.registerEvent('onTaskAsAssessmentCompleted', function () {
                    if (thi$.getTaskCheckingType() != "EXPOSURE") {
                    	thi$.isAnswered = true ;
//                  	thi$.dispatchEvent('onTaskAsAssessmentCompleted', thi$);
                    }

                });

                this.eventsManager.registerEvent('onTaskAsAssessmentUnCompleted', function () {
                    if (thi$.getTaskCheckingType() != "EXPOSURE") {
                    	thi$.isAnswered = false ;
//                  	thi$.dispatchEvent('onTaskAsAssessmentUnCompleted', thi$);
                    }

                });
            }

        },

        createView:function (cfg) {
            return new t2k.player.task.BaseTaskView(cfg);
        },
        setTaskToolBarReductionStep:function () {
            var toolbarWidth = this.view._toolbar.width();
            this.cfg.taskToolBarReductionStep = 0;
            if (toolbarWidth < 500) { // reduction step1
            	this.cfg.taskToolBarReductionStep = 1;
            }
            if (toolbarWidth < 400) { // reduction step2
            	this.cfg.taskToolBarReductionStep = 2;
            }
        },

        initTaskComponents:function () {
            dataUtil.logFunction ('initTaskComponents');
            var thi$ = this;

            // Extract the data XML into a map (element name -> element)
            var elementsMap = this.cfg.elementsMap;

            this.answerRendered = false;
            this.questionRendered = true;

            var title = elementsMap.tasktitle;
            if (title) {
                this.tasktitle = new t2k.component.text.Title({
                    parent:this.view._header, data:title, onRendered:function () {
                    } });
            }

            var question = elementsMap.question;
            if (question) {
                this.questionRendered = false;
                this.question = new t2k.component.text.Question({
                    parent:this.view._content,
                    data:question,
                    // init question with dummyMode (Boolean)
                    dummyMode:this.cfg.calledFromCompile,

                    onRendered:function () {
                        thi$.questionRendered = true;
                        if (thi$.answerRendered) {
                            thi$.dispatchEvent('onTaskRendered', thi$);
                        }
                    }
                });
            }

            // ===================================================================
            // answer ============================================================

            var answerClass = getAnswerClass(this.cfg.type);
            var answer = elementsMap.answer;

            // duplicate elementsMap
            var elementsMapCopy = copy({}, elementsMap);

            // delete title, question and answer data from the duplicated data
            delete elementsMapCopy.tasktitle;
            delete elementsMapCopy.question;
            delete elementsMapCopy.answer;

            // init cfg
            var cfg = { task: this,
	                    parent: this.view._content,
		                data:   answer,
		                eventsManager:this.eventsManager,
		                rubric: this.cfg.rubric,
		                sha1:   this.cfg.sha1
	                   };

            // add elements map data to cfg. convention: progessData = [progress data xml obj]
            var child;
            for (child in elementsMapCopy) {
                cfg[child + 'Data'] = elementsMapCopy[child];
            }

            // init answer
            thi$.answer = new answerClass(merge(cfg, {
                // init answer with dummyMode (Boolean)
                dummyMode:this.cfg.calledFromCompile,

                onRendered:function () {
                    thi$.answerRendered = true; 
                    if (thi$.questionRendered) {
                        thi$.dispatchEvent('onTaskRendered', thi$);
                    }
                },
                autocheck:extractAutoCheck(elementsMap.progress, ENV.defaultTaskProgress, null),
                eventsManager:thi$.eventsManager
            }));

            // answer end ========================================================
            // ===================================================================

            // Progress UI elements.
            // ~~~~~~~~~~~~~~~~~~~~
            this.progressData = parseProgressData(thi$.answer.defaultProgressConfig, elementsMap.progress);
            
            this.answer.updateProgressData( this.progressData ) ;
            
            // Instruction
            var helpData = extractHelp(elementsMap.progress);
            var instructionData = extractInstruction(elementsMap.progress, this.answer.defaultProgressConfig);
            if (instructionData) {
                this.instruction = new t2k.player.task.controls.Instruction(copy(instructionData, {
                    parent:this.view._header,
                    eventsManager:this.eventsManager,
                    hasHelp:!!helpData,
                    onRendered:function () {
                    },
                    // init instructions with dummyMode (Boolean)
                    dummyMode:this.cfg.calledFromCompile
                }));
            } else if (!this.tasktitle) {
                this.view.hideHeader();
            }
            if (helpData) {
                this.help = new t2k.player.task.controls.TaskHelp(copy(helpData, {
                    parent:this.getHelpParent(),
	                sequenceObj:this.cfg.sequenceObj
                }));
            }

            // Init
            this.initToolbar(this.progressData);

            var callback = thi$.cfg.readyCallback;
            if (callback) {
                callback(thi$, this.view);
            }

            this.setTaskNumbering(this.view);
        },

        getHelpParent:function () {
            return this.view._task_numbering;
        },

        setIcon:function (icon, flag) {
            this.view.setIconContent(icon, flag);
        },

        initToolbar:function (progressData) {
            var thi$ = this;

//          this.view.hideExistingToolbarContent();

            this.initButton(progressData);

            this.initToggleAnswerButton();

            var isReduced = false;
            if(this.cfg.taskToolBarReductionStep)
            	isReduced = true;

            if (this.cfg.taskToolBarReductionStep == 2) { // reduce progress button
            	this.button.setReduced(true);
            }

	        var elem_viewport = jQuery('.sequence_content_scrollable')[0];
            
            this.feedbackButton = new t2k.player.task.controls.BalloonButton({
                mode:'feedback',
                viewport:elem_viewport,
                constraint:thi$.cfg.parent,
                label:thi$.progressData.fbLabel,
                parent:thi$.view._toolbar,
                onRendered:function () {
                },
                isReduced:isReduced
            });
            this.feedbackButton.setVisible(false);

            this.hintButton = new t2k.player.task.controls.BalloonButton({
                mode:'hint',
                setSrcAtStart : true,
                viewport:elem_viewport,
                constraint:thi$.cfg.parent,
                label:progressData.hintLabel,
                parent:thi$.view._toolbar,
                onRendered:function () {
                },
                isReduced:isReduced
            });
            this.hintButton.setVisible(false);
           
        },

	    isTaskSolvable:function () {
		    var isSolvableTask = false;
		    if (this.cfg.check_type) {
			    isSolvableTask = (this.cfg.check_type === "auto");
		    } else {
			    isSolvableTask = (this.getTaskCheckingType() == "AUTOMATIC")
		    }

		    isSolvableTask = isSolvableTask || this.answer.isCheckable();
		    return isSolvableTask;
	    },

	    initToggleAnswerButton: function() {
		    var isSolvableTask = this.isTaskSolvable();

		    if( isSolvableTask ) {

		    	var thi$ = this;
		    	
		    	if ( ENV.viewMode.showCorrectAnswerButton ) {
		    		thi$.correctAnswerButton = new t2k.component.buttons.PushButton({
		    			style:'show_correct_answer',
		    			states:{
		    				normal:{
		    					title: LanguageUtil.strings.task.progress.labels.solvetask
		    				}
		    			},
		    			currMode:'normal',
		    			parent:thi$.view._toolbar,
		    			onRendered:function () {
		    			},
		    			pushCallback:function () {
		    				thi$.eventsManager.dispatchEvent('onCorrectAnswerShow');
		    			},
		    			releaseCallback:function () {
		    				thi$.eventsManager.dispatchEvent('onCorrectAnswerHide');
		    			}
		    		});
		    		
		    		thi$.correctAnswerButton.setEnabled(true);
		    		
		    	}
		    	
		    	if ( ENV.viewMode.showMyAnswerButton ) {
		    		thi$.myAnswerButton = new t2k.component.buttons.PushButton({
		    			style:'show_correct_answer',
		    			states:{
		    				normal:{
		    					title: LanguageUtil.strings.task.progress.labels.myanswer
		    				}
		    			},
		    			currMode:'normal',
		    			parent:thi$.view._toolbar,
		    			onRendered:function () {
		    			},
		    			pushCallback:function () {
		    				thi$.eventsManager.dispatchEvent('onMyAnswerShow');
		    			},
		    			releaseCallback:function () {
		    				thi$.eventsManager.dispatchEvent('onMyAnswerHide');
		    			}
		    		});
		    		
		    		thi$.myAnswerButton.setEnabled(false);
		    		thi$.myAnswerButton.setVisible(false);
		    		
		    	}
		    }
	    },

        initTeacherMenu:function () {

            var thi$ = this;

            var teacherMenuItems = [];

            if (ENV.viewMode.allowSkipTask) {

                teacherMenuItems.push({
                    lable:'skiptask',
                    fnc:function () {
                        thi$.teacherMenu.hideItem('skiptask');
                        thi$.dispatchEvent('onNextTask');
                    }
                });

            }

            var isSolvableTask = this.getTaskCheckingType() == "AUTOMATIC";

            if (ENV.viewMode.allowSolveTask && isSolvableTask) {

                teacherMenuItems.push({
                    lable:'solvetask',
                    fnc:function () {
                        thi$.teacherMenu.toggleDropdownContent('restarttask', 'solvetask');
                        thi$.answer.onShowCorrectAnswer();
                    }
                });

                teacherMenuItems.push({
                    lable:'restarttask',
                    initHide:true,
                    fnc:function () {
                        thi$.teacherMenu.toggleDropdownContent('solvetask', 'restarttask');
                        thi$.answer.onHideCorrectAnswer();
                    }
                });

            }

            if (teacherMenuItems.length > 0) {

                this.teacherMenu = new t2k.player.task.controls.TeacherMenu({
                    parent:thi$.view._toolbar,
                    data:teacherMenuItems
                });

            }
        },

        initButton:function (progressData) {
            // Extract the buttons configuration.
            this.button = new t2k.component.buttons.ProgressButton(
                copy(progressData.buttonModes, { style:'progress_button', parent:this.view._toolbar, onRendered:function () {
                } })
            );

            // Init the buttons events
            this.initButtonEvents();
        },

        initButtonEvents:function () {
            var thi$ = this;

            var endOfTaskFunc = function () {
                thi$.eventsManager.dispatchEvent('taskFinish');
                thi$.dispatchEvent('onNextTask');
            };


            this.button.setClickHandler('progress', endOfTaskFunc);
            this.button.setClickHandler('done', endOfTaskFunc);

            this.button.setClickHandler('check', function () {
                thi$.eventsManager.dispatchEvent('onAnswerCheck');
            });
            this.button.setClickHandler('tryagain', function () {
                thi$.eventsManager.dispatchEvent('onAnswerTryAgain');
            });
            this.button.setClickHandler('showanswer', function () {
                thi$.eventsManager.dispatchEvent('onAnswerShowAnswer');
            });

            this.button.setClickHandler('assessment_next', function () {
                //thi$.eventsManager.dispatchEvent('onNext');
                //alert("onNext");
                if (thi$.getTaskCheckingType() == "EXPOSURE") {
//                    thi$.dispatchEvent('onTaskAsAssessmentCompleted', thi$);

                }

	            //on last task in sequence unbind task mask events after first click on the next button
	            //to prevent multiply clicking
                if(!!thi$.cfg.isLastInSequence) {
	                thi$.view._taskMask.unbind();
                }

                thi$.eventsManager.dispatchEvent('taskFinish');
                thi$.dispatchEvent('onNextTask');
            });

            this.button.setClickHandler('assessment_done', function () {
                if (thi$.getTaskCheckingType() == "EXPOSURE") {
//                    thi$.dispatchEvent('onTaskAsAssessmentCompleted', thi$);
                }

                ENV.host.onDone();
            });
        },

        getHintMessage:function () {
	        var message;
	        if (this.progressData.hintMessages) {
		        //get hint message by attempt number
		        message = this.progressData.hintMessages[ this.currentAttempt ];

		        if (!message) { //get hint message by attempt position (first/middle/last)
			        message = this.progressData.hintMessages[ this.msgAttempt ];
		        }
	        }
	        return message;
        },

        /**
         * Method: setEnabled
         * De/Activates the view. This method adds/removes the 'disabled' CSS class to the view.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled:function (flag) {
            
            this.isInFocus = flag;

            if (this.loadingState) {
                this.view.setEnabled(flag);
                return;
            }
            this._super(flag);
            this.progressHandler.setEnabled(flag);
            
            if( this.answer && ENV.viewMode.enableTaskAnswerOnFocus ) {
            	this.answer.setEnabled( flag ) ;
            }
            
//            if (loadIntermediateState) {
//                this.loadInterMediateState();
//            } else {
                //this code is to deal with components that needs to get their state after the screen is rendered
                if (!!this.lastFbState || !!this.lastHintState) {
                    this.setLateBloomersState();
                }
//            }

            if (flag)
                this.beenEnabled = true;

            // on enabled true and on !dummyMode, bind scroll event to refresh toolbar
            //this.view.bindScrollRefreshEvent(flag && !this.cfg.calledFromCompile);

        }, // End of setEnabled

        setSaveStateProperty: function(needToSaveState){
            this.needToSaveState = needToSaveState;
        },

        setLateBloomersState:function () {
            if (this.hintButton && this.lastHintState.length) this.hintButton.setState(this.lastHintState);
            if (this.feedbackButton && this.lastFbState.length) this.feedbackButton.setState(this.lastFbState);

	        //set state of feedback icon
	        if (this.lastTaskIconStyle) this.setIcon(this.lastTaskIconStyle, true);
        },

        setExposed:function (flag) {
            this.exposed = flag;
            this.view.setExposed(flag);
        },

        setFinished:function (flag) {
            this.finish3d = flag;
            this.view.setFinished(flag);
            this.eventsManager.dispatchEvent('taskFinish');
        },

        isFinished:function () {
            return this.finish3d;
        },


        //assessment
        isAssessable:function () {
            return this.isAnswerAssessable();
        },

        getRubricPath:function () {
            return this.cfg.rubric ? this.cfg.rubric.id : null ;
        },


        isAnswerAssessable:function () {
            if (!!this.answer) {
                return this.answer.isAssessable() ;
            } else {
                return false ;
            }
        },

	    getAnswerAssessmentScore:function (returnCallback) {

		    if (this.progressHandler.cfg.checkingType !== "EXPOSURE") { //answer can be manual or auto checked
			    if (this.isAnswered) { //user inserted an answer
				    if (!this.isTaskSolvable()) { //teacher should check this answer
					    returnCallback(0);
				    } else { //auto checking
					    this.answer.assessmentScore(returnCallback);
				    }
			    } else {
				    returnCallback(null);
			    }
		    } else { //answer can't be checked
			    if (this.beenEnabled) { //user was viewing this task
				    this.answer.assessmentScore(returnCallback);
			    } else {
				    returnCallback(null);
			    }
		    }

	    },

        progress:function () {
            return true;
        },

        onNextTask:function (callback) {
            this.registerEvent("onNextTask", callback);
        },

        setTaskNumbering:function (view) {
            var indexLabel = this.cfg.indexLabel;

            view.setTaskNumbering(indexLabel);
        },

        getState:function () {
            if(this.isInFocus || this.needToSaveState || !this.initiaState){
                   
                var state = Perf.create('task');
                state.attr('enabled', (!!this.isEnabled() || !!this.view.isEnabled()));
                state.attr('exposed', !!this.exposed);
                state.attr('answered', !!this.isAnswered);
                var progressState = this.progressHandler.getState();
                state.append(progressState);

                if (!!this.question) {
                    var questState = this.question.getState() ;
                    if ( !!questState ) {
                        state.append( questState.clone() ) ;
                    }
                }
                
                var ansState = this.answer.getState() ;
                if (!!ansState) {
                    state.append(ansState.clone());
                }
                
                if ( this.finalAttemptAnswerState ) {
                	var answerFinalAttempt = Perf.create('answerfinalattempt');
                	answerFinalAttempt.html( this.finalAttemptAnswerState.html() ) ;
                	state.append( answerFinalAttempt );
                }

                state.append(this.button.getState());
                if (this.hintButton) state.append(this.hintButton.getState());
                if (this.feedbackButton) state.append(this.feedbackButton.getState());

                if(this.view.currentIconStyle) {
                    state.attr('iconstyle', this.view.currentIconStyle);
                }
                this.initiaState = state;
            }
            
            return this.initiaState;
                
        },

        setState:function (xml, forceEnabledTrue, ignoreFocus) {
            this.initiaState = xml;

            this._super(xml);
            var jqXml = jQuery(xml);

            //moved to sequen
            // Read Only - prevent more than one enabled task in assessment
            /* if (AssessmentENV.isNotAssessmentModeTest) {
             jqXml.attr('enabled', 'false');
             }*/

            this.setExposed(jqXml.attr('exposed') === 'true');

            this.isAnswered = jqXml.attr('answered') == "true" ;

            this.progressHandler.setState(jqXml.find('progress'));

            if (this.question) {
                this.question.setState(jqXml.find('question'));
            }
            
            if( xml ) {
            	var answerKey = this.cfg.type + 'answer'
            	this.finalAttemptAnswerState = jqXml.find( "answerfinalattempt" ) ;
            	
            	var hasFinalAttemptState = ((this.finalAttemptAnswerState.length > 0) && (!!this.finalAttemptAnswerState.children().length)) ;
            	if( hasFinalAttemptState ) {
            		this.answer.storeFinalAttemptState( this.finalAttemptAnswerState ) ;
            		if( ENV.viewMode.showMyAnswerButton && this.myAnswerButton) {
	            		 this.myAnswerButton.setEnabled( true ) ;
	            		 this.myAnswerButton.setVisible( true ) ;
            		}
            	}
            	
            	if( ENV.viewMode.forceUserFinalAttempt && hasFinalAttemptState ) {
            		this.answer.setState( this.finalAttemptAnswerState ) ;
            	} else {
            		this.answer.setState( jqXml.find( answerKey ) ) ;
            	}
            	
            	var toEnable = ( ignoreFocus != true && jqXml.attr('enabled') === 'true' ) || forceEnabledTrue ;
            	
                this.loadingState = true;
                this.setEnabled( toEnable ) ;
                this.loadingState = false;
            }
            
            if( !( this.cfg.isLastInMission && !ENV.viewMode.showLastSequenceTaskButton ) ) {
            	this.button.setState(jqXml.find('button'));
            }
            
            if (this.hintButton) this.hintButton.setState(jqXml.find('hint'));
            if (this.feedbackButton) this.feedbackButton.setState(jqXml.find('feedback'));

            this.lastFbState = jqXml.find('feedback');
            this.lastHintState = jqXml.find('hint');
	        this.lastTaskIconStyle = jqXml.attr('iconstyle');
        },

        getTaskCheckingType:function () {

            var type = TaskCheckingType[ this.cfg.type ];

            if(type == "AUTOMATIC_MANUAL"){
                var checkble = jQuery(this.cfg.data).find('answer')[0].attributes.getNamedItem('checkable').value;
                type = checkble.toLowerCase() =="false" ?  "MANUAL" : "AUTOMATIC";                
            }


            if (!!!type) {
                type = TaskCheckingType[ 'defaultValue' ];
            }

            return type;
        },

        getIgnoreScroll:function () {
            return this.cfg.ignoreScroll;
        },
        getIgnoreSetEnabled:function () {
            return this.cfg.ignoreSetEnabled;
        },
        
        getLog: function() {
        	
	        var log = {
        			taskCid: this.cfg.taskId,
        			attempts: this.currentAttempt,
        			result: this.result
        	} ;
        	
        	return log ;
        },
        
        setTaskPoints: function( score, lockScore ) {
        	
        	var lock = !!lockScore ;
        	
        	if( this.pointsIndicator ) {
        		
        		this.pointsIndicator.setCurrentPoint( score ) ;
            	this.lockScore = lock ;
            	
        	} else {
        		
        		this.setDelayedPoints = true ;
        		this.pointsToSetLater = score ;
        		this.setDelayedLockScore = lock ;
            	this.lockScore = false ;
        		
        	}
        }

    }); // End of t2k.player.task.BaseTask


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * TODO
     */
    function parseXML(data) {
        var $data = jQuery(data);
        var elementsMap = {};
        $data.children().each(function (index, child) {
            var tagName = child.tagName.toLowerCase();
            elementsMap[tagName] = child;
        });

        var widthLimitFactor = parseFloat($data.attr('width_limit'));
        var widthPercent = 100 * ( isNaN(widthLimitFactor) ? 1 : widthLimitFactor );

        return {
            elementsMap:elementsMap,
            widthPercent:widthPercent,
            baseClasses:$data.attr('base_classes'),
	        check_type:$data.attr('check_type'),
            ignoreScroll:$data.attr('ignoreScroll') == 'true',
            rubric: extractRubric( elementsMap.progress )
        };

    }
    
    function extractRubric( progressXML ) {
    	var rubric = null ;
    	var $rubric = $( progressXML ).children('rubric') ;
    	if( $rubric.length ) {
    		rubric = {
    				id: $rubric.attr('id'),
    				score: parseInt( $rubric.attr('score') )
    		} ;
    	}
    	
    	return rubric ;
    }
    
    function extractAutoCheck(xml, defaultProgressData, defaultConfig) {
        var jXml = jQuery(xml);
        var autoCheckXML = jXml.children('autoCheck');

        if (autoCheckXML.length == 0) {
            if (defaultConfig) {
                if (defaultConfig.allowDefaultAutocheck) {
                    autoCheckXML = defaultProgressData.children('autoCheck');
                }
            } else {
                autoCheckXML = defaultProgressData.children('autoCheck');
            }
        }
        return autoCheckXML.text() == 'true';
    }


    function getAnswerClass(type) {
        var answerClass = type[0].toUpperCase() + type.substring(1);
        return t2k.component.answer[answerClass + 'Answer'];
    }

    function extractFeedback(jXml, defaultProgressData, defaultConfig) {
        var result = { fbLabel:'', fbMessages:'' };

        var jFBMessages = jXml.children('feedback');
        if (jFBMessages.length == 0 && defaultConfig.allowDefaultFeedback) {
            jFBMessages = defaultProgressData.children('feedback');
        }

        if (jFBMessages.length == 0) return result;

        result.fbLabel = jFBMessages.attr('label') || _i18n('tasktoolbar.feedback');

        result.fbMessages = getFeedbackMessagesData(jFBMessages);

        return result;
    }
    function extractSpecificFeedback(xml) {
     
        if(!xml.length){
            return {};
        }

        xml = $(xml)
        var result = {};

        if(xml.length && xml.children().length){
            
            $(xml).children('checkableelement').each( function(){ //<checkableelement id=xxx / default>
                var checkbleElement = this;
                var checkbleElementId =  $(checkbleElement).attr('id');
                if(!result[checkbleElementId]){
                    result[checkbleElementId] = {};
                }
                $(checkbleElement).children().each( function(){ // <correct>/ <partially> / <wrong>
                    var checkingType = this.tagName.toLowerCase();
                    if(!result[checkbleElementId][checkingType]){
                        result[checkbleElementId][checkingType] = {};
                    }
                    $(this).children().each(function(){ // <feedbackitem>
                        var feedbackitem = $(this);

                        if($(feedbackitem).children('checkableelementvalue').html()){ //<checkableelementvalue type=id/mathfield/textviewer/default> value
                            var checkbleElementValue = $(feedbackitem).children('checkableelementvalue').html().toString().trim();
                            result[checkbleElementId][checkingType][checkbleElementValue] = $($(feedbackitem).children('feedbackdata').html()); // specific feedabck value to display 
                        }else{
                            if($(feedbackitem).children('checkableelementvalue').first().attr('type') == 'default'){
                                result[checkbleElementId][checkingType]['default'] = $($(feedbackitem).children('feedbackdata').html());
                            }
                        }
                        
                    })

                },this);

            },this);

            }
        return result;
    }

    function parseProgressData(defaultConfig, xml) {
        // Wrap with jQuery
        var jXml = jQuery(xml);

        var defaultProgressData = ENV.defaultTaskProgress;

        // Handle Button Data
        var buttonModes = copy({}, defaultConfig.buttonModes);

        // TODO: check why doesn't this work normally
        if (!LanguageUtil.strings.task) {
            LanguageUtil.strings.task = {
                progress: {
                    labels: {
                        check : "Check",
                        tryagain : "Try Again",
                        showanswer : "Show Answer",
                        progress : "Continue",
                        done : "Done",
                        skiptask : "Skip Task",
                        solvetask : "Solve Task",
                        restarttask : "Restart Task"
                    }
                }
            } ;
        }

        // get lab
        var langLabels = LanguageUtil.strings.task.progress.labels;
        for (var key in langLabels) {

            var value = langLabels[ key ];

            if (/*ENV.assessmentMode*/ ENV.viewMode.isAssessment) {
                var assessmentKey = 'assessment_' + key;
                var assessmentValue = langLabels[ assessmentKey ];
                if (assessmentValue) {
                    value = assessmentValue;
                }
            }

            if (!buttonModes.states) buttonModes.states = {};
            buttonModes.states[ key ] = { title:value };
        }
//        // override language file button strings with xml content strings
//        var buttons = jQuery.merge(defaultProgressData.children('taskButton'), jXml.children('taskButton'));
//        buttons.each(function (index, button) {
//            var jBtn = jQuery(button);
//            var btnLabel = jBtn.attr("label");
//            var btnType = jBtn.attr("type");
//
//            if (!buttonModes.states) buttonModes.states = {};
//
//            buttonModes.states[ btnType ] = { title:btnLabel };
//        });

        // Handle Hint Data
        var jHintMessages = jXml.children('hint');
        var hintLabel;
        if (jHintMessages.length > 0) {
            hintLabel = jXml.children('hint').attr('label') || _i18n('tasktoolbar.hint');
        }
        var hintMessages = getHintMessagesData(jHintMessages);

        var __ret = extractFeedback(jXml, defaultProgressData, defaultConfig);
        var fbLabel = __ret.fbLabel;
        var fbMessages = __ret.fbMessages;

        specificFeedbackMessages = extractSpecificFeedback(jXml.children('specificFeedback'));

	    //Handle attempts
        var attemptsXML = jXml.children('attempts');
        if (attemptsXML.length == 0 && defaultConfig.multipleAttempts) {
            attemptsXML = defaultProgressData.children('attempts');
        }
        var parseRes = parseInt(attemptsXML.text());
        var attempts = (!!!parseRes) ? 0 : parseRes;

	    //Handle task points
	    var pointsXML = jXml.children('points'), points;
	    if(pointsXML.length) {
		    points = parseInt(pointsXML.text());
	    }

        // Handle autocheck
        var autocheck = extractAutoCheck(xml, defaultProgressData, defaultConfig);
        //will only be set to "input" when in opq , otherwise for now will be ""
        var progressType = jQuery(xml).children('type').text();
        
        return {
            buttonModes:buttonModes,
            hintMessages:hintMessages,
            hintLabel:hintLabel,
            fbMessages:fbMessages,
            specificFeedbackMessages: specificFeedbackMessages,
            attempts:attempts,
	        points:points,
            autocheck:autocheck,
            fbLabel:fbLabel,
            type:progressType
        };
    }

    function getHintMessagesData(xml) {
        var messages, attempt;

        jQuery(xml).children('message').each(function (index, msgXML) {
            if (!messages) messages = {};
	        attempt = null;

	        if(msgXML.attributes["attempt-num"]) {
		        attempt = msgXML.attributes["attempt-num"].value;
		        !!attempt && (messages[ attempt ] = msgXML);
	        }

	        if(msgXML.attributes["attempt"]) {
		        attempt = msgXML.attributes["attempt"].value;
		        !!attempt && (messages[ attempt ] = msgXML);
	        }

        });

        return messages;
    }

    function extractInstruction(xml, defaultConfig) {
        var jnode = jQuery(xml).children("instruction");
        if (jnode.length == 0 && defaultConfig.allowDefaultInstruction) {
            var defaultProgressData = ENV.defaultTaskProgress;
            jnode = defaultProgressData.children('instruction');
        }
        if (jnode.length > 0) {
            return {
                'narrationUrl':"assets/" + jnode.attr('narration'),
                'emphasized':jnode.attr('emphasized') == 'true',
                'show':jnode.attr('show') == 'true',
                'content':jnode.text(),
                'data':jnode[0]
            };
        }
        return null;
    }

    function extractHelp(xml) {
        var jnode = jQuery(xml).children("help");

        if (jnode.length > 0) {
            return {
                'items':jnode.children('helpitem')
            };
        }

        return null;
    }

    function getFeedbackMessagesData(xml) {

        var messages = null;

        jQuery(xml).children('message').each(function (index, msgXML) {

            if (!messages) messages = {};

            var type = jQuery(msgXML).attr('type');
            var attempt = jQuery(msgXML).attr('attempt');

          
            if (!messages[type]) {
                messages[type] = {};
            }

            messages[type][attempt] = msgXML;

        });

        return messages;
    }
})();

////////////////////////////////////////
// SRC End --> t2k/player/task/BaseTask.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/StatementTaskView.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private: defaultConfig
     * Hold sensible defaults for the Statement's view to use.
     */
    var defaultConfig = {
        /** The default layout used by the Statement's view */
        layout:'inline'
    }; // End of defaultConfig.

    t2k.player.task.StatementTaskView = t2k.player.task.BaseTaskView.subClass({

        /** The class' name (for debugging purpose). */
        name:'t2k.player.task.StatementTaskView',

        /**
         * @constructor
         * @see superclass documentation
         */
        ctor:function (config) {
            // Delegate.
            this._super(copy(config, defaultConfig));

            this._view.addClass('statement');

            this.applyMode();
        },

        applyMode:function () {

            if (this.cfg.mode.length == 0) {
                throw(' statement requires mode' );
            }

            this._view.addClass(this.cfg.mode);

            if (!this.cfg.useIcon) {
                this._view.addClass('no_numbering');
                // this._task_numbering.addClass('hidden');
                var numberingWidth = this._task_numbering.outerWidth();
            }
        },

        setExposed:function (flag) {
            this._super(flag);
            if(!this.cfg.useIcon){
                if (flag) {
                    var maxWidth = this._task_container.width();
                    this._top_border.width(maxWidth);
                } else {
                    var maxWidth = this._wrapper_internal.outerWidth();
                    this._top_border.width(maxWidth);
                }
            }

        },

        setTaskNumbering:function (num) {

            if (this.cfg.useIcon) {

                var div = this._task_numbering,
					icon = jQuery('<div class="task_numbering_icon"></div>');

if((this.cfg.mode).toLowerCase() == 'self_check'){
	var span_Icon = jQuery('<span>D</span>');
	span_Icon.appendTo(icon);
}

                icon.appendTo(div);

                this._view.prepend(div);
            }

        }

    });

})();


////////////////////////////////////////
// SRC End --> t2k/player/task/StatementTaskView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/task/StatementTask.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.task.QuestionOnlyTask
     * The only-question task.
     */
	t2k.player.task.StatementTask = t2k.player.task.BaseTask.subClass({
        
        /** The class' name (for debugging purpose). */
		name: 't2k.player.task.StatementTask',

        ctor:function (config) {

            this.parseData(config);

            // Delegate.
            this._super( config ) ;
        },
        
        parseData:function (config) {
            config.mode = jQuery(config.data).find('mode').text();
            config.useIcon = config.mode == 'self_check';
        },
		
        getHelpParent: function() {
        	
        	var parent = this._super() ;
     
        	return parent ;
        },
        
        createView: function(cfg){
            return new t2k.player.task.StatementTaskView(cfg);
        },
                
        registerCheckableEvents:function () {},
        registerAssessmentEvents:function () {},

        setEnabled: function( flag ) {
        	
            this._super( flag ) ;
            
            if( this.title )
            	this.title.setEnabled( flag );
            
            if( this.question )
            	this.question.setEnabled( flag ) ;

            if( this.answer )
            	this.answer.setEnabled( flag ) ;	
        }
    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();

////////////////////////////////////////
// SRC End --> t2k/player/task/StatementTask.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/BaseSequence.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.sequence.Sequence
     * A simple sequence, the most basic container of tasks.
     */
    t2k.player.sequence.BaseSequence = t2k.core.FlowPresenter.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.sequence.BaseSequence',

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The sequence's configuration.
         */
        ctor: function(config) {
        	
            // Delegate
            this._super(config);

            this.createContent();
            
        },
        

        fireState: function( success, error ) {
        	
        	var state = this.getState() ;
        	
        	var stringState =
        		state ?
        			state[0] ? state[0].outerHTML : null
        			:
        			null ;
        	
        	// send state to external host
        	this.onStateReady( stringState, null, null, success, error ) ;
        },
        
        onStateReady: function( stateString, log, scores, success, error ) {
            	// send state to external host
            	ENV.host.saveState( stateString, log, scores, success, error );
        },
        
        /**
         * Method: setEnabled
         * De/Activates the presenter. This method sets the view's active state.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
        	
            // Delegate
            this._super(flag);
            
        }, // End of setEnabled

        getState: function() {
            var state = jQuery('<sequence/>');
            
            state.attr( 'enabled', !!this.isEnabled() ) ;
            state.attr( 'cid', this.cfg.id ) ;

            return state;
        },
	    
	    getStateWithCallback: function( callback ) {
	    	callback( this.getState() ) ;
	    },

        setState: function(state) {
        	
        	if (!!state) {
            
	        	var CID = this.cfg.id ; 
	        	var stateCID = $(state).attr("cid");
	            
	        	if( CID != stateCID ) {
	        		throw new Error( "unmatching CID in state\n # cid -->\t\t"+ CID + "\n # state -->\t\t" + stateCID ) ;
	        	}
	        }
        	
            this._super(state);

            if (!!state) {                
            } else {
            }
        },

        createContent: function() {
            this.createView();
            this.createInnerElements() ;
            this.initView();

        },

        createView: function() {
            // Create the view.
            throw 'missing view instantiation, please override and set "this.view"' ;
        },

        initView: function() {

        },
        
        createInnerElements: function( calledFromCompile ) {
        },

        /**
         * Method: progress
         * Instructs the sequence to move to the next sequence.
         */
        progress: function() {
        	
            this.progressOriginal() ;
            
        },
        
        progressOriginal: function() {

            this.dispatchEvent('onNextSequence');
            
            // Mark sequence as done.
            this.finish3d = true;
            
        },

        isFinished: function() {
            return !!this.finish3d;
        },

        getStaticData: function(index) {
            var tasksStaticData = '';

            return tasksStaticData;
        },

        showGrid: function(type, show) {
            this.view.gs.drawGrid(type, show);
        },
        
        isCompilable: function() {
        	return false ;
        }
    }); // End of t2k.player.sequence.Sequence

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    
    
})();



////////////////////////////////////////
// SRC End --> t2k/player/sequence/BaseSequence.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/SequenceView.js
////////////////////////////////////////

(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton and/or Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    var TEMPLATE =
        "<div id='{{id}}' class='sequence'>\
            <div id='{{id}}_creative_footer' class='creative_footer'></div>\
			<div id='{{id}}_creative_margin' class='creative_margin'></div>\
            <div id='{{id}}_body' class='sequence_body'>\
               {{#isShared}}\
                	{{#isCollapse}}\
						<div id='{{id}}_collapse' class='sequence_shared_collapsed {{sharedPosition}}'>\
							<div class='shared_collapse_content {{sharedPosition}}'>\
								<div class='shared_collapse_fold {{sharedPosition}}'>\
									<div class='fold_btn'>\
										<div class='fold_content'></div>\
									</div>\
								</div>\
								<div id='{{id}}_shared' class='sequence_shared {{cssSharedType}} {{sharedPosition}} {{orientation}}'></div>\
							</div>\
						</div>\
                	{{/isCollapse}}\
                	{{^isCollapse}}\
                		<div id='{{id}}_shared' class='sequence_shared {{cssSharedType}} {{sharedPosition}} {{orientation}}'></div>\
                	{{/isCollapse}}\
               {{/isShared}}\
               <div id='{{id}}_content' class='sequence_content_scrollable scroll_enabled'>\
	               <div id='{{id}}_content_wrapper' class='sequence_content_wrapper'>\
						<div class='sequence_margin_left'></div>\
                        <div id='{{id}}_content_inner' class='sequence_content_inner'>\
							<div id='{{id}}_list_head' class='sequence_list_head'>\
	                            <div id='{{id}}_header' class='sequence_header'></div>\
	                            <div id='{{id}}_instruction' class='sequence_instruction_wrapper'></div>\
							</div>\
                        </div>\
						<div id='{{id}}_margin_right' class='sequence_margin_right'></div>\
				   </div>\
			   </div>\
            </div>\
        </div>";
    /**
     * Private: defaultConfig
     * Hold sensible defaults for the sequence's view to use.
     */
    var defaultConfig = {
        /** The default layout used by the player's view */
        layout: 'vertical',
        layoutScrollBase: 38,
        layoutScrollMin: 20,
        layoutScrollMax: 230,
        largeTaskCoverage: 0.85,
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.

    /**
     * Private: iconsConfig
     * Hold sensible defaults for the icons font to use.
     */
    var iconsConfig = {
        'fold_arrow': '1',
        'book': 'D'
    }; // End of iconsConfig.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.sequence.SequenceView
     * The sequence's view.
     */
    t2k.player.sequence.SequenceView = t2k.core.View.subClass({

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The sequence's view configuration.
         */
        ctor: function(config) {
            
            this._super(copy(config, defaultConfig));

            this.gs = new gridService(this);

            this.measures = this.gs.define('tasksArea');

            if (this.cfg.isShared) this.measures.shared = this.gs.define('sharedArea');


            if (!this.cfg.isReadingDirection) this._body.prepend(this._content);

            var usingHeader, usingInstruction, usingSeqHead;
            // Apply the header.
            usingHeader = this.setHeader(this.cfg);
            // apply instruction
            usingInstruction = this.setInstruction();

            usingSeqHead = usingHeader || usingInstruction;

            if (!usingSeqHead) {
                this._list_head.addClass('empty');
            } else if (usingInstruction && !usingHeader) {
                this._list_head.addClass('instruction_only');
            } else if( !usingInstruction && usingHeader ) {
                this._list_head.addClass('header_only');
            } else if( usingHeader && usingInstruction ) {
                this._list_head.addClass('header_and_instruction');
            }
            this.registerEvents();
        }, // End of ctor

        init:function () {
            if (this.cfg.isShared && this.cfg.isCollapse) {
                initCollapse.call(this, this.cfg, this.measures);
            }
            this.setBottomSpacer();

            var creativeSetData = jQuery(this.cfg.data).find('creativeSet')[0] ;

            if( !this.cfg.isShared && creativeSetData ) {

                this.defineCreativeLayouts();

                this.creativeManager = new t2k.util.managers.CreativeLayoutManager( {
                        tasksSizes:{width:this.gs._getTasksWidth,height:this.gs._getTasksHeight},
                        data: creativeSetData,
                        direction: this.direction || 'ltr'
                    },
                    this._creative_footer,
                    this._creative_margin,
                    null,
                    this.gs
                );

            }
        },

        registerEvents : function () {
			var self = this;
            $(document).on("scrollTask",function (event,options) {
                this.scrollElement(options.value,options.callback);
            }.bind(self));
        },

		scrollElement : function (value,callback) {
        	$('body').find('.sequence_content_scrollable').scrollTop(value);
        	if(callback){
            	callback(arguments.slice(2));
        	}
    	},

        defineCreativeLayouts:function() {

            var footer          = this._creative_footer,
                lastChild       = this.children[ this.children.length - 1 ],
                lastHeight      = lastChild._view.height(),
                lastTop         = lastChild._view.offset().top,
                footerTop       = lastHeight + lastTop;

            footer.css({
                'height'    : this.cfg.parent._view.height() - footerTop + 'px',
                'width'     : this._view.width() + 'px',
                'top'       : footerTop + 'px'
            });

            if (this.gs._px(this.cfg.creativeTasksWidth + 'em') < this._content.width()) {

                var marginWidth     = this._content.width() - this.gs._px(this.cfg.creativeTasksWidth + 'em'),
                    marginPosition  = this._content_wrapper.width(),
                    margin          = this._creative_margin;

                margin.css({
                    'height' : this._view.height() + 'px',
                    'width'  : marginWidth + 'px',
                    'top'    : this._view.offset().top + 'px'
                }).css( this.cfg.direction == 'ltr' ? 'left' : 'right', marginPosition + 'px');
            }
        },

        setBottomSpacer: function() {

            var viewH       = this._content.innerHeight(),
                lastChild   = this.children[ this.children.length - 1 ],
                lastHeight  = lastChild._view.height(),
                lastTop     = lastChild._view.offset().top,
                footerTop   = lastHeight + lastTop,
                top         = Math.max(this.cfg.layoutScrollMin, Math.min(this.cfg.layoutScrollMax, viewH - lastHeight)),
                bottomSpacerHeight = viewH - lastHeight - top;

            bottomSpacerHeight = bottomSpacerHeight > 0 ? bottomSpacerHeight : 0;
            
            var setSpacer = false ;
            var spacerValue = 0 ;
            
            if( ENV.behaviors.isTablet ) {
            	
                setSpacer = true ;
                spacerValue = viewH ;
                
            } else if( footerTop >= this._view.height() && bottomSpacerHeight > 0 ) {
            	
                setSpacer = true ;
                spacerValue = bottomSpacerHeight ;
                
            }
            
            if( setSpacer ) {
                var spacer = jQuery('<div/>');
                spacer.css('height', spacerValue + 'px');
                this._content_inner.append(spacer);
            }
        },

        getTaskTopScroll: function(index) {

            var top         = this.cfg.layoutScrollBase,
                taskView    = this.children[ index ],
                isLast      = ( index == this.children.length - 1 );

            if (!isLast) {
                var taskHeight      = taskView._view.height(),
                    viewH           = this._content.innerHeight(),
                    taskCoverage    = taskHeight / viewH;

                if (taskCoverage > this.cfg.largeTaskCoverage) {
                    top = this.cfg.layoutScrollMin;
                }
            } else {
                top = this.cfg.layoutScrollMin;
            }

            return top;
        },

        setInstruction:function() {

            var thi$ = this,
                used = false;

            if (thi$.cfg.instructionData) {
                thi$.instruction = new t2k.player.task.controls.Instruction(copy(thi$.cfg.instructionData, {
                    parent: this.cfg.id + '_instruction',
                    onNarrationStarted: function() {},
                    onNarrationDone: function() {},
                    onRendered : function() {}
                }));

                thi$.instruction.setSequenceMode();
                used = true;
            }
            return used;
        },

        setHeader:function(cfg) {

            var used = false;

            if (this.cfg.headerData) {
                this.header = componentFactory.create({
                    data : this.cfg.headerData,
                    parent: this.cfg.id + '_header',
                    onRendered : function() {}
                });

                used = true;
            }

            return used;
        },

        removeFromDom:function() {
            this._view.removeClass('show');
            this._view.addClass('hidden');
        },

        addToDom:function() {
            this._view.removeClass('hidden');
            this._view.addClass('show');
        },

        getLayoutStatus: function() {
            return !!this.creativeManager ? this.creativeManager.getLayoutStatus() : null ;
        }


    }); // End of t2k.player.sequence.SequenceView

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private:
     * Function: buildCollapse
     * Build collapse / expand. - by roman
     *  Parameters:
     *  cfg - {Object} Contains the data to apply.
     *  measures - {Object} measures for shared area and tasks area.
     */
    function initCollapse(cfg, measures) {

        var collapse = this._body.find('.sequence_shared_collapsed'),
            collapseBorder = this._body.find('.sequence_shared_border'),
            collapseWrapper = collapse.find('.shared_collapse_content'),
            foldWrapper = collapse.find('.shared_collapse_fold'),
            foldButton = collapse.find('div.fold_btn'),
            foldButton_verticalPadding = parseInt(foldButton.css('padding-top'),10)+parseInt(foldButton.css('padding-bottom'),10),
            foldButton_horizontalPadding = parseInt(foldButton.css('padding-right'),10)+parseInt(foldButton.css('padding-left'),10),
            foldContent = collapse.find('div.fold_content'),
            sequence_shared = collapse.find('div.sequence_shared'),
            foldShadow = collapse.find('div.fold_shadow'),
            content = jQuery(cfg.data).find('shared > label').text(),
            icon = jQuery(cfg.data).find('shared > label').attr('icon'),
            scrollOffset = cfg.isReadingDirection ? 0 : getScrollWidth(cfg),
            contentWidth, isTooltip;

//console.error('getScrollWidth:',getScrollWidth(cfg));

        foldContent.html( createIcons(icon) + content.toUpperCase() );

        foldShadow.addClass('hidden');
        contentWidth = Math.min(foldContent.outerWidth() + foldButton_verticalPadding + foldButton_horizontalPadding, 225);
        isTooltip = foldContent.outerWidth() > contentWidth;
        foldContent.outerWidth((contentWidth % 2 ? contentWidth : contentWidth + 1)-(foldButton_verticalPadding+foldButton_horizontalPadding));//Chrome bug: width have to be an odd number

        if (isTooltip) foldButton.attr('title', content);

        if (cfg.isVertical) {
            foldContent.addClass('rotate');

            // set div.sequence_shared_collapsed to relevant position and add padding to ScrollBar
            if(cfg.sharedPosition == 'right'){
                collapse.css(cfg.sharedPosition, collapseBorder.width() + scrollOffset);
                collapseBorder.css(cfg.sharedPosition, scrollOffset);
            }else{
                collapse.css(cfg.sharedPosition, 1);
                collapseBorder.css(cfg.sharedPosition, 0);
            }

            collapseWrapper.outerWidth(measures.shared.width + foldWrapper.width()); //set wrapper width to be content + fold button so they can both float next to each other

            foldButton.height(contentWidth);

            var tmpPositionVal = 0,
                fontOffset = cfg.isReadingDirection ? 13 : -10; //margin for font alignment;

            // calc position by direction and orientation
            if (ENV.contentDirection == 'rtl'){
                fontOffset = cfg.isReadingDirection ? 0 : -5;
                tmpPositionVal = -(foldButton.offset().left - foldContent.offset().left + (cfg.isReadingDirection ? 11 : foldButton.width() - foldContent.height() +fontOffset) );
            } else {
                tmpPositionVal = (foldButton.offset().left - foldContent.offset().left + (cfg.isReadingDirection ? 4 : foldButton.width() - foldContent.height() +fontOffset) );
            }
            foldContent.css(cfg.sharedPosition,tmpPositionVal + 'px');
            foldContent.css('top', (foldButton.offset().top - foldContent.offset().top+foldButton_verticalPadding) + 'px');
        }
        else {
            if (cfg.isReadingDirection) collapseWrapper.prepend(this._shared);
            var foldButton_css = {'width':contentWidth};
            // set position by direction and orientation
            if (ENV.contentDirection == 'rtl'){
                foldButton_css['float'] = 'left';
            } else {
                foldButton_css['float'] = 'right';
            }
            foldButton.css(foldButton_css);
        }

        //bind events
        foldButton
            .click(function () {
                t2k.util.balloon.close();//hide balloon
                animateCollapse(cfg, measures);
                 cfg.clickOnCollapseCallback && cfg.clickOnCollapseCallback(true);
            })
            .hover(function () {
                sequence_shared.toggleClass('border-colored');
            });
    }

    /**
     * Private:
     * Function: animateCollapse
     * animated collapse / expand. - by roman
     *  Parameters:
     *  cfg - {Object} Contains the data to apply.
     *  measures - {Object} measures for shared area and tasks area.
     */
    function animateCollapse(cfg, measures) {
        var collapse    = Perf.select('#' + cfg.id + '_collapse'),
            foldButton  = collapse.find('div.fold_btn'),
            shadowWidth = -2,
            animateObj  = {};

        if (cfg.isVertical) {
            animateObj = {
                'width': (collapse.hasClass('expanded') ? foldButton.outerWidth(true) : measures.shared.width + foldButton.outerWidth(true)) + shadowWidth
            };
        } else {
            animateObj = {
                'height':(collapse.hasClass('expanded') ? foldButton.outerHeight(true) : measures.shared.height + foldButton.outerHeight(true)) + shadowWidth
            }
        }

        collapse.animate(animateObj, function () {
            collapse.toggleClass('expanded');
        });
    }

    /**
     * Private:
     * Function: getScrollOffset
     * returns scroll width. - by roman
     *  Parameters:
     *  cfg - {Object} Contains the data to apply.
     *  measures - {Object} measures for shared area and tasks area.
     */
    function getScrollWidth(cfg) {
        var content = jQuery('#' + cfg.id + '_content'),
            div = content.prepend('<div class="scroll-tester" />').find('.scroll-tester'),
            width = cfg.width - div.width();

        div.remove();

        return width;
    }


    /**
     * Private:
     * Function: appendChild
     * A helper method for creating appending DIV elements.
     *
     * Parameters:
     *  cls - {String} A CSS class to apply to the new DIV.
     *  html - {String} HTML content to set as the DIV content.
     *  parent - {Object} A parent element to append the new DIV to.
     */
    function appendChild(cls, html, parent) {
        var div = jQuery("<div/>");
        div.addClass(cls);
        div.html(html);
        div.appendTo(parent);
    } // End of appendChild

    /**
     * Private:
     * Function: createIcons
     * returns string with icon's Html ( .fold_arrow icon will be here always )
     * Parameters:
     * icon - {String} Contains the name to icon set.
     */
    function createIcons(icon) {
        var icons_Html  = '<div class="icon fold_arrow">' + iconsConfig['fold_arrow'] + '<\/div>',
            icon_font   = iconsConfig[icon];

        if(icon && icon_font){
            icons_Html += '<div class="icon fold_icon_' + icon.toLowerCase() + '" >' + icon_font + '<\/div>';
        }

        return icons_Html;
    }

})();

////////////////////////////////////////
// SRC End --> t2k/player/sequence/SequenceView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/Sequence.js
////////////////////////////////////////

var globalEvents = {

	events : [],

	add : function(cfg){
		this.events.push(cfg);
	},

	run : function(){
		for (i=0 ; i<this.events.length ; i++){
			this.events[i] && this.events[i].fnc.apply(this.events[i].context);
		}
		this.events = [];
	}
};


(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.sequence.Sequence
     * A simple sequence, the most basic container of tasks.
     */
    t2k.player.sequence.Sequence = t2k.player.sequence.BaseSequence.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.sequence.Sequence',

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The sequence's configuration.
         */
        ctor: function(config) {
            
        	CompilerUtils.enhanceConfigForLayouting( config ) ;
        	
        	copy( config, parseXML( config.data ), config.overrideOptions ) ;
        		
            // Layouter members init
            this.sequenceLayouter = {};
            this.sequenceLayouter.done = false;
            this.sequenceLayouter.lastEnabledFlag = false;
            
            this.sequenceConfigPath = config.dataLibPath + config.configPath;
            
            this.sharedArea;
            this.sharedData = jQuery(config.data).find("sharedArea")[0];
            this.sharedType = jQuery(this.sharedData).attr('type');
            this.cssSharedType = 'type_' + this.sharedType ;

            this.tasksRelations = {};
            this.sequenceConfigPath = config.dataLibPath + config.configPath;
            this.completedAssessmentTasks = [];
            this.flaggedTasks = [];
	        this.helpState = [];
            
            this.tasksConfig = jQuery(config.data).find("task");

	        this.createTasksMapCid();
	        
            // Delegate
            this._super(config) ;
            
            this.cfg.activeChild = 0 ;
            
            if( this.cfg.focusOnTask ) {
            	var taskToFocus = this.tasksMapCid.indexOf( this.cfg.focusOnTask ) ;
            	if( taskToFocus != -1 ) {
            		this.cfg.activeChild = taskToFocus ;
            	} else {
            		console.error( "using focusOnTask with invalid task cid" ) ;
            	}
            }

        },
        
        /**
         * Method: setEnabled
         * De/Activates the presenter. This method sets the view's active state.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
	        //if sequence layouter still running don't enable the sequence, just update lastEnabledFlag with the current flag
	        if (!this.sequenceLayouter.done) {
		        this.sequenceLayouter.lastEnabledFlag = flag;
		        return;
	        }

	        // Delegate
	        this._super(flag);

	        // set scroll control
	        ScrollControl.initSequenceScrollControl(this.view._view, flag);

	        // Enable the current task.
	        var activeTask = this.children[ this.cfg.activeChild ];
	        if (flag) {
//            	this.swapRubric( activeTask ) ;
	        }

	        activeTask.setEnabled(flag);
	        if (flag && this.cfg.activeChild != 0 && !activeTask.getIgnoreScroll()) {
		        this.view.scroll(this.cfg.activeChild, null, this.cfg.layoutScrollBase);
	        }

	        if (activeTask.getIgnoreSetEnabled()) {
		        activeTask.view._view.addClass('disabled');
	        }

	        var thi$ = this;
	        setTimeout(function() {
		        if (flag) {
			        thi$.exposeTaskGroup(activeTask);
	            }

		        //shared area is always enabled
		        !!thi$.sharedArea && thi$.sharedArea.setEnabled(true);
	        }, 0);


        }, // End of setEnabled

        getState: function() {
            var state = this._super() ;

            // Handle Tasks
            var tasks = jQuery("<tasks/>");
            state.append(tasks);
            jQuery(tasks).attr("active_task", this.cfg.activeChild);

            // loop over tasks and get each task's state
            for (var i = 0; i < this.children.length; i++) {
                var taskState = this.children[i].getState();
                jQuery(taskState).attr("index", i);
                jQuery(tasks).append(taskState);
            }

            var sharedState = this.getSharedState();
            if (sharedState) {
                state.append(sharedState);
            }

            return state;
        },

        getSharedState:function() {
        	var sharedState ;
            if (this.sharedArea) {
                 sharedState = this.sharedArea.getState() ;
            }
            return sharedState;

        },

        setState: function(state) {
            this._super(state);

            var i;

        	var specificFocus = this.tasksMapCid.indexOf( this.cfg.focusOnTask ) ;
        	
            if (!!state) {
                // Handle Sequences.
                var tasksWrapper = jQuery(state).find('tasks');
                
                var task, tasks = tasksWrapper.children();
                this.cfg.activeChild = specificFocus != -1
                		?
                	specificFocus
                		:
                	parseInt(tasksWrapper.attr('active_task')) ;
           

                //HACK
                if(this.cfg.activeChild < 0){
                    this.cfg.activeChild = 0;
                }
                
                var focusedTask = this.cfg.activeChild,
                    forceEnableLastTask = false;
                if (focusedTask == tasks.length-1){
                    //if the focused task is the last one, we would always want it to be focused and enabled
                    forceEnableLastTask = true;
                }
                

                for (i = 0; i < tasks.length; i++) {
                    task = jQuery(tasks[i]);
                    var ignoreFocus = ( i != this.cfg.activeChild )
                    this.children[parseInt(task.attr('index'))].setState(task , (forceEnableLastTask && i == focusedTask), ignoreFocus );

	                if(ENV.viewMode.disableAllTasks) {
		                this.children[parseInt(task.attr('index'))].setEnabled(false);
	                }

	                task = null;
                }
                
                // no need in scrolling to 0 (1st) task on state, its already there
                // unless blocked, it will hide the sequence header when returning from state.
                if( this.cfg.activeChild != 0 ) {
                    this.view.scroll(this.cfg.activeChild, null, this.cfg.layoutScrollBase);
                }

                if (this.sharedArea) {
                    var sharedState = jQuery(state).find('sharedarea');
                    this.sharedArea.setState(sharedState);
                }

            } else {
                for (i = 0; i < this.children.length; i++) {
                    this.children[i].setState(null);
                }

                //focus on last task but stay on scroll at first element and set disabled css class on last task 
                //use in read only mode
                if(ENV.viewMode.lastTaskFocusing){
                    this.cfg.activeChild = this.children.length - 1;
                    this.children[this.cfg.activeChild].cfg.ignoreScroll = true;
                    this.children[this.cfg.activeChild].cfg.ignoreSetEnabled = true;
                   
                }else{

                    this.cfg.activeChild = specificFocus != -1 ? specificFocus : 0 ;
                }
                
            }

	        if( specificFocus != undefined && specificFocus != -1 ) {
		        this.progressToTask(this.cfg.focusOnTask);
	        }
        },

        /*
         this function is to reset to initial state( i.e no state applied) of all levels of hierarchy, this will be called before setState
         */
        resetState:function () {
//            next 2 lines does not work yet, need to figure out how this should work
//            this.cfg.activeChild = 0;
//            this.view.scroll(this.cfg.activeChild, null, this.cfg.layoutScrollBase);
            for (var i = 0; i < this.children.length; i++) {
                this.children[i].resetState();
            }
        },

	    createInnerElements: function( calledFromCompile ) {
        	this._super() ;
        	
        	var sharedData = jQuery(this.cfg.data).find("sharedArea");
        	if( sharedData.length > 0 ) {
	        	this.createShared( calledFromCompile );
        	}
        	
        	this.createTasks( calledFromCompile );
        },

	    createTasksMapCid: function() {
		    this.tasksMapCid = [];
		    var thi$ = this;
		    jQuery.each(this.tasksConfig, function (item, taskData) {
		    		var taskCIDattr = taskData.attributes.getNamedItem('id') ;
		    		if( taskCIDattr ) {
		    			thi$.tasksMapCid.push( taskCIDattr.value ) ;
		    		}
			    }
		    );
	    },

        initView: function() {
        	this._super() ;
        	
            var viewH = this.view._content.innerHeight();
            var lastChild = this.children[ this.children.length - 1 ];
            var lastHeight = lastChild? lastChild.view._view.height(): 0;
            var top = this.view.cfg.layoutScrollBase * 2;
            top += this.view._content_inner.css('padding-top').split('px')[0] * 1;
            var bottomSpacerHeight = viewH - lastHeight - top;

            this.view.init(bottomSpacerHeight > 0 ? bottomSpacerHeight : 0);
        },

        createView: function() {
            this.cfg.headerData = extractHeader(this.cfg);
            this.cfg.instructionData = extractInstruction(this.cfg);

//            override(this.cfg, extractCompileData(this.cfg.data)); //append compilation data to config - by roman
            
            var layoutProps = CompilerUtils.getSequenceLayoutProps( this.cfg ) ;
            override( this.cfg, layoutProps ) ;
            
            // view cleanup
            if( this.view ) {
            	this.view._view.remove();
            	delete this.view ;
            }
            var thi$ = this;
            // Create the view.
            var params = copy(  this.cfg , 
                                {
                                    cssSharedType:this.cssSharedType ,
                                    clickOnCollapseCallback : function(val){
                                        thi$.sharedArea.collapseClicked = val;
                                    }
                                });

            this.view = new t2k.player.sequence.SequenceView(params);
        },

        createTasks: function(calledFromCompile, createTasks) {
        	
        	 // init task counter
            this.taskCounter = 0;
        	
        	// reset dynamic Layout task counter
        	DynamicLayoutUtils.resetTaskCounter();
        	
            if (calledFromCompile == null || calledFromCompile == undefined) {
                calledFromCompile = false;
            }
            this.tasks = [];
            this.tasksRelations = {};
            this.grouppedTasks = [];
            this.exposureTasks = {};
            this.currentExposure = 0;
            var taskNumbering = 0;

            // Iterate the configurations and each create the appropriate presenter.
            // Closure ref.
            var thi$ = this;
            
            // set task counter
            this.tasksConfig.each(function(){
                thi$.taskCounter++;
            });

            this.tasksConfig.each(function(index, taskConfigXml) {

                var TaskType = extractTaskType(taskConfigXml);
                var useExposure = !ENV.viewMode.allExposed ;
                if( typeof ENV.overrideGradualExposure != "undefined" && ENV.overrideGradualExposure ) {
                	useExposure = ENV.overrideGradualExposure ;
                }
                var expId = useExposure ? extractExpId(taskConfigXml) : 1 ;
                var groupId = extractGroupId(taskConfigXml);
                
//                var comparisonTaskMax = {} ;
//                if( isComparison ) {
//                	comparisonTaskMax.width = thi$.view.measures.width / 2 ;
//                	comparisonTaskMax.height = thi$.view.measures.height ;
//                }
                
                var taskMax = thi$.view.measures ;
                var widthLimitFactor = parseFloat( jQuery( taskConfigXml ).attr( 'width_limit' ) ) ;

                var incrementTaskIndex = true;

                // set taskNumbering+1, case the task is not statement
                switch (TaskType) {
                    
                	case 'statement':
                        TaskClass = t2k.player.task.StatementTask;
                        incrementTaskIndex = false;
                        break;

                    default:
                        TaskClass = t2k.player.task.BaseTask;
                        break;

                }

                var indexLabel = t2k.util.StringUtils.formatNumber(taskNumbering + thi$.cfg.firstTaskIndex, thi$.cfg.taskIndexType);

	            var isFirstInSequence = (index == 0);
                var isLastInSequence = thi$.tasksConfig.length == index + 1;
                var isLastInMission = isLastInSequence && thi$.cfg.isLast;
                
                var task = thi$.createTask(
                    TaskClass, {
                        taskId: extractTaskId(taskConfigXml),
                        type: TaskType,
                        data: taskConfigXml,
                        exposureId: expId,
                        parent: thi$.view._content_inner,
                        maxSize: taskMax,
                        indexLabel: indexLabel,
                        isFirstInSequence: isFirstInSequence,
                        isLastInSequence: isLastInSequence,
                        isLastInMission: isLastInMission,
                        navMode: ENV.taskNavigationMode,
                        calledFromCompile: calledFromCompile,
                        sequenceConfigPath: thi$.sequenceConfigPath,
                        teacherIndication: thi$.cfg.teacherIndication,
                        sequenceObj: thi$
                    });
                
                taskMax.width *= isNaN( widthLimitFactor ) ? 1 : widthLimitFactor ;
                
                if (!thi$.exposureTasks[ expId ]) {
                	thi$.exposureTasks[ expId ] = [];
                }
                thi$.exposureTasks[ expId ].push( task ) ;
                
                if( groupId ) {
	                if (!thi$.grouppedTasks[ groupId ]) {
	                	thi$.grouppedTasks[ groupId ] = [];
	                }
	                thi$.grouppedTasks[ groupId ].push( task ) ;
                }
                
                task.onNextTask(function() {
                    thi$.progress();
                });

                thi$.add(task);

                //for assessment only , the baseTask is the assessable task and we want to add it to assessment manager
                if (ENV.viewMode.isAssessment && !calledFromCompile) {
                    thi$.dispatchEvent('onAssessmentTaskCreated', {task:task ,taskIndex:index});
                }

                var taskId = task.view.cfg.id;
                
                // use 'explore' relation as default
//                var sharedRelationAttr = jQuery(taskConfigXml).attr("shared_relation") || 'support' ;
                var sharedRelationAttr = jQuery(taskConfigXml).attr("shared_relation") ;
                thi$.tasksRelations[ taskId ] = sharedRelationAttr && sharedRelationAttr != '' ? sharedRelationAttr : 'support';

                if (incrementTaskIndex) {
                    taskNumbering++;
                }

            });

            this.lastTaskIndex = taskNumbering;

            

        }, // End of ctor

        setLayoutState: function(state) {

            var result;

            switch (state) {

                case 'compact':
                    result = 'reduce';
                    break;

                case 'loose':
                    result = 'compact';
                    break;

                case 'reduce':
                    result = 'loose';
                    break;

                default: // on first time
                    result = 'loose';
                    break;

            }

            return result;
        },
        
        getDynamicLayoutDoneEvents: function() {
            var thi$ = this;
            
        	return {
                onTaskRendered : function(thisTask) {
                    thisTask.layoutState = thi$.setLayoutState(thisTask.layoutState);
                    
//                    console.log( "onTaskRendered - start" ) ;

//    				console.time( "layouter" ) ;
    				var rendered = thi$.dynamicLayoutRenderCallback ;
    				var renderedWrapper = function() {
//                        console.log( "onTaskRendered - done" ) ;
//    					console.timeEnd( "layouter" ) ;
    					rendered.apply( this, arguments ) ;
					    globalEvents.run();
    				} ;
                    
//                    if (thi$.cfg.compileMode){
	                    DynamicLayoutUtils.dynamicLayout(thisTask, thi$.cfg.height, thisTask.layoutState, thi$, renderedWrapper);
//                    } else {
//                    	thi$.taskCounter--;
//                    	if (thi$.taskCounter == 0){
//                    		thi$.dynamicLayoutRenderCallback();
//                    	}
//                    }
                },
//                onTaskAsAssessmentCompleted:function(thisTask) {
//                    thi$.setTaskAsAssessmentCompleted(thisTask);
//                },
//                onTaskAsAssessmentUnCompleted:function(thisTask) {
//                    thi$.setTaskAsAssessmentUnCompleted(thisTask);
//                },
                onTaskAssessmentFlag:function(thisTask, toggled){
                    thi$.handleFlags(thisTask , toggled);
                }
            } ;
        },
        
        dynamicLayoutRenderCallback: function() {
            this.dispatchEvent('setPreloaderOff');
            var thi$ = this;
            thi$.sequenceLayouter.done = true;                      //sequence layouter is done now
//            thi$.setEnabled(thi$.sequenceLayouter.lastEnabledFlag); //set sequence enabled with the last enabled flag
            thi$.setEnabled( true ) ;
        },
        
        createTask: function(taskClass, cfg) {
            // increment Dynamic Layout task counter
            DynamicLayoutUtils.incrementTaskCounter();

            var task = new taskClass(merge(cfg, {events: this.getDynamicLayoutDoneEvents() }));

            return task;

        },

        //this needs to be merged with createTasks

        createShared: function (calledFromCompile) {
        	
        	if( !calledFromCompile ) {
	        	
	            this.sharedArea = new t2k.component.sharedarea.SharedArea({
	                data: this.sharedData,
	                parent: this.view.cfg.id + '_shared',
	                isCollapse: this.cfg.isCollapse,
	                type:this.sharedType,
	                orientation: this.cfg.orientation,
	                layout:this.cfg.layout,
	                onRendered: function() {
	                	
	                },
	                calledFromCompile:calledFromCompile
	            });

        	}
        },

        setTaskAsAssessmentCompleted:function(task) {
        	
//        	ENV.host.taskChanged( task.cfg.taskId, "answered");
        	
//            var taskPushedToCompletedArray = false;
//            for (var i = 0; i < this.completedAssessmentTasks.length; i++) {
//                if (this.completedAssessmentTasks[i] == task) {
//                    taskPushedToCompletedArray = true;
//                }
//            }
//            if (!taskPushedToCompletedArray) {
//                this.completedAssessmentTasks.push(task);
//            }
//            if (this.completedAssessmentTasks.length == this.children.length) {
//                this.dispatchEvent('seqAssessmentCompletedMode', true);
//            }
        },

        setTaskAsAssessmentUnCompleted:function(task) {
        	
//        	ENV.host.taskChanged( task.cfg.taskId, "cleared");
        	
//            var seqWasCompleted = false;
//            if (this.completedAssessmentTasks.length == this.children.length) {
//                seqWasCompleted = true;
//            }
//
//            //manage the array and find the task that is uncompleted now
//            for (var i = 0; i < this.completedAssessmentTasks.length; i++) {
//                if (this.completedAssessmentTasks[i] == task) {
//                    this.completedAssessmentTasks.splice(i, 1);
//                }
//            }
//            //manage the sequence/progressBar completed mark
//            if (seqWasCompleted && this.completedAssessmentTasks.length != this.children.length) {
//                this.dispatchEvent('seqAssessmentCompletedMode', false);
//            }
        },

        handleFlags:function(task , toggled){
          if(toggled){
              this.flaggedTasks.push(task);
          }else{
               for (var i = 0; i < this.flaggedTasks.length; i++) {
                if (this.flaggedTasks[i] == task) {
                    this.flaggedTasks.splice(i, 1);
                }
            }
          }
            if(this.flaggedTasks.length > 0){
                this.dispatchEvent('seqAssessmentFlagMode' , true);
            }else{
                this.dispatchEvent('seqAssessmentFlagMode' , false);
            }
        },

        setAssessmentTeacherIndication:function(flag){
            if(/*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment){
                var length = this.children.length;
                //we assume that the last task in assessment seq is the assessable and only one
                var assessableTask = this.children[length - 1];
                var taskCheckingType = getTaskCheckingType(assessableTask.cfg.type);
                if(taskCheckingType == 'MANUAL'){
                    //todo add implementation 
                    assessableTask.setIcon('mark' , flag);
                }
            }
        },
        
     /**
         * Method: progress
         * Instructs the sequence to move to the next task.
         * param: focusTaskId(optional)- indicates the task id to progress to, if not sent- increment to next task)
         */
        progress: function( focusTaskId, externalCall, success, ignoreScroll) {
        	//dataUtil.logXcode("progress");
			if( ENV.behaviors.fireUIEvents ) {
				ENV.host.onUIEvent( "blur" ) ;
			}
        	
        	var thi$ = this;
        	
            var progresstoTask = focusTaskId !== undefined, 
                prevFocusTaskId = this.cfg.activeChild,
                currTask = this.children[this.cfg.activeChild];

            if(!progresstoTask){
                currTask.setFinished(true);                
            }

            this.lastTaskLog = currTask.getLog() ;

            currTask.setSaveStateProperty(true);
            currTask.setEnabled(false);
            //get task to progress to
            if(progresstoTask){
                //find index of focused task inside of sequence map of tasks cId's
                this.cfg.activeChild = this.tasksMapCid.indexOf(focusTaskId);

            }else{
                var isLastTask = false;
                // Deactivate the current task. (Liron: except last one on sequence)
                // Increment the counter of the current active child.
                //this.cfg.activeChild += 1;
                if (this.cfg.activeChild != this.children.length - 1) {
                    this.cfg.activeChild += 1;
                }
                else {
                    isLastTask = true;
                }
            }
            
            // Get reference to the next child and, if exists, activate it.
            currTask = this.children[this.cfg.activeChild];
            var callSuper = false ;
            if (!isLastTask || progresstoTask) {
                
                //this.swapRubric( currTask ) ;
                if(progresstoTask){
                    //reset some progress parameters
                    currTask.progressHandler.taskComponentEnabled = false;
                }
                currTask.progressHandler.started = false;
                
                currTask.setEnabled(true);
                
                if(!progresstoTask && (this.currentExposure != currTask.cfg.exposureId) ){
                    this.exposeTaskGroup(currTask);
                }
                
                if( !currTask.getIgnoreScroll() && !ignoreScroll) {
                	this.view.scroll(this.cfg.activeChild, null, this.view.getTaskTopScroll(this.cfg.activeChild));
                }
                
                this.onNewTaskFocused( currTask.cfg.taskId, externalCall ) ;
                
            } else {
                callSuper = true ;
            }

            function fireStateCallback(){
                thi$.children[prevFocusTaskId].setSaveStateProperty(false);
                progressCallbackWrapper() ;
            }
            
            function progressCallbackWrapper() {
                if( callSuper ) {
                	thi$.progressOriginal() ;
                }
                success && success() ;
            }
            
            if( externalCall ) {
            	callSuper = false ; 
            }
            
            if( ENV.saveState /*&& !externalCall*/ ) {
                this.fireState( fireStateCallback, null, true ) ;
            } else {
                progressCallbackWrapper() ;
            }

        },
      
        
        onNewTaskFocused: function( taskCid, externalCall ) {
        	if( !externalCall ) {
        		ENV.host.taskChanged( taskCid, "focused");
        	}
        },
        
	    /**
	     * Method: progress
	     * Instructs the sequence to move to the next task.
	     */
	    progressToTask: function(focusTaskId, externalCall, success, ignoreScroll) {
            this.progress(focusTaskId, externalCall, success, ignoreScroll);
	    },
	    
	    getStateWithCallback: function( callback ) {
	    	this.getAsyncState( callback ) ;
	    },
	    
        getAsyncState: function( callback ) {
        	
        	var thi$ = this ;
            
            // get state async way ( from this.getState )
            // optional, if no async needed, callback will be called immediatly
	        StateUtil.collectState(this, function (state) {

		        thi$.getTasksScores(function (scores) {
			        // get state string
			        var stateString = state[0].outerHTML;

			        callback({
				        state:stateString,
				        scores:scores
			        });
		        });

	        });
        },
        
        fireState: function( success, error, sendLogs ) {
        	
            var thi$ = this ;

	        // get state async way ( from this.getState )
	        // optional, if no async needed, callback will be called immediately
	        this.getAsyncState(function (stateData) {

		        thi$.getTasksScores(function (scores) {
			        // get last task log
			        var log = sendLogs ? thi$.lastTaskLog : null;

			        // send state to external host
			        thi$.onStateReady(stateData.state, log, scores, success, error);

		        });
	        });
            
        },

	    getTasksScores:function (returnCallback) {

		    var tasksScores = [], assessmentScore = false;

		    asyncForEach(_.clone(this.children), function (task, callback) {

			    function getScore(assessmentScore) {

				    if (assessmentScore == 0 || assessmentScore) {
					    tasksScores.push({
						    taskCid:task.cfg.taskId,
						    automatedScore:assessmentScore
					    });
				    }

				    callback();
			    }

			    task.getAnswerAssessmentScore(getScore);

		    }, function () {
			    returnCallback(tasksScores);
		    });

	    },
        
        setTasksScores: function( tasksScores ) {
	
        	for( var i = 0 ; i < tasksScores.length ; i++ ) {
	
				var scoreObject = tasksScores[i] ;
				
				if( scoreObject ) {
					var taskCid = scoreObject.taskCid ;
					var taskScore = scoreObject.score ;
					var task = this.getTaskByCid( taskCid ) ;
					task.setTaskPoints( taskScore, true ) ;
				}
	
            }
        	
        },
        
        getTaskByCid: function( cid ) {
			var taskIndex = this.tasksMapCid.indexOf( cid ) ;
			var task = this.children[ taskIndex ] ;
			return task ;
        },
        
        getTasksCount:function () {
            return jQuery(this.cfg.data).find("task").length;
        },

        getLastTaskIndex:function () {
            return this.lastTaskIndex;
        },

        exposeTaskGroup: function(task) {
            this.currentExposure = task.cfg.exposureId;
            var group = this.exposureTasks[ task.cfg.exposureId ];
            jQuery(group).each(function(i, groupedTask) {
                groupedTask.setExposed(true);
            });
        },

        getStaticData: function(index) {
            var tasksStaticData = this._super() ;

            // loop over tasks and get each task's static data
            for (var i = 0; i < this.children.length; i++) {
                var taskIndex = index + '.' + (i + 1);
                tasksStaticData += this.children[i].getStaticData(taskIndex);
            }

            return tasksStaticData;
        },
        
        isCompilable: function() {
        	return true ;
        }
    }); // End of t2k.player.sequence.Sequence

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    function parseXML( data ) {
    	
    	var $data = jQuery( data ) ;
    	
    	var parsed = {} ;
    	
    	var groupCounter = 0 ;
    	
    	$data.find( 'group[type=comparison]' ).each( function( index, group ) {
    		
    		var $group = jQuery( group ) ;
    		var groupTasks = $group.find( 'task' ) ;
    		var groupLength = groupTasks.length ;
    		var is3 = groupLength == 3 ;
    		var oneOfStyle = !is3 ? 'oneOfTwo' : 'oneOfThree' ; 
    		
    		groupTasks.each( function( index, task ) {
    			
    			var $task = jQuery( task ) ;
    			
        		var baseClasses = [ 'comparison', oneOfStyle ] ;
        		
    			if( index == 0 ) {
        			// first task
    				baseClasses.push( 'firstInRow' ) ;
    				
    			} else if( index < groupLength - 1 ) {
        			// middle task
    				if( is3 ) {
    					baseClasses.push( 'middleInRow' ) ;
    				} else {
	    				baseClasses.push( 	index % 2 == 0 ?
	    										'firstInRow'
					    						:
					    						'lastInRow'
					    				) ;
    				}
    				
    			} else {
        			// last task
    				baseClasses.push( 'lastInRow' ) ;
    				
    			}
        		
        		$task.attr( 'base_classes', baseClasses.join( ' ' ) ) ;
        		$task.attr( 'group', groupCounter ) ;
        		$task.attr( 'ignoreScroll', true ) ;
        		
        	} ) ;
    		
    		groupCounter++ ;
    		
    		groupTasks.insertAfter( $group ) ;
    		$group.remove() ;
    		
    	} ) ;
    	
    	return parsed ;
    }
    
    function extractGroupId(xml) {
    	return jQuery(xml).attr("group");
    }
    
    function extractTaskId(xml) {
        return jQuery(xml).attr("id");
    }

    function extractTaskType(xml) {
        return jQuery(xml).attr("type");
    }

    function extractExpId(xml) {
        return parseInt( jQuery(xml).attr("exposureId") ) ;
    }

    function extractComparison(xml) {
        return jQuery(xml).attr( 'comparison' ) == 'true' ;
    }

    /**
     * Private:
     * Function: extractHeaderData
     * Extracts header/footer values from the data XML.
     *
     * Parameters
     *  sequenceXml - {XML} The sequence configuration XML.
     *  elName - {String} "header"/"footer".
     */
    function extractHeader(config) {
       return jQuery(config.data).find('header').children()[0];
    } // End of extractHeaderData

    /**
     * Private:
     * Function: extractInstruction
     * @param config
     */
    function extractInstruction(config) {
        var jnode = jQuery(config.data).children("instruction");

        if (jnode.length > 0) {
            return {
                'narrationUrl' : "assets/" + jnode.attr('narration'),
                'emphasized' : jnode.attr('emphasized') == 'true',
                'show' : jnode.attr('show') == 'true',
                'content' : jnode.text(),
                'data': jnode[0]
            };
        }
        return null;
    }


    /**
     * Private:
     * Function: extractCompileData
     * Extracts compilation values from the data XML.
     *
     * Parameters
     *  sequenceXml - {XML} The sequence configuration XML.
     */
    function extractCompileData(sequenceXml) {
        var layout = Compat.getChildren(sequenceXml, 'layout'),
            shared = Compat.getChildren(sequenceXml, 'shared'),
            type = layout.attr('type') || 'vertical';

        return {
            layoutData:layout,
            hasMargin:layout.attr('has_margin')=='true',
            creativeTasksWidth:layout.attr('tasks_width'),
            ratio:layout.attr('tasks_ratio') ? layout.attr('tasks_ratio') : 100,
            isVertical:type == 'vertical',
            isHorizontal:type == 'horizontal',
            orientation:type,
            isReadingDirection:layout.attr('tasks_reading_direction') == 'true',
            isCollapse:layout.attr('shared_task_collapse') == 'true',
            isShared:shared.length > 0,
            sharedPosition:getSharedPosition(layout),
            sharedContentDiffWidth: parseInt( layout.attr( 'sharedContentDiffWidth' ) ) || 0,
            sharedContentDiffHeight: parseInt( layout.attr( 'sharedContentDiffHeight' ) ) || 0

        };
    }

    /**
     * Private:
     * Function: getSharedPosition
     * returns sharedPosition (top | left | right | bottom).
     *
     * Parameters
     *  layout - {XML} The layout tag XML.
     */
    function getSharedPosition(layout) {
        var isVertical = layout.attr('type') == 'vertical',
            isHorizontal = layout.attr('type') == 'horizontal',
            isReadingDirection = layout.attr('tasks_reading_direction') == 'true';

        if (isVertical && isReadingDirection) return 'left';
        if (isVertical && !isReadingDirection) return 'right';
        if (isHorizontal && isReadingDirection) return 'top';
        if (isHorizontal && !isReadingDirection) return 'bottom';
    }

    function getTaskCheckingType(taskType) {
        var type = TaskCheckingType[taskType];
        if (!!!type) {
            type = TaskCheckingType['defaultValue'];
        }
        return type;
    }

	function asyncForEach(array, fn, done_callback) {
		array = array.slice(0);
		function processOne() {
			var item = array.pop();
			fn(item, function (result) {
				if (array.length > 0) {
					setTimeout(processOne, 0); // schedule immediately
				} else {
					done_callback(); // Done!
				}
			});
		}

		if (array.length > 0) {
			setTimeout(processOne, 0); // schedule immediately
		} else {
			done_callback(); // Done!
		}
	}

	;
})();
////////////////////////////////////////
// SRC End --> t2k/player/sequence/Sequence.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/BufferSequenceView.js
////////////////////////////////////////
(function() {

	var TEMPLATE =
		"<div id='{{id}}' class='sequence buffer'>\
			<div id='{{id}}_content' class='buffer_content sequence_content_scrollable'>\
				<div id='{{id}}_creative' class='buffer_creative'/>\
				<div id='{{id}}_text' class='buffer_text'/>\
				<div id='{{id}}_navigation' class='buffer_navigation'>\
					<div id='{{id}}_navigation_content' class='buffer_navigation_content'>\
						<div id='{{id}}_separator' class='buffer_separator'/>\
						<div id='{{id}}_button' class='buffer_button'/>\
					</div>\
				</div>\
			</div>\
		</div>";

	var defaultConfig = {
		/** The default layout used by the player's view */
		layout: 'vertical',
		/** The mustache template to render. */
		template: TEMPLATE
	};

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Class Declaration.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/**
	 * Class: t2k.player.sequence.SequenceView
	 * The sequence's view.
	 */
	t2k.player.sequence.BufferSequenceView = t2k.core.View.subClass({

		/**
		 * Constructor: ctor
		 * The constructor.
		 *
		 * Parameters:
		 *  config - {Object} The sequence's view configuration.
		 */
		ctor: function(config) {
			// Delegate.
			this._super(copy(config, defaultConfig));

			this.gs = new gridService(this);

		}, // End of ctor


		updateContentLayout: function( hasCreative, hasText ) {

			if( !hasText ) {
				this._text.css({'visibility': 'hidden'});
			}
			this.updateSeparator() ;
		},

		updateSeparator: function() {
			var btnWidth = this._button.width(),
				navWidth = ENV.behaviors.isIE ? this._navigation_content.width()-2 : this._navigation_content.width(),
				navHeight = this._navigation_content.height(),
				sepHeight = this._separator.outerHeight();

			this._separator.css({
				'padding-top': ( navHeight - sepHeight ) / 2 + 'px',
				'width': ( navWidth - btnWidth ) + 'px'
			});
		},

		init:function () {

		},

		removeFromDom:function(){
			this._view.removeClass('show');
			this._view.addClass('hidden');

		},

		addToDom:function(){
			this._view.removeClass('hidden');
			this._view.addClass('show');
		},

		getContentSize: function() {
			return {
				width: this._content.width(),
				height: 'auto'
			};
		}

	}); // End of t2k.player.sequence.SequenceView

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Private Functions.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();



////////////////////////////////////////
// SRC End --> t2k/player/sequence/BufferSequenceView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/BufferSequence.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.sequence.Sequence
     * A simple sequence, the most basic container of tasks.
     */
    t2k.player.sequence.BufferSequence = t2k.player.sequence.BaseSequence.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.sequence.BufferSequence',

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The sequence's configuration.
         */
        ctor: function(config) {
        	
        	this.useLayouter = true ;
        	
            // Delegate
            this._super(config);
            
            // notify done for compilation
            if (this.cfg.compileMode){
            	this.dispatchEvent( 'onCompileDone', config ) ;
            }
        },
        
        /**
         * Method: setEnabled
         * De/Activates the presenter. This method sets the view's active state.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
        	
            // Delegate
            this._super(flag);
            
        }, // End of setEnabled

        createView: function() {
        	
        	// reset view (in case it already exists)
            if ( !this.cfg.compileMode ) {
                Perf.select('#' + this.cfg.id, 1).remove();
            }
            
            // Create the view.
        	this.view = new t2k.player.sequence.BufferSequenceView( copy( {}, this.cfg ) ) ;
        },

        initView: function() {
            this.dispatchEvent('setPreloaderOff');
        	this._super() ;
        	
        },
        
        createInnerElements: function( calledFromCompile ) {
        	
        	var thi$ = this ;
        	
        	this.initButton() ;
        	
        	var creativeData = this.getGroupData( 'creative' ) ;
        	var textData = this.getGroupData( 'text' ) ;
        	
        	this.view.updateContentLayout( !!creativeData, !!textData ) ;
        	
        	if( !!creativeData ) {
        		this.creative = this.createGroup( creativeData, 'creative' ) ;
        	}
        	
        	if( !!textData ) {
        		this.text = this.createGroup( textData, 'text' ) ;
        	}
        	
        },
        
        getGroupData: function( groupName ) {

        	var groupData = null,
                groupWrapper = jQuery( this.cfg.data ).find( groupName )[0];

        	if( groupWrapper ) {
        		groupData = jQuery( groupWrapper ).find( 'group' )[0];
        	}
        	
        	return groupData;
        	
        },
        
        createGroup: function( groupData, groupName ) {
        	var groupObject ;
    	
    		CompilerUtils.groupData( groupData ) ;
    		
    		groupObject = new t2k.component.group.Group({
    			data: groupData,
    			parent: this.view[ '_'+ groupName ],
    			layout: this.cfg.layout,
    			useMax: true,
//        			maxSize: groupMaxSize,
    			useLayouter: this.useLayouter,
    			dontEnableBlowup: true,
    			onRendered: function() {
    			},
    			dummyMode : this.cfg.compileMode
    		});

        	return groupObject ;
        },
        
        initButton:function ( progressData ) {
            // Extract the buttons configuration.
            this.button = new t2k.component.buttons.Button(
                copy(	this.getButtonModes(),
                		{ 	style: 'progress_button',
                			parent: this.view._button,
                			onRendered: function() {}
                		} ));
            
            // Init the buttons events
            this.initButtonEvents();
            
            this.button.setVisible( true ) ;
            this.button.setEnabled( true ) ;
        },
        
        getButtonModes: function() {
        	
        	var mode = !this.cfg.isLast ? ( /*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment ? 'next' : 'progress' ) : 'done' ;
        	
        	if( /*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment ) {
        		mode = 'assessment_' + mode ;
        	}

        	var modes = { currMode: mode, states:{} } ;
        	modes.states[ mode ] = { title: LanguageUtil.strings.task.progress.labels[ mode ] } ;
        	
        	return modes ;
        	
        },

        initButtonEvents:function () {
        	
            var thi$ = this;

            var endOfBuffer = function () {
                thi$.progress() ;
            };

            this.button.setClickHandler( 'progress', endOfBuffer ) ;
            this.button.setClickHandler( 'done', endOfBuffer ) ;
            this.button.setClickHandler( 'assessment_next', endOfBuffer ) ;
            this.button.setClickHandler( 'assessment_done', endOfBuffer ) ;
        },

        /**
         * Method: progress
         * Instructs the sequence to move to the next sequence.
         */
        progress: function() {
        	
            this._super() ;
            
        }
        
    }); // End of t2k.player.sequence.Sequence

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    
    
})();



////////////////////////////////////////
// SRC End --> t2k/player/sequence/BufferSequence.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/HTMLSequenceView.js
////////////////////////////////////////
(function() {

	var TEMPLATE =
		"<div id='{{id}}' class='sequence html sequence_content_scrollable'>\
			<div id='{{id}}_content' class='html_content pdf_page'>\
				<img id='{{id}}_html_img' class='html_img'/>\
				<div id='{{id}}_html_layer' class='html_layer'/>\
			</div>\
			<div id='{{id}}_navigation' class='html_navigation'>\
				<div id='{{id}}_navigation_content' class='html_navigation_content'>\
					<div id='{{id}}_separator' class='html_separator'/>\
					<div id='{{id}}_button' class='html_button'/>\
				</div>\
			</div>\
		</div>";

	var defaultConfig = {
		/** The default layout used by the player's view */
		layout: 'vertical',
		/** The mustache template to render. */
		template: TEMPLATE
	};

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Class Declaration.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/**
	 * Class: t2k.player.sequence.SequenceView
	 * The sequence's view.
	 */
	t2k.player.sequence.HTMLSequenceView = t2k.core.View.subClass({

		/**
		 * Constructor: ctor
		 * The constructor.
		 *
		 * Parameters:
		 *  config - {Object} The sequence's view configuration.
		 */
		ctor: function(config) {
			// Delegate.
			this._super(copy(config, defaultConfig));

			this.gs = new gridService(this);

		}, // End of ctor


		updateContentLayout: function( hasCreative, hasText ) {
			this.updateSeparator() ;
		},

		updateSeparator: function() {
			var btnWidth = this._button.width(),
				navWidth = ENV.behaviors.isIE ? this._navigation_content.width()-2 : this._navigation_content.width(),
				navHeight = this._navigation_content.height(),
				sepHeight = this._separator.outerHeight();

//			this._separator.css({
//				'padding-top': ( navHeight - sepHeight ) / 2 + 'px',
//				'width': ( navWidth - btnWidth ) + 'px'
//			});
		},

		init:function () {

		},

		removeFromDom:function(){
			this._view.removeClass('show');
			this._view.addClass('hidden');

		},

		addToDom:function(){
			this._view.removeClass('hidden');
			this._view.addClass('show');
		},

		getContentSize: function() {
			return {
				width: this._content.width(),
				height: 'auto'
			};
		}

	}); // End of t2k.player.sequence.SequenceView

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Private Functions.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();



////////////////////////////////////////
// SRC End --> t2k/player/sequence/HTMLSequenceView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/HTMLSequence.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.sequence.Sequence
     * A simple sequence, the most basic container of tasks.
     */
    t2k.player.sequence.HTMLSequence = t2k.player.sequence.BaseSequence.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.sequence.HTMLSequence',

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The sequence's configuration.
         */
        ctor: function(config) {
        	
        	this.useLayouter = false ;
        	
        	var $html = $( config.data ).find( "htmlContent" ) ;
        	this.htmlContent = $html.html() ;
        	this.htmlBG = $html.attr( "bg" ) ;
        	
            // Delegate
            this._super(config);
            
            // notify done for compilation
            if (this.cfg.compileMode){
            	this.dispatchEvent( 'onCompileDone', config ) ;
            }
        },
        
        /**
         * Method: setEnabled
         * De/Activates the presenter. This method sets the view's active state.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
        	
            // Delegate
            this._super(flag);
            
        }, // End of setEnabled

        createView: function() {
        	
        	// reset view (in case it already exists)
            if ( !this.cfg.compileMode ) {
                Perf.select('#' + this.cfg.id, 1).remove();
            }
            
            // Create the view.
        	this.view = new t2k.player.sequence.HTMLSequenceView( copy( {}, this.cfg ) ) ;
        },

        initView: function() {
            this.dispatchEvent('setPreloaderOff');
        	this._super() ;
        	
        },
        
        createInnerElements: function( calledFromCompile ) {
        	
        	var thi$ = this ;
        	
        	this.view._html_img.attr( "src", AbsPath( this.htmlBG ) ) ;
        	this.view._html_layer.html( this.htmlContent ) ;
        	
        	this.initButton() ;
        	
        	this.view.updateContentLayout() ;
        	
        },
        
        initButton:function ( progressData ) {
            // Extract the buttons configuration.
            this.button = new t2k.component.buttons.Button(
                copy(	this.getButtonModes(),
                		{ 	style: 'progress_button',
                			parent: this.view._button,
                			onRendered: function() {}
                		} ));
            
            // Init the buttons events
            this.initButtonEvents();
            
            this.button.setVisible( true ) ;
            this.button.setEnabled( true ) ;
        },
        
        getButtonModes: function() {
        	
        	var mode = !this.cfg.isLast ? ( /*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment ? 'next' : 'progress' ) : 'done' ;
        	
        	if( /*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment ) {
        		mode = 'assessment_' + mode ;
        	}

        	var modes = { currMode: mode, states:{} } ;
        	modes.states[ mode ] = { title: LanguageUtil.strings.task.progress.labels[ mode ] } ;
        	
        	return modes ;
        	
        },

        initButtonEvents:function () {
        	
            var thi$ = this;

            var endOfHTML = function () {
                thi$.progress() ;
            };

            this.button.setClickHandler( 'progress', endOfHTML ) ;
            this.button.setClickHandler( 'done', endOfHTML ) ;
            this.button.setClickHandler( 'assessment_next', endOfHTML ) ;
            this.button.setClickHandler( 'assessment_done', endOfHTML ) ;
        },

        /**
         * Method: progress
         * Instructs the sequence to move to the next sequence.
         */
        progress: function() {
        	
            this._super() ;
            
        }
        
    }); // End of t2k.player.sequence.Sequence

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    
    
})();



////////////////////////////////////////
// SRC End --> t2k/player/sequence/HTMLSequence.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/URLSequenceView.js
////////////////////////////////////////
(function() {

	var TEMPLATE =
		"<div id='{{id}}' class='sequence html sequence_content_scrollable'>\
			<div id='{{id}}_content' class='html_content pdf_page'>\
				<iframe id='{{id}}_url_sequence_iframe' class='url_sequence_iframe' src='{{src}}'/>\
			</div>\
			<div id='{{id}}_navigation' class='html_navigation'>\
				<div id='{{id}}_navigation_content' class='html_navigation_content'>\
					<div id='{{id}}_separator' class='html_separator'/>\
					<div id='{{id}}_button' class='html_button'/>\
				</div>\
			</div>\
		</div>";

	var defaultConfig = {
		/** The default layout used by the player's view */
		layout: 'vertical',
		/** The mustache template to render. */
		template: TEMPLATE
	};

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Class Declaration.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/**
	 * Class: t2k.player.sequence.SequenceView
	 * The sequence's view.
	 */
	t2k.player.sequence.URLSequenceView = t2k.core.View.subClass({

		/**
		 * Constructor: ctor
		 * The constructor.
		 *
		 * Parameters:
		 *  config - {Object} The sequence's view configuration.
		 */
		ctor: function(config) {
			// Delegate.
			this._super(copy(config, defaultConfig));

			this.gs = new gridService(this);

		}, // End of ctor


		updateContentLayout: function( url ) {
			this.setIframeSrc(url, this.getContentSize());
		},

		setIframeSrc: function (url, size) {
			var p = this._view.find('.url_sequence_iframe').parent(),
				tmpIframe = this._view.find('.url_sequence_iframe'),
				thi$ = this;

			tmpIframe.remove();

			p.append("<iframe id='"+thi$.cfg.id
				+"_url_sequence_iframe' class='url_sequence_iframe' src='"
				+url+"' width='"+size.width+"' height='"+size.height+"' />");
		},

		getContentSize: function() {
			return {
				width: this.cfg.width,
				height: (this.cfg.height - 1.5 * this._navigation.context.clientHeight)
			};
		},

		init:function () {

		},

		removeFromDom:function(){
			this._view.removeClass('show');
			this._view.addClass('hidden');

		},

		addToDom:function(){
			this._view.removeClass('hidden');
			this._view.addClass('show');
		}

	}); // End of t2k.player.sequence.SequenceView

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Private Functions.
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();



////////////////////////////////////////
// SRC End --> t2k/player/sequence/URLSequenceView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/sequence/URLSequence.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//    add here...

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.sequence.Sequence
     * A simple sequence, the most basic container of tasks.
     */
    t2k.player.sequence.URLSequence = t2k.player.sequence.BaseSequence.subClass({

        /** The class' name (for debugging purpose). */
        name: 't2k.player.sequence.URLSequence',

        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The sequence's configuration.
         */
        ctor: function(config) {
        	
        	this.useLayouter = false ;
        	
        	/*var $html = $( config.data ).find( "htmlContent" ) ;
        	this.htmlContent = $html.html();*/
        	
            // Delegate
            this._super(config);
            
            // notify done for compilation
            if (this.cfg.compileMode){
            	this.dispatchEvent( 'onCompileDone', config ) ;
            }
        },
        
        /**
         * Method: setEnabled
         * De/Activates the presenter. This method sets the view's active state.
         *
         * Parameters:
         *  flag - {Boolean} True for active, false otherwise.
         */
        setEnabled: function(flag) {
        	
            // Delegate
            this._super(flag);
            
        }, // End of setEnabled

        createView: function() {
        	
        	// reset view (in case it already exists)
            if ( !this.cfg.compileMode ) {
                Perf.select('#' + this.cfg.id, 1).remove();
            }
            
            // Create the view.
        	this.view = new t2k.player.sequence.URLSequenceView( copy( {}, this.cfg ) ) ;
        },

        initView: function() {
            this.dispatchEvent('setPreloaderOff');
        	this._super();        	
        },
        
        createInnerElements: function( calledFromCompile ) {
        	
        	var thi$ = this,
                tmpUrl = thi$.cfg.data.children[0].src ? thi$.cfg.data.children[0].src : "http://www.timetoknow.com/404";
        	this.initButton();        	
        	this.view.updateContentLayout(tmpUrl);
        },
        
        initButton:function ( progressData ) {
            // Extract the buttons configuration.
            this.button = new t2k.component.buttons.Button(
                copy(	this.getButtonModes(),
                		{ 	style: 'progress_button',
                			parent: this.view._button,
                			onRendered: function() {}
                		} ));
            
            // Init the buttons events
            this.initButtonEvents();
            
            this.button.setVisible( true ) ;
            this.button.setEnabled( true ) ;
        },
        
        getButtonModes: function() {
        	
        	var mode = !this.cfg.isLast ? ( /*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment ? 'next' : 'progress' ) : 'done' ;
        	
        	if( /*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment ) {
        		mode = 'assessment_' + mode ;
        	}

        	var modes = { currMode: mode, states:{} } ;
        	modes.states[ mode ] = { title: LanguageUtil.strings.task.progress.labels[ mode ] } ;
        	
        	return modes ;
        	
        },

        initButtonEvents:function () {
        	
            var thi$ = this;

            var endOfHTML = function () {
                thi$.progress() ;
            };

            this.button.setClickHandler( 'progress', endOfHTML ) ;
            this.button.setClickHandler( 'done', endOfHTML ) ;
            this.button.setClickHandler( 'assessment_next', endOfHTML ) ;
            this.button.setClickHandler( 'assessment_done', endOfHTML ) ;
        },

        /**
         * Method: progress
         * Instructs the sequence to move to the next sequence.
         */
        progress: function() {
        	
            this._super() ;
            
        }
        
    }); // End of t2k.player.sequence.Sequence

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    
    
})();



////////////////////////////////////////
// SRC End --> t2k/player/sequence/URLSequence.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/SequencePlayer.js
////////////////////////////////////////
(function () {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/** Busy means player cannot process navigation events. */
	var isBusy = true;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	t2k.player.SequencePlayer = t2k.core.FlowPresenter.subClass({

		/** The class' name (for debugging purpose). */
		name:'t2k.player.SequencePlayer',

		/**
		 * Constructor: ctor
		 * The constructor. Responsible for setting the player's view and instantiating the sequences.
		 *
		 * Parameters:
		 *  config - {Object} The Player's configuration.
		 */
		ctor:function (config, callback) {
			
			var $seqData = $(config.data) ;
			
			config.sequencesConfig = [ {
				id: $seqData.attr('id') || "SEQQQ",
				type: $seqData.attr('type'),
				data: config.data
			} ] ;
			
			
			// Delegate
			this._super(config);
			
			this.cfg.activeChild = 0 ;
			
			this.config = config;
			this.ctorCallback = callback;
			this.aiPaused = false;
			this.wasPlayingBeforeSuspend = false;
			this.staticData;

			// Closure refs.
			var thi$ = this, cfg = this.cfg
			
			
//			this.initAssessmentModes();

			// set external media player by configurtion
			if (this.cfg.initData.useExternalMediaPlayer){

				// set behavior
				ENV.behaviors.useExternalMediaPlayer = true;

				// add phonegap servuce
				EXT_SERVICES.add('playMovie', function(src){
					ENV.host.playMovie( src );
				});

				EXT_SERVICES.add('playAudio', function( src, stopHandler, context ){
					ENV.host.playAudio( src, stopHandler, context );
				});

				EXT_SERVICES.add('stopAudio', function(){
					ENV.host.stopAudio();
				});

				// switch mediaPlayer to external MediaPlayer
				componentFactory.setClassNameByCompName('mediaplayer', 't2k.component.mediaPlayer.ExternalMediaPlayer');
			}

			
			// set ENV.REM
			ENV.REM = jQuery('html').css('font-size').px2int();

			//set ENV.viewMode
			ViewModesUtil.setMode(cfg.viewMode, cfg.userInfo.role);

			this.setVolume( parseFloat( config.volume ) ) ;

			if (/*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment) {
				this.assessmentManager = new t2k.util.managers.AssessmentManager();
			}

//			this.pathToDataLib = getPathToDataLib(config.rootXml.baseURI ||
//				config.rootXml.documentElement.getAttribute('baseURI'));

			this.tasksCount = [];
			this.firstChildIndexArray = [];
			extractData(this.cfg.sequencesConfig, this.tasksCount, this.firstChildIndexArray);
//			this.sequenceCount = this.cfg.sequencesConfig.length;
			this.sequenceCount = 1;
			this.compiledCfg = [];

			// Create the view.
			this.view = new t2k.player.PlayerView({ width:cfg.width, height:cfg.height, scale:cfg.scale });

			//create an array that manages the sequences
			this.createdSequences = [];
			this.sequencesstateSet = [];
			this.sequencesDetails = [];
//			for (var i = 0; i < this.sequenceCount; i++) {
//				this.sequencesDetails[i] = {
			this.sequencesDetails.push( {
				sequenceObject:null,
				stateSet:false
			} ) ;
//			}
			// this is to hold the state that was set last
			this.lastSetState;


			// Create the balloon.
			t2k.util.balloon = new t2k.component.balloon.Balloon({ parent:this.view, onRendered:function () {
			} });

			var sendStaticData = config.initData.isStaticDataNeeded;
			if (sendStaticData)
				var sequencesStaticData = getMissionStaticData(this.cfg);

			if (ENV.viewMode.isAssessment && this.assessmentManager) {
				this.assessmentManager.parseAssessmentData(this.cfg);
				if (sendStaticData) {
					sequencesStaticData = this.updateRubrics(sequencesStaticData);
				}

				//for testing only
				//this.assStateTest = this.assessmentManager.getAssessmentState();

			}

			// Create the sequences. For each sequence provide its configuration.
			//create only the first sequence

			var index = 0;
			
			this.view.updateContentSize();

			this.isLoadingSequence = false;

			if (this.cfg.compileOnly) {
				this.compileOnly(index);
				return;
			}

			var compiledSeq = this.createSequence(index, true, false);


			//now waiting For finishing compilation
			//for testing only dtp call
			//this.setAssessmentStateInput(this.assStateTest);

			// If a callback was provided then call it, providing this (the player).
			// send static data to callback as well
			 this.staticData = sendStaticData ? this.getStaticData(sequencesStaticData) : null;
			//if (callback) callback(this, staticData);
			/*setTimeout(function () {
				if (callback) callback(thi$, staticData);
			}, 1000);*/

			this.disableBrowserBack();
			
			ENV.Modal = new t2k.component.modal.Modal() ;

			SOUND.create();

			var thi$ = this ;
			
			this.debugInfoClosed = true ;
			
			function toggleDebugInfo() {
				
				if( thi$.debugInfoClosed ) {
					
					var versionData = ENV.debug.version ;
					var debugString = "" ;
					
					debugString += "build info:" ;
					debugString += "</br>" ;
					debugString += "<ul>" ;
					debugString += "<li>" ;
					debugString += "version: " + versionData.number ;
					debugString += "</li>" ;
					debugString += "<li>" ;
					debugString += "time: " + versionData.time ;
					debugString += "</li>" ;
//					debugString += "<li>" ;
//					debugString += "revision: " + versionData.revision ;
//					debugString += "</li>" ;
					debugString += "<li>" ;
					debugString += "user: " + versionData.userName ;
					debugString += "</li>" ;
					debugString += "<li>" ;
					debugString += "host: " + versionData.hostName ;
					debugString += "</li>" ;
					debugString += "</ul>" ;
					
					debugString += "</br>" ;
					
					debugString += "runtime info:" ;
					debugString += "</br>" ;
					debugString += "<ul>" ;
					debugString += "<li>" ;
					debugString += "size: " + thi$.cfg.width + "x" + thi$.cfg.height ;
					debugString += "</li>" ;
					debugString += "</ul>" ;
					
					debugString += "</br>" ;
					
					var jiraDate, x, y, z ;
					x = new Date() ;
					y = x.toString() ;
					z = y.split(" ") ;
					jiraDate = z[2] + "/" + z[1] + "/" + z[3].substring( 2, 4 ) ;
					
					debugString += "<a href='http://jira/secure/CreateIssueDetails!init.jspa?" +
					
								"pid=10670&" +
								"issuetype=1&" +
								"components=10384&" +
								"priority=3&" +
								"labels=created_from_DL&" +
								"customfield_13478=" + versionData.number + "&" +
								"customfield_10027=" + jiraDate + "&" +
								"customfield_10522=16314&" +
								"customfield_10652=23669&" +
								"customfield_12070=57821&" +
								"customfield_10810=58431" +
								
								"' target='_blank'>report bug</a>" ;
					
					$(this).addClass( "show" ) ;
					
					$(this).html( debugString ) ;
					
					$(this).pep({constrainTo:'parent', debug: false});
					
				} else {
					
					$(this).removeClass( "show" ) ;
					
					$(this).html( "" ) ;
					
		            $.pep.unbind( $(this) );
				}
				
				thi$.debugInfoClosed = !thi$.debugInfoClosed ;
			} ;
			
			if( !ENV.behaviors.touch ) {
				$( this.view._debug ).dblclick( toggleDebugInfo ) ;
			} else {
//				$( this.view._debug ).taphold( toggleDebugInfo ) ;
				$( this.view._debug ).click( toggleDebugInfo ) ;
			}
			
			// set swipe events - only on tablets
			if (ENV.behaviors.setSwipeEvents){

				$(this.view._view).swipeleft(function () {
					if (!dndManager.isInDragMode()) {
						ENV.host.onSwipe("left");
					}
				});

				$(this.view._view).swiperight(function () {
					if (!dndManager.isInDragMode()) {
						ENV.host.onSwipe("right");
					}
				});

			}

		}, // End of ctor
		
		destroy: function() {

			var body = document.getElementsByTagName('body')[0];
			var all_body_nodes = body.getElementsByTagName('*'), child, l = all_body_nodes.length;

			//iterate and delete all body nodes
			for (var i = l - 1; i >= 0; i--) {
				child = all_body_nodes[i];
				child && child.parentNode && child.parentNode.removeChild(child);
			}

			jQuery(body).unbind();
			jQuery(document).unbind();

			body = null;
			all_body_nodes = null;

			this.dispose();

		},

		// compileOnly:function (i) {

		// 	var thi$ = this;

		//	 if (i != this.sequenceCount) {
		//		 this.createSequence(i, true, false);
		//		 return

		//	 } else {
		//		 //if we have finished compiling
		//		 this.compilationResult = {};
		//		 this.compilationResult['root.xml'] = jQuery.xmlToString(this.cfg.rootXml);

		//	 }


		//	 this.compilationResult['root.xml'] = jQuery.xmlToString(this.cfg.rootXml);

		//	 this.compiledCfg.forEach(function (seq) {
		//		 thi$.compilationResult[seq.configPath] = jQuery.xmlToString(seq.data);
		//	 });

		//	 this.callCtorCallback() ;
		// },
		
		callCtorCallback: function() {
			
			var thi$ = this ;
			
			if ( this.ctorCallback ) {
				
				// setTimeout( function() {
					
					thi$.ctorCallback( thi$, thi$.staticData ) ;
					
				// }, 0 ) ;
				
			}
			
		},

		/**
		 * Query and set busy on self.
		 * Busy means progress bar should not process clicks
		 * (e.g. while sequence is being loaded / rendered).
		 */
		busy:function (arg) {
			if (typeof arg == 'boolean') {
				isBusy = arg;
//				this.progressBar.busy(isBusy);
			}
			return isBusy;
		},


		firstScreenLoadedAndViewed:function(){
			this.firstScreenLoaded = true;

			this.callCtorCallback() ;
		},


		/**
		 * disableBrowserBack function
		 */
		disableBrowserBack:function () {
			jQuery(document).keydown(function (e) {
				if (e.keyCode == '8' && e.target.tagName.toUpperCase() != "INPUT" && e.target.tagName.toUpperCase() != "TEXTAREA") {
					e.preventDefault();
				} // keyCode(8) = Backspace
			});
		},

		/* initAssessmentModes: function() {
		 AssessmentENV.setModes(this.cfg.isAssessmentMode == 'true', this.cfg.assessmentMode);
		 },*/

		createAfterCompile:function (index, fromNavigate) {
			var thi$ = this;
			var seq = this.createSequence(index, false, fromNavigate);

			thi$.add(seq);
			thi$.sequencesDetails[index].sequenceObject = seq;

			if (!fromNavigate) {

				// Sets the current state as provided as part of the configuration. If the configuration doesn't contain
				// state then the player defaults its state to the first task of the first sequence.
				//this.setState(this.cfg.state);
			} else {
				//add the new sequence
				seq.view.addToDom();
			}
			this.activateSequence(index);

			this.PlayerMute(this.cfg.initData.volume === 0);

			return seq
		},

		PlayerMute: function (mute){

			if (mute)
			{
				$('audio').attr('muted',true);
				$('video').attr('muted',true);
			}
		},

		activateSequence:function (index) {

			this.cfg.activeChild = index;
			var currSequence = this.sequencesDetails[index].sequenceObject;


			//set the new sequence state
			if (!this.sequencesDetails[index].stateSet) {
				this.setSequenceState(currSequence, index);
			}

			if (currSequence) {
				currSequence.setEnabled(true);
				// send screen swapped event
//				ENV.host.onSequenceSwapped( index ) ;
				
				if( ENV.viewMode.isAssessment && this.assessmentManager ) {
					this.assessmentManager.updateSequenceRubric( index ) ;
				}
				
			} else {
				// 2d0 ToDo Send Activity Item Done to Host
				// Note: This code should never be called. progress() should do that...
				ENV.host.onDone();
			}

			return !!currSequence;
		},

		getSequenceClass:function (seqType, compileMode) {

			var seqClass;

			switch (seqType) {

				case 'buffer' :
					seqClass = t2k.player.sequence.BufferSequence;
					break;

				case 'url_sequence' :
					seqClass = t2k.player.sequence.URLSequence;
					break;

				case 'html' :
					seqClass = t2k.player.sequence.HTMLSequence;
					break;

				default :
//					if (compileMode) {
//						seqClass = t2k.compilePlay.SequenceCompilePlay;
//					} else {
						seqClass = t2k.player.sequence.Sequence;
//					}
					break;
			}

			return seqClass;
		},
		
		fireState: function( success, error, sendLogs ) {
			var currSequence = this.sequencesDetails[ this.cfg.activeChild ].sequenceObject;
			currSequence.fireState( success, error, sendLogs ) ;
		},
		
		getState: function( callback ) {
			var currSequence = this.sequencesDetails[ this.cfg.activeChild ].sequenceObject;
			currSequence.getStateWithCallback( callback ) ;
		},

		// called by host or by constructor.
		// if called by host - performs state injection
		// sequenceNumber = active sequence override (in case of state injection)
		setState:function (xmlStr, callback) {
			this._super(xmlStr);
			var sequenceIndex = 0 ;

			this.sequencesDetails[0].stateSet = false;

			// Handle the state or set the default.
			if (!!xmlStr) {

				this.lastSetState = xmlStr;
				
				var seqState = $(xmlStr)[0] ;
				
				if (this.sequencesDetails[0].sequenceObject && !this.sequencesDetails[0].stateSet) {
					this.sequencesDetails[0].sequenceObject.setState(seqState);
					this.sequencesDetails[0].stateSet = true;
				}


			} else {
				// Handle the sequence.
				this.cfg.activeChild = 0;
				if (this.sequencesDetails[0].sequenceObject && !this.sequencesDetails[0].stateSet) {
					this.sequencesDetails[0].sequenceObject.setState(null);

				}

				if (!this.sequencesDetails[0].sequenceObject.isEnabled()) {
					this.sequencesDetails[0].sequenceObject.setEnabled(true);
				}

				this.navigateToSequence( 0 ) ;
			}


			if( callback ) {
				callback() ;
			}
		},


		setSequenceState:function (sequence, index) {
			if (this.lastSetState) {
				var player = jQuery(this.lastSetState);
				var sequencesWrapper = jQuery(player).find('sequences');
				var sequenceState, sequences = sequencesWrapper.children();
				sequenceState = jQuery(sequences[index]);
				if (!this.sequencesDetails[index].stateSet) {
					sequence.setState(sequenceState);
					this.sequencesDetails[index].stateSet = true;
				}
			} else {
				sequence.setState(null);
				this.sequencesDetails[index].stateSet = true;
			}
		},


		/*
			this function is to reset to initial state( i.e no state applied) of all levels of hierarchy, this will be called before setState
		 */
		resetState:function(){
			for (var i = 0; i < this.sequencesDetails.length; i++) {
				if (this.sequencesDetails[i].sequenceObject) {
					this.sequencesDetails[i].sequenceObject.resetState();

				}

			}
		},


		/**
		 * Method: progress
		 * Instructs the sequence to move to the next task.
		 */
		navigateToSequence:function (index) {

			// if (this.busy()) return;
			// else this.busy(true);

			var thi$ = this;
			var cfg = this.cfg;

			// dump existing sequence
			// this.sequencesDetails[this.cfg.activeChild].sequenceObject.setEnabled(false);
			// this.sequencesDetails[this.cfg.activeChild].sequenceObject.view.removeFromDom();

//			this.progressBar.selectItem(index);

			//if wanted sequence is already created
			if (this.sequencesDetails[index].sequenceObject) {

				// this.busy(false);

				this.cfg.activeChild = index;
				var currSequence = this.sequencesDetails[index].sequenceObject;

				if (currSequence) {


					if (index === this.cfg.activeChild) {
						currSequence.view.addToDom();
						currSequence.setEnabled(true);

						// send screen swapped event
//						ENV.host.onSequenceSwapped( index ) ;
						if( ENV.viewMode.isAssessment && this.assessmentManager ) {
							this.assessmentManager.updateSequenceRubric( index ) ;
						}
					}

				} else {
					// 2d0 ToDo Send Activity Item Done to Host
					// Note: This code should never be called. progress() should do that...
					ENV.host.onDone();
				}
			} else {

//				if (thi$.cfg.playOnly) {
//					var compiledSeq = thi$.createAfterCompile(index, true);
//				} else {
					var compiledSeq = thi$.createSequence(index, true, true);
//				}


			}
		},

		setPreloader:function (flag) {
			var thi$ = this;

			if (this.isLoadingSequence != flag) {
				/* Callback is used to unset isBusy on ProgressBar, so it can process clicks. */
				this.view.setPreloader(flag, flag || function () {
					thi$.busy(false);
				});
				this.isLoadingSequence = flag;
			}
		},

		createSequence:function (index, compileMode, fromNavigate) {

			var thi$ = this;
			thi$.setPreloader(true);

			var cfg = this.cfg;
			var navHeight = this.view._navigation.outerHeight();
			var seqHeight = cfg.height - navHeight;
			var sequenceCfg;

			if (!compileMode) {
				if (this.cfg.playOnly) {
					//this is when we load data that is already a result of pre compilation
					sequenceCfg = jQuery(cfg.sequencesConfig)[index];
				} else {
					//this is when complaying
					sequenceCfg = this.compiledCfg[index];
				}

				if (/*AssessmentENV.isAssessmentModeReview*/ ENV.viewMode.teacherIndication && !!this.assessmentTeacherIndicationDataArray) {
					for (var i = 0; i < this.assessmentTeacherIndicationDataArray.length; i++) {
						if (this.assessmentTeacherIndicationDataArray[i].screenId == index) {
							var assessTeacherIndication = this.assessmentTeacherIndicationDataArray[i].indicated;
						}
					}
				}
			} else {
				sequenceCfg = jQuery(cfg.sequencesConfig)[index];
			}

			var seqClass = this.getSequenceClass(sequenceCfg.type, compileMode);

			var isLast = this.cfg.isLast ; //index == ( this.sequenceCount - 1 );

			var seq = new seqClass(override(
				sequenceCfg, {
					index:index,
					isLast:isLast,
					firstTaskIndex:this.cfg.firstTaskNumber || 1,//ENV.taskIndexPerSeq ? 1 : thi$.firstChildIndexArray[index],
					focusOnTask: this.cfg.focusOnTask,
					taskIndexType:ENV.taskIndexType,
					parent:thi$.view,
					width:cfg.width * 1,
					height:seqHeight * 1,
					dataLibPath:thi$.pathToDataLib,
					compileMode:compileMode,
					teacherIndication:assessTeacherIndication,
					direction: ENV.interfaceDirection,
					overrideOptions: this.cfg.overrideOptions,
					events:{
						/*onReady:function (sequence) {

						 *//*if (thi$.cfg.playOnly) {
						 thi$.add(this);
						 thi$.sequencesDetails[ index ].sequenceObject = this;
						 thi$.activateSequence(index);
						 thi$.setPreloader(false);
						 }*//*
						 thi$.setPreloader(false)


						 },*/

						setPreloaderOff:function () {
							thi$.setPreloader(false);

							if( index == 0 ){
								thi$.firstScreenLoadedAndViewed();
							}
						},

						onAssessmentTaskCreated:function (responseObj) {
							if (/*AssessmentENV.isAssessmentMode*/ ENV.viewMode.isAssessment && thi$.assessmentManager) {
								thi$.assessmentManager.addRealTaskInstanceToArray(index, responseObj.taskIndex, responseObj.task);
							}
						},
						onNextSequence:function () {
//							thi$.progressBar.setDone(thi$.cfg.activeChild);
							thi$.progress();
//							thi$.progressBar.setCurrentSequence(thi$.cfg.activeChild);
						},
						onCompileDone:function (compiledCfg) {

							var killPreLoader = false;

							if (compileMode) {
								thi$.compiledCfg[index] = compiledCfg;

								if (thi$.cfg.compileOnly && ((index + 1) <= thi$.sequenceCount)) {
									thi$.compileOnly(index + 1);

									//in case of Compile only - if we got to the last sequence now - kill preloader and navigate to the first sequence
									if ((index + 1) == thi$.sequenceCount) {
										thi$.createAfterCompile(0, fromNavigate);
										killPreLoader = true;
									}

								} else {
									//in case of ComPlay
									thi$.createAfterCompile(index, fromNavigate);
									killPreLoader = true;
								}

								if (killPreLoader) {
									thi$.setPreloader(false);
								}
							}

						},
//						seqAssessmentCompletedMode:function (flag) {
//							if (/*AssessmentENV.isAssessmentModeTest*/ ENV.viewMode.seqeunceCompletionIndication && thi$.assessmentManager) {
//								thi$.setAssessmentNavigatorMarks('completed', index, flag);
//							}
//						},
//
//						seqAssessmentFlagMode:function (bool) {
//							if (/*AssessmentENV.isAssessmentModeTest*/ ENV.viewMode.studentFlagTask && thi$.assessmentManager) {
//								thi$.setAssessmentNavigatorMarks('flag', index, bool);
//							}
//						}
					}
				}
			));

			this.add(seq);
			this.sequencesDetails[0].sequenceObject = seq;

			return seq;
		},

		progress:function () {
			var nextSequence = this.cfg.activeChild + 1;

			if (nextSequence >= this.sequenceCount || nextSequence < 0) {
				// send 'done' event to host
				ENV.host.onDone();
			} else {
				this.navigateToSequence(nextSequence);
//				this.progressBar.progress();
			}

			/* if (this.children[ nextSequence ]) {
			 this.navigateToSequence(nextSequence);
//			 this.progressBar.progress();
			 } else if (nextSequence >= this.children.length || nextSequence < 0) {
			 // send 'done' event to host
			 ENV.host.onDone();
			 }*/
		},

		getStaticData:function (sequencesStaticData) {
			return	 '<LoData>' +
				'<loId>' + this.cfg.initData.loId + '</loId>' +
				'<atomsList>' + sequencesStaticData + '</atomsList>' +
				'</LoData>';
		},

		showGrid:function (type, show) {
			this.children[this.cfg.activeChild].showGrid(type, show);
		},

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// External API calls
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// management functions

		suspend:function () {

			// stop all sounds if external services exists
			EXT_SERVICES.get('stopAudio')();
			
			// just pause all running media, if relevant
			//check if it was playing before pause
			if(mediaManager.currentItem && !mediaManager.currentItem.paused){
				this.wasPlayingBeforeSuspend = true;
				mediaManager.pause();
			}else{
				this.wasPlayingBeforeSuspend = false;
			}

		},

		resume:function () {
			// resume running media
			//if suspend caused media player to pause itself make it play again
			if(this.wasPlayingBeforeSuspend){
				mediaManager.play();
			}

		},

		pauseAi:function () {
			if (this.view) {

				if(!this.aiPaused) {
					mediaManager.pause();
					this.view.pauseAi(true);
					this.aiPaused = true;
				}

			}
		},

		resumeAi:function () {
			if (this.view) {
				if (this.aiPaused) {
					mediaManager.play()
					this.view.resumeAi(false);
					this.aiPaused = false;
				}

			}
		},

		setVolume:function (volume) {
			// set volume (media manager)
			mediaManager.setVolume(volume);
		},

		getVolume:function () {
			// get volume (media manager)
			mediaManager.getVolume();
		},

		terminate:function () {
			// perform reset() to container?
		},

		goToSequence:function (index) {
			if (!!this.sequencesDetails[ index ]) {
				this.navigateToSequence(index);
			}
		},

		// container injection
		endActivity:function () {
			// this is for 'container' injection - clear resources
		},

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// assessment functions:

		setAssessmentStateInput:function (atomsList) {
			var thi$ = this;
			var assessmentState = Perf.create("assessmentState");

			for (var i = 0; i < atomsList.length; i++) {
				var indication = false;
				var atom = atomsList[i];


				//if the task is not ped task and has valid rubric id and no score then we set indication to be true
				if (atom.rubricId != "null" && atom.rubricId && atom.rubricId != '' != null) {
					if (atom.score == "null" || atom.score == null || atom.manCheck) {
						indication = true;
					}
					var screenId = thi$.getScreenByRubric(atom.rubricId);
					var screen = Perf.create("screen");
					screen.attr('screenId', screenId);
					screen.attr('indicated', indication);
					assessmentState.append(screen);
				}

			}


			thi$.setTeacherNavigatorIndication(assessmentState);
		},


		getAnswersViewMode:function () {

		},

		setTeacherNavigatorIndication:function (indicationDataXml) {
//			if (this.progressBar) {
//				var thi$ = this;
//				var indicationData = [];
//
//				var screens = indicationDataXml.find('screen');
//				jQuery(screens).each(function (index, screen) {
//					var indicated = jQuery(screen).attr('indicated');
//					var screenId = jQuery(screen).attr('screenId');
//
//					if (indicated == 'true') {
//						indicationData.push({indicated:true, screenId:screenId });
//						if (!!thi$.sequencesDetails && thi$.sequencesDetails[parseInt(screenId)].sequenceObject) {
//							thi$.sequencesDetails[parseInt(screenId)].sequenceObject.setAssessmentTeacherIndication(true);
//						}
//						//thi$.setIndicated(screenId, true);
//					} else {
//						indicationData.push({indicated:false, screenId:screenId });
//						if (!!thi$.sequencesDetails && thi$.sequencesDetails[parseInt(screenId)].sequenceObject) {
//							thi$.sequencesDetails[parseInt(screenId)].sequenceObject.setAssessmentTeacherIndication(false);
//						}
//						//thi$.setIndicated(screenId, false);
//					}
//				});
//				this.assessmentTeacherIndicationDataArray = indicationData;
//				this.progressBar.setNavigatorIndication(indicationData);
//			}
		},

		setAssessmentNavigatorMarks:function (markType, seqId, flag) {
//			if (this.progressBar) {
//				this.progressBar.setAssessmentNavigatorMarks(markType, seqId, flag);
//			}
		},

		/*
		 * TODO change name according to api to sequence
		 * */
		getScreenByRubric:function (rubricId) {
			var screenId = this.assessmentManager.getSequenceByRubricId(rubricId);
			if (screenId != null) {
				return screenId
			} else {
				return 0; //like in Tre			}
			}
		},

		/*
		 update the static data with the rubrics id if needed
		 */
		updateRubrics:function (staticDataString) {
			var thi$ = this;
			var jdata = jQuery(staticDataString);
			var returnedString = '';
			jQuery(jdata).each(function (index, taskStaticData) {
				//get the seq index of the task
				var taskId = jQuery(taskStaticData).find('atomid').text();
				var indexText = jQuery(taskStaticData).find('atomindex').text();
				var tmpArr = indexText.split('.');
				var seqIndex = parseInt(tmpArr[0]) - 1;
				var taskIndex = parseInt(tmpArr[1]) - 1; //the -1 s to get the real index

				var rubricIdValue = thi$.assessmentManager.getRubricFromIndex(seqIndex, taskIndex, taskId);
				//TODO decide if rubricPath of pedTak is '' or a real path
				jQuery(jdata[taskIndex]).find('rubricid').text(rubricIdValue);
				/*} else {
				 jQuery(jdata[taskIndex]).find('rubricid').text('');
				 }*/
				returnedString += jQuery.xmlToString(jdata.get(taskIndex));
			});
			return returnedString;


		},


		/*
		 * this function in assessmentMode suppose to add the rubrics data to the static data after parsing the
		 * */
		/*
		 updateRubricsInStaticDate:function(){

		 },*/
		/*
		 returns an object
		 */
		fetchResult:function () {
			if (/*AssessmentENV.isAssessmentMode*/ENV.viewMode.isAssessment && !!this.assessmentManager) {
				return this.assessmentManager.fetchResult();
			} else {
				//need to have an error handler here
				return
			}
		},

		cleanView:function () {
			this.view.cleanView();
		},

		focusOnTask: function( taskCid, externalCall, success ) {
			//get active sequence object
			var activeSequence = this.children[this.cfg.activeChild];
			activeSequence.progressToTask( taskCid, externalCall, success ) ;
		},
		
		setTasksScores: function( tasksScores ) {
			var activeSequence = this.children[this.cfg.activeChild];
			activeSequence.setTasksScores( tasksScores ) ;
		}


	}); // End of t2k.player.Player

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	/**
	 * TODO
	 */
	function extractTaskCount(cfg) {

		var result = [];
		jQuery(cfg).each(function (index, sequenceCfg) {
			var tasksConfig = jQuery(sequenceCfg.data).find("task");
			var length = jQuery(tasksConfig).length;
			result[index] = length
		});

		return result;
	}

	/**
	 * TODO
	 */
	function extractData(cfg, tasksCount, firstChildIndexArray) {

		var result = [];
		jQuery(cfg).each(function (index, sequenceCfg) {
			var tasksConfig = jQuery(sequenceCfg.data).find("task");
			var length = jQuery(tasksConfig).length;
			var firstChildIndex
			if (index == 0) {
				firstChildIndex = 1;
			} else {

				firstChildIndex = firstChildIndexArray[index - 1] + tasksCount[index - 1];
			}

			firstChildIndexArray[index] = firstChildIndex;
			tasksCount[index] = length;

		});

	}

	function getAttempts(taskCfg) {
		var jXml = jQuery(taskCfg);
		var attemptsXml = jXml.children('attempts');

		if (attemptsXml.length == 0) {
			var defaultProgressData = ENV.defaultTaskProgress;
			attemptsXml = defaultProgressData.children('attempts');

		}
		var parseRes = parseInt(attemptsXml.text());
		var attempts = (!!!parseRes) ? 0 : parseRes;

		return attempts;

	}

	function getTaskCheckingType(taskType) {


		var type = TaskCheckingType[taskType];
		if (!!!type) {
			type = TaskCheckingType['defaultValue'];
		}

		return type;
	}

	function extractFirstTaskIndexes(cfg) {
		var result = [];
		jQuery(cfg).each(function (index, sequenceCfg) {

			var tasksConfig = jQuery(sequenceCfg.data).find("task");
			var length = jQuery(tasksConfig).length;
			var firstChildIndex = length
			if (index != 0) {
				firstChildIndex += result[index - 1];
			}
				
			result[index] = firstChildIndex;


		});
	}
})();
////////////////////////////////////////
// SRC End --> t2k/player/SequencePlayer.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/player/PlayerView.js
////////////////////////////////////////
(function() {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Singleton, Private Members.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Private: TEMPLATE
     * The Mustache template used by the player's view.
     * 2d0 - Implement Roman's way of managing templates.
     */
    var TEMPLATE =
        "<div id='{{id}}' class='player {{direction}} {{locale}}' style='transform: scale({{scale}}); transform-origin: 0 0; -webkit-transform: scale({{scale}}); -webkit-transform-origin: 0 0; -ms-transform: scale({{scale}}); -ms-transform-origin: 0 0; '>\
            <div id='{{id}}_navigation' class='player_navigation'></div>\
            <div id='{{id}}_pause' class='player_pause disabled'>\
                <div id='{{id}}_pauseContent' class='pause_content'/>\
            </div>\
	    	<div id='{{id}}_loader' class='loader'>\
	    		<div id='{{id}}_loaderAnimation' class='loaderAnimation'/>\
	    	</div>\
            <div id='{{id}}_content' class='player_content'>\
            </div>\
    		<div id='{{id}}_debug' class='player_debug'></div>\
        </div>";

    /**
     * Private: defaultConfigsdf
     * Hold sensible defaults for the player's view to use.
     */
    var defaultConfig = {
        /** The player's width. */
        width: 1024,
        /** The player's height */
        height: 768,
        /** The default layout used by the player's view */
        layout: 'horizontal',
        /** The mustache template to render. */
        template: TEMPLATE
    }; // End of defaultConfig.
    
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class Declaration.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Class: t2k.player.PlayerView
     * The content player's view.
     */
    t2k.player.PlayerView = t2k.core.View.subClass({
        
        /**
         * Constructor: ctor
         * The constructor.
         *
         * Parameters:
         *  config - {Object} The Player's view configuration.
         */
        ctor: function(config) {
            // Apply the direction.
            defaultConfig.direction = ENV.interfaceDirection || 'ltr';
            defaultConfig.locale = ENV.locale || 'en_US';
            // Delegate.
            this._super(copy(config, defaultConfig));
            ENV.playerContent = this._content;
            
            // Handle the player.
            //this._view.disableSelection();
        }, // End of ctor
        
        updateContentSize: function() {
//        	var navHeight = this._navigation.outerHeight() ;
        	var navHeight = 0 ;
        	var cw = this.cfg.width * 1 ;
        	var ch = this.cfg.height * 1 - navHeight ;
            var chPause = this.cfg.height * 1
        	this._content.outerWidth( cw ) ;
        	this._content.outerHeight( ch ) ;
        	
        	// loader size and location
        	this._loader.outerWidth( cw ) ;
        	this._loader.outerHeight( ch ) ;
        	this._loader.css( 'top', navHeight + 'px' ) ;

            //pause screen size

            this._pause.outerWidth( cw ) ;
            this._pause.outerHeight( chPause ) ;
            this._pause.css("left",0 + 'px');
            this._pause.css("top",0 + 'px');
            var pauseWidth = 610;
            var pauseHeight = 320;
            var pauseContentWantedTop = (chPause/2 -pauseHeight/2 ).toString();
            var PauseContentWantedLeft = (cw/2 - pauseWidth/2).toString();
            this._pauseContent.css("position","absolute");
            this._pauseContent.css("top",pauseContentWantedTop + 'px');
            this._pauseContent.css("left",PauseContentWantedLeft + 'px');


        	
        	//locate according to the width of the loader gif
        	var loaderWidth = 220;
			var wantedTop = (ch/2).toString();
			var wantedLeft = (cw/2 - loaderWidth/2).toString();
			this._loaderAnimation.css("position","absolute");
			this._loaderAnimation.css("top",wantedTop + 'px');
			this._loaderAnimation.css("left",wantedLeft + 'px');
        },

        updatePauseScreenSize:function(){

        },



        pauseAi:function(flag){
            this._pause.removeClass('disabled');
            this._pause.addClass('enabled');
        },

        resumeAi:function(flag){
            this._pause.removeClass('enabled');
            this._pause.addClass('disabled');
        },

	    setPreloader: function( flag, animation_done_callback ){
	    	
	    	var thi$ = this ;
	    	
	       if( flag ) {
	    	   
	    	   this.loaderStart = (new Date).getTime() ;
	    	   thi$._loader.show();
	    	   
	    	   if( ENV.behaviors.animate ) {
	    		   this._loader.animate( { opacity: 1 }, 0 ) ;
	    	   } else {
	    		   this._loader.css( 'opacity', 1 ) ;
	    	   }
	    	   
	       }else{
	    	   
	    	   var loaderEnd = (new Date).getTime() ;
	    	   var loaderUpTime = loaderEnd - this.loaderStart ;
	    	   var animDuration = loaderUpTime > 100 ? Math.min( 750, loaderUpTime ) : 0 ;
	    	   
	    	   if( !ENV.behaviors.animate ) {
	    		   animDuration = 0 ;
	    	   }
	    	   
	    	   this._loader.animate( { opacity: 0 }, animDuration, function() {
	    		   
	    		   thi$._loader && thi$._loader.hide();

                   /* Callback is used to unset isBusy on ProgressBar, so it can process clicks. */
                   if (jQuery.isFunction(animation_done_callback))
                       animation_done_callback();

	    	   }) ;
	    	   
	       }
	  }

    }); // End of t2k.player.PlayerView

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

})();



////////////////////////////////////////
// SRC End --> t2k/player/PlayerView.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/compilePlay/SequenceCompilePlay.js
////////////////////////////////////////
( function() {

    t2k.compilePlay.SequenceCompilePlay = t2k.player.sequence.Sequence.subClass({

        compileResults: null,

        ctor: function(config) {
            // set private reference to "this" and "config"
            // to be used in private functions below
            _this = this;

            _config = enhanceConfigForLayouting(config);
//            _originalData = config.data.childNodes[0];
            _originalData = config.data;
            _originalConfig = config;

            this._super(config);

            _compileResults = new Array();
            _currentPermutationIndex = 0;
            compile( config );
        },

        createView:function() {
            this._super();
            //this.setPreLoader(true);
        },
        
        initView:function() {
        	
        	this._super() ;
        	
            // calls on layouter done.
            onPermutationCompiled() ;
        },

        /*setPreLoader:function(flag){
         this.view.setPreLoader(flag);
         },*/

        setLayoutState: function(state) {

            var result;

            switch (state) {

                case 'compact':
                    result = 'reduce';
                    break;

                case 'loose':
                    result = 'compact';
                    break;

                case 'reduce':
                    result = 'loose';
                    break;

                default: // on first time
                    result = 'loose';
                    break;

            }

            return result;
        },
        
        dynamicLayoutRenderCallback: function() {
            var thi$ = this;
            thi$.sequenceLayouter.done = true;  
            _this.initView();
        },
        
        createInnerElements: function( calledFromCompile ) {
        	
        	if( !calledFromCompile ) {
        		
        		this._super() ;        		
        		
        	} else {
        		
        		onPermutationCompiled() ;
        		
        	}
        	
        },
        
        createTasks: function(calledFromCompile) {
        	
        	if( !calledFromCompile ) {
        	
//        		this._super( calledFromCompile );
        		
        	}
        },
        
        createTask: function(taskClass, cfg) {
        	
            cfg['readyCallback'] = onTaskReady;

            return this._super(taskClass, cfg);
        },

        createContent: function() {
            // do nothing - block sequence flow
        },

        getCompiledResults: function() {
            return compileResults;
        },

        createShared: function (calledFromCompile) {

            this._super(calledFromCompile);

            if (calledFromCompile) {
                // do somthing relevant
            }
        }

    });

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Vars.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    var _this;
    var _config;
    var _originalData;
    var _currentPermutationIndex;
    var _compilePermutations;
    var _compileResults;
    var _currentResult;
    var _originalConfig;

    var _readyTasksView = [];

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Private Functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    function enhanceConfigForLayouting(config) {
        var jqXml = jQuery(config.data);
        var tasks = jqXml.find('task');

        var sharedArea = jqXml.find('sharedArea').get(0);
        sharedArea = (CompilerUtils.setNumOfChildren(sharedArea));

        jQuery(tasks).each(function(index, task) {
            var task = jQuery(task);
            var question = task.find('question').get(0);
            var answer = task.find('answer').get(0);
	        var help = task.find('help').get(0);

            // group xml data
            question = (CompilerUtils.groupData(question));
            answer = (CompilerUtils.setNumOfChildren(answer));
	        help = (CompilerUtils.groupData(help));
        });

        return config;
    }

    function compile( config ) {
    	_compilePermutations = CompilerUtils.getCompilePermutations(_config.type, config );
        
        if( !_compilePermutations || _compilePermutations.length == 0 ) {
        	
        	throw new Error( "missing sequence type --> "+ _config.type +" or invalid view port (width too small) --> "+ config.width ) ;
        	
        }

//		console.time( "compiler" ) ;
//		console.groupCollapsed( "compile permutations" ) ;
		
        // compile the first layout option
        compilePermutation();
    }

    function compilePermutation() {
        if (_currentPermutationIndex < _compilePermutations.length) {
            // reset internal members
            resetSequence();

            // set option properties
            var currentPermutation = _compilePermutations[ _currentPermutationIndex ];
            
            console.log( "\n # Compiling --> ", currentPermutation.id ) ;
            
            applyPermutation(currentPermutation);

            // call sequence flow methods
            _this.createView();
            _this.createInnerElements(true);
            
//            _this.initView();


            // premutation compile done onLayouter done

        } else {
            // when all option were compiled
            onAllPermutationsCompiled();
            
//            alert('compilation finished')
        }
    }

    function onTaskReady(task, view) {
//            		taskCompiler( task, view ) ;
        _readyTasksView.push({ task: task, view: view });
    }

    function compileTasks() {

    	_this.compiledTasksInfo = [] ;
    	
    	_this.tasksConfig.each(function(index, cfg) {
    		var taskInfo = {} ;
    		_this.compiledTasksInfo.push( taskInfo ) ;
        	taskCompiler(cfg, taskInfo);
        });
        
        
        _this.compiledGroupResults = [] ;
        
        jQuery( _this.grouppedTasks ).each( function( index, groupTasks ) {
        	_this.compiledGroupResults.push( groupCompiler( index, groupTasks ) ) ;
        } ) ;
        
        
    }

    function groupCompiler( groupName, tasks ) {
    	
        var compilationResult = new t2k.compile.results.LayoutResult('group',
        		groupName,
            '######',
            'single'
        );
        
        var groupRowWidth = 0, groupWidth = 0 ;
        var groupRowHeight = 0, groupHeight = 0 ;
        
    	tasks.forEach( function( task ) {
    		
    		var $taskView = task.view._view ;
    		var isLastInRow = $taskView.hasClass( 'lastInRow' ) ;
    		
            var taskWidth = $taskView.outerWidth() ;
            groupRowWidth += taskWidth ;
            
            var taskHeight = $taskView.outerHeight() ;
            groupRowHeight = Math.max( groupRowHeight, taskHeight ) ;
            
            if( isLastInRow ) {
            	
            	groupWidth = Math.max( groupWidth, groupRowWidth ) ;
            	groupRowWidth = 0 ;
            	
            	groupHeight += groupRowHeight ;
            	groupRowHeight = 0 ;
            }
    		
    	} ) ;

        var maxSize = { width: _this.view.measures.width, height: _this.view.measures.height };
        var overWidth = _this.view.measures.width < groupWidth ;
        var overHeight = _this.view.measures.height < groupHeight ;

        var overflow = false;

        var overReason = [];
        var overWidthReason = [];
        var overHeightReason = [];

        // in case of width overflow
        if (overWidth) {
            overflow = true;
            overWidthReason.push('width', '[', groupWidth + 'px', 'over-flowing', maxSize.width + 'px', 'constraint', ']');
            overReason.push(overWidthReason.join(' '));
        }
        // in case of height overflow
        if (overHeight) {
            overflow = true;
            overWidthReason.push('height', '[', groupHeight + 'px', 'over-flowing', maxSize.height + 'px', 'constraint', ']');
            overReason.push(overWidthReason.join(' '));
        }

        // in case of any overflow
        if (overflow) {

            // add group grade regarding an overflow
            compilationResult.addGrade(t2k.compile.GradingConfig.task.group.overflow.description,
                t2k.compile.GradingConfig.task.group.overflow.grade,
                overReason.join(' ')
            );
        }
    	
    	return compilationResult ;
    }
    
    function taskCompiler(cfg, taskInfo) {

//		console.groupCollapsed( "taskCompiler" ) ;
    	
        var taskName = jQuery(cfg).attr('id');

        var compilationResult = new t2k.compile.results.LayoutResult('task',
            taskName,
            '######',
            'single'
        );
        
        taskInfo.taskName = taskName;
        taskInfo.compilationResult = compilationResult;
        
        var taskListSize = _this.view.measures ;
        
        // logic compilation POC
        var compileTaskHeight = CompilerUtils.compileTaskHeight(taskListSize.width, jQuery(cfg));
        var fuzzyRelativeToMaxHeight = ( 100 * compileTaskHeight / taskListSize.height).toFixed( 2 ) ;
        console.log( 'xxxxxxxxxxx - fuzzy height % - ',  fuzzyRelativeToMaxHeight );

        taskInfo.fuzzyPercentOfHeight = fuzzyRelativeToMaxHeight * 1 ;

//		console.groupEnd( "taskCompiler" ) ;
    }

    function onPermutationCompiled() {
    	
        compileTasks();
    	
        // create and set result object
        composeResult();

        // add to results stack
        _compileResults.push(_currentResult);

        // increment layout option index and run the next permutation
        _currentPermutationIndex++;
        compilePermutation();
    }

    function composeResult() {

//        if (_this.cfg.isShared) {
//            var sharedInnerSize = _this.sharedArea.getViewSize();
//            _this.sharedContentSize = _this.sharedArea.getContentSize();
//            _this.sharedCotentDiff = {};
//            _this.sharedCotentDiff.width = sharedInnerSize.width - _this.sharedContentSize.width;
//            _this.sharedCotentDiff.height = sharedInnerSize.height - _this.sharedContentSize.height;
//        }
    	
        var compilePermutation = _compilePermutations[ _currentPermutationIndex ];

        // create result object
        var layoutResultClass = t2k.compile.results.LayoutResult;
        _currentResult = new layoutResultClass('sequence',
            _this.cfg.id,
            '##',
            compilePermutation.id
        );
        // calc shared sequence specific grades
        if (_this.cfg.isShared) {
//            composeSharedResult(compilePermutation);
        }
        // calc creative wrapper specific grades
        else {
        	var layoutStatus = _this.view.getLayoutStatus() || {} ;
            composeCreativeWrapperResult( compilePermutation, layoutStatus );
        }

        var seqInnerLog = [];
        // sum tasks grades and add it to current option result
        var t, tasksNum, taskInfo, taskResult, uxGrade = 0, pedGrade = 0;

        var fuzzySeq = 0 ;
        
        // gather tasks compilation result info
        for (t = 0,tasksNum = _this.tasksConfig.length; t < tasksNum; t++) {
        	
        	taskInfo = _this.compiledTasksInfo[t];
            taskResult = taskInfo.compilationResult;
            uxGrade += taskResult.grade.ux;
            pedGrade += taskResult.grade.pedagogy;

            seqInnerLog.push(taskResult.getLog());
            
            fuzzySeq += taskInfo.fuzzyPercentOfHeight ;
        }
        
        fuzzySeq /= tasksNum ;
        
        var g, groupsNum, groupResult ;
        // gather groups compilation result info
        for (g = 0,groupsNum = _this.compiledGroupResults.length; g < groupsNum; g++) {
        	
        	groupResult = _this.compiledGroupResults[ g ] ;
            uxGrade += groupResult.grade.ux;
            pedGrade += groupResult.grade.pedagogy;

            seqInnerLog.push(groupResult.getLog());
        }
        
        var startGrade = t2k.compile.GradingConfig.task.startGrade;
        var tasksStartGrade = startGrade * t;

        // add tasks grades to sequence
        var seqGrade = { ux: tasksStartGrade - uxGrade, pedagogy: tasksStartGrade - pedGrade };
        
        _currentResult.addGrade('all tasks and groups',
            seqGrade,
            'summary of tasks and group grades, start from ' + tasksStartGrade + ' <-- ' + t + '(tasks) * ' + startGrade + '(start)'
        );
        
        // get total grades for sequence
        var seqTotalUx = _currentResult.grade.ux;
        var seqTotalPedagogy = _currentResult.grade.pedagogy;

        var seqTotal, seqTotalReason = [ 'total ux [', seqTotalUx, '] pedagogy [', seqTotalPedagogy, ']' ];

        var calcDescription = '';
        var calcMethod = t2k.compile.GradingConfig.sequence.tasksCalcMethod;

        if (calcMethod == 'weighted') {

            // get weighting ratio
            var uxRatio = t2k.compile.GradingConfig.sequence.uxPedagogyRatio.ux;
            var pedRatio = t2k.compile.GradingConfig.sequence.uxPedagogyRatio.pedagogy;

            // Weighted mean
            seqTotal = ( seqTotalUx * uxRatio + seqTotalPedagogy * pedRatio ) / ( uxRatio + pedRatio );

            // ratio description
            calcDescription = uxRatio + ':' + pedRatio;

        } else if (calcMethod == 'summarized') {
            // summarized
            seqTotal = uxGrade + pedGrade;

        }

        // set dummy(0,0) grades in order to add description for calculation method
        var seqLog = [];
        seqLog.push(seqInnerLog.join(''));
        seqLog.push('#### --> sequence total ');
        seqLog.push(calcMethod, ' ', calcDescription);

        _currentResult.addGrade(seqLog.join(''),
            { ux: 0, pedagogy: 0 },
            'calculation method',
            1,
            true
        );

        // set final calculated grade for sequence
        _currentResult.weightedGrade = seqTotal;
        
        var factor = compilePermutation.factor ;
        if( fuzzySeq < 100 ) {
        	factor = 1/factor ;
        }
        
        _currentResult.fuzzyGrade = fuzzySeq * factor ;

        var layoutTag = _this.cfg.data.getElementsByTagName('layout')[0];

        // write additional compilation info in to layout tag
        if (_this.cfg.isShared && _this.sharedCotentDiff) {
            layoutTag.setAttribute('sharedContentDiffWidth', _this.sharedCotentDiff.width);
            layoutTag.setAttribute('sharedContentDiffHeight', _this.sharedCotentDiff.height);
        }

        // save current data xml
        _currentResult.layoutXml = _this.cfg.data;
    }

    function onAllPermutationsCompiled() {

//		console.groupCollapsed( "onAllPermutationsCompiled" ) ;
		
    	// sort results --> <=100 --> asc, >100 --> desc
    	sortConpilationResults( _compileResults, 100 ) ;

        _this.compileResults = _compileResults;
        resetSequence();

        _originalConfig.data = _this.compileResults[0].layoutXml;
        //_this.dispatchEvent('onCompileDone', _originalConfig);
        //_this.setPreLoader(false);


        // LOG compilation results
        var seqLog = [
            '\n\n# Compiled Sequence[', _this.cfg.id, '][env - ',
            _this.cfg.width, 'x', _this.cfg.height, ']\n'].join(' ');

        console.log(seqLog);

        _this.compileResults.forEach(function(compiledResult) {
            console.log(compiledResult.getLog());
        });

//		console.groupEnd( "onAllPermutationsCompiled" ) ;

//		console.groupEnd( "compile permutations" ) ;

//		console.timeEnd( "compiler" ) ;
		
        _this.dispatchEvent('onCompileDone', _originalConfig);
    }
    
    function sortConpilationResults( results, limit ) {
    	
    	// sort ascending by distance from limit
    	results.sort( function( A, B ) {
    		return Math.abs( limit - A.fuzzyGrade ) - Math.abs( limit - B.fuzzyGrade ) ;
    	} ) ;
    	
    	// concat results
    	_compileResults = results ;
        
    }

    function applyPermutation(option) {
        var xmlData = _this.cfg.data;

        var compiledTag = jQuery(xmlData).children('layout');

        if (compiledTag.length == 0) {
            compiledTag = Compat.createNodeNextTo(xmlData, 'layout', true);
            jQuery(xmlData).append(compiledTag);  // ?
        }

        // set props into layoutTag
        setLayoutProperties(option, compiledTag);
    }

    function resetSequence() {
        // remove all children - use view dispose ?
        Perf.select('#' + _this.cfg.id, 1).remove();
        // var seqParent = jQuery( '#' + _this.cfg.parent._content[0].id ) ;
        //seqParent.html( '' ) ;

        // LZ clone _originalData
        _this.cfg.data = _originalData.cloneNode(true);

        _this.children = [];
        _readyTasksView = [];
    }

    function composeCreativeWrapperResult( compilePermutation, creativeStatus ) {
    	
    	var t, task, tasksLen, taskResult;
    	var ruleKey, ruleObject;
    	
    	creativeRules = t2k.compile.GradingConfig.sequence.creative;
    	
    	for (t = 0,tasksLen = _this.children.length; t < tasksLen; t++) {
    		
    		task = _this.children[ t ] ;
    		taskResult = task.compilationResult ;
    		
    		for( ruleKey in creativeRules ) {
    			
    			var isRuleApplied = creativeStatus[ ruleKey ] ;
    			if( isRuleApplied ) {
    				
    				ruleObject = creativeRules[ ruleKey ];
    				
    				var ruleMultiplyer = compilePermutation.penaltyMultiplyer ;
    				
    				if( ruleObject ) {
    					taskResult.addGrade( ruleObject.description, ruleObject.grade, 'creative rule', ruleMultiplyer ) ;
    				}
    				
    			}
    			
    		}
    		
    	}
    	
    }
    
    function composeSharedResult(compilePermutation) {

        var t, task, tasksLen, taskResult;

        var relation, sharedRules, sharedRelationRules, ruleObject;
        sharedRules = t2k.compile.GradingConfig.sequence.shared;
        sharedRelationRules = sharedRules.taskRelation;

        var sharedArea = _this.view._shared[0];

        var applySmallSharedRule = false;
        var sharedRatio = 100 - _this.cfg.ratio;
        if (sharedRatio < sharedRelationRules.smallshared.min_shared_percent &&
            sharedArea.scrollHeight > sharedArea.clientHeight) {

            applySmallSharedRule = true;
        }

        var sharedType = _this.sharedArea.getType();
        var typeRules = sharedRelationRules.sharedType[ sharedType ];

        var sharedReductionReport = _this.sharedArea.getReductionReport();
        var sharedReducedTo = 1;
        var sharedReducedByPercent = 100;
        if (!sharedReductionReport) {
            console.warn('shared type - ' + sharedType + ' - recuction report is not ready');
        } else if (isNaN(sharedReductionReport.percent)) {
            console.warn('shared type - ' + sharedType + ' - recuction percent invalid');
        } else {
            sharedReducedTo = sharedReductionReport.percent.toFixed(2) * 1;
            sharedReducedByPercent = ( 100 * ( 1 - sharedReducedTo ) ).toFixed(2) * 1;
        }

        if (typeRules) {

            var applyPartVisibleRule = false;
            var partVisibleRuleMultiplyer = 0;
            if (typeRules.partVisible) {
            	
//                var sharedOverflow = Math.min(_this.sharedCotentDiff.width, _this.sharedCotentDiff.height) < 0;
                var sharedInnerOverflowV = sharedReductionReport ? sharedReductionReport.overflowV : false;
                var sharedInnerOverflowH = sharedReductionReport ? sharedReductionReport.overflowH : false;
                var sharedOverflowV = _this.sharedCotentDiff.height < 0 || sharedInnerOverflowV ;
                var sharedOverflowH = _this.sharedCotentDiff.width < 0 || sharedInnerOverflowV ;
                
                partVisibleRuleMultiplyer = ( sharedOverflowV ? 1 : 0 ) + ( sharedOverflowH ? 1 : 0 ) ;
                
                if( partVisibleRuleMultiplyer > 0 ) {
                    applyPartVisibleRule = true;
                }
            }

            var applyMinReadRule = false;
            if (sharedReductionReport.belowRead && typeRules.minRead) {
                applyMinReadRule = true;
            }

        }

        // get sequence base grades
        var seqBaseGrades = compilePermutation.baseGrades;
        var seqGradeDescriptions = compilePermutation.gradeDescriptions;
        var g, grade, desc, numOfGrades = seqBaseGrades ? seqBaseGrades.length : 0;

        for (t = 0,tasksLen = _this.children.length; t < tasksLen; t++) {

            task = _this.children[ t ];
            taskResult = task.compilationResult;

            relation = _this.tasksRelations[task.view.cfg.id];

            if (relation != 'none') {
            	
                if (_this.cfg.isCollapse) {
                    ruleObject = sharedRelationRules.collapsed[relation];
                    if (ruleObject) {
                        taskResult.addGrade(ruleObject.description, ruleObject.grade, 'shared relation specific grade');
                    }
                }

                if (applyPartVisibleRule) {
                    ruleObject = typeRules.partVisible[ relation ] ||
                        typeRules.partVisible[ 'generic' ];
                    taskResult.addGrade(ruleObject.description, ruleObject.grade, 'shared relation specific grade', partVisibleRuleMultiplyer);
                }

                if (applySmallSharedRule) {
                    taskResult.addGrade(sharedRelationRules.smallshared.description, sharedRelationRules.smallshared.grade, 'shared relation general grade');
                }

                if (sharedReducedTo < 1 && sharedReductionReport) {
                    ruleObject = sharedRelationRules.reduced[ relation ];
                    if (ruleObject) {
                        var reducePenalty = sharedRelationRules.reduced.percentGrade * sharedReducedByPercent;
                        taskResult.addGrade(ruleObject.description, ruleObject.grade, 'shared relation general grade [ ' + sharedReducedByPercent + '% * ' + sharedRelationRules.reduced.percentGrade + ' = ' + reducePenalty + ' ]', reducePenalty);
                    }
                }
                
                if( sharedReducedTo < 1 && _this.cfg.isCollapse ) {
                	ruleObject = sharedRules.collapsedReduced ;
                	taskResult.addGrade(ruleObject.description, ruleObject.grade, 'shared relation general grade');
                }
                
                if (applyMinReadRule) {
                    ruleObject = typeRules.minRead[ relation ] ||
                        typeRules.minRead[ 'generic' ];
                    if (ruleObject) {
                    }
                }

                if (sharedType == 'text') {
                    ruleObject = typeRules.notOptimal[ relation ] ||
                        typeRules.notOptimal[ 'generic' ];

                    var txtWidth = _this.sharedContentSize.width;
                    var min = ( ruleObject.range_min * sharedReducedTo ).toFixed(2);
                    var max = ( ruleObject.range_max * sharedReducedTo ).toFixed(2);

                    if (txtWidth < min || txtWidth > max) {
                        taskResult.addGrade(ruleObject.description, ruleObject.grade, 'range after reduce [ min: ' + min + ' max: ' + max + ' <-- ' + sharedReducedByPercent + '%  text reduction ] ');
                    }

                }

                for (g = 0; g < numOfGrades; g++) {
                    grade = seqBaseGrades[ g ];
                    desc = seqGradeDescriptions[ g ];
                    taskResult.addGrade(desc, grade, '');
                }
                
            }
        }

    }


    function setLayoutProperties(option, compiledTag) {

        // add attributes / children to layout tag
        switch (_config.type) {

            case 'simple' :

                compiledTag.attr("tasks_width", option.tasksWidth);
                compiledTag.attr("has_margin", option.hasMargin);

                break;

            case 'shared' :

                compiledTag.attr("type", option.type);
                compiledTag.attr("tasks_ratio", option.ratio);
                compiledTag.attr("shared_task_collapse", option.collapse);

                break;

        }
    }

})();
////////////////////////////////////////
// SRC End --> t2k/compilePlay/SequenceCompilePlay.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/compile/GradingConfig.js
////////////////////////////////////////
//<compilation
t2k.compile.GradingConfig = {
	task : {
		
		startGrade: 100,
		
		base: {
			overflow: {
				description: 'task overflow',
				grade: {
					ux: 15,
					pedagogy: 0
				}
			}
		},
		
		group: {
			overflow: {
				description: 'group overflow',
				grade: {
					ux: 15,
					pedagogy: 20
				}
			}
		}
		
	},
	sequence: {
		
		// "weighted" or "summarized"
		tasksCalcMethod: 'weighted',
		
		// ratio between ux and pedagogy grades, any value is possible, finally used with weighted mean function
		uxPedagogyRatio: { ux:50, pedagogy:50 },
		
		creative: {
			smallMargin: {
				description: 'creative - margin too small',
				grade: {
					ux: 5,
					pedagogy: 0
				}
			},
			noMargin: {
				description: 'creative - no margin',
				grade: {
					ux: 10,
					pedagogy: 0
				}
			},
			noCreative: {
				description: 'creative - no creative at all',
				grade: {
					ux: 10,
					pedagogy: 0
				}
			},
			overlay: {
				description: 'creative - using overlay',
				grade: {
					ux: 15,
					pedagogy: 0
				}
			}
		},
		
		shared: {
			horizontal: {
				description: 'horizontal sequence',
				grade: {
					ux: 0,
					pedagogy: 0
				}
			},
			collapsed: {
				description: 'collapsed sequence',
				grade: {
					ux: 0,
					pedagogy: 0
				}
			},
			collapsedReduced: {
				description: 'collapsed sequence, reduced shared component',
				grade: {
					ux: 5,
					pedagogy: 0
				}
			},
			taskRelation: {
				smallshared: {
					description: 'shared relation - small scrolled shared area',
					grade: {
						ux: 0,
						pedagogy: 0
					},
					min_shared_percent: 50
				},

				collapsed: {
					//////////////////////////////////////////////////////////////////////
					// Math types
					//////////////////////////////////////////////////////////////////////
					reference: {
						description: 'shared relation - collapsed - reference',
						grade: {
							ux: 25,
							pedagogy: 50
						}
					},
					explore: {
						description: 'shared relation - collapsed - explore',
						grade: {
							ux: 50,
							pedagogy: 35
						}
					},
					support: {
						description: 'shared relation - collapsed - support',
						grade: {
							ux: 10,
							pedagogy: 5
						}
					},
					//////////////////////////////////////////////////////////////////////
					// LA types
					//////////////////////////////////////////////////////////////////////
					supplementary: {
						description: 'shared relation - collapsed - supplementary',
						grade: {
							ux: 15,
							pedagogy: 5
						}
					},
					read: {
						description: 'shared relation - collapsed - read',
						grade: {
							ux: 15,
							pedagogy: 10
						}
					},
					read_specific_part: {
						description: 'shared relation - collapsed - read_specific_part',
						grade: {
							ux: 15,
							pedagogy: 15
						}
					},
					select: {
						description: 'shared relation - collapsed - select',
						grade: {
							ux: 15,
							pedagogy: 20
						}
					},
					edit: {
						description: 'shared relation - collapsed - edit',
						grade: {
							ux: 15,
							pedagogy: 50
						}
					}
				},

				reduced: {
					//////////////////////////////////////////////////////////////////
					// factor will multiply with reduction percent and grade
					//////////////////////////////////////////////////////////////////
					percentGrade: 0.5,
					//////////////////////////////////////////////////////////////////
					
					reference: {
						description: 'shared relation - reduced - reference',
						grade: {
							ux: 5,
							pedagogy: 0
						}
					},
					explore: {
						description: 'shared relation - reduced - explore',
						grade: {
							ux: 5,
							pedagogy: 0
						}
					},
					support: {
						description: 'shared relation - reduced - support',
						grade: {
							ux: 1,
							pedagogy: 0
						}
					}
				},
				
				sharedType: {
					text: {
						partVisible: {
							generic: {
								description: 'shared relation - text - partVisible',
								grade: {
									ux: 5,
									pedagogy: 0
								}
							}
						},
						notOptimal: {
							generic: {
								description: 'shared relation - text - notOptimal',
								grade: {
									ux: 5,
									pedagogy: 0
								},
								//////////////////////////////////////////////////////////////////////////////
								// range in pixels = row.length(chars) * avg.char.length(em) * font.size(pt)
								//////////////////////////////////////////////////////////////////////////////
								// min of 35 chars --> 35ch * 0.65em * 22pt = 500px
								range_min: 400,
								//////////////////////////////////////////////////////////////////////////////
								// max of 60 chars --> 60ch * 0.65em * 22pt = 860px
								range_max: 600
								//////////////////////////////////////////////////////////////////////////////
							}
						}
					},
					
					dialog: {
						partVisible: {
							generic: {
								description: 'shared relation - dialog - partVisible',
								grade: {
									ux: 5,
									pedagogy: 0
								}
							}
						},
						notOptimal: {
							generic: {
								description: 'shared relation - dialog - notOptimal',
								grade: {
									ux: 5,
									pedagogy: 0
								},
								//////////////////////////////////////////////////////////////////////////////
								// range in pixels = row.length(chars) * avg.char.length(em) * font.size(pt)
								//////////////////////////////////////////////////////////////////////////////
								// min of 35 chars --> 35ch * 0.65em * 22pt = 500px
								range_min: 400,
								//////////////////////////////////////////////////////////////////////////////
								// max of 60 chars --> 60ch * 0.65em * 22pt = 860px
								range_max: 600
								//////////////////////////////////////////////////////////////////////////////
							}
						}
					},
					
					image: {
						minRead: {
							reference: {
								description: 'shared relation - image - minRead - reference',
								grade: {
									ux: 15,
									pedagogy: 15
								}
							},
							support: {
								description: 'shared relation - image - minRead - support',
								grade: {
									ux: 20,
									pedagogy: 5
								}
							}
						}
					},
					
					media: {
						minRead: {
							reference: {
								description: 'shared relation - image - minRead - reference',
								grade: {
									ux: 15,
									pedagogy: 15
								}
							},
							support: {
								description: 'shared relation - image - minRead - support',
								grade: {
									ux: 20,
									pedagogy: 5
								}
							}
						}
					},
					
					tre_applet: {
						minRead: {
							generic: {
								description: 'shared relation - tre_applet - minRead',
								grade: {
									ux: 60,
									pedagogy: 60
								}
							}
						},
						partVisible: {
							generic: {
								description: 'shared relation - tre_applet - partVisible',
								grade: {
									ux: 100,
									pedagogy: 100
								}
							}
						}
					},
					
					interactive_swf: {
						minRead: {
							generic: {
								description: 'shared relation - interactive_swf - minRead',
								grade: {
									ux: 60,
									pedagogy: 60
								}
							}
						},
						partVisible: {
							generic: {
								description: 'shared relation - interactive_swf - partVisible',
								grade: {
									ux: 100,
									pedagogy: 100
								}
							}
						}
					}
					
				}
			}
		}
	}
} ;
//>compilation
////////////////////////////////////////
// SRC End --> t2k/compile/GradingConfig.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> t2k/compile/results/LayoutResult.js
////////////////////////////////////////
/**
 * creating a layout compilation result object
 * @param {String} entity
 * @param {String} id
 * @param {String} indentString
 * @param {String} permutation
 */
t2k.compile.results.LayoutResult = function( entity, id, indentString, permutation ) {
	this.grade = {} ;
	this.grade.ux = 0 ;
	this.grade.pedagogy = 0 ;
	this.layoutXml = null ;
	this.log = [] ;
	this.layoutOption = permutation ? permutation : 'single' ;
	this.indentString = indentString ;
	this.title = [ this.indentString, ' ', entity, '[', id, '] permutation[', permutation, ']' ] ;
	this.weightedGrade ;
	this.fuzzyGrade ;
} ;

t2k.compile.results.LayoutResult.prototype = {
	/**
	 * adding a grade with detailed description
	 * @param {String} gradeDescription
	 * @param {Object} gradeObject
	 * @param {String} gradeReason
	 * @param {Boolean} ignoreIndent
	 */
	addGrade: function( gradeDescription, gradeObject, gradeReason, multiplyer, ignoreIndent ) {
		// apply grades and get detailes from grade object
		var gradeReport = this._addGradeToResult( gradeObject, multiplyer ) ;
		
		// set break
		var midBreakLine = ignoreIndent && gradeReport != '' ? '\n' : '' ;
		
		// use breake between grades 
		if( this.log.length > 0 ) {
			this.log.push( '\n' ) ;
		}
		
		// in case single line output is needed
		if ( !ignoreIndent || gradeReport != '' ) {
			this.log.push(this.indentString, '## --> ');
		}
		
		// add detailes to log array
		this.log.push( gradeReport, midBreakLine, gradeDescription, ' ', gradeReason  ) ;
	},
	
	/**
	 * applying a grade, returning description
	 * @param {Object} gradeObject
	 * @return {String}  
	 */
	_addGradeToResult: function( gradeObject, multiplyer ) {
		var gradeReport = '' ;
		// only for values different from zero
		if( gradeObject.ux != 0 || gradeObject.pedagogy != 0 ) {
			multiplyer = multiplyer ? multiplyer : 1 ;
			var ux = gradeObject.ux * multiplyer ;
			var pedagogy = gradeObject.pedagogy * multiplyer ;
			this.grade.ux += ux ;
			this.grade.pedagogy += pedagogy ;
			var gradeLog = [] ;
			gradeLog.push( 'ux', '[', ux, '] ' ) ;
			gradeLog.push( 'pedagogy', '[', pedagogy, '] ' ) ;
			if( multiplyer != 1 ) {
				gradeLog.push( 'multiplyer', '[', multiplyer, '] ' ) ;
			}
			gradeLog.push( ' ' ) ;
			gradeReport = gradeLog.join( '' ) ;
		}
		return gradeReport ;
	},
	
	/**
	 * adding a grade with detailed description
	 * @return {String}
	 */
	getLog: function() {
		var logString = this.log.length > 0 ? this.log.join( '' ) : '' ;
		var weightedString = this.weightedGrade ? 'final' + '[' + this.weightedGrade + '] ' : '' ;
		var fuzzyString = this.fuzzyGrade ? 'fuzzy' + '[' + this.fuzzyGrade + '] ' : '' ;
		var resultSum = [	this.indentString+'## --> ', 'totals : ',
							'ux', '[', this.grade.ux, '] ',
							'pedagogy', '[', this.grade.pedagogy, '] ',
							weightedString,
							fuzzyString
						] ;
		var resultString = this.log.length > 0 ? resultSum.join( '' ) : '' ;
		var midLineBreake = this.log.length > 0 ? '\n' : '' ;
		var fullLog = [ this.title.join( '' ), midLineBreake, logString, midLineBreake, resultString, '\n' ] ;
		return fullLog.join( '' ) ;
	}
};





////////////////////////////////////////
// SRC End --> t2k/compile/results/LayoutResult.js
////////////////////////////////////////
////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
// SRC Start --> index.js
////////////////////////////////////////
$(function () {
	
	window.AppcacheManager.callOnCacheReady( onAppcacheReady ) ;

	function onAppcacheReady() {
		
		if (parent && parent.ContentPlayerHost) {
			
			var hostPOC = parent.ContentPlayerHost ;
			ENV.externalHost = hostPOC;
			
			hostPOC.onPlayerHandshake( function ( config, callback ) {
				
				var cfg = {} ;
				
				cfg.width = config.width;
				cfg.height = config.height;
				cfg.scale = config.scale;
				
				cfg.volume = config.volume ;
				
				ENV.debug = {
					version: {
						time: "2013-12-10 17:33:25 IST",
						number: "7.0.19.4",
						userName: "jenkins",
						hostName: "t2kbuild.timetoknow.com",
						revision: "temp unsupported"//"@revision@"
					},
					playerSize: {
						width: config.width,
						height: config.height
					},
					playerScale: config.scale
				} ;
				
				console.log( "[DL][VERSION]  --> " + JSON.stringify( ENV.debug, null, "\t" ) ) ;
				
				cfg.viewMode = config.viewMode;
				
				// init data object (mode, loId...)
				cfg.initData = config;
				// user info object (role...)
				cfg.userInfo = config.userInfo;
				
				var locale = config.locale ? config.locale : config.localeName ;

				//////////////////////////////////////////////////////////////////
				//////////////////////////////////////////////////////////////////
				// support both Hebrew locales (DTP - "he", CGS - "iw")
				//////////////////////////////////////////////////////////////////
				if( locale.toLowerCase() == "iw_il" ) {
					locale = "he_IL" ;
				}
				//////////////////////////////////////////////////////////////////
				//////////////////////////////////////////////////////////////////
				
				if( locale ){
					ENV.locale = locale ;
				} else {
					console.warn( '[DL][Locale] --> MISSING locale setting, use default' );
				}
				console.info( "[DL][Locale] --> using locale: " + ENV.locale );
				
				ENV.assetBasePath = config.basePaths.media;
				ENV.playerBasePath = config.basePaths.player;
				
				////////////////////////////////////////////////////////////////////
				// check for customization pack
				// if missing, use backward compatibility (en_US only) 
				////////////////////////////////////////////////////////////////////
				var configFile = 'config.json' ;
				var fullConfigPath ;
				var getPackDirPath = function( packFilePath ) {
					var dirPath, temp = packFilePath.split( "/" ) ;
					temp.pop() ;
					dirPath = temp.join( "/" ) ;
					return dirPath ;
				} ;
				if( config.basePaths.customizationPack ) {
					var relPath = "" ;
					relPath += config.basePaths.customizationPack ;
					relPath += config.basePaths.ignoreCustomDLConcat ? "" : "/dl/" ;
					relPath += "/" + configFile ;
					fullConfigPath = AbsPath( relPath ) ;
					ENV.customizationPackPath = getPackDirPath( fullConfigPath ) ;
				} else {
					console.warn( "[DL][Locale] --> missing customization pack path, using player defaults (en_US)" ) ;
					ENV.customizationPackPath = "bc/customizationPacks/en_US"
				}
				////////////////////////////////////////////////////////////////////
				
				LocaleUtil.loadFiles( function() {
					
					new t2k.model.Configuration() ;
					var sequenceFacade = new t2k.host.SequenceFacade( cfg ) ;
					ENV.sequenceFacade = sequenceFacade ;
					ENV.host = sequenceFacade ;
					
					callback( sequenceFacade ) ;
					
				} ) ;
				
				//////////////////////////////////////////////////////
				
			} ) ;
			
		} else {
			dataUtil.logXcode("handshake function was not found at host window! onPlayerHandshake(start_function)");
			throw new Error("handshake function was not found at host window! onPlayerHandshake(start_function)");
			
		}
	}
	
} ) ;
////////////////////////////////////////
// SRC End --> index.js
////////////////////////////////////////
////////////////////////////////////////

